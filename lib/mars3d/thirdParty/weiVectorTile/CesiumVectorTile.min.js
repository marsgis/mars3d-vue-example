(function(){var requirejs,require,define;(function(n){var t,e,l,i,r={},u={},s={},a={},o=Object.prototype.hasOwnProperty,h=[].slice,f=/\.js$/;function c(n,t){return o.call(n,t)}function d(n,t){var e,l,i,r,u,a,o,h,c,d,g,p,v=t&&t.split("/"),m=s.map,y=m&&m["*"]||{};if(n){n=n.split("/");u=n.length-1;if(s.nodeIdCompat&&f.test(n[u])){n[u]=n[u].replace(f,"")}if(n[0].charAt(0)==="."&&v){p=v.slice(0,v.length-1);n=p.concat(n)}for(c=0;c<n.length;c++){g=n[c];if(g==="."){n.splice(c,1);c-=1}else if(g===".."){if(c===0||c===1&&n[2]===".."||n[c-1]===".."){continue}else if(c>0){n.splice(c-1,2);c-=2}}}n=n.join("/")}if((v||y)&&m){e=n.split("/");for(c=e.length;c>0;c-=1){l=e.slice(0,c).join("/");if(v){for(d=v.length;d>0;d-=1){i=m[v.slice(0,d).join("/")];if(i){i=i[l];if(i){r=i;a=c;break}}}}if(r){break}if(!o&&y&&y[l]){o=y[l];h=c}}if(!r&&o){r=o;a=h}if(r){e.splice(0,a,r);n=e.join("/")}}return n}function g(t,l){return function(){var i=h.call(arguments,0);if(typeof i[0]!=="string"&&i.length===1){i.push(null)}return e.apply(n,i.concat([t,l]))}}function p(n){return function(t){return d(t,n)}}function v(n){return function(t){r[n]=t}}function m(e){if(c(u,e)){var l=u[e];delete u[e];a[e]=true;t.apply(n,l)}if(!c(r,e)&&!c(a,e)){throw new Error("No "+e)}return r[e]}function y(n){var t,e=n?n.indexOf("!"):-1;if(e>-1){t=n.substring(0,e);n=n.substring(e+1,n.length)}return[t,n]}function x(n){return n?y(n):[]}l=function(n,t){var e,l=y(n),i=l[0],r=t[1];n=l[1];if(i){i=d(i,r);e=m(i)}if(i){if(e&&e.normalize){n=e.normalize(n,p(r))}else{n=d(n,r)}}else{n=d(n,r);l=y(n);i=l[0];n=l[1];if(i){e=m(i)}}return{f:i?i+"!"+n:n,n:n,pr:i,p:e}};function w(n){return function(){return s&&s.config&&s.config[n]||{}}}i={require:function(n){return g(n)},exports:function(n){var t=r[n];if(typeof t!=="undefined"){return t}else{return r[n]={}}},module:function(n){return{id:n,uri:"",exports:r[n],config:w(n)}}};t=function(t,e,s,o){var h,f,d,p,y,w,_=[],M=typeof s,E;o=o||t;w=x(o);if(M==="undefined"||M==="function"){e=!e.length&&s.length?["require","exports","module"]:e;for(y=0;y<e.length;y+=1){p=l(e[y],w);f=p.f;if(f==="require"){_[y]=i.require(t)}else if(f==="exports"){_[y]=i.exports(t);E=true}else if(f==="module"){h=_[y]=i.module(t)}else if(c(r,f)||c(u,f)||c(a,f)){_[y]=m(f)}else if(p.p){p.p.load(p.n,g(o,true),v(f),{});_[y]=r[f]}else{throw new Error(t+" missing "+f)}}d=s?s.apply(r[t],_):undefined;if(t){if(h&&h.exports!==n&&h.exports!==r[t]){r[t]=h.exports}else if(d!==n||!E){r[t]=d}}}else if(t){r[t]=s}};requirejs=require=e=function(r,u,a,o,h){if(typeof r==="string"){if(i[r]){return i[r](u)}return m(l(r,x(u)).f)}else if(!r.splice){s=r;if(s.deps){e(s.deps,s.callback)}if(!u){return}if(u.splice){r=u;u=a;a=null}else{r=n}}u=u||function(){};if(typeof a==="function"){a=o;o=h}if(o){t(n,r,u,a)}else{setTimeout(function(){t(n,r,u,a)},4)}return e};e.config=function(n){return e(n)};requirejs._defined=r;define=function(n,t,e){if(typeof n!=="string"){throw new Error("See almond README: incorrect module build, no module name")}if(!t.splice){e=t;t=[]}if(!c(r,n)&&!c(u,n)){u[n]=[n,t,e]}};define.amd={jQuery:true}})();(function(n){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=n()}else if(typeof define==="function"&&define.amd){define("ThirdParty/turf",[],n)}else{var t;if(typeof window!=="undefined"){t=window}else if(typeof global!=="undefined"){t=global}else if(typeof self!=="undefined"){t=self}else{t=this}t.turf=n()}})(function(){var n,t,e;return function n(t,e,l){function i(u,s){if(!e[u]){if(!t[u]){var a=typeof require=="function"&&require;if(!s&&a)return a(u,!0);if(r)return r(u,!0);var o=new Error("Cannot find module '"+u+"'");throw o.code="MODULE_NOT_FOUND",o}var h=e[u]={exports:{}};t[u][0].call(h.exports,function(n){var e=t[u][1][n];return i(e?e:n)},h,h.exports,n,t,e,l)}return e[u].exports}var r=typeof require=="function"&&require;for(var u=0;u<l.length;u++)i(l[u]);return i}({1:[function(n,t,e){var l=n("@turf/meta").featureEach;var i=n("@turf/meta").geomEach;var r=n("@turf/invariant").getCoords;var u=n("@turf/helpers");var s=u.point;var a=u.lineString;var o=u.polygon;var h=u.featureCollection;t.exports={lineIntersect:n("@turf/line-intersect"),bboxClip:n("@turf/bbox-clip"),polygonToLineString:n("@turf/polygon-to-linestring"),simplify:n("@turf/simplify"),featureEach:l,featureCollection:h,polygon:o,point:s,lineString:a,geomEach:i,getCoords:r,helpers:u,bbox:n("@turf/bbox"),within:n("@turf/within"),center:n("@turf/center"),centerOfMass:n("@turf/center-of-mass"),centroid:n("@turf/centroid"),lineOffset:n("@turf/line-offset"),buffer:n("@turf/buffer"),difference:n("@turf/difference"),mask:n("@turf/mask")}},{"@turf/bbox":6,"@turf/bbox-clip":3,"@turf/buffer":7,"@turf/center":9,"@turf/center-of-mass":8,"@turf/centroid":10,"@turf/difference":12,"@turf/helpers":14,"@turf/invariant":16,"@turf/line-intersect":17,"@turf/line-offset":21,"@turf/mask":27,"@turf/meta":28,"@turf/polygon-to-linestring":29,"@turf/simplify":32,"@turf/within":34}],2:[function(n,t,e){t.exports=i;var l={Point:"geometry",MultiPoint:"geometry",LineString:"geometry",MultiLineString:"geometry",Polygon:"geometry",MultiPolygon:"geometry",GeometryCollection:"geometry",Feature:"feature",FeatureCollection:"featurecollection"};function i(n){if(!n||!n.type)return null;var t=l[n.type];if(!t)return null;if(t==="geometry"){return{type:"FeatureCollection",features:[{type:"Feature",properties:{},geometry:n}]}}else if(t==="feature"){return{type:"FeatureCollection",features:[n]}}else if(t==="featurecollection"){return n}}},{}],3:[function(n,t,e){var l=n("@turf/helpers");var i=n("lineclip");var r=n("@turf/invariant").getCoords;var u=l.lineString;var s=l.multiLineString;var a=l.polygon;var o=l.multiPolygon;t.exports=function(n,t){var e=f(n);var l=r(n);var c=n.properties;switch(e){case"LineString":case"MultiLineString":var d=[];if(e==="LineString")l=[l];l.forEach(function(n){i(n,t,d)});if(d.length===1)return u(d[0],c);return s(d,c);case"Polygon":return a(h(l,t),c);case"MultiPolygon":return o(l.map(function(n){return h(n,t)}),c);default:throw new Error("geometry "+e+" not supported")}};function h(n,t){var e=[];for(var l=0;l<n.length;l++){var r=i.polygon(n[l],t);if(r.length>0){if(r[0][0]!==r[r.length-1][0]||r[0][1]!==r[r.length-1][1]){r.push(r[0])}e.push(r)}}return e}function f(n){return n.geometry?n.geometry.type:n.type}},{"@turf/helpers":4,"@turf/invariant":5,lineclip:44}],4:[function(n,t,e){function l(n,t){if(!n)throw new Error("No geometry passed");return{type:"Feature",properties:t||{},geometry:n}}function i(n,t){if(!n)throw new Error("No coordinates passed");if(n.length===undefined)throw new Error("Coordinates must be an array");if(n.length<2)throw new Error("Coordinates must be at least 2 numbers long");if(typeof n[0]!=="number"||typeof n[1]!=="number")throw new Error("Coordinates must numbers");return l({type:"Point",coordinates:n},t)}function r(n,t){if(!n)throw new Error("No coordinates passed");for(var e=0;e<n.length;e++){var i=n[e];if(i.length<4){throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.")}for(var r=0;r<i[i.length-1].length;r++){if(i[i.length-1][r]!==i[0][r]){throw new Error("First and last Position are not equivalent.")}}}return l({type:"Polygon",coordinates:n},t)}function u(n,t){if(!n)throw new Error("No coordinates passed");return l({type:"LineString",coordinates:n},t)}function s(n){if(!n)throw new Error("No features passed");return{type:"FeatureCollection",features:n}}function a(n,t){if(!n)throw new Error("No coordinates passed");return l({type:"MultiLineString",coordinates:n},t)}function o(n,t){if(!n)throw new Error("No coordinates passed");return l({type:"MultiPoint",coordinates:n},t)}function h(n,t){if(!n)throw new Error("No coordinates passed");return l({type:"MultiPolygon",coordinates:n},t)}function f(n,t){if(!n)throw new Error("No geometries passed");return l({type:"GeometryCollection",geometries:n},t)}var c={miles:3960,nauticalmiles:3441.145,degrees:57.2957795,radians:1,inches:250905600,yards:6969600,meters:6373e3,metres:6373e3,kilometers:6373,kilometres:6373,feet:20908792.65};function d(n,t){var e=c[t||"kilometers"];if(e===undefined)throw new Error("Invalid unit");return n*e}function g(n,t){var e=c[t||"kilometers"];if(e===undefined)throw new Error("Invalid unit");return n/e}function p(n,t){var e=c[t||"kilometers"];if(e===undefined)throw new Error("Invalid unit");return n/e*57.2958}t.exports={feature:l,featureCollection:s,geometryCollection:f,point:i,multiPoint:o,lineString:u,multiLineString:a,polygon:r,multiPolygon:h,radiansToDistance:d,distanceToRadians:g,distanceToDegrees:p}},{}],5:[function(n,t,e){function l(n){if(!n)throw new Error("No obj passed");var t=i(n);if(t.length>1&&typeof t[0]==="number"&&typeof t[1]==="number"){return t}else{throw new Error("Coordinate is not a valid Point")}}function i(n){if(!n)throw new Error("No obj passed");var t;if(n.length){t=n}else if(n.coordinates){t=n.coordinates}else if(n.geometry&&n.geometry.coordinates){t=n.geometry.coordinates}if(t){r(t);return t}throw new Error("No valid coordinates")}function r(n){if(n.length>1&&typeof n[0]==="number"&&typeof n[1]==="number"){return true}if(Array.isArray(n[0])&&n[0].length){return r(n[0])}throw new Error("coordinates must only contain numbers")}function u(n,t,e){if(!t||!e)throw new Error("type and name required");if(!n||n.type!==t){throw new Error("Invalid input to "+e+": must be a "+t+", given "+n.type)}}function s(n,t,e){if(!n)throw new Error("No feature passed");if(!e)throw new Error(".featureOf() requires a name");if(!n||n.type!=="Feature"||!n.geometry){throw new Error("Invalid input to "+e+", Feature with geometry required")}if(!n.geometry||n.geometry.type!==t){throw new Error("Invalid input to "+e+": must be a "+t+", given "+n.geometry.type)}}function a(n,t,e){if(!n)throw new Error("No featureCollection passed");if(!e)throw new Error(".collectionOf() requires a name");if(!n||n.type!=="FeatureCollection"){throw new Error("Invalid input to "+e+", FeatureCollection required")}for(var l=0;l<n.features.length;l++){var i=n.features[l];if(!i||i.type!=="Feature"||!i.geometry){throw new Error("Invalid input to "+e+", Feature with geometry required")}if(!i.geometry||i.geometry.type!==t){throw new Error("Invalid input to "+e+": must be a "+t+", given "+i.geometry.type)}}}t.exports={geojsonType:u,collectionOf:a,featureOf:s,getCoord:l,getCoords:i,containsNumber:r}},{}],6:[function(n,t,e){var l=n("@turf/meta").coordEach;t.exports=function(n){var t=[Infinity,Infinity,-Infinity,-Infinity];l(n,function(n){if(t[0]>n[0])t[0]=n[0];if(t[1]>n[1])t[1]=n[1];if(t[2]<n[0])t[2]=n[0];if(t[3]<n[1])t[3]=n[1]});return t}},{"@turf/meta":28}],7:[function(n,t,e){var l=n("@turf/helpers");var i=l.featureCollection;var r=n("jsts");var u=n("@mapbox/geojson-normalize");t.exports=function(n,t,e){var r=l.lengthToDegrees(t,e);var a=u(n);var o=u(i(a.features.map(function(n){return s(n,r)})));if(o.features.length>1)return o;else if(o.features.length===1)return o.features[0]};function s(n,t){var e=new r.io.GeoJSONReader;var l=e.read(n.geometry);var i=l.buffer(t);var u=new r.io.GeoJSONWriter;i=u.write(i);return{type:"Feature",geometry:i,properties:{}}}},{"@mapbox/geojson-normalize":2,"@turf/helpers":14,jsts:43}],8:[function(n,t,e){var l=n("@turf/meta").coordEach,i=n("@turf/centroid"),r=n("@turf/convex"),u=n("@turf/explode"),s=n("@turf/helpers").point;function a(n){if(n.type==="Feature"&&n.geometry.type==="Polygon"){var e=[];l(n,function(n){e.push(n)});var a=i(n);var o=a.geometry.coordinates;var h=0;var f=0;var c=0;var d,g,p,v,m,y,x,w;var _=e.map(function(n){return[n[0]-o[0],n[1]-o[1]]});for(d=0;d<e.length-1;d++){g=_[d];v=g[0];y=g[1];p=_[d+1];m=p[0];x=p[1];w=v*x-m*y;c+=w;h+=(v+m)*w;f+=(y+x)*w}if(c===0){return a}else{var M=c*.5;var E=1/(6*M);return s([o[0]+E*h,o[1]+E*f])}}else{var b=r(u(n));if(b){return t.exports(b)}else{return i(n)}}}t.exports=a},{"@turf/centroid":10,"@turf/convex":11,"@turf/explode":13,"@turf/helpers":14,"@turf/meta":28}],9:[function(n,t,e){var l=n("@turf/bbox"),i=n("@turf/helpers").point;t.exports=function(n){var t=l(n);var e=(t[0]+t[2])/2;var r=(t[1]+t[3])/2;return i([e,r])}},{"@turf/bbox":6,"@turf/helpers":14}],10:[function(n,t,e){var l=n("@turf/meta").coordEach;var i=n("@turf/helpers").point;t.exports=function(n){var t=0,e=0,r=0;l(n,function(n){t+=n[0];e+=n[1];r++},true);return i([t/r,e/r])}},{"@turf/helpers":14,"@turf/meta":28}],11:[function(n,t,e){var l=n("@turf/meta").coordEach,i=n("convex-hull"),r=n("@turf/helpers").polygon;t.exports=function(n){var t=[];l(n,function(n){t.push([n[0],n[1]])});var e=i(t);if(e.length>=3){var u=[];for(var s=0;s<e.length;s++){u.push(t[e[s][0]])}u.push(t[e[e.length-1][1]]);return r([u])}return undefined}},{"@turf/helpers":14,"@turf/meta":28,"convex-hull":37}],12:[function(n,t,e){var l=n("jsts");t.exports=function(n,t){var e=JSON.parse(JSON.stringify(n));var i=JSON.parse(JSON.stringify(t));if(e.type!=="Feature"){e={type:"Feature",properties:{},geometry:e}}if(i.type!=="Feature"){i={type:"Feature",properties:{},geometry:i}}var r=new l.io.GeoJSONReader;var u=r.read(JSON.stringify(e.geometry));var s=r.read(JSON.stringify(i.geometry));var a=u.difference(s);if(a.isEmpty())return undefined;var o=new l.io.GeoJSONWriter;var h=o.write(a);e.geometry=a;return{type:"Feature",properties:e.properties,geometry:h}}},{jsts:43}],13:[function(n,t,e){var l=n("@turf/helpers").featureCollection;var i=n("@turf/meta").featureEach;var r=n("@turf/meta").coordEach;var u=n("@turf/helpers").point;t.exports=function(n){var t=[];if(n.type==="FeatureCollection"){i(n,function(n){r(n,function(e){t.push(u(e,n.properties))})})}else{r(n,function(e){t.push(u(e,n.properties))})}return l(t)}},{"@turf/helpers":14,"@turf/meta":28}],14:[function(n,t,e){"use strict";Object.defineProperty(e,"__esModule",{value:true});var l=6371008.8;var i={meters:l,metres:l,millimeters:l*1e3,millimetres:l*1e3,centimeters:l*100,centimetres:l*100,kilometers:l/1e3,kilometres:l/1e3,miles:l/1609.344,nauticalmiles:l/1852,inches:l*39.37,yards:l/1.0936,feet:l*3.28084,radians:1,degrees:l/111325};var r={meters:1,metres:1,millimeters:1e3,millimetres:1e3,centimeters:100,centimetres:100,kilometers:1/1e3,kilometres:1/1e3,miles:1/1609.344,nauticalmiles:1/1852,inches:39.37,yards:1/1.0936,feet:3.28084,radians:1/l,degrees:1/111325};var u={meters:1,metres:1,millimeters:1e6,millimetres:1e6,centimeters:1e4,centimetres:1e4,kilometers:1e-6,kilometres:1e-6,acres:247105e-9,miles:3.86e-7,yards:1.195990046,feet:10.763910417,inches:1550.003100006};function s(n,t,e){e=e||{};if(!L(e))throw new Error("options is invalid");var l=e.bbox;var i=e.id;if(n===undefined)throw new Error("geometry is required");if(t&&t.constructor!==Object)throw new Error("properties must be an Object");if(l)R(l);if(i)T(i);var r={type:"Feature"};if(i)r.id=i;if(l)r.bbox=l;r.properties=t||{};r.geometry=n;return r}function a(n,t,e){e=e||{};if(!L(e))throw new Error("options is invalid");var l=e.bbox;if(!n)throw new Error("type is required");if(!t)throw new Error("coordinates is required");if(!Array.isArray(t))throw new Error("coordinates must be an Array");if(l)R(l);var i;switch(n){case"Point":i=o(t).geometry;break;case"LineString":i=d(t).geometry;break;case"Polygon":i=f(t).geometry;break;case"MultiPoint":i=m(t).geometry;break;case"MultiLineString":i=v(t).geometry;break;case"MultiPolygon":i=y(t).geometry;break;default:throw new Error(n+" is invalid")}if(l)i.bbox=l;return i}function o(n,t,e){if(!n)throw new Error("coordinates is required");if(!Array.isArray(n))throw new Error("coordinates must be an Array");if(n.length<2)throw new Error("coordinates must be at least 2 numbers long");if(!P(n[0])||!P(n[1]))throw new Error("coordinates must contain numbers");return s({type:"Point",coordinates:n},t,e)}function h(n,t,e){if(!n)throw new Error("coordinates is required");if(!Array.isArray(n))throw new Error("coordinates must be an Array");return p(n.map(function(n){return o(n,t)}),e)}function f(n,t,e){if(!n)throw new Error("coordinates is required");for(var l=0;l<n.length;l++){var i=n[l];if(i.length<4){throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.")}for(var r=0;r<i[i.length-1].length;r++){if(l===0&&r===0&&!P(i[0][0])||!P(i[0][1]))throw new Error("coordinates must contain numbers");if(i[i.length-1][r]!==i[0][r]){throw new Error("First and last Position are not equivalent.")}}}return s({type:"Polygon",coordinates:n},t,e)}function c(n,t,e){if(!n)throw new Error("coordinates is required");if(!Array.isArray(n))throw new Error("coordinates must be an Array");return p(n.map(function(n){return f(n,t)}),e)}function d(n,t,e){if(!n)throw new Error("coordinates is required");if(n.length<2)throw new Error("coordinates must be an array of two or more positions");if(!P(n[0][1])||!P(n[0][1]))throw new Error("coordinates must contain numbers");return s({type:"LineString",coordinates:n},t,e)}function g(n,t,e){if(!n)throw new Error("coordinates is required");if(!Array.isArray(n))throw new Error("coordinates must be an Array");return p(n.map(function(n){return d(n,t)}),e)}function p(n,t){t=t||{};if(!L(t))throw new Error("options is invalid");var e=t.bbox;var l=t.id;if(!n)throw new Error("No features passed");if(!Array.isArray(n))throw new Error("features must be an Array");if(e)R(e);if(l)T(l);var i={type:"FeatureCollection"};if(l)i.id=l;if(e)i.bbox=e;i.features=n;return i}function v(n,t,e){if(!n)throw new Error("coordinates is required");return s({type:"MultiLineString",coordinates:n},t,e)}function m(n,t,e){if(!n)throw new Error("coordinates is required");return s({type:"MultiPoint",coordinates:n},t,e)}function y(n,t,e){if(!n)throw new Error("coordinates is required");return s({type:"MultiPolygon",coordinates:n},t,e)}function x(n,t,e){if(!n)throw new Error("geometries is required");if(!Array.isArray(n))throw new Error("geometries must be an Array");return s({type:"GeometryCollection",geometries:n},t,e)}function w(n,t){if(n===undefined||n===null||isNaN(n))throw new Error("num is required");if(t&&!(t>=0))throw new Error("precision must be a positive number");var e=Math.pow(10,t||0);return Math.round(n*e)/e}function _(n,t){if(n===undefined||n===null)throw new Error("radians is required");if(t&&typeof t!=="string")throw new Error("units must be a string");var e=i[t||"kilometers"];if(!e)throw new Error(t+" units is invalid");return n*e}function M(n,t){if(n===undefined||n===null)throw new Error("distance is required");if(t&&typeof t!=="string")throw new Error("units must be a string");var e=i[t||"kilometers"];if(!e)throw new Error(t+" units is invalid");return n/e}function E(n,t){return C(M(n,t))}function b(n){if(n===null||n===undefined)throw new Error("bearing is required");var t=n%360;if(t<0)t+=360;return t}function C(n){if(n===null||n===undefined)throw new Error("radians is required");var t=n%(2*Math.PI);return t*180/Math.PI}function I(n){if(n===null||n===undefined)throw new Error("degrees is required");var t=n%360;return t*Math.PI/180}function S(n,t,e){if(n===null||n===undefined)throw new Error("length is required");if(!(n>=0))throw new Error("length must be a positive number");return _(M(n,t),e||"kilometers")}function N(n,t,e){if(n===null||n===undefined)throw new Error("area is required");if(!(n>=0))throw new Error("area must be a positive number");var l=u[t||"meters"];if(!l)throw new Error("invalid original units");var i=u[e||"kilometers"];if(!i)throw new Error("invalid final units");return n/l*i}function P(n){return!isNaN(n)&&n!==null&&!Array.isArray(n)}function L(n){return!!n&&n.constructor===Object}function R(n){if(!n)throw new Error("bbox is required");if(!Array.isArray(n))throw new Error("bbox must be an Array");if(n.length!==4&&n.length!==6)throw new Error("bbox must be an Array of 4 or 6 numbers");n.forEach(function(n){if(!P(n))throw new Error("bbox must only contain numbers")})}function T(n){if(!n)throw new Error("id is required");if(["string","number"].indexOf(typeof n)===-1)throw new Error("id must be a number or a string")}function O(){throw new Error("method has been renamed to `radiansToDegrees`")}function A(){throw new Error("method has been renamed to `degreesToRadians`")}function k(){throw new Error("method has been renamed to `lengthToDegrees`")}function D(){throw new Error("method has been renamed to `lengthToRadians`")}function F(){throw new Error("method has been renamed to `radiansToLength`")}function B(){throw new Error("method has been renamed to `bearingToAzimuth`")}function G(){throw new Error("method has been renamed to `convertLength`")}e.earthRadius=l;e.factors=i;e.unitsFactors=r;e.areaFactors=u;e.feature=s;e.geometry=a;e.point=o;e.points=h;e.polygon=f;e.polygons=c;e.lineString=d;e.lineStrings=g;e.featureCollection=p;e.multiLineString=v;e.multiPoint=m;e.multiPolygon=y;e.geometryCollection=x;e.round=w;e.radiansToLength=_;e.lengthToRadians=M;e.lengthToDegrees=E;e.bearingToAzimuth=b;e.radiansToDegrees=C;e.degreesToRadians=I;e.convertLength=S;e.convertArea=N;e.isNumber=P;e.isObject=L;e.validateBBox=R;e.validateId=T;e.radians2degrees=O;e.degrees2radians=A;e.distanceToDegrees=k;e.distanceToRadians=D;e.radiansToDistance=F;e.bearingToAngle=B;e.convertDistance=G},{}],15:[function(n,t,e){var l=n("@turf/invariant");t.exports=function n(t,e){var r=l.getCoord(t);var u=e.geometry.coordinates;if(e.geometry.type==="Polygon")u=[u];for(var s=0,a=false;s<u.length&&!a;s++){if(i(r,u[s][0])){var o=false;var h=1;while(h<u[s].length&&!o){if(i(r,u[s][h],true)){o=true}h++}if(!o)a=true}}return a};function i(n,t,e){var l=false;if(t[0][0]===t[t.length-1][0]&&t[0][1]===t[t.length-1][1])t=t.slice(0,t.length-1);for(var i=0,r=t.length-1;i<t.length;r=i++){var u=t[i][0],s=t[i][1];var a=t[r][0],o=t[r][1];var h=n[1]*(u-a)+s*(a-n[0])+o*(n[0]-u)===0&&(u-n[0])*(a-n[0])<=0&&(s-n[1])*(o-n[1])<=0;if(h)return!e;var f=s>n[1]!==o>n[1]&&n[0]<(a-u)*(n[1]-s)/(o-s)+u;if(f)l=!l}return l}},{"@turf/invariant":16}],16:[function(n,t,e){"use strict";Object.defineProperty(e,"__esModule",{value:true});var l=n("@turf/helpers");function i(n){if(!n)throw new Error("coord is required");if(n.type==="Feature"&&n.geometry!==null&&n.geometry.type==="Point")return n.geometry.coordinates;if(n.type==="Point")return n.coordinates;if(Array.isArray(n)&&n.length>=2&&n[0].length===undefined&&n[1].length===undefined)return n;throw new Error("coord must be GeoJSON Point or an Array of numbers")}function r(n){if(!n)throw new Error("coords is required");if(n.type==="Feature"&&n.geometry!==null)return n.geometry.coordinates;if(n.coordinates)return n.coordinates;if(Array.isArray(n))return n;throw new Error("coords must be GeoJSON Feature, Geometry Object or an Array")}function u(n){if(n.length>1&&l.isNumber(n[0])&&l.isNumber(n[1])){return true}if(Array.isArray(n[0])&&n[0].length){return u(n[0])}throw new Error("coordinates must only contain numbers")}function s(n,t,e){if(!t||!e)throw new Error("type and name required");if(!n||n.type!==t){throw new Error("Invalid input to "+e+": must be a "+t+", given "+n.type)}}function a(n,t,e){if(!n)throw new Error("No feature passed");if(!e)throw new Error(".featureOf() requires a name");if(!n||n.type!=="Feature"||!n.geometry){throw new Error("Invalid input to "+e+", Feature with geometry required")}if(!n.geometry||n.geometry.type!==t){throw new Error("Invalid input to "+e+": must be a "+t+", given "+n.geometry.type)}}function o(n,t,e){if(!n)throw new Error("No featureCollection passed");if(!e)throw new Error(".collectionOf() requires a name");if(!n||n.type!=="FeatureCollection"){throw new Error("Invalid input to "+e+", FeatureCollection required")}for(var l=0;l<n.features.length;l++){var i=n.features[l];if(!i||i.type!=="Feature"||!i.geometry){throw new Error("Invalid input to "+e+", Feature with geometry required")}if(!i.geometry||i.geometry.type!==t){throw new Error("Invalid input to "+e+": must be a "+t+", given "+i.geometry.type)}}}function h(n){if(!n)throw new Error("geojson is required");if(n.geometry!==undefined)return n.geometry;if(n.coordinates||n.geometries)return n;throw new Error("geojson must be a valid Feature or Geometry Object")}function f(){throw new Error("invariant.getGeomType has been deprecated in v5.0 in favor of invariant.getType")}function c(n,t){if(!n)throw new Error((t||"geojson")+" is required");if(n.geometry&&n.geometry.type)return n.geometry.type;if(n.type)return n.type;throw new Error((t||"geojson")+" is invalid")}e.getCoord=i;e.getCoords=r;e.containsNumber=u;e.geojsonType=s;e.featureOf=a;e.collectionOf=o;e.getGeom=h;e.getGeomType=f;e.getType=c},{"@turf/helpers":14}],17:[function(n,t,e){var l=n("@turf/helpers");var i=n("@turf/meta");var r=n("@turf/line-segment");var u=n("@turf/invariant").getCoords;var s=n("geojson-rbush");var a=l.point;var o=l.featureCollection;var h=i.featureEach;t.exports=function(n,t){var e=[];if(n.geometry.type==="LineString"&&t.geometry.type==="LineString"&&n.geometry.coordinates.length===2&&t.geometry.coordinates.length===2){var l=f(n,t);if(l)e.push(l);return o(e)}var i=s();i.load(r(t));h(r(n),function(n){h(i.search(n),function(t){var l=f(n,t);if(l)e.push(l)})});return o(e)};function f(n,t){var e=u(n);var l=u(t);if(e.length!==2){throw new Error("<intersects> line1 must only contain 2 coordinates")}if(l.length!==2){throw new Error("<intersects> line2 must only contain 2 coordinates")}var i=e[0][0];var r=e[0][1];var s=e[1][0];var o=e[1][1];var h=l[0][0];var f=l[0][1];var c=l[1][0];var d=l[1][1];var g=(d-f)*(s-i)-(c-h)*(o-r);var p=(c-h)*(r-f)-(d-f)*(i-h);var v=(s-i)*(r-f)-(o-r)*(i-h);if(g===0){if(p===0&&v===0){return null}return null}var m=p/g;var y=v/g;if(m>=0&&m<=1&&y>=0&&y<=1){var x=i+m*(s-i);var w=r+m*(o-r);return a([x,w])}return null}},{"@turf/helpers":18,"@turf/invariant":19,"@turf/line-segment":22,"@turf/meta":20,"geojson-rbush":41}],18:[function(n,t,e){arguments[4][4][0].apply(e,arguments)},{dup:4}],19:[function(n,t,e){arguments[4][5][0].apply(e,arguments)},{dup:5}],20:[function(n,t,e){function l(n,t,e){var i,r,u,s,a,o,h,f,c,d=0,g=0,p,v=n.type==="FeatureCollection",m=n.type==="Feature",y=v?n.features.length:1;for(i=0;i<y;i++){c=v?n.features[i].geometry:m?n.geometry:n;p=c.type==="GeometryCollection";h=p?c.geometries.length:1;for(s=0;s<h;s++){o=p?c.geometries[s]:c;f=o.coordinates;d=e&&(o.type==="Polygon"||o.type==="MultiPolygon")?1:0;if(o.type==="Point"){t(f,g);g++}else if(o.type==="LineString"||o.type==="MultiPoint"){for(r=0;r<f.length;r++){t(f[r],g);g++}}else if(o.type==="Polygon"||o.type==="MultiLineString"){for(r=0;r<f.length;r++)for(u=0;u<f[r].length-d;u++){t(f[r][u],g);g++}}else if(o.type==="MultiPolygon"){for(r=0;r<f.length;r++)for(u=0;u<f[r].length;u++)for(a=0;a<f[r][u].length-d;a++){t(f[r][u][a],g);g++}}else if(o.type==="GeometryCollection"){for(r=0;r<o.geometries.length;r++)l(o.geometries[r],t,e)}else{throw new Error("Unknown Geometry Type")}}}}function i(n,t,e,i){var r=e;l(n,function(n,l){if(l===0&&e===undefined){r=n}else{r=t(r,n,l)}},i);return r}function r(n,t){var e;switch(n.type){case"FeatureCollection":for(e=0;e<n.features.length;e++){t(n.features[e].properties,e)}break;case"Feature":t(n.properties,0);break}}function u(n,t,e){var l=e;r(n,function(n,i){if(i===0&&e===undefined){l=n}else{l=t(l,n,i)}});return l}function s(n,t){if(n.type==="Feature"){t(n,0)}else if(n.type==="FeatureCollection"){for(var e=0;e<n.features.length;e++){t(n.features[e],e)}}}function a(n,t,e){var l=e;s(n,function(n,i){if(i===0&&e===undefined){l=n}else{l=t(l,n,i)}});return l}function o(n){var t=[];l(n,function(n){t.push(n)});return t}function h(n,t){var e,l,i,r,u,s,a,o=0,h=n.type==="FeatureCollection",f=n.type==="Feature",c=h?n.features.length:1;for(e=0;e<c;e++){s=h?n.features[e].geometry:f?n.geometry:n;a=s.type==="GeometryCollection";u=a?s.geometries.length:1;for(i=0;i<u;i++){r=a?s.geometries[i]:s;if(r.type==="Point"||r.type==="LineString"||r.type==="MultiPoint"||r.type==="Polygon"||r.type==="MultiLineString"||r.type==="MultiPolygon"){t(r,o);o++}else if(r.type==="GeometryCollection"){for(l=0;l<r.geometries.length;l++){t(r.geometries[l],o);o++}}else{throw new Error("Unknown Geometry Type")}}}}function f(n,t,e){var l=e;h(n,function(n,i){if(i===0&&e===undefined){l=n}else{l=t(l,n,i)}});return l}t.exports={coordEach:l,coordReduce:i,propEach:r,propReduce:u,featureEach:s,featureReduce:a,coordAll:o,geomEach:h,geomReduce:f}},{}],21:[function(n,t,e){"use strict";var l=n("@turf/meta");var i=n("@turf/invariant");var r=n("@turf/helpers");function u(n){var t=n[0];var e=n[1];return[e[0]-t[0],e[1]-t[1]]}function s(n,t){return n[0]*t[1]-t[0]*n[1]}function a(n,t){return[n[0]+t[0],n[1]+t[1]]}function o(n,t){return[n[0]-t[0],n[1]-t[1]]}function h(n,t){return[n*t[0],n*t[1]]}function f(n,t){var e=n[0];var l=u(n);var i=t[0];var r=u(t);var f=s(l,r);var c=o(i,e);var d=s(c,r);var g=d/f;var p=a(e,h(g,l));return p}function c(n,t){var e=u(n);var l=u(t);return s(e,l)===0}function d(n,t){if(c(n,t))return false;return f(n,t)}function g(n,t,e){e=e||{};if(!r.isObject(e))throw new Error("options is invalid");var u=e.units;if(!n)throw new Error("geojson is required");if(t===undefined||t===null||isNaN(t))throw new Error("distance is required");var s=i.getType(n);var a=n.properties;switch(s){case"LineString":return p(n,t,u);case"MultiLineString":var o=[];l.flattenEach(n,function(n){o.push(p(n,t,u).geometry.coordinates)});return r.multiLineString(o,a);default:throw new Error("geometry "+s+" is not supported")}}function p(n,t,e){var l=[];var u=r.lengthToDegrees(t,e);var s=i.getCoords(n);var a=[];s.forEach(function(n,t){if(t!==s.length-1){var e=v(n,s[t+1],u);l.push(e);if(t>0){var i=l[t-1];var r=d(e,i);if(r!==false){i[1]=r;e[0]=r}a.push(i[0]);if(t===s.length-2){a.push(e[0]);a.push(e[1])}}if(s.length===2){a.push(e[0]);a.push(e[1])}}});return r.lineString(a,n.properties)}function v(n,t,e){var l=Math.sqrt((n[0]-t[0])*(n[0]-t[0])+(n[1]-t[1])*(n[1]-t[1]));var i=n[0]+e*(t[1]-n[1])/l;var r=t[0]+e*(t[1]-n[1])/l;var u=n[1]+e*(n[0]-t[0])/l;var s=t[1]+e*(n[0]-t[0])/l;return[[i,u],[r,s]]}t.exports=g;t.exports.default=g},{"@turf/helpers":14,"@turf/invariant":16,"@turf/meta":28}],22:[function(n,t,e){var l=n("@turf/flatten");var i=n("@turf/meta").featureEach;var r=n("@turf/helpers").lineString;var u=n("@turf/helpers").featureCollection;var s=n("@turf/invariant").getCoords;t.exports=function(n){var t=[];var e=0;i(n,function(n){i(l(n),function(n){var l=[];var i=n.geometry?n.geometry.type:n.type;switch(i){case"Polygon":l=s(n);break;case"LineString":l=[s(n)]}l.forEach(function(l){var i=a(l,n.properties);i.forEach(function(n){n.id=e;t.push(n);e++})})})});return u(t)};function a(n,t){var e=[];n.reduce(function(n,l){var i=r([n,l],t);i.bbox=o(n,l);e.push(i);return l});return e}function o(n,t){var e=n[0];var l=n[1];var i=t[0];var r=t[1];var u=e<i?e:i;var s=l<r?l:r;var a=e>i?e:i;var o=l>r?l:r;return[u,s,a,o]}},{"@turf/flatten":23,"@turf/helpers":24,"@turf/invariant":25,"@turf/meta":26}],23:[function(n,t,e){var l=n("@turf/meta").featureEach;var i=n("@turf/meta").geomEach;var r=n("@turf/invariant").getCoords;var u=n("@turf/helpers");var s=u.point;var a=u.lineString;var o=u.polygon;var h=u.featureCollection;function f(n){var t=n.geometry?n.geometry.type:n.type;switch(t){case"MultiPoint":return c(n);case"MultiPolygon":return g(n);case"MultiLineString":return d(n);case"FeatureCollection":return p(n);case"GeometryCollection":return v(n);case"Point":case"LineString":case"Polygon":return h([n])}}t.exports=f;function c(n){var t=[];r(n).forEach(function(e){t.push(s(e,n.properties))});return h(t)}function d(n){var t=[];r(n).forEach(function(e){t.push(a(e,n.properties))});return h(t)}function g(n){var t=[];r(n).forEach(function(e){t.push(o(e,n.properties))});return h(t)}function p(n){var t=[];l(n,function(n){switch(n.geometry.type){case"MultiPoint":case"MultiLineString":case"MultiPolygon":l(f(n),function(n){t.push(n)});break;default:t.push(n)}});return h(t)}function v(n){var t=[];i(n,function(n){switch(n.type){case"MultiPoint":case"MultiLineString":case"MultiPolygon":l(f(n),function(n){t.push(n)});break;default:var e={type:"Feature",properties:{},geometry:n};t.push(e)}});return h(t)}},{"@turf/helpers":24,"@turf/invariant":25,
"@turf/meta":26}],24:[function(n,t,e){arguments[4][4][0].apply(e,arguments)},{dup:4}],25:[function(n,t,e){arguments[4][5][0].apply(e,arguments)},{dup:5}],26:[function(n,t,e){arguments[4][20][0].apply(e,arguments)},{dup:20}],27:[function(n,t,e){var l=n("@turf/meta").featureEach;var i=n("rbush");var r=n("@turf/bbox");var u=n("@turf/helpers");var s=n("@turf/union");t.exports=function(n,t){var e=f(t);var l=o(n);var i=l[0];var r=l[1];i=c(i);r=c(r);var u=a(e,i,r);return u};function a(n,t,e){var i=[];i.push(n.geometry.coordinates[0]);l(t,function(n){i.push(n.geometry.coordinates[0])});l(e,function(n){i.push(n.geometry.coordinates[0])});return u.polygon(i)}function o(n){var t=[];var e=[];l(n,function(n){if(n.geometry.type==="MultiPolygon"){n=h(n)}l(n,function(n){var l=n.geometry.coordinates;var i=l[0];var r=l.slice(1);t.push(u.polygon([i]));r.forEach(function(n){e.push(u.polygon([n]))})})});return[u.featureCollection(t),u.featureCollection(e)]}function h(n){var t=[];n.geometry.coordinates.forEach(function(n){t.push(u.polygon(n))});return u.featureCollection(t)}function f(n){var t=[[[180,90],[-180,90],[-180,-90],[180,-90],[180,90]]];var e=n&&n.geometry.coordinates||t;return u.polygon(e)}function c(n){if(n.features.length<=1)return n;var t=g(n);var e=[];var i={};l(n,function(n,l){if(i[l])return true;t.remove({index:l},d);i[l]=true;while(true){var u=r(n);var a=t.search({minX:u[0],minY:u[1],maxX:u[2],maxY:u[3]});if(a.length>0){var o=a.map(function(n){i[n.index]=true;t.remove({index:n.index},d);return n.geojson});o.push(n);n=s.apply(this,o)}if(a.length===0)break}e.push(n)});return u.featureCollection(e)}function d(n,t){return n.index===t.index}function g(n){var t=i();var e=[];l(n,function(n,t){var l=r(n);e.push({minX:l[0],minY:l[1],maxX:l[2],maxY:l[3],geojson:n,index:t})});t.load(e);return t}},{"@turf/bbox":6,"@turf/helpers":14,"@turf/meta":28,"@turf/union":33,rbush:47}],28:[function(n,t,e){"use strict";Object.defineProperty(e,"__esModule",{value:true});var l=n("@turf/helpers");function i(n,t,e){if(n===null)return;var l,r,u,s,a,o,h,f=0,c=0,d,g=n.type,p=g==="FeatureCollection",v=g==="Feature",m=p?n.features.length:1;for(var y=0;y<m;y++){h=p?n.features[y].geometry:v?n.geometry:n;d=h?h.type==="GeometryCollection":false;a=d?h.geometries.length:1;for(var x=0;x<a;x++){var w=0;var _=0;s=d?h.geometries[x]:h;if(s===null)continue;o=s.coordinates;var M=s.type;f=e&&(M==="Polygon"||M==="MultiPolygon")?1:0;switch(M){case null:break;case"Point":if(t(o,c,y,w,_)===false)return false;c++;w++;break;case"LineString":case"MultiPoint":for(l=0;l<o.length;l++){if(t(o[l],c,y,w,_)===false)return false;c++;if(M==="MultiPoint")w++}if(M==="LineString")w++;break;case"Polygon":case"MultiLineString":for(l=0;l<o.length;l++){for(r=0;r<o[l].length-f;r++){if(t(o[l][r],c,y,w,_)===false)return false;c++}if(M==="MultiLineString")w++;if(M==="Polygon")_++}if(M==="Polygon")w++;break;case"MultiPolygon":for(l=0;l<o.length;l++){if(M==="MultiPolygon")_=0;for(r=0;r<o[l].length;r++){for(u=0;u<o[l][r].length-f;u++){if(t(o[l][r][u],c,y,w,_)===false)return false;c++}_++}w++}break;case"GeometryCollection":for(l=0;l<s.geometries.length;l++)if(i(s.geometries[l],t,e)===false)return false;break;default:throw new Error("Unknown Geometry Type")}}}}function r(n,t,e,l){var r=e;i(n,function(n,l,i,u,s){if(l===0&&e===undefined)r=n;else r=t(r,n,l,i,u,s)},l);return r}function u(n,t){var e;switch(n.type){case"FeatureCollection":for(e=0;e<n.features.length;e++){if(t(n.features[e].properties,e)===false)break}break;case"Feature":t(n.properties,0);break}}function s(n,t,e){var l=e;u(n,function(n,i){if(i===0&&e===undefined)l=n;else l=t(l,n,i)});return l}function a(n,t){if(n.type==="Feature"){t(n,0)}else if(n.type==="FeatureCollection"){for(var e=0;e<n.features.length;e++){if(t(n.features[e],e)===false)break}}}function o(n,t,e){var l=e;a(n,function(n,i){if(i===0&&e===undefined)l=n;else l=t(l,n,i)});return l}function h(n){var t=[];i(n,function(n){t.push(n)});return t}function f(n,t){var e,l,i,r,u,s,a,o,h,f,c=0,d=n.type==="FeatureCollection",g=n.type==="Feature",p=d?n.features.length:1;for(e=0;e<p;e++){s=d?n.features[e].geometry:g?n.geometry:n;o=d?n.features[e].properties:g?n.properties:{};h=d?n.features[e].bbox:g?n.bbox:undefined;f=d?n.features[e].id:g?n.id:undefined;a=s?s.type==="GeometryCollection":false;u=a?s.geometries.length:1;for(i=0;i<u;i++){r=a?s.geometries[i]:s;if(r===null){if(t(null,c,o,h,f)===false)return false;continue}switch(r.type){case"Point":case"LineString":case"MultiPoint":case"Polygon":case"MultiLineString":case"MultiPolygon":{if(t(r,c,o,h,f)===false)return false;break}case"GeometryCollection":{for(l=0;l<r.geometries.length;l++){if(t(r.geometries[l],c,o,h,f)===false)return false}break}default:throw new Error("Unknown Geometry Type")}}c++}}function c(n,t,e){var l=e;f(n,function(n,i,r,u,s){if(i===0&&e===undefined)l=n;else l=t(l,n,i,r,u,s)});return l}function d(n,t){f(n,function(n,e,i,r,u){var s=n===null?null:n.type;switch(s){case null:case"Point":case"LineString":case"Polygon":if(t(l.feature(n,i,{bbox:r,id:u}),e,0)===false)return false;return}var a;switch(s){case"MultiPoint":a="Point";break;case"MultiLineString":a="LineString";break;case"MultiPolygon":a="Polygon";break}for(var o=0;o<n.coordinates.length;o++){var h=n.coordinates[o];var f={type:a,coordinates:h};if(t(l.feature(f,i),e,o)===false)return false}})}function g(n,t,e){var l=e;d(n,function(n,i,r){if(i===0&&r===0&&e===undefined)l=n;else l=t(l,n,i,r)});return l}function p(n,t){d(n,function(n,e,r){var u=0;if(!n.geometry)return;var s=n.geometry.type;if(s==="Point"||s==="MultiPoint")return;var a;if(i(n,function(i,s,o,h,f){if(a===undefined){a=i;return}var c=l.lineString([a,i],n.properties);if(t(c,e,r,f,u)===false)return false;u++;a=i})===false)return false})}function v(n,t,e){var l=e;var i=false;p(n,function(n,r,u,s,a){if(i===false&&e===undefined)l=n;else l=t(l,n,r,u,s,a);i=true});return l}function m(n,t){if(!n)throw new Error("geojson is required");d(n,function(n,e,i){if(n.geometry===null)return;var r=n.geometry.type;var u=n.geometry.coordinates;switch(r){case"LineString":if(t(n,e,i,0,0)===false)return false;break;case"Polygon":for(var s=0;s<u.length;s++){if(t(l.lineString(u[s],n.properties),e,i,s)===false)return false}break}})}function y(n,t,e){var l=e;m(n,function(n,i,r,u){if(i===0&&e===undefined)l=n;else l=t(l,n,i,r,u)});return l}function x(n,t){t=t||{};if(!l.isObject(t))throw new Error("options is invalid");var e=t.featureIndex||0;var i=t.multiFeatureIndex||0;var r=t.geometryIndex||0;var u=t.segmentIndex||0;var s=t.properties;var a;switch(n.type){case"FeatureCollection":if(e<0)e=n.features.length+e;s=s||n.features[e].properties;a=n.features[e].geometry;break;case"Feature":s=s||n.properties;a=n.geometry;break;case"Point":case"MultiPoint":return null;case"LineString":case"Polygon":case"MultiLineString":case"MultiPolygon":a=n;break;default:throw new Error("geojson is invalid")}if(a===null)return null;var o=a.coordinates;switch(a.type){case"Point":case"MultiPoint":return null;case"LineString":if(u<0)u=o.length+u-1;return l.lineString([o[u],o[u+1]],s,t);case"Polygon":if(r<0)r=o.length+r;if(u<0)u=o[r].length+u-1;return l.lineString([o[r][u],o[r][u+1]],s,t);case"MultiLineString":if(i<0)i=o.length+i;if(u<0)u=o[i].length+u-1;return l.lineString([o[i][u],o[i][u+1]],s,t);case"MultiPolygon":if(i<0)i=o.length+i;if(r<0)r=o[i].length+r;if(u<0)u=o[i][r].length-u-1;return l.lineString([o[i][r][u],o[i][r][u+1]],s,t)}throw new Error("geojson is invalid")}function w(n,t){t=t||{};if(!l.isObject(t))throw new Error("options is invalid");var e=t.featureIndex||0;var i=t.multiFeatureIndex||0;var r=t.geometryIndex||0;var u=t.coordIndex||0;var s=t.properties;var a;switch(n.type){case"FeatureCollection":if(e<0)e=n.features.length+e;s=s||n.features[e].properties;a=n.features[e].geometry;break;case"Feature":s=s||n.properties;a=n.geometry;break;case"Point":case"MultiPoint":return null;case"LineString":case"Polygon":case"MultiLineString":case"MultiPolygon":a=n;break;default:throw new Error("geojson is invalid")}if(a===null)return null;var o=a.coordinates;switch(a.type){case"Point":return l.point(o,s,t);case"MultiPoint":if(i<0)i=o.length+i;return l.point(o[i],s,t);case"LineString":if(u<0)u=o.length+u;return l.point(o[u],s,t);case"Polygon":if(r<0)r=o.length+r;if(u<0)u=o[r].length+u;return l.point(o[r][u],s,t);case"MultiLineString":if(i<0)i=o.length+i;if(u<0)u=o[i].length+u;return l.point(o[i][u],s,t);case"MultiPolygon":if(i<0)i=o.length+i;if(r<0)r=o[i].length+r;if(u<0)u=o[i][r].length-u;return l.point(o[i][r][u],s,t)}throw new Error("geojson is invalid")}e.coordEach=i;e.coordReduce=r;e.propEach=u;e.propReduce=s;e.featureEach=a;e.featureReduce=o;e.coordAll=h;e.geomEach=f;e.geomReduce=c;e.flattenEach=d;e.flattenReduce=g;e.segmentEach=p;e.segmentReduce=v;e.lineEach=m;e.lineReduce=y;e.findSegment=x;e.findPoint=w},{"@turf/helpers":14}],29:[function(n,t,e){var l=n("@turf/invariant").getCoords;var i=n("@turf/helpers");var r=i.lineString;var u=i.multiLineString;var s=i.featureCollection;t.exports=function(n){var t=o(n);var e=l(n);var i=n.properties;if(!e.length)throw new Error("polygon must contain coordinates");switch(t){case"Polygon":return s([a(e,i)]);case"MultiPolygon":var r=[];e.forEach(function(n){r.push(a(n,i))});return s(r);default:throw new Error("geom "+t+" not supported")}};function a(n,t){if(n.length>1)return u(n,t);return r(n[0],t)}function o(n){return n.geometry?n.geometry.type:n.type}},{"@turf/helpers":30,"@turf/invariant":31}],30:[function(n,t,e){arguments[4][4][0].apply(e,arguments)},{dup:4}],31:[function(n,t,e){arguments[4][5][0].apply(e,arguments)},{dup:5}],32:[function(n,t,e){var l=n("simplify-js");var i=["LineString","MultiLineString","Polygon","MultiPolygon"];t.exports=function(n,t,e){if(n.type==="Feature"){return s(r(n,t,e),n.properties)}else if(n.type==="FeatureCollection"){return{type:"FeatureCollection",features:n.features.map(function(n){var l=r(n,t,e);if(i.indexOf(l.type)>-1){return s(l,n.properties)}else{return l}})}}else if(n.type==="GeometryCollection"){return{type:"GeometryCollection",geometries:n.geometries.map(function(n){if(i.indexOf(n.type)>-1){return r({type:"Feature",geometry:n},t,e)}return n})}}else{return n}};function r(n,t,e){if(n.geometry.type==="LineString"){return{type:"LineString",coordinates:a(n.geometry.coordinates,t,e)}}else if(n.geometry.type==="MultiLineString"){return{type:"MultiLineString",coordinates:n.geometry.coordinates.map(function(n){return a(n,t,e)})}}else if(n.geometry.type==="Polygon"){return{type:"Polygon",coordinates:o(n.geometry.coordinates,t,e)}}else if(n.geometry.type==="MultiPolygon"){return{type:"MultiPolygon",coordinates:n.geometry.coordinates.map(function(n){return o(n,t,e)})}}else{return n}}function u(n){if(n.length<3){return false}else if(n.length===3&&(n[2][0]===n[0][0]&&n[2][1]===n[0][1])){return false}else{return true}}function s(n,t){return{type:"Feature",geometry:n,properties:t}}function a(n,t,e){return l(n.map(function(n){return{x:n[0],y:n[1],z:n[2]}}),t,e).map(function(n){return n.z?[n.x,n.y,n.z]:[n.x,n.y]})}function o(n,t,e){return n.map(function(n){var i=n.map(function(n){return{x:n[0],y:n[1]}});if(i.length<4){throw new Error("Invalid polygon")}var r=l(i,t,e).map(function(n){return[n.x,n.y]});while(!u(r)){t-=t*.01;r=l(i,t,e).map(function(n){return[n.x,n.y]})}if(r[r.length-1][0]!==r[0][0]||r[r.length-1][1]!==r[0][1]){r.push(r[0])}return r})}},{"simplify-js":53}],33:[function(n,t,e){var l=n("jsts");t.exports=function(){var n=new l.io.GeoJSONReader;var t=n.read(JSON.stringify(arguments[0].geometry));for(var e=1;e<arguments.length;e++){t=t.union(n.read(JSON.stringify(arguments[e].geometry)))}var i=new l.io.GeoJSONWriter;t=i.write(t);return{type:"Feature",geometry:t,properties:arguments[0].properties}}},{jsts:43}],34:[function(n,t,e){var l=n("@turf/inside");var i=n("@turf/helpers").featureCollection;t.exports=function(n,t){var e=i([]);for(var r=0;r<t.features.length;r++){for(var u=0;u<n.features.length;u++){var s=l(n.features[u],t.features[r]);if(s){e.features.push(n.features[u])}}}return e}},{"@turf/helpers":14,"@turf/inside":15}],35:[function(n,t,e){"use strict";t.exports=r;var l=n("robust-orientation");function i(n,t){var e=new Array(t+1);for(var i=0;i<n.length;++i){e[i]=n[i]}for(var i=0;i<=n.length;++i){for(var r=n.length;r<=t;++r){var u=new Array(t);for(var s=0;s<t;++s){u[s]=Math.pow(r+1-i,s)}e[r]=u}var a=l.apply(void 0,e);if(a){return true}}return false}function r(n){var t=n.length;if(t===0){return[]}if(t===1){return[0]}var e=n[0].length;var l=[n[0]];var r=[0];for(var u=1;u<t;++u){l.push(n[u]);if(!i(l,e)){l.pop();continue}r.push(u);if(r.length===e+1){return r}}return r}},{"robust-orientation":48}],36:[function(n,t,e){"use restrict";var l=32;e.INT_BITS=l;e.INT_MAX=2147483647;e.INT_MIN=-1<<l-1;e.sign=function(n){return(n>0)-(n<0)};e.abs=function(n){var t=n>>l-1;return(n^t)-t};e.min=function(n,t){return t^(n^t)&-(n<t)};e.max=function(n,t){return n^(n^t)&-(n<t)};e.isPow2=function(n){return!(n&n-1)&&!!n};e.log2=function(n){var t,e;t=(n>65535)<<4;n>>>=t;e=(n>255)<<3;n>>>=e;t|=e;e=(n>15)<<2;n>>>=e;t|=e;e=(n>3)<<1;n>>>=e;t|=e;return t|n>>1};e.log10=function(n){return n>=1e9?9:n>=1e8?8:n>=1e7?7:n>=1e6?6:n>=1e5?5:n>=1e4?4:n>=1e3?3:n>=100?2:n>=10?1:0};e.popCount=function(n){n=n-(n>>>1&1431655765);n=(n&858993459)+(n>>>2&858993459);return(n+(n>>>4)&252645135)*16843009>>>24};function i(n){var t=32;n&=-n;if(n)t--;if(n&65535)t-=16;if(n&16711935)t-=8;if(n&252645135)t-=4;if(n&858993459)t-=2;if(n&1431655765)t-=1;return t}e.countTrailingZeros=i;e.nextPow2=function(n){n+=n===0;--n;n|=n>>>1;n|=n>>>2;n|=n>>>4;n|=n>>>8;n|=n>>>16;return n+1};e.prevPow2=function(n){n|=n>>>1;n|=n>>>2;n|=n>>>4;n|=n>>>8;n|=n>>>16;return n-(n>>>1)};e.parity=function(n){n^=n>>>16;n^=n>>>8;n^=n>>>4;n&=15;return 27030>>>n&1};var r=new Array(256);(function(n){for(var t=0;t<256;++t){var e=t,l=t,i=7;for(e>>>=1;e;e>>>=1){l<<=1;l|=e&1;--i}n[t]=l<<i&255}})(r);e.reverse=function(n){return r[n&255]<<24|r[n>>>8&255]<<16|r[n>>>16&255]<<8|r[n>>>24&255]};e.interleave2=function(n,t){n&=65535;n=(n|n<<8)&16711935;n=(n|n<<4)&252645135;n=(n|n<<2)&858993459;n=(n|n<<1)&1431655765;t&=65535;t=(t|t<<8)&16711935;t=(t|t<<4)&252645135;t=(t|t<<2)&858993459;t=(t|t<<1)&1431655765;return n|t<<1};e.deinterleave2=function(n,t){n=n>>>t&1431655765;n=(n|n>>>1)&858993459;n=(n|n>>>2)&252645135;n=(n|n>>>4)&16711935;n=(n|n>>>16)&65535;return n<<16>>16};e.interleave3=function(n,t,e){n&=1023;n=(n|n<<16)&4278190335;n=(n|n<<8)&251719695;n=(n|n<<4)&3272356035;n=(n|n<<2)&1227133513;t&=1023;t=(t|t<<16)&4278190335;t=(t|t<<8)&251719695;t=(t|t<<4)&3272356035;t=(t|t<<2)&1227133513;n|=t<<1;e&=1023;e=(e|e<<16)&4278190335;e=(e|e<<8)&251719695;e=(e|e<<4)&3272356035;e=(e|e<<2)&1227133513;return n|e<<2};e.deinterleave3=function(n,t){n=n>>>t&1227133513;n=(n|n>>>2)&3272356035;n=(n|n>>>4)&251719695;n=(n|n>>>8)&4278190335;n=(n|n>>>16)&1023;return n<<22>>22};e.nextCombination=function(n){var t=n|n-1;return t+1|(~t&-~t)-1>>>i(n)+1}},{}],37:[function(n,t,e){"use strict";var l=n("./lib/ch1d");var i=n("./lib/ch2d");var r=n("./lib/chnd");t.exports=u;function u(n){var t=n.length;if(t===0){return[]}else if(t===1){return[[0]]}var e=n[0].length;if(e===0){return[]}else if(e===1){return l(n)}else if(e===2){return i(n)}return r(n,e)}},{"./lib/ch1d":38,"./lib/ch2d":39,"./lib/chnd":40}],38:[function(n,t,e){"use strict";t.exports=l;function l(n){var t=0;var e=0;for(var l=1;l<n.length;++l){if(n[l][0]<n[t][0]){t=l}if(n[l][0]>n[e][0]){e=l}}if(t<e){return[[t],[e]]}else if(t>e){return[[e],[t]]}else{return[[t]]}}},{}],39:[function(n,t,e){"use strict";t.exports=i;var l=n("monotone-convex-hull-2d");function i(n){var t=l(n);var e=t.length;if(e<=2){return[]}var i=new Array(e);var r=t[e-1];for(var u=0;u<e;++u){var s=t[u];i[u]=[r,s];r=s}return i}},{"monotone-convex-hull-2d":45}],40:[function(n,t,e){"use strict";t.exports=s;var l=n("incremental-convex-hull");var i=n("affine-hull");function r(n,t){var e=n.length;var l=new Array(e);for(var i=0;i<t.length;++i){l[i]=n[t[i]]}var r=t.length;for(var i=0;i<e;++i){if(t.indexOf(i)<0){l[r++]=n[i]}}return l}function u(n,t){var e=n.length;var l=t.length;for(var i=0;i<e;++i){var r=n[i];for(var u=0;u<r.length;++u){var s=r[u];if(s<l){r[u]=t[s]}else{s=s-l;for(var a=0;a<l;++a){if(s>=t[a]){s+=1}}r[u]=s}}}return n}function s(n,t){try{return l(n,true)}catch(o){var e=i(n);if(e.length<=t){return[]}var s=r(n,e);var a=l(s,true);return u(a,e)}}},{"affine-hull":35,"incremental-convex-hull":42}],41:[function(n,t,e){var l=n("@turf/bbox");var i=n("@turf/helpers").featureCollection;var r=n("@turf/meta").featureEach;var u=n("rbush");t.exports=function(n){var t=u(n);t.insert=function(n){n.bbox=n.bbox?n.bbox:l(n);return u.prototype.insert.call(this,n)};t.load=function(n){var t=[];r(n,function(n){n.bbox=n.bbox?n.bbox:l(n);t.push(n)});return u.prototype.load.call(this,t)};t.remove=function(n){return u.prototype.remove.call(this,n)};t.clear=function(){return u.prototype.clear.call(this)};t.search=function(n){var t=u.prototype.search.call(this,this.toBBox(n));return i(t)};t.collides=function(n){return u.prototype.collides.call(this,this.toBBox(n))};t.all=function(){var n=u.prototype.all.call(this);return i(n)};t.toJSON=function(){return u.prototype.toJSON.call(this)};t.fromJSON=function(n){return u.prototype.fromJSON.call(this,n)};t.toBBox=function(n){var t=n.bbox?n.bbox:l(n);return{minX:t[0],minY:t[1],maxX:t[2],maxY:t[3]}};return t}},{"@turf/bbox":6,"@turf/helpers":14,"@turf/meta":28,rbush:47}],42:[function(n,t,e){"use strict";t.exports=d;var l=n("robust-orientation");var i=n("simplicial-complex").compareCells;function r(n,t){return n-t}function u(n,t,e){this.vertices=n;this.adjacent=t;this.boundary=e;this.lastVisited=-1}u.prototype.flip=function(){var n=this.vertices[0];this.vertices[0]=this.vertices[1];this.vertices[1]=n;var t=this.adjacent[0];this.adjacent[0]=this.adjacent[1];this.adjacent[1]=t};function s(n,t,e){this.vertices=n;this.cell=t;this.index=e}function a(n,t){return i(n.vertices,t.vertices)}function o(n){var t=["function orient(){var tuple=this.tuple;return test("];for(var e=0;e<=n;++e){if(e>0){t.push(",")}t.push("tuple[",e,"]")}t.push(")}return orient");var i=new Function("test",t.join(""));var r=l[n+1];if(!r){r=l}return i(r)}var h=[];function f(n,t,e){this.dimension=n;this.vertices=t;this.simplices=e;this.interior=e.filter(function(n){return!n.boundary});this.tuple=new Array(n+1);for(var l=0;l<=n;++l){this.tuple[l]=this.vertices[l]}var i=h[n];if(!i){i=h[n]=o(n)}this.orient=i}var c=f.prototype;c.handleBoundaryDegeneracy=function(n,t){var e=this.dimension;var l=this.vertices.length-1;var i=this.tuple;var r=this.vertices;var u=[n];n.lastVisited=-l;while(u.length>0){n=u.pop();var s=n.vertices;var a=n.adjacent;for(var o=0;o<=e;++o){var h=a[o];if(!h.boundary||h.lastVisited<=-l){continue}var f=h.vertices;for(var c=0;c<=e;++c){var d=f[c];if(d<0){i[c]=t}else{i[c]=r[d]}}var g=this.orient();if(g>0){return h}h.lastVisited=-l;if(g===0){u.push(h)}}}return null};c.walk=function(n,t){var e=this.vertices.length-1;var l=this.dimension;var i=this.vertices;var r=this.tuple;var u=t?this.interior.length*Math.random()|0:this.interior.length-1;var s=this.interior[u];n:while(!s.boundary){var a=s.vertices;var o=s.adjacent;for(var h=0;h<=l;++h){r[h]=i[a[h]]}s.lastVisited=e;for(var h=0;h<=l;++h){var f=o[h];if(f.lastVisited>=e){continue}var c=r[h];r[h]=n;var d=this.orient();r[h]=c;if(d<0){s=f;continue n}else{if(!f.boundary){f.lastVisited=e}else{f.lastVisited=-e}}}return}return s};c.addPeaks=function(n,t){var e=this.vertices.length-1;var l=this.dimension;var i=this.vertices;var r=this.tuple;var o=this.interior;var h=this.simplices;var f=[t];t.lastVisited=e;t.vertices[t.vertices.indexOf(-1)]=e;t.boundary=false;o.push(t);var c=[];while(f.length>0){var t=f.pop();var d=t.vertices;var g=t.adjacent;var p=d.indexOf(e);if(p<0){continue}for(var v=0;v<=l;++v){if(v===p){continue}var m=g[v];if(!m.boundary||m.lastVisited>=e){continue}var y=m.vertices;if(m.lastVisited!==-e){var x=0;for(var w=0;w<=l;++w){if(y[w]<0){x=w;r[w]=n}else{r[w]=i[y[w]]}}var _=this.orient();if(_>0){y[x]=e;m.boundary=false;o.push(m);f.push(m);m.lastVisited=e;continue}else{m.lastVisited=-e}}var M=m.adjacent;var E=d.slice();var b=g.slice();var C=new u(E,b,true);h.push(C);var I=M.indexOf(t);if(I<0){continue}M[I]=C;b[p]=m;E[v]=-1;b[v]=t;g[v]=C;C.flip();for(var w=0;w<=l;++w){var S=E[w];if(S<0||S===e){continue}var N=new Array(l-1);var P=0;for(var L=0;L<=l;++L){var R=E[L];if(R<0||L===w){continue}N[P++]=R}c.push(new s(N,C,w))}}}c.sort(a);for(var v=0;v+1<c.length;v+=2){var T=c[v];var O=c[v+1];var A=T.index;var k=O.index;if(A<0||k<0){continue}T.cell.adjacent[T.index]=O.cell;O.cell.adjacent[O.index]=T.cell}};c.insert=function(n,t){var e=this.vertices;e.push(n);var l=this.walk(n,t);if(!l){return}var i=this.dimension;var r=this.tuple;for(var u=0;u<=i;++u){var s=l.vertices[u];if(s<0){r[u]=n}else{r[u]=e[s]}}var a=this.orient(r);if(a<0){return}else if(a===0){l=this.handleBoundaryDegeneracy(l,n);if(!l){return}}this.addPeaks(n,l)};c.boundary=function(){var n=this.dimension;var t=[];var e=this.simplices;var l=e.length;for(var i=0;i<l;++i){var r=e[i];if(r.boundary){var u=new Array(n);var s=r.vertices;var a=0;var o=0;for(var h=0;h<=n;++h){if(s[h]>=0){u[a++]=s[h]}else{o=h&1}}if(o===(n&1)){var f=u[0];u[0]=u[1];u[1]=f}t.push(u)}}return t};function d(n,t){var e=n.length;if(e===0){throw new Error("Must have at least d+1 points")}var i=n[0].length;if(e<=i){throw new Error("Must input at least d+1 points")}var r=n.slice(0,i+1);var s=l.apply(void 0,r);if(s===0){throw new Error("Input not in general position")}var a=new Array(i+1);for(var o=0;o<=i;++o){a[o]=o}if(s<0){a[0]=1;a[1]=0}var h=new u(a,new Array(i+1),false);var c=h.adjacent;var d=new Array(i+2);for(var o=0;o<=i;++o){var g=a.slice();for(var p=0;p<=i;++p){if(p===o){g[p]=-1}}var v=g[0];g[0]=g[1];g[1]=v;var m=new u(g,new Array(i+1),true);c[o]=m;d[o]=m}d[i+1]=h;for(var o=0;o<=i;++o){var g=c[o].vertices;var y=c[o].adjacent;for(var p=0;p<=i;++p){var x=g[p];if(x<0){y[p]=h;continue}for(var w=0;w<=i;++w){if(c[w].vertices.indexOf(x)<0){y[p]=c[w]}}}}var _=new f(i,r,d);var M=!!t;for(var o=i+1;o<e;++o){_.insert(n[o],M)}return _.boundary()}},{"robust-orientation":48,"simplicial-complex":52}],43:[function(t,e,l){!function(t,i){"object"==typeof l&&"undefined"!=typeof e?i(l):"function"==typeof n&&n.amd?n(["exports"],i):i(t.jsts=t.jsts||{})}(this,function(n){"use strict";function t(n,t){for(var e in t)t.hasOwnProperty(e)&&(n[e]=t[e])}function e(){}function l(){}function i(){}function r(){}function u(){}function s(){}function a(){}function o(n){this.name="RuntimeException",this.message=n,this.stack=(new Error).stack,Error.call(this,n)}function h(n,t){n.prototype=Object.create(t.prototype),n.prototype.constructor=n}function f(){if(0===arguments.length)o.call(this);else if(1===arguments.length){var n=arguments[0];o.call(this,n)}}function c(){}function d(){if(this.x=null,this.y=null,this.z=null,0===arguments.length)d.call(this,0,0);else if(1===arguments.length){var n=arguments[0];d.call(this,n.x,n.y,n.z)}else if(2===arguments.length){var t=arguments[0],e=arguments[1];d.call(this,t,e,d.NULL_ORDINATE)}else if(3===arguments.length){var l=arguments[0],i=arguments[1],r=arguments[2];this.x=l,this.y=i,this.z=r}}function g(){if(this.dimensionsToTest=2,0===arguments.length)g.call(this,2);else if(1===arguments.length){var n=arguments[0];if(2!==n&&3!==n)throw new l("only 2 or 3 dimensions may be specified");this.dimensionsToTest=n}}function p(){}function v(){}function m(n){this.message=n||""}function y(){}function x(n){this.message=n||""}function w(n){this.message=n||""}function _(){this.array_=[],arguments[0]instanceof v&&this.addAll(arguments[0])}function M(){if(_.apply(this),0===arguments.length);else if(1===arguments.length){var n=arguments[0];this.ensureCapacity(n.length),this.add(n,!0)}else if(2===arguments.length){var t=arguments[0],e=arguments[1];this.ensureCapacity(t.length),this.add(t,e)}}function E(){if(this.minx=null,this.maxx=null,this.miny=null,this.maxy=null,0===arguments.length)this.init();else if(1===arguments.length){if(arguments[0]instanceof d){var n=arguments[0];this.init(n.x,n.x,n.y,n.y)}else if(arguments[0]instanceof E){var t=arguments[0];this.init(t)}}else if(2===arguments.length){var e=arguments[0],l=arguments[1];this.init(e.x,l.x,e.y,l.y)}else if(4===arguments.length){var i=arguments[0],r=arguments[1],u=arguments[2],s=arguments[3];this.init(i,r,u,s)}}function b(){}function C(){b.call(this,"Projective point not representable on the Cartesian plane.")}function I(){}function S(n,t){return n.interfaces_&&n.interfaces_().indexOf(t)>-1}function N(){}function P(n){this.str=n}function L(n){this.value=n}function R(){}function T(){if(this.hi=0,this.lo=0,0===arguments.length)this.init(0);else if(1===arguments.length){if("number"==typeof arguments[0]){var n=arguments[0];this.init(n)}else if(arguments[0]instanceof T){var t=arguments[0];this.init(t)}else if("string"==typeof arguments[0]){var e=arguments[0];T.call(this,T.parse(e))}}else if(2===arguments.length){var l=arguments[0],i=arguments[1];this.init(l,i)}}function O(){}function A(){}function k(){}function D(){if(this.x=null,this.y=null,this.w=null,0===arguments.length)this.x=0,this.y=0,this.w=1;else if(1===arguments.length){var n=arguments[0];this.x=n.x,this.y=n.y,this.w=1}else if(2===arguments.length){if("number"==typeof arguments[0]&&"number"==typeof arguments[1]){var t=arguments[0],e=arguments[1];this.x=t,this.y=e,this.w=1}else if(arguments[0]instanceof D&&arguments[1]instanceof D){var l=arguments[0],i=arguments[1];this.x=l.y*i.w-i.y*l.w,this.y=i.x*l.w-l.x*i.w,this.w=l.x*i.y-i.x*l.y}else if(arguments[0]instanceof d&&arguments[1]instanceof d){var r=arguments[0],u=arguments[1];this.x=r.y-u.y,this.y=u.x-r.x,this.w=r.x*u.y-u.x*r.y}}else if(3===arguments.length){var s=arguments[0],a=arguments[1],o=arguments[2];this.x=s,this.y=a,this.w=o}else if(4===arguments.length){var h=arguments[0],f=arguments[1],c=arguments[2],g=arguments[3],p=h.y-f.y,v=f.x-h.x,m=h.x*f.y-f.x*h.y,y=c.y-g.y,x=g.x-c.x,w=c.x*g.y-g.x*c.y;this.x=v*w-x*m,this.y=y*m-p*w,this.w=p*x-y*v}}function F(){}function B(){}function G(){this.envelope=null,this.factory=null,this.SRID=null,this.userData=null;var n=arguments[0];this.factory=n,this.SRID=n.getSRID()}function z(){}function q(){}function j(){}function U(){}function V(){}function Y(){}function X(){}function H(){}function W(){}function Z(){}function J(){}function K(){}function Q(){this.array_=[],arguments[0]instanceof v&&this.addAll(arguments[0])}function $(n){return null==n?nu:n.color}function nn(n){return null==n?null:n.parent}function tn(n,t){null!==n&&(n.color=t)}function en(n){return null==n?null:n.left}function ln(n){return null==n?null:n.right}function rn(){this.root_=null,this.size_=0}function un(){}function sn(){}function an(){this.array_=[],arguments[0]instanceof v&&this.addAll(arguments[0])}function on(){}function hn(){}function fn(){}function cn(){}function dn(){this.geometries=null;var n=arguments[0],t=arguments[1];if(G.call(this,t),null===n&&(n=[]),G.hasNullElements(n))throw new l("geometries must not contain null elements");this.geometries=n}function gn(){var n=arguments[0],t=arguments[1];dn.call(this,n,t)}function pn(){if(this.geom=null,this.geomFact=null,this.bnRule=null,this.endpointMap=null,1===arguments.length){var n=arguments[0];pn.call(this,n,q.MOD2_BOUNDARY_RULE)}else if(2===arguments.length){var t=arguments[0],e=arguments[1];this.geom=t,this.geomFact=t.getFactory(),this.bnRule=e}}function vn(){this.count=null}function mn(){}function yn(){}function xn(){}function wn(){}function _n(){}function Mn(){}function En(){}function bn(){}function Cn(){this.points=null;var n=arguments[0],t=arguments[1];G.call(this,t),this.init(n)}function In(){}function Sn(){this.coordinates=null;var n=arguments[0],t=arguments[1];G.call(this,t),this.init(n)}function Nn(){}function Pn(){this.shell=null,this.holes=null;var n=arguments[0],t=arguments[1],e=arguments[2];if(G.call(this,e),null===n&&(n=this.getFactory().createLinearRing()),null===t&&(t=[]),G.hasNullElements(t))throw new l("holes must not contain null elements");if(n.isEmpty()&&G.hasNonEmptyElements(t))throw new l("shell is empty but holes are not");this.shell=n,this.holes=t}function Ln(){var n=arguments[0],t=arguments[1];dn.call(this,n,t)}function Rn(){if(arguments[0]instanceof d&&arguments[1]instanceof it){var n=arguments[0],t=arguments[1];Rn.call(this,t.getCoordinateSequenceFactory().create(n),t)}else if(S(arguments[0],A)&&arguments[1]instanceof it){var e=arguments[0],l=arguments[1];Cn.call(this,e,l),this.validateConstruction()}}function Tn(){var n=arguments[0],t=arguments[1];dn.call(this,n,t)}function On(){if(this.factory=null,this.isUserDataCopied=!1,0===arguments.length);else if(1===arguments.length){var n=arguments[0];this.factory=n}}function An(){}function kn(){}function Dn(){}function Fn(){}function Bn(){if(this.dimension=3,this.coordinates=null,1===arguments.length){if(arguments[0]instanceof Array){var n=arguments[0];Bn.call(this,n,3)}else if(Number.isInteger(arguments[0])){var t=arguments[0];this.coordinates=new Array(t).fill(null);for(var e=0;e<t;e++)this.coordinates[e]=new d}else if(S(arguments[0],A)){var l=arguments[0];if(null===l)return this.coordinates=new Array(0).fill(null),null;this.dimension=l.getDimension(),this.coordinates=new Array(l.size()).fill(null);for(var e=0;e<this.coordinates.length;e++)this.coordinates[e]=l.getCoordinateCopy(e)}}else if(2===arguments.length)if(arguments[0]instanceof Array&&Number.isInteger(arguments[1])){var i=arguments[0],r=arguments[1];this.coordinates=i,this.dimension=r,null===i&&(this.coordinates=new Array(0).fill(null))}else if(Number.isInteger(arguments[0])&&Number.isInteger(arguments[1])){var u=arguments[0],s=arguments[1];this.coordinates=new Array(u).fill(null),this.dimension=s;for(var e=0;e<u;e++)this.coordinates[e]=new d}}function Gn(){}function zn(n,t){return n===t||n!==n&&t!==t}function qn(n,t){function e(n){return this&&this.constructor===e?(this._keys=[],this._values=[],this._itp=[],this.objectOnly=t,void(n&&jn.call(this,n))):new e(n)}return t||iu(n,"size",{get:$n}),n.constructor=e,e.prototype=n,e}function jn(n){this.add?n.forEach(this.add,this):n.forEach(function(n){this.set(n[0],n[1])},this)}function Un(n){return this.has(n)&&(this._keys.splice(lu,1),this._values.splice(lu,1),this._itp.forEach(function(n){lu<n[0]&&n[0]--})),lu>-1}function Vn(n){return this.has(n)?this._values[lu]:void 0}function Yn(n,t){if(this.objectOnly&&t!==Object(t))throw new TypeError("Invalid value used as weak collection key");if(t!==t||0===t)for(lu=n.length;lu--&&!zn(n[lu],t););else lu=n.indexOf(t);return lu>-1}function Xn(n){return Yn.call(this,this._keys,n)}function Hn(n,t){return this.has(n)?this._values[lu]=t:this._values[this._keys.push(n)-1]=t,this}function Wn(){(this._keys||0).length=this._values.length=0}function Zn(){return Qn(this._itp,this._keys)}function Jn(){return Qn(this._itp,this._values)}function Kn(){return Qn(this._itp,this._keys,this._values)}function Qn(n,t,e){var l=[0],i=!1;return n.push(l),{next:function(){var r,u=l[0];return!i&&u<t.length?(r=e?[t[u],e[u]]:t[u],l[0]++):(i=!0,n.splice(n.indexOf(l),1)),{done:i,value:r}}}}function $n(){return this._values.length}function nt(n,t){for(var e=this.entries();;){var l=e.next();if(l.done)break;n.call(t,l.value[1],l.value[0],this)}}function tt(){this.map_=new uu}function et(){if(this.modelType=null,this.scale=null,0===arguments.length)this.modelType=et.FLOATING;else if(1===arguments.length)if(arguments[0]instanceof lt){var n=arguments[0];this.modelType=n,n===et.FIXED&&this.setScale(1)}else if("number"==typeof arguments[0]){var t=arguments[0];this.modelType=et.FIXED,this.setScale(t)}else if(arguments[0]instanceof et){var e=arguments[0];this.modelType=e.modelType,this.scale=e.scale}}function lt(){this.name=null;var n=arguments[0];this.name=n,lt.nameToTypeMap.put(n,this)}function it(){if(this.precisionModel=null,this.coordinateSequenceFactory=null,this.SRID=null,
0===arguments.length)it.call(this,new et,0);else if(1===arguments.length){if(S(arguments[0],F)){var n=arguments[0];it.call(this,new et,0,n)}else if(arguments[0]instanceof et){var t=arguments[0];it.call(this,t,0,it.getDefaultCoordinateSequenceFactory())}}else if(2===arguments.length){var e=arguments[0],l=arguments[1];it.call(this,e,l,it.getDefaultCoordinateSequenceFactory())}else if(3===arguments.length){var i=arguments[0],r=arguments[1],u=arguments[2];this.precisionModel=i,this.coordinateSequenceFactory=u,this.SRID=r}}function rt(n){this.geometryFactory=n||new it}function ut(n){this.parser=new rt(n)}function st(){this.result=null,this.inputLines=Array(2).fill().map(function(){return Array(2)}),this.intPt=new Array(2).fill(null),this.intLineIndex=null,this._isProper=null,this.pa=null,this.pb=null,this.precisionModel=null,this.intPt[0]=new d,this.intPt[1]=new d,this.pa=this.intPt[0],this.pb=this.intPt[1],this.result=0}function at(){st.apply(this)}function ot(){}function ht(){this.p=null,this.crossingCount=0,this.isPointOnSegment=!1;var n=arguments[0];this.p=n}function ft(){}function ct(){if(this.p0=null,this.p1=null,0===arguments.length)ct.call(this,new d,new d);else if(1===arguments.length){var n=arguments[0];ct.call(this,n.p0,n.p1)}else if(2===arguments.length){var t=arguments[0],e=arguments[1];this.p0=t,this.p1=e}else if(4===arguments.length){var l=arguments[0],i=arguments[1],r=arguments[2],u=arguments[3];ct.call(this,new d(l,i),new d(r,u))}}function dt(){if(this.matrix=null,0===arguments.length)this.matrix=Array(3).fill().map(function(){return Array(3)}),this.setAll(hn.FALSE);else if(1===arguments.length)if("string"==typeof arguments[0]){var n=arguments[0];dt.call(this),this.set(n)}else if(arguments[0]instanceof dt){var t=arguments[0];dt.call(this),this.matrix[I.INTERIOR][I.INTERIOR]=t.matrix[I.INTERIOR][I.INTERIOR],this.matrix[I.INTERIOR][I.BOUNDARY]=t.matrix[I.INTERIOR][I.BOUNDARY],this.matrix[I.INTERIOR][I.EXTERIOR]=t.matrix[I.INTERIOR][I.EXTERIOR],this.matrix[I.BOUNDARY][I.INTERIOR]=t.matrix[I.BOUNDARY][I.INTERIOR],this.matrix[I.BOUNDARY][I.BOUNDARY]=t.matrix[I.BOUNDARY][I.BOUNDARY],this.matrix[I.BOUNDARY][I.EXTERIOR]=t.matrix[I.BOUNDARY][I.EXTERIOR],this.matrix[I.EXTERIOR][I.INTERIOR]=t.matrix[I.EXTERIOR][I.INTERIOR],this.matrix[I.EXTERIOR][I.BOUNDARY]=t.matrix[I.EXTERIOR][I.BOUNDARY],this.matrix[I.EXTERIOR][I.EXTERIOR]=t.matrix[I.EXTERIOR][I.EXTERIOR]}}function gt(){this.areaBasePt=null,this.triangleCent3=new d,this.areasum2=0,this.cg3=new d,this.lineCentSum=new d,this.totalLength=0,this.ptCount=0,this.ptCentSum=new d;var n=arguments[0];this.areaBasePt=null,this.add(n)}function pt(n){this.message=n||""}function vt(){this.array_=[]}function mt(){this.treeSet=new an,this.list=new _}function yt(){if(this.geomFactory=null,this.inputPts=null,1===arguments.length){var n=arguments[0];yt.call(this,yt.extractCoordinates(n),n.getFactory())}else if(2===arguments.length){var t=arguments[0],e=arguments[1];this.inputPts=mt.filterCoordinates(t),this.geomFactory=e}}function xt(){this.origin=null;var n=arguments[0];this.origin=n}function wt(){this.inputGeom=null,this.factory=null,this.pruneEmptyGeometry=!0,this.preserveGeometryCollectionType=!0,this.preserveCollections=!1,this.preserveType=!1}function _t(){if(this.snapTolerance=0,this.srcPts=null,this.seg=new ct,this.allowSnappingToSourceVertices=!1,this._isClosed=!1,arguments[0]instanceof Cn&&"number"==typeof arguments[1]){var n=arguments[0],t=arguments[1];_t.call(this,n.getCoordinates(),t)}else if(arguments[0]instanceof Array&&"number"==typeof arguments[1]){var e=arguments[0],l=arguments[1];this.srcPts=e,this._isClosed=_t.isClosed(e),this.snapTolerance=l}}function Mt(){this.srcGeom=null;var n=arguments[0];this.srcGeom=n}function Et(){if(wt.apply(this),this.snapTolerance=null,this.snapPts=null,this.isSelfSnap=!1,2===arguments.length){var n=arguments[0],t=arguments[1];this.snapTolerance=n,this.snapPts=t}else if(3===arguments.length){var e=arguments[0],l=arguments[1],i=arguments[2];this.snapTolerance=e,this.snapPts=l,this.isSelfSnap=i}}function bt(){this.isFirst=!0,this.commonMantissaBitsCount=53,this.commonBits=0,this.commonSignExp=null}function Ct(){this.commonCoord=null,this.ccFilter=new It}function It(){this.commonBitsX=new bt,this.commonBitsY=new bt}function St(){this.trans=null;var n=arguments[0];this.trans=n}function Nt(){this.parent=null,this.atStart=null,this.max=null,this.index=null,this.subcollectionIterator=null;var n=arguments[0];this.parent=n,this.atStart=!0,this.index=0,this.max=n.getNumGeometries()}function Pt(){if(this.boundaryRule=q.OGC_SFS_BOUNDARY_RULE,this.isIn=null,this.numBoundaries=null,0===arguments.length);else if(1===arguments.length){var n=arguments[0];if(null===n)throw new l("Rule must be non-null");this.boundaryRule=n}}function Lt(){}function Rt(){}function Tt(){this.pts=null,this.data=null;var n=arguments[0],t=arguments[1];this.pts=n,this.data=t}function Ot(){}function At(){this.bounds=null,this.item=null;var n=arguments[0],t=arguments[1];this.bounds=n,this.item=t}function kt(){this._size=null,this.items=null,this._size=0,this.items=new _,this.items.add(null)}function Dt(){}function Ft(){}function Bt(){if(this.childBoundables=new _,this.bounds=null,this.level=null,0===arguments.length);else if(1===arguments.length){var n=arguments[0];this.level=n}}function Gt(){this.boundable1=null,this.boundable2=null,this._distance=null,this.itemDistance=null;var n=arguments[0],t=arguments[1],e=arguments[2];this.boundable1=n,this.boundable2=t,this.itemDistance=e,this._distance=this.distance()}function zt(){if(this.root=null,this.built=!1,this.itemBoundables=new _,this.nodeCapacity=null,0===arguments.length)zt.call(this,zt.DEFAULT_NODE_CAPACITY);else if(1===arguments.length){var n=arguments[0];c.isTrue(n>1,"Node capacity must be greater than 1"),this.nodeCapacity=n}}function qt(){}function jt(){}function Ut(){if(0===arguments.length)Ut.call(this,Ut.DEFAULT_NODE_CAPACITY);else if(1===arguments.length){var n=arguments[0];zt.call(this,n)}}function Vt(){var n=arguments[0];Bt.call(this,n)}function Yt(){}function Xt(){this.segString=null,this.coord=null,this.segmentIndex=null,this.segmentOctant=null,this._isInterior=null;var n=arguments[0],t=arguments[1],e=arguments[2],l=arguments[3];this.segString=n,this.coord=new d(t),this.segmentIndex=e,this.segmentOctant=l,this._isInterior=!t.equals2D(n.getCoordinate(e))}function Ht(){this.nodeMap=new rn,this.edge=null;var n=arguments[0];this.edge=n}function Wt(){this.nodeList=null,this.edge=null,this.nodeIt=null,this.currNode=null,this.nextNode=null,this.currSegIndex=0;var n=arguments[0];this.nodeList=n,this.edge=n.getEdge(),this.nodeIt=n.iterator(),this.readNextNode()}function Zt(){}function Jt(){this.nodeList=new Ht(this),this.pts=null,this.data=null;var n=arguments[0],t=arguments[1];this.pts=n,this.data=t}function Kt(){this.tempEnv1=new E,this.tempEnv2=new E,this.overlapSeg1=new ct,this.overlapSeg2=new ct}function Qt(){this.pts=null,this.start=null,this.end=null,this.env=null,this.context=null,this.id=null;var n=arguments[0],t=arguments[1],e=arguments[2],l=arguments[3];this.pts=n,this.start=t,this.end=e,this.context=l}function $t(){}function ne(){}function te(){}function ee(){if(this.segInt=null,0===arguments.length);else if(1===arguments.length){var n=arguments[0];this.setSegmentIntersector(n)}}function le(){if(this.monoChains=new _,this.index=new Ut,this.idCounter=0,this.nodedSegStrings=null,this.nOverlaps=0,0===arguments.length);else if(1===arguments.length){var n=arguments[0];ee.call(this,n)}}function ie(){Kt.apply(this),this.si=null;var n=arguments[0];this.si=n}function re(){if(this.pt=null,1===arguments.length){var n=arguments[0];o.call(this,n)}else if(2===arguments.length){var t=arguments[0],e=arguments[1];o.call(this,re.msgWithCoord(t,e)),this.name="TopologyException",this.pt=new d(e)}}function ue(){}function se(){this.findAllIntersections=!1,this.isCheckEndSegmentsOnly=!1,this.li=null,this.interiorIntersection=null,this.intSegments=null,this.intersections=new _,this.intersectionCount=0,this.keepIntersections=!0;var n=arguments[0];this.li=n,this.interiorIntersection=null}function ae(){this.li=new at,this.segStrings=null,this.findAllIntersections=!1,this.segInt=null,this._isValid=!0;var n=arguments[0];this.segStrings=n}function oe(){this.nv=null;var n=arguments[0];this.nv=new ae(oe.toSegmentStrings(n))}function he(){this.mapOp=null;var n=arguments[0];this.mapOp=n}function fe(){}function ce(){if(this.location=null,1===arguments.length){if(arguments[0]instanceof Array){var n=arguments[0];this.init(n.length)}else if(Number.isInteger(arguments[0])){var t=arguments[0];this.init(1),this.location[fe.ON]=t}else if(arguments[0]instanceof ce){var e=arguments[0];if(this.init(e.location.length),null!==e)for(var l=0;l<this.location.length;l++)this.location[l]=e.location[l]}}else if(3===arguments.length){var i=arguments[0],r=arguments[1],u=arguments[2];this.init(3),this.location[fe.ON]=i,this.location[fe.LEFT]=r,this.location[fe.RIGHT]=u}}function de(){if(this.elt=new Array(2).fill(null),1===arguments.length){if(Number.isInteger(arguments[0])){var n=arguments[0];this.elt[0]=new ce(n),this.elt[1]=new ce(n)}else if(arguments[0]instanceof de){var t=arguments[0];this.elt[0]=new ce(t.elt[0]),this.elt[1]=new ce(t.elt[1])}}else if(2===arguments.length){var e=arguments[0],l=arguments[1];this.elt[0]=new ce(I.NONE),this.elt[1]=new ce(I.NONE),this.elt[e].setLocation(l)}else if(3===arguments.length){var i=arguments[0],r=arguments[1],u=arguments[2];this.elt[0]=new ce(i,r,u),this.elt[1]=new ce(i,r,u)}else if(4===arguments.length){var s=arguments[0],a=arguments[1],o=arguments[2],h=arguments[3];this.elt[0]=new ce(I.NONE,I.NONE,I.NONE),this.elt[1]=new ce(I.NONE,I.NONE,I.NONE),this.elt[s].setLocations(a,o,h)}}function ge(){this.startDe=null,this.maxNodeDegree=-1,this.edges=new _,this.pts=new _,this.label=new de(I.NONE),this.ring=null,this._isHole=null,this.shell=null,this.holes=new _,this.geometryFactory=null;var n=arguments[0],t=arguments[1];this.geometryFactory=t,this.computePoints(n),this.computeRing()}function pe(){var n=arguments[0],t=arguments[1];ge.call(this,n,t)}function ve(){var n=arguments[0],t=arguments[1];ge.call(this,n,t)}function me(){if(this.label=null,this._isInResult=!1,this._isCovered=!1,this._isCoveredSet=!1,this._isVisited=!1,0===arguments.length);else if(1===arguments.length){var n=arguments[0];this.label=n}}function ye(){me.apply(this),this.coord=null,this.edges=null;var n=arguments[0],t=arguments[1];this.coord=n,this.edges=t,this.label=new de(0,I.NONE)}function xe(){this.nodeMap=new rn,this.nodeFact=null;var n=arguments[0];this.nodeFact=n}function we(){if(this.edge=null,this.label=null,this.node=null,this.p0=null,this.p1=null,this.dx=null,this.dy=null,this.quadrant=null,1===arguments.length){var n=arguments[0];this.edge=n}else if(3===arguments.length){var t=arguments[0],e=arguments[1],l=arguments[2];we.call(this,t,e,l,null)}else if(4===arguments.length){var i=arguments[0],r=arguments[1],u=arguments[2],s=arguments[3];we.call(this,i),this.init(r,u),this.label=s}}function _e(){this._isForward=null,this._isInResult=!1,this._isVisited=!1,this.sym=null,this.next=null,this.nextMin=null,this.edgeRing=null,this.minEdgeRing=null,this.depth=[0,-999,-999];var n=arguments[0],t=arguments[1];if(we.call(this,n),this._isForward=t,t)this.init(n.getCoordinate(0),n.getCoordinate(1));else{var e=n.getNumPoints()-1;this.init(n.getCoordinate(e),n.getCoordinate(e-1))}this.computeDirectedLabel()}function Me(){}function Ee(){if(this.edges=new _,this.nodes=null,this.edgeEndList=new _,0===arguments.length)this.nodes=new xe(new Me);else if(1===arguments.length){var n=arguments[0];this.nodes=new xe(n)}}function be(){this.geometryFactory=null,this.shellList=new _;var n=arguments[0];this.geometryFactory=n}function Ce(){this.op=null,this.geometryFactory=null,this.ptLocator=null,this.lineEdgesList=new _,this.resultLineList=new _;var n=arguments[0],t=arguments[1],e=arguments[2];this.op=n,this.geometryFactory=t,this.ptLocator=e}function Ie(){this.op=null,this.geometryFactory=null,this.resultPointList=new _;var n=arguments[0],t=arguments[1];arguments[2];this.op=n,this.geometryFactory=t}function Se(){}function Ne(){this.geom=null;var n=arguments[0];this.geom=n}function Pe(){this.edgeMap=new rn,this.edgeList=null,this.ptInAreaLocation=[I.NONE,I.NONE]}function Le(){Pe.apply(this),this.resultAreaEdgeList=null,this.label=null,this.SCANNING_FOR_INCOMING=1,this.LINKING_TO_OUTGOING=2}function Re(){Me.apply(this)}function Te(){this.mce=null,this.chainIndex=null;var n=arguments[0],t=arguments[1];this.mce=n,this.chainIndex=t}function Oe(){if(this.label=null,this.xValue=null,this.eventType=null,this.insertEvent=null,this.deleteEventIndex=null,this.obj=null,2===arguments.length){var n=arguments[0],t=arguments[1];this.eventType=Oe.DELETE,this.xValue=n,this.insertEvent=t}else if(3===arguments.length){var e=arguments[0],l=arguments[1],i=arguments[2];this.eventType=Oe.INSERT,this.label=e,this.xValue=l,this.obj=i}}function Ae(){}function ke(){this._hasIntersection=!1,this.hasProper=!1,this.hasProperInterior=!1,this.properIntersectionPoint=null,this.li=null,this.includeProper=null,this.recordIsolated=null,this.isSelfIntersection=null,this.numIntersections=0,this.numTests=0,this.bdyNodes=null,this._isDone=!1,this.isDoneWhenProperInt=!1;var n=arguments[0],t=arguments[1],e=arguments[2];this.li=n,this.includeProper=t,this.recordIsolated=e}function De(){Ae.apply(this),this.events=new _,this.nOverlaps=null}function Fe(){this.min=i.POSITIVE_INFINITY,this.max=i.NEGATIVE_INFINITY}function Be(){}function Ge(){Fe.apply(this),this.item=null;var n=arguments[0],t=arguments[1],e=arguments[2];this.min=n,this.max=t,this.item=e}function ze(){Fe.apply(this),this.node1=null,this.node2=null;var n=arguments[0],t=arguments[1];this.node1=n,this.node2=t,this.buildExtent(this.node1,this.node2)}function qe(){this.leaves=new _,this.root=null,this.level=0}function je(){if(this.lines=null,this.isForcedToLineString=!1,1===arguments.length){var n=arguments[0];this.lines=n}else if(2===arguments.length){var t=arguments[0],e=arguments[1];this.lines=t,this.isForcedToLineString=e}}function Ue(){this.items=new _}function Ve(){this.index=null;var n=arguments[0];if(!S(n,Nn))throw new l("Argument must be Polygonal");this.index=new Xe(n)}function Ye(){this.counter=null;var n=arguments[0];this.counter=n}function Xe(){this.index=new qe;var n=arguments[0];this.init(n)}function He(){this.coord=null,this.segmentIndex=null,this.dist=null;var n=arguments[0],t=arguments[1],e=arguments[2];this.coord=new d(n),this.segmentIndex=t,this.dist=e}function We(){this.nodeMap=new rn,this.edge=null;var n=arguments[0];this.edge=n}function Ze(){}function Je(){this.e=null,this.pts=null,this.startIndex=null,this.env1=new E,this.env2=new E;var n=arguments[0];this.e=n,this.pts=n.getCoordinates();var t=new Ze;this.startIndex=t.getChainStartIndices(this.pts)}function Ke(){this.depth=Array(2).fill().map(function(){return Array(3)});for(var n=0;n<2;n++)for(var t=0;t<3;t++)this.depth[n][t]=Ke.NULL_VALUE}function Qe(){if(me.apply(this),this.pts=null,this.env=null,this.eiList=new We(this),this.name=null,this.mce=null,this._isIsolated=!0,this.depth=new Ke,this.depthDelta=0,1===arguments.length){var n=arguments[0];Qe.call(this,n,null)}else if(2===arguments.length){var t=arguments[0],e=arguments[1];this.pts=t,this.label=e}}function $e(){if(Ee.apply(this),this.parentGeom=null,this.lineEdgeMap=new tt,this.boundaryNodeRule=null,this.useBoundaryDeterminationRule=!0,this.argIndex=null,this.boundaryNodes=null,this._hasTooFewPoints=!1,this.invalidPoint=null,this.areaPtLocator=null,this.ptLocator=new Pt,2===arguments.length){var n=arguments[0],t=arguments[1];$e.call(this,n,t,q.OGC_SFS_BOUNDARY_RULE)}else if(3===arguments.length){var e=arguments[0],l=arguments[1],i=arguments[2];this.argIndex=e,this.parentGeom=l,this.boundaryNodeRule=i,null!==l&&this.add(l)}}function nl(){if(this.li=new at,this.resultPrecisionModel=null,this.arg=null,1===arguments.length){var n=arguments[0];this.setComputationPrecision(n.getPrecisionModel()),this.arg=new Array(1).fill(null),this.arg[0]=new $e(0,n)}else if(2===arguments.length){var t=arguments[0],e=arguments[1];nl.call(this,t,e,q.OGC_SFS_BOUNDARY_RULE)}else if(3===arguments.length){var l=arguments[0],i=arguments[1],r=arguments[2];l.getPrecisionModel().compareTo(i.getPrecisionModel())>=0?this.setComputationPrecision(l.getPrecisionModel()):this.setComputationPrecision(i.getPrecisionModel()),this.arg=new Array(2).fill(null),this.arg[0]=new $e(0,l,r),this.arg[1]=new $e(1,i,r)}}function tl(){this.pts=null,this._orientation=null;var n=arguments[0];this.pts=n,this._orientation=tl.orientation(n)}function el(){this.edges=new _,this.ocaMap=new rn}function ll(){this.ptLocator=new Pt,this.geomFact=null,this.resultGeom=null,this.graph=null,this.edgeList=new el,this.resultPolyList=new _,this.resultLineList=new _,this.resultPointList=new _;var n=arguments[0],t=arguments[1];nl.call(this,n,t),this.graph=new Ee(new Re),this.geomFact=n.getFactory()}function il(){this.geom=new Array(2).fill(null),this.snapTolerance=null,this.cbr=null;var n=arguments[0],t=arguments[1];this.geom[0]=n,this.geom[1]=t,this.computeSnapTolerance()}function rl(){this.geom=new Array(2).fill(null);var n=arguments[0],t=arguments[1];this.geom[0]=n,this.geom[1]=t}function ul(){this.factory=null,this.interiorPoint=null,this.maxWidth=0;var n=arguments[0];this.factory=n.getFactory(),this.add(n)}function sl(){this.poly=null,this.centreY=null,this.hiY=i.MAX_VALUE,this.loY=-i.MAX_VALUE;var n=arguments[0];this.poly=n,this.hiY=n.getEnvelopeInternal().getMaxY(),this.loY=n.getEnvelopeInternal().getMinY(),this.centreY=ul.avg(this.loY,this.hiY)}function al(){this.centroid=null,this.minDistance=i.MAX_VALUE,this.interiorPoint=null;var n=arguments[0];this.centroid=n.getCentroid().getCoordinate(),this.addInterior(n),null===this.interiorPoint&&this.addEndpoints(n)}function hl(){this.centroid=null,this.minDistance=i.MAX_VALUE,this.interiorPoint=null;var n=arguments[0];this.centroid=n.getCentroid().getCoordinate(),this.add(n)}function fl(){this.tempEnv1=new E,this.selectedSegment=new ct}function cl(){this.items=new _,this.subnode=[null,null]}function dl(){if(this.min=null,this.max=null,0===arguments.length)this.min=0,this.max=0;else if(1===arguments.length){var n=arguments[0];this.init(n.min,n.max)}else if(2===arguments.length){var t=arguments[0],e=arguments[1];this.init(t,e)}}function gl(){}function pl(n,t){var e,l,i,r,u={32:{d:127,c:128,b:0,a:0},64:{d:32752,c:0,b:0,a:0}},s={32:8,64:11}[n];if(r||(e=t<0||1/t<0,isFinite(t)||(r=u[n],e&&(r.d+=1<<n/4-1),l=Math.pow(2,s)-1,i=0)),!r){for(l={32:127,64:1023}[n],i=Math.abs(t);i>=2;)l++,i/=2;for(;i<1&&l>0;)l--,i*=2;l<=0&&(i/=2),32===n&&l>254&&(r={d:e?255:127,c:128,b:0,a:0},l=Math.pow(2,s)-1,i=0)}return l}function vl(){this.pt=0,this.level=0,this.interval=null;var n=arguments[0];this.computeKey(n)}function ml(){cl.apply(this),this.interval=null,this.centre=null,this.level=null;var n=arguments[0],t=arguments[1];this.interval=n,this.level=t,this.centre=(n.getMin()+n.getMax())/2}function yl(){}function xl(){cl.apply(this)}function wl(){this.root=null,this.minExtent=1,this.root=new xl}function _l(){}function Ml(){this.ring=null,this.tree=null,this.crossings=0,this.interval=new dl;var n=arguments[0];this.ring=n,this.buildIndex()}function El(){fl.apply(this),this.mcp=null,this.p=null;var n=arguments[0],t=arguments[1];this.mcp=n,this.p=t}function bl(){}function Cl(){this.p0=null,this.p1=null,this.p2=null;var n=arguments[0],t=arguments[1],e=arguments[2];this.p0=n,this.p1=t,this.p2=e}function Il(){this.input=null,this.extremalPts=null,this.centre=null,this.radius=0;var n=arguments[0];this.input=n}function Sl(){if(this.inputGeom=null,this.isConvex=null,this.convexHullPts=null,this.minBaseSeg=new ct,this.minWidthPt=null,this.minPtIndex=null,this.minWidth=0,1===arguments.length){var n=arguments[0];Sl.call(this,n,!1)}else if(2===arguments.length){var t=arguments[0],e=arguments[1];this.inputGeom=t,this.isConvex=e}}function Nl(){this.inputGeom=null,this.distanceTolerance=null;var n=arguments[0];this.inputGeom=n}function Pl(){wt.apply(this),this.distanceTolerance=null;var n=arguments[0];this.distanceTolerance=n}function Ll(){this._orig=null,this._sym=null,this._next=null;var n=arguments[0];this._orig=n}function Rl(){this._isMarked=!1;var n=arguments[0];Ll.call(this,n)}function Tl(){this.vertexMap=new tt}function Ol(){this._isStart=!1;var n=arguments[0];Rl.call(this,n)}function Al(){Tl.apply(this)}function kl(){this.result=null,this.factory=null,this.graph=null,this.lines=new _,this.nodeEdgeStack=new vt,this.ringStartEdge=null,this.graph=new Al}function Dl(){this.items=new _,this.subnode=new Array(4).fill(null)}function Fl(){this.pt=new d,this.level=0,this.env=null;var n=arguments[0];this.computeKey(n)}function Bl(){Dl.apply(this),this.env=null,this.centrex=null,this.centrey=null,this.level=null;var n=arguments[0],t=arguments[1];this.env=n,this.level=t,this.centrex=(n.getMinX()+n.getMaxX())/2,this.centrey=(n.getMinY()+n.getMaxY())/2}function Gl(){Dl.apply(this)}function zl(){this.root=null,this.minExtent=1,this.root=new Gl}function ql(n){this.geometryFactory=n||new it}function jl(n){this.geometryFactory=n||new it,this.precisionModel=this.geometryFactory.getPrecisionModel(),this.parser=new ql(this.geometryFactory)}function Ul(){this.parser=new ql(this.geometryFactory)}function Vl(n){this.geometryFactory=n||new it,this.precisionModel=this.geometryFactory.getPrecisionModel(),this.parser=new rt(this.geometryFactory)}function Yl(n){return[n.x,n.y]}function Xl(n,t){this.geometryFactory=n||new it,this.ol=t||"undefined"!=typeof ol&&ol}function Hl(){if(this.noder=null,this.scaleFactor=null,this.offsetX=null,this.offsetY=null,this.isScaled=!1,2===arguments.length){var n=arguments[0],t=arguments[1];Hl.call(this,n,t,0,0)}else if(4===arguments.length){var e=arguments[0],l=arguments[1];arguments[2],arguments[3];this.noder=e,this.scaleFactor=l,this.isScaled=!this.isIntegerPrecision()}}function Wl(){if(this.inputGeom=null,this.isClosedEndpointsInInterior=!0,this.nonSimpleLocation=null,1===arguments.length){var n=arguments[0];this.inputGeom=n}else if(2===arguments.length){var t=arguments[0],e=arguments[1];this.inputGeom=t,this.isClosedEndpointsInInterior=!e.isInBoundary(2)}}function Zl(){this.pt=null,this.isClosed=null,this.degree=null;var n=arguments[0];this.pt=n,this.isClosed=!1,this.degree=0}function Jl(){if(this.quadrantSegments=Jl.DEFAULT_QUADRANT_SEGMENTS,this.endCapStyle=Jl.CAP_ROUND,this.joinStyle=Jl.JOIN_ROUND,this.mitreLimit=Jl.DEFAULT_MITRE_LIMIT,this._isSingleSided=!1,this.simplifyFactor=Jl.DEFAULT_SIMPLIFY_FACTOR,0===arguments.length);else if(1===arguments.length){var n=arguments[0];this.setQuadrantSegments(n)}else if(2===arguments.length){var t=arguments[0],e=arguments[1];this.setQuadrantSegments(t),this.setEndCapStyle(e)}else if(4===arguments.length){var l=arguments[0],i=arguments[1],r=arguments[2],u=arguments[3];this.setQuadrantSegments(l),this.setEndCapStyle(i),this.setJoinStyle(r),this.setMitreLimit(u)}}function Kl(){this.minIndex=-1,this.minCoord=null,this.minDe=null,this.orientedDe=null}function Ql(){this.array_=[]}function $l(){this.finder=null,this.dirEdgeList=new _,this.nodes=new _,this.rightMostCoord=null,this.env=null,this.finder=new Kl}function ni(){this.inputLine=null,this.distanceTol=null,this.isDeleted=null,this.angleOrientation=ft.COUNTERCLOCKWISE;var n=arguments[0];this.inputLine=n}function ti(){this.ptList=null,this.precisionModel=null,this.minimimVertexDistance=0,this.ptList=new _}function ei(){this.maxCurveSegmentError=0,this.filletAngleQuantum=null,this.closingSegLengthFactor=1,this.segList=null,this.distance=0,this.precisionModel=null,this.bufParams=null,this.li=null,this.s0=null,this.s1=null,this.s2=null,this.seg0=new ct,this.seg1=new ct,this.offset0=new ct,this.offset1=new ct,this.side=0,this._hasNarrowConcaveAngle=!1;var n=arguments[0],t=arguments[1],e=arguments[2];this.precisionModel=n,this.bufParams=t,this.li=new at,this.filletAngleQuantum=Math.PI/2/t.getQuadrantSegments(),t.getQuadrantSegments()>=8&&t.getJoinStyle()===Jl.JOIN_ROUND&&(this.closingSegLengthFactor=ei.MAX_CLOSING_SEG_LEN_FACTOR),this.init(e)}function li(){this.distance=0,this.precisionModel=null,this.bufParams=null;var n=arguments[0],t=arguments[1];this.precisionModel=n,this.bufParams=t}function ii(){this.subgraphs=null,this.seg=new ct,this.cga=new ft;var n=arguments[0];this.subgraphs=n}function ri(){this.upwardSeg=null,this.leftDepth=null;var n=arguments[0],t=arguments[1];this.upwardSeg=new ct(n),this.leftDepth=t}function ui(){this.inputGeom=null,this.distance=null,this.curveBuilder=null,this.curveList=new _;var n=arguments[0],t=arguments[1],e=arguments[2];this.inputGeom=n,this.distance=t,this.curveBuilder=e}function si(){this._hasIntersection=!1,this.hasProper=!1,this.hasProperInterior=!1,this.hasInterior=!1,this.properIntersectionPoint=null,this.li=null,this.isSelfIntersection=null,this.numIntersections=0,this.numInteriorIntersections=0,this.numProperIntersections=0,this.numTests=0;var n=arguments[0];this.li=n}function ai(){this.bufParams=null,this.workingPrecisionModel=null,this.workingNoder=null,this.geomFact=null,this.graph=null,this.edgeList=new el;var n=arguments[0];this.bufParams=n}function oi(){this.li=new at,this.segStrings=null;var n=arguments[0];this.segStrings=n}function hi(){this.li=null,this.pt=null,this.originalPt=null,this.ptScaled=null,this.p0Scaled=null,this.p1Scaled=null,this.scaleFactor=null,this.minx=null,this.maxx=null,this.miny=null,this.maxy=null,this.corner=new Array(4).fill(null),this.safeEnv=null;var n=arguments[0],t=arguments[1],e=arguments[2];if(this.originalPt=n,this.pt=n,this.scaleFactor=t,this.li=e,t<=0)throw new l("Scale factor must be non-zero");1!==t&&(this.pt=new d(this.scale(n.x),this.scale(n.y)),this.p0Scaled=new d,this.p1Scaled=new d),this.initCorners(this.pt)}function fi(){this.index=null;var n=arguments[0];this.index=n}function ci(){fl.apply(this),this.hotPixel=null,this.parentEdge=null,this.hotPixelVertexIndex=null,this._isNodeAdded=!1;var n=arguments[0],t=arguments[1],e=arguments[2];this.hotPixel=n,this.parentEdge=t,this.hotPixelVertexIndex=e}function di(){this.li=null,this.interiorIntersections=null;var n=arguments[0];this.li=n,this.interiorIntersections=new _}function gi(){this.pm=null,this.li=null,this.scaleFactor=null,this.noder=null,this.pointSnapper=null,this.nodedSegStrings=null;var n=arguments[0];this.pm=n,this.li=new at,this.li.setPrecisionModel(n),this.scaleFactor=n.getScale()}function pi(){if(this.argGeom=null,this.distance=null,this.bufParams=new Jl,this.resultGeometry=null,this.saveException=null,1===arguments.length){var n=arguments[0];this.argGeom=n}else if(2===arguments.length){var t=arguments[0],e=arguments[1];this.argGeom=t,this.bufParams=e}}function vi(){this.comps=null;var n=arguments[0];this.comps=n}function mi(){if(this.component=null,this.segIndex=null,this.pt=null,2===arguments.length){var n=arguments[0],t=arguments[1];mi.call(this,n,mi.INSIDE_AREA,t)}else if(3===arguments.length){var e=arguments[0],l=arguments[1],i=arguments[2];this.component=e,this.segIndex=l,this.pt=i}}function yi(){this.pts=null;var n=arguments[0];this.pts=n}function xi(){this.locations=null;var n=arguments[0];this.locations=n}function wi(){if(this.geom=null,this.terminateDistance=0,this.ptLocator=new Pt,this.minDistanceLocation=null,this.minDistance=i.MAX_VALUE,2===arguments.length){var n=arguments[0],t=arguments[1];wi.call(this,n,t,0)}else if(3===arguments.length){var e=arguments[0],l=arguments[1],r=arguments[2];this.geom=new Array(2).fill(null),this.geom[0]=e,this.geom[1]=l,this.terminateDistance=r}}function _i(){this.factory=null,this.directedEdges=new _,this.coordinates=null;var n=arguments[0];this.factory=n}function Mi(){this._isMarked=!1,this._isVisited=!1,this.data=null}function Ei(){Mi.apply(this),this.parentEdge=null,this.from=null,this.to=null,this.p0=null,this.p1=null,this.sym=null,this.edgeDirection=null,this.quadrant=null,this.angle=null;var n=arguments[0],t=arguments[1],e=arguments[2],l=arguments[3];this.from=n,this.to=t,this.edgeDirection=l,this.p0=n.getCoordinate(),this.p1=e;var i=this.p1.x-this.p0.x,r=this.p1.y-this.p0.y;this.quadrant=$t.quadrant(i,r),this.angle=Math.atan2(r,i)}function bi(){var n=arguments[0],t=arguments[1],e=arguments[2],l=arguments[3];Ei.call(this,n,t,e,l)}function Ci(){if(Mi.apply(this),this.dirEdge=null,0===arguments.length);else if(2===arguments.length){var n=arguments[0],t=arguments[1];this.setDirectedEdges(n,t)}}function Ii(){this.outEdges=new _,this.sorted=!1}function Si(){if(Mi.apply(this),this.pt=null,this.deStar=null,1===arguments.length){var n=arguments[0];Si.call(this,n,new Ii)}else if(2===arguments.length){var t=arguments[0],e=arguments[1];this.pt=t,this.deStar=e}}function Ni(){Ci.apply(this),this.line=null;var n=arguments[0];this.line=n}function Pi(){this.nodeMap=new rn}function Li(){this.edges=new Q,this.dirEdges=new Q,this.nodeMap=new Pi}function Ri(){Li.apply(this)}function Ti(){this.graph=new Ri,this.mergedLineStrings=null,this.factory=null,this.edgeStrings=null}function Oi(){this.edgeRing=null,this.next=null,this.label=-1;var n=arguments[0],t=arguments[1],e=arguments[2],l=arguments[3];Ei.call(this,n,t,e,l)}function Ai(){Ci.apply(this),this.line=null;var n=arguments[0];this.line=n}function ki(){this.geometryFactory=new it,this.geomGraph=null,this.disconnectedRingcoord=null;var n=arguments[0];this.geomGraph=n}function Di(){}function Fi(){if(this.edgeEnds=new _,1===arguments.length){var n=arguments[0];Fi.call(this,null,n)}else if(2===arguments.length){var t=(arguments[0],arguments[1]);we.call(this,t.getEdge(),t.getCoordinate(),t.getDirectedCoordinate(),new de(t.getLabel())),this.insert(t)}}function Bi(){Pe.apply(this)}function Gi(){var n=arguments[0],t=arguments[1];ye.call(this,n,t)}function zi(){Me.apply(this)}function qi(){this.nodes=new xe(new zi)}function ji(){this.li=new at,this.geomGraph=null,this.nodeGraph=new qi,this.invalidPoint=null;var n=arguments[0];this.geomGraph=n}function Ui(){this.graph=null,this.rings=new _,this.totalEnv=new E,this.index=null,this.nestedPt=null;var n=arguments[0];this.graph=n}function Vi(){if(this.errorType=null,this.pt=null,1===arguments.length){var n=arguments[0];Vi.call(this,n,null)}else if(2===arguments.length){var t=arguments[0],e=arguments[1];this.errorType=t,null!==e&&(this.pt=e.copy())}}function Yi(){this.parentGeometry=null,this.isSelfTouchingRingFormingHoleValid=!1,this.validErr=null;var n=arguments[0];this.parentGeometry=n}function Xi(){this.factory=null,this.deList=new _,this.lowestEdge=null,this.ring=null,this.ringPts=null,this.holes=null,this.shell=null,this._isHole=null,this._isProcessed=!1,this._isIncludedSet=!1,this._isIncluded=!1;var n=arguments[0];this.factory=n}function Hi(){}function Wi(){Li.apply(this),this.factory=null;var n=arguments[0];this.factory=n}function Zi(){if(this.lineStringAdder=new Ji(this),this.graph=null,this.dangles=new _,this.cutEdges=new _,this.invalidRingLines=new _,this.holeList=null,this.shellList=null,this.polyList=null,this.isCheckingRingsValid=!0,this.extractOnlyPolygonal=null,this.geomFactory=null,0===arguments.length)Zi.call(this,!1);else if(1===arguments.length){var n=arguments[0];this.extractOnlyPolygonal=n}}function Ji(){this.p=null;var n=arguments[0];this.p=n}function Ki(){this.li=new at,this.ptLocator=new Pt,this.arg=null,this.nodes=new xe(new zi),this.im=null,this.isolatedEdges=new _,this.invalidPoint=null;var n=arguments[0];this.arg=n}function Qi(){this.rectEnv=null;var n=arguments[0];this.rectEnv=n.getEnvelopeInternal()}function $i(){this.li=new at,this.rectEnv=null,this.diagUp0=null,this.diagUp1=null,this.diagDown0=null,this.diagDown1=null;var n=arguments[0];this.rectEnv=n,this.diagUp0=new d(n.getMinX(),n.getMinY()),this.diagUp1=new d(n.getMaxX(),n.getMaxY()),this.diagDown0=new d(n.getMinX(),n.getMaxY()),this.diagDown1=new d(n.getMaxX(),n.getMinY())}function nr(){this._isDone=!1
}function tr(){this.rectangle=null,this.rectEnv=null;var n=arguments[0];this.rectangle=n,this.rectEnv=n.getEnvelopeInternal()}function er(){nr.apply(this),this.rectEnv=null,this._intersects=!1;var n=arguments[0];this.rectEnv=n}function lr(){nr.apply(this),this.rectSeq=null,this.rectEnv=null,this._containsPoint=!1;var n=arguments[0];this.rectSeq=n.getExteriorRing().getCoordinateSequence(),this.rectEnv=n.getEnvelopeInternal()}function ir(){nr.apply(this),this.rectEnv=null,this.rectIntersector=null,this.hasIntersection=!1,this.p0=new d,this.p1=new d;var n=arguments[0];this.rectEnv=n.getEnvelopeInternal(),this.rectIntersector=new $i(this.rectEnv)}function rr(){if(this._relate=null,2===arguments.length){var n=arguments[0],t=arguments[1];nl.call(this,n,t),this._relate=new Ki(this.arg)}else if(3===arguments.length){var e=arguments[0],l=arguments[1],i=arguments[2];nl.call(this,e,l,i),this._relate=new Ki(this.arg)}}function ur(){this.geomFactory=null,this.skipEmpty=!1,this.inputGeoms=null;var n=arguments[0];this.geomFactory=ur.extractFactory(n),this.inputGeoms=n}function sr(){this.pointGeom=null,this.otherGeom=null,this.geomFact=null;var n=arguments[0],t=arguments[1];this.pointGeom=n,this.otherGeom=t,this.geomFact=t.getFactory()}function ar(){this.sortIndex=-1,this.comps=null;var n=arguments[0],t=arguments[1];this.sortIndex=n,this.comps=t}function or(){this.inputPolys=null,this.geomFactory=null;var n=arguments[0];this.inputPolys=n,null===this.inputPolys&&(this.inputPolys=new _)}function hr(){if(this.polygons=new _,this.lines=new _,this.points=new _,this.geomFact=null,1===arguments.length){if(S(arguments[0],v)){var n=arguments[0];this.extract(n)}else if(arguments[0]instanceof G){var t=arguments[0];this.extract(t)}}else if(2===arguments.length){var e=arguments[0],l=arguments[1];this.geomFact=l,this.extract(e)}}function fr(){On.CoordinateOperation.apply(this),this.targetPM=null,this.removeCollapsed=!0;var n=arguments[0],t=arguments[1];this.targetPM=n,this.removeCollapsed=t}function cr(){this.targetPM=null,this.removeCollapsed=!0,this.changePrecisionModel=!1,this.isPointwise=!1;var n=arguments[0];this.targetPM=n}function dr(){this.pts=null,this.usePt=null,this.distanceTolerance=null,this.seg=new ct;var n=arguments[0];this.pts=n}function gr(){this.inputGeom=null,this.distanceTolerance=null,this.isEnsureValidTopology=!0;var n=arguments[0];this.inputGeom=n}function pr(){wt.apply(this),this.isEnsureValidTopology=!0,this.distanceTolerance=null;var n=arguments[0],t=arguments[1];this.isEnsureValidTopology=n,this.distanceTolerance=t}function vr(){if(this.parent=null,this.index=null,2===arguments.length){var n=arguments[0],t=arguments[1];vr.call(this,n,t,null,-1)}else if(4===arguments.length){var e=arguments[0],l=arguments[1],i=arguments[2],r=arguments[3];ct.call(this,e,l),this.parent=i,this.index=r}}function mr(){if(this.parentLine=null,this.segs=null,this.resultSegs=new _,this.minimumSize=null,1===arguments.length){var n=arguments[0];mr.call(this,n,2)}else if(2===arguments.length){var t=arguments[0],e=arguments[1];this.parentLine=t,this.minimumSize=e,this.init()}}function yr(){this.index=new zl}function xr(){this.querySeg=null,this.items=new _;var n=arguments[0];this.querySeg=n}function wr(){this.li=new at,this.inputIndex=new yr,this.outputIndex=new yr,this.line=null,this.linePts=null,this.distanceTolerance=0;var n=arguments[0],t=arguments[1];this.inputIndex=n,this.outputIndex=t}function _r(){this.inputIndex=new yr,this.outputIndex=new yr,this.distanceTolerance=0}function Mr(){this.inputGeom=null,this.lineSimplifier=new _r,this.linestringMap=null;var n=arguments[0];this.inputGeom=n}function Er(){wt.apply(this),this.linestringMap=null;var n=arguments[0];this.linestringMap=n}function br(){this.tps=null;var n=arguments[0];this.tps=n}function Cr(){this.seg=null,this.segLen=null,this.splitPt=null,this.minimumLen=0;var n=arguments[0];this.seg=n,this.segLen=n.getLength()}function Ir(){}function Sr(){}function Nr(){}function Pr(){if(this.p=null,1===arguments.length){var n=arguments[0];this.p=new d(n)}else if(2===arguments.length){var t=arguments[0],e=arguments[1];this.p=new d(t,e)}else if(3===arguments.length){var l=arguments[0],i=arguments[1],r=arguments[2];this.p=new d(l,i,r)}}function Lr(){this._isOnConstraint=null,this.constraint=null;var n=arguments[0];Pr.call(this,n)}function Rr(){this._rot=null,this.vertex=null,this.next=null,this.data=null}function Tr(){this.subdiv=null,this.isUsingTolerance=!1;var n=arguments[0];this.subdiv=n,this.isUsingTolerance=n.getTolerance()>0}function Or(){}function Ar(){this.subdiv=null,this.lastEdge=null;var n=arguments[0];this.subdiv=n,this.init()}function kr(){if(this.seg=null,1===arguments.length){if("string"==typeof arguments[0]){var n=arguments[0];o.call(this,n)}else if(arguments[0]instanceof ct){var t=arguments[0];o.call(this,"Locate failed to converge (at edge: "+t+").  Possible causes include invalid Subdivision topology or very close sites"),this.seg=new ct(t)}}else if(2===arguments.length){var e=arguments[0],l=arguments[1];o.call(this,kr.msgWithSpatial(e,l)),this.seg=new ct(l)}}function Dr(){}function Fr(){this.visitedKey=0,this.quadEdges=new _,this.startingEdge=null,this.tolerance=null,this.edgeCoincidenceTolerance=null,this.frameVertex=new Array(3).fill(null),this.frameEnv=null,this.locator=null,this.seg=new ct,this.triEdges=new Array(3).fill(null);var n=arguments[0],t=arguments[1];this.tolerance=t,this.edgeCoincidenceTolerance=t/Fr.EDGE_COINCIDENCE_TOL_FACTOR,this.createFrame(n),this.startingEdge=this.initSubdiv(),this.locator=new Ar(this)}function Br(){}function Gr(){this.triList=new _}function zr(){this.triList=new _}function qr(){this.coordList=new M,this.triCoords=new _}function jr(){if(this.ls=null,this.data=null,2===arguments.length){var n=arguments[0],t=arguments[1];this.ls=new ct(n,t)}else if(3===arguments.length){var e=arguments[0],l=arguments[1],i=arguments[2];this.ls=new ct(e,l),this.data=i}else if(6===arguments.length){var r=arguments[0],u=arguments[1],s=arguments[2],a=arguments[3],o=arguments[4],h=arguments[5];jr.call(this,new d(r,u,s),new d(a,o,h))}else if(7===arguments.length){var f=arguments[0],c=arguments[1],g=arguments[2],p=arguments[3],v=arguments[4],m=arguments[5],y=arguments[6];jr.call(this,new d(f,c,g),new d(p,v,m),y)}}function Ur(){}function Vr(){if(this.p=null,this.data=null,this.left=null,this.right=null,this.count=null,2===arguments.length){var n=arguments[0],t=arguments[1];this.p=new d(n),this.left=null,this.right=null,this.count=1,this.data=t}else if(3===arguments.length){var e=arguments[0],l=arguments[1],i=arguments[2];this.p=new d(e,l),this.left=null,this.right=null,this.count=1,this.data=i}}function Yr(){if(this.root=null,this.numberOfNodes=null,this.tolerance=null,0===arguments.length)Yr.call(this,0);else if(1===arguments.length){var n=arguments[0];this.tolerance=n}}function Xr(){this.tolerance=null,this.matchNode=null,this.matchDist=0,this.p=null;var n=arguments[0],t=arguments[1];this.p=n,this.tolerance=t}function Hr(){this.initialVertices=null,this.segVertices=null,this.segments=new _,this.subdiv=null,this.incDel=null,this.convexHull=null,this.splitFinder=new Sr,this.kdt=null,this.vertexFactory=null,this.computeAreaEnv=null,this.splitPt=null,this.tolerance=null;var n=arguments[0],t=arguments[1];this.initialVertices=new _(n),this.tolerance=t,this.kdt=new Yr(t)}function Wr(){this.siteCoords=null,this.tolerance=0,this.subdiv=null}function Zr(){this.siteCoords=null,this.constraintLines=null,this.tolerance=0,this.subdiv=null,this.constraintVertexMap=new rn}function Jr(){this.siteCoords=null,this.tolerance=0,this.subdiv=null,this.clipEnv=null,this.diagramEnv=null}function Kr(){}"fill"in Array.prototype||Object.defineProperty(Array.prototype,"fill",{configurable:!0,value:function(n){if(void 0===this||null===this)throw new TypeError(this+" is not an object");var t=Object(this),e=Math.max(Math.min(t.length,9007199254740991),0)||0,l=1 in arguments?parseInt(Number(arguments[1]),10)||0:0;l=l<0?Math.max(e+l,0):Math.min(l,e);var i=2 in arguments&&void 0!==arguments[2]?parseInt(Number(arguments[2]),10)||0:e;for(i=i<0?Math.max(e+arguments[2],0):Math.min(i,e);l<i;)t[l]=n,++l;return t},writable:!0}),Number.isFinite=Number.isFinite||function(n){return"number"==typeof n&&isFinite(n)},Number.isInteger=Number.isInteger||function(n){return"number"==typeof n&&isFinite(n)&&Math.floor(n)===n},Number.parseFloat=Number.parseFloat||parseFloat,Number.isNaN=Number.isNaN||function(n){return n!==n},Math.trunc=Math.trunc||function(n){return n<0?Math.ceil(n):Math.floor(n)},t(e.prototype,{interfaces_:function(){return[]},getClass:function(){return e}}),e.equalsWithTolerance=function(n,t,e){return Math.abs(n-t)<=e},i.isNaN=function(n){return Number.isNaN(n)},i.doubleToLongBits=function(n){return n},i.longBitsToDouble=function(n){return n},i.isInfinite=function(n){return!Number.isFinite(n)},i.MAX_VALUE=Number.MAX_VALUE,o.prototype=Object.create(Error.prototype),o.prototype.constructor=Error,h(f,o),t(f.prototype,{interfaces_:function(){return[]},getClass:function(){return f}}),t(c.prototype,{interfaces_:function(){return[]},getClass:function(){return c}}),c.shouldNeverReachHere=function(){if(0===arguments.length)c.shouldNeverReachHere(null);else if(1===arguments.length){var n=arguments[0];throw new f("Should never reach here"+(null!==n?": "+n:""))}},c.isTrue=function(){if(1===arguments.length){var n=arguments[0];c.isTrue(n,null)}else if(2===arguments.length){var t=arguments[0],e=arguments[1];if(!t)throw null===e?new f:new f(e)}},c.equals=function(){if(2===arguments.length){var n=arguments[0],t=arguments[1];c.equals(n,t,null)}else if(3===arguments.length){var e=arguments[0],l=arguments[1],i=arguments[2];if(!l.equals(e))throw new f("Expected "+e+" but encountered "+l+(null!==i?": "+i:""))}},t(d.prototype,{setOrdinate:function(n,t){switch(n){case d.X:this.x=t;break;case d.Y:this.y=t;break;case d.Z:this.z=t;break;default:throw new l("Invalid ordinate index: "+n)}},equals2D:function(){if(1===arguments.length){var n=arguments[0];return this.x===n.x&&this.y===n.y}if(2===arguments.length){var t=arguments[0],l=arguments[1];return!!e.equalsWithTolerance(this.x,t.x,l)&&!!e.equalsWithTolerance(this.y,t.y,l)}},getOrdinate:function(n){switch(n){case d.X:return this.x;case d.Y:return this.y;case d.Z:return this.z}throw new l("Invalid ordinate index: "+n)},equals3D:function(n){return this.x===n.x&&this.y===n.y&&(this.z===n.z||i.isNaN(this.z)&&i.isNaN(n.z))},equals:function(n){return n instanceof d&&this.equals2D(n)},equalInZ:function(n,t){return e.equalsWithTolerance(this.z,n.z,t)},compareTo:function(n){var t=n;return this.x<t.x?-1:this.x>t.x?1:this.y<t.y?-1:this.y>t.y?1:0},clone:function(){try{var n=null;return n}catch(n){if(n instanceof CloneNotSupportedException)return c.shouldNeverReachHere("this shouldn't happen because this class is Cloneable"),null;throw n}finally{}},copy:function(){return new d(this)},toString:function(){return"("+this.x+", "+this.y+", "+this.z+")"},distance3D:function(n){var t=this.x-n.x,e=this.y-n.y,l=this.z-n.z;return Math.sqrt(t*t+e*e+l*l)},distance:function(n){var t=this.x-n.x,e=this.y-n.y;return Math.sqrt(t*t+e*e)},hashCode:function(){var n=17;return n=37*n+d.hashCode(this.x),n=37*n+d.hashCode(this.y)},setCoordinate:function(n){this.x=n.x,this.y=n.y,this.z=n.z},interfaces_:function(){return[r,u,a]},getClass:function(){return d}}),d.hashCode=function(){if(1===arguments.length){var n=arguments[0],t=i.doubleToLongBits(n);return Math.trunc(t^t>>>32)}},t(g.prototype,{compare:function(n,t){var e=n,l=t,i=g.compare(e.x,l.x);if(0!==i)return i;var r=g.compare(e.y,l.y);if(0!==r)return r;if(this.dimensionsToTest<=2)return 0;var u=g.compare(e.z,l.z);return u},interfaces_:function(){return[s]},getClass:function(){return g}}),g.compare=function(n,t){return n<t?-1:n>t?1:i.isNaN(n)?i.isNaN(t)?0:-1:i.isNaN(t)?1:0},d.DimensionalComparator=g,d.serialVersionUID=0x5cbf2c235c7e5800,d.NULL_ORDINATE=i.NaN,d.X=0,d.Y=1,d.Z=2,p.prototype.hasNext=function(){},p.prototype.next=function(){},p.prototype.remove=function(){},v.prototype.add=function(){},v.prototype.addAll=function(){},v.prototype.isEmpty=function(){},v.prototype.iterator=function(){},v.prototype.size=function(){},v.prototype.toArray=function(){},v.prototype.remove=function(){},m.prototype=new Error,m.prototype.name="IndexOutOfBoundsException",y.prototype=Object.create(v.prototype),y.prototype.constructor=y,y.prototype.get=function(){},y.prototype.set=function(){},y.prototype.isEmpty=function(){},x.prototype=new Error,x.prototype.name="NoSuchElementException",w.prototype=new Error,w.prototype.name="OperationNotSupported",_.prototype=Object.create(y.prototype),_.prototype.constructor=_,_.prototype.ensureCapacity=function(){},_.prototype.interfaces_=function(){return[y,v]},_.prototype.add=function(n){return 1===arguments.length?this.array_.push(n):this.array_.splice(arguments[0],arguments[1]),!0},_.prototype.clear=function(){this.array_=[]},_.prototype.addAll=function(n){for(var t=n.iterator();t.hasNext();)this.add(t.next());return!0},_.prototype.set=function(n,t){var e=this.array_[n];return this.array_[n]=t,e},_.prototype.iterator=function(){return new Qr(this)},_.prototype.get=function(n){if(n<0||n>=this.size())throw new m;return this.array_[n]},_.prototype.isEmpty=function(){return 0===this.array_.length},_.prototype.size=function(){return this.array_.length},_.prototype.toArray=function(){for(var n=[],t=0,e=this.array_.length;t<e;t++)n.push(this.array_[t]);return n},_.prototype.remove=function(n){for(var t=!1,e=0,l=this.array_.length;e<l;e++)if(this.array_[e]===n){this.array_.splice(e,1),t=!0;break}return t};var Qr=function(n){this.arrayList_=n,this.position_=0};Qr.prototype.next=function(){if(this.position_===this.arrayList_.size())throw new x;return this.arrayList_.get(this.position_++)},Qr.prototype.hasNext=function(){return this.position_<this.arrayList_.size()},Qr.prototype.set=function(n){return this.arrayList_.set(this.position_-1,n)},Qr.prototype.remove=function(){this.arrayList_.remove(this.arrayList_.get(this.position_))},h(M,_),t(M.prototype,{getCoordinate:function(n){return this.get(n)},addAll:function(){if(2===arguments.length){for(var n=arguments[0],t=arguments[1],e=!1,l=n.iterator();l.hasNext();)this.add(l.next(),t),e=!0;return e}return _.prototype.addAll.apply(this,arguments)},clone:function n(){for(var n=_.prototype.clone.call(this),t=0;t<this.size();t++)n.add(t,this.get(t).copy());return n},toCoordinateArray:function(){return this.toArray(M.coordArrayType)},add:function(){if(1===arguments.length){var n=arguments[0];_.prototype.add.call(this,n)}else if(2===arguments.length){if(arguments[0]instanceof Array&&"boolean"==typeof arguments[1]){var t=arguments[0],e=arguments[1];return this.add(t,e,!0),!0}if(arguments[0]instanceof d&&"boolean"==typeof arguments[1]){var l=arguments[0],i=arguments[1];if(!i&&this.size()>=1){var r=this.get(this.size()-1);if(r.equals2D(l))return null}_.prototype.add.call(this,l)}else if(arguments[0]instanceof Object&&"boolean"==typeof arguments[1]){var u=arguments[0],s=arguments[1];return this.add(u,s),!0}}else if(3===arguments.length){if("boolean"==typeof arguments[2]&&arguments[0]instanceof Array&&"boolean"==typeof arguments[1]){var a=arguments[0],o=arguments[1],h=arguments[2];if(h)for(var f=0;f<a.length;f++)this.add(a[f],o);else for(var f=a.length-1;f>=0;f--)this.add(a[f],o);return!0}if("boolean"==typeof arguments[2]&&Number.isInteger(arguments[0])&&arguments[1]instanceof d){var c=arguments[0],g=arguments[1],p=arguments[2];if(!p){var v=this.size();if(v>0){if(c>0){var m=this.get(c-1);if(m.equals2D(g))return null}if(c<v){var y=this.get(c);if(y.equals2D(g))return null}}}_.prototype.add.call(this,c,g)}}else if(4===arguments.length){var x=arguments[0],w=arguments[1],M=arguments[2],E=arguments[3],b=1;M>E&&(b=-1);for(var f=M;f!==E;f+=b)this.add(x[f],w);return!0}},closeRing:function(){this.size()>0&&this.add(new d(this.get(0)),!1)},interfaces_:function(){return[]},getClass:function(){return M}}),M.coordArrayType=new Array(0).fill(null),t(E.prototype,{getArea:function(){return this.getWidth()*this.getHeight()},equals:function(n){if(!(n instanceof E))return!1;var t=n;return this.isNull()?t.isNull():this.maxx===t.getMaxX()&&this.maxy===t.getMaxY()&&this.minx===t.getMinX()&&this.miny===t.getMinY()},intersection:function(n){if(this.isNull()||n.isNull()||!this.intersects(n))return new E;var t=this.minx>n.minx?this.minx:n.minx,e=this.miny>n.miny?this.miny:n.miny,l=this.maxx<n.maxx?this.maxx:n.maxx,i=this.maxy<n.maxy?this.maxy:n.maxy;return new E(t,l,e,i)},isNull:function(){return this.maxx<this.minx},getMaxX:function(){return this.maxx},covers:function(){if(1===arguments.length){if(arguments[0]instanceof d){var n=arguments[0];return this.covers(n.x,n.y)}if(arguments[0]instanceof E){var t=arguments[0];return!this.isNull()&&!t.isNull()&&(t.getMinX()>=this.minx&&t.getMaxX()<=this.maxx&&t.getMinY()>=this.miny&&t.getMaxY()<=this.maxy)}}else if(2===arguments.length){var e=arguments[0],l=arguments[1];return!this.isNull()&&(e>=this.minx&&e<=this.maxx&&l>=this.miny&&l<=this.maxy)}},intersects:function(){if(1===arguments.length){if(arguments[0]instanceof E){var n=arguments[0];return!this.isNull()&&!n.isNull()&&!(n.minx>this.maxx||n.maxx<this.minx||n.miny>this.maxy||n.maxy<this.miny)}if(arguments[0]instanceof d){var t=arguments[0];return this.intersects(t.x,t.y)}}else if(2===arguments.length){var e=arguments[0],l=arguments[1];return!this.isNull()&&!(e>this.maxx||e<this.minx||l>this.maxy||l<this.miny)}},getMinY:function(){return this.miny},getMinX:function(){return this.minx},expandToInclude:function(){if(1===arguments.length){if(arguments[0]instanceof d){var n=arguments[0];this.expandToInclude(n.x,n.y)}else if(arguments[0]instanceof E){var t=arguments[0];if(t.isNull())return null;this.isNull()?(this.minx=t.getMinX(),this.maxx=t.getMaxX(),this.miny=t.getMinY(),this.maxy=t.getMaxY()):(t.minx<this.minx&&(this.minx=t.minx),t.maxx>this.maxx&&(this.maxx=t.maxx),t.miny<this.miny&&(this.miny=t.miny),t.maxy>this.maxy&&(this.maxy=t.maxy))}}else if(2===arguments.length){var e=arguments[0],l=arguments[1];this.isNull()?(this.minx=e,this.maxx=e,this.miny=l,this.maxy=l):(e<this.minx&&(this.minx=e),e>this.maxx&&(this.maxx=e),l<this.miny&&(this.miny=l),l>this.maxy&&(this.maxy=l))}},minExtent:function(){if(this.isNull())return 0;var n=this.getWidth(),t=this.getHeight();return n<t?n:t},getWidth:function(){return this.isNull()?0:this.maxx-this.minx},compareTo:function(n){var t=n;return this.isNull()?t.isNull()?0:-1:t.isNull()?1:this.minx<t.minx?-1:this.minx>t.minx?1:this.miny<t.miny?-1:this.miny>t.miny?1:this.maxx<t.maxx?-1:this.maxx>t.maxx?1:this.maxy<t.maxy?-1:this.maxy>t.maxy?1:0},translate:function(n,t){return this.isNull()?null:void this.init(this.getMinX()+n,this.getMaxX()+n,this.getMinY()+t,this.getMaxY()+t)},toString:function(){return"Env["+this.minx+" : "+this.maxx+", "+this.miny+" : "+this.maxy+"]"},setToNull:function(){this.minx=0,this.maxx=-1,this.miny=0,this.maxy=-1},getHeight:function(){return this.isNull()?0:this.maxy-this.miny},maxExtent:function(){if(this.isNull())return 0;var n=this.getWidth(),t=this.getHeight();return n>t?n:t},expandBy:function(){if(1===arguments.length){var n=arguments[0];this.expandBy(n,n)}else if(2===arguments.length){var t=arguments[0],e=arguments[1];if(this.isNull())return null;this.minx-=t,this.maxx+=t,this.miny-=e,this.maxy+=e,(this.minx>this.maxx||this.miny>this.maxy)&&this.setToNull()}},contains:function(){if(1===arguments.length){if(arguments[0]instanceof E){var n=arguments[0];return this.covers(n)}if(arguments[0]instanceof d){var t=arguments[0];return this.covers(t)}}else if(2===arguments.length){var e=arguments[0],l=arguments[1];return this.covers(e,l)}},centre:function(){return this.isNull()?null:new d((this.getMinX()+this.getMaxX())/2,(this.getMinY()+this.getMaxY())/2)},init:function(){if(0===arguments.length)this.setToNull();else if(1===arguments.length){if(arguments[0]instanceof d){var n=arguments[0];this.init(n.x,n.x,n.y,n.y)}else if(arguments[0]instanceof E){var t=arguments[0];this.minx=t.minx,this.maxx=t.maxx,this.miny=t.miny,this.maxy=t.maxy}}else if(2===arguments.length){var e=arguments[0],l=arguments[1];this.init(e.x,l.x,e.y,l.y)}else if(4===arguments.length){var i=arguments[0],r=arguments[1],u=arguments[2],s=arguments[3];i<r?(this.minx=i,this.maxx=r):(this.minx=r,this.maxx=i),u<s?(this.miny=u,this.maxy=s):(this.miny=s,this.maxy=u)}},getMaxY:function(){return this.maxy},distance:function(n){if(this.intersects(n))return 0;var t=0;this.maxx<n.minx?t=n.minx-this.maxx:this.minx>n.maxx&&(t=this.minx-n.maxx);var e=0;return this.maxy<n.miny?e=n.miny-this.maxy:this.miny>n.maxy&&(e=this.miny-n.maxy),0===t?e:0===e?t:Math.sqrt(t*t+e*e)},hashCode:function(){var n=17;return n=37*n+d.hashCode(this.minx),n=37*n+d.hashCode(this.maxx),n=37*n+d.hashCode(this.miny),n=37*n+d.hashCode(this.maxy)},interfaces_:function(){return[r,a]},getClass:function(){return E}}),E.intersects=function(){if(3===arguments.length){var n=arguments[0],t=arguments[1],e=arguments[2];return e.x>=(n.x<t.x?n.x:t.x)&&e.x<=(n.x>t.x?n.x:t.x)&&e.y>=(n.y<t.y?n.y:t.y)&&e.y<=(n.y>t.y?n.y:t.y)}if(4===arguments.length){var l=arguments[0],i=arguments[1],r=arguments[2],u=arguments[3],s=Math.min(r.x,u.x),a=Math.max(r.x,u.x),o=Math.min(l.x,i.x),h=Math.max(l.x,i.x);return!(o>a)&&(!(h<s)&&(s=Math.min(r.y,u.y),a=Math.max(r.y,u.y),o=Math.min(l.y,i.y),h=Math.max(l.y,i.y),!(o>a)&&!(h<s)))}},E.serialVersionUID=0x51845cd552189800,h(C,b),t(C.prototype,{interfaces_:function(){return[]},getClass:function(){return C}}),t(I.prototype,{interfaces_:function(){return[]},getClass:function(){return I}}),I.toLocationSymbol=function(n){switch(n){case I.EXTERIOR:return"e";case I.BOUNDARY:return"b";case I.INTERIOR:return"i";case I.NONE:return"-"}throw new l("Unknown location value: "+n)},I.INTERIOR=0,I.BOUNDARY=1,I.EXTERIOR=2,I.NONE=-1,t(N.prototype,{interfaces_:function(){return[]},getClass:function(){return N}}),N.log10=function(n){var t=Math.log(n);return i.isInfinite(t)?t:i.isNaN(t)?t:t/N.LOG_10},N.min=function(n,t,e,l){var i=n;return t<i&&(i=t),e<i&&(i=e),l<i&&(i=l),i},N.clamp=function(){if("number"==typeof arguments[2]&&"number"==typeof arguments[0]&&"number"==typeof arguments[1]){var n=arguments[0],t=arguments[1],e=arguments[2];return n<t?t:n>e?e:n}if(Number.isInteger(arguments[2])&&Number.isInteger(arguments[0])&&Number.isInteger(arguments[1])){var l=arguments[0],i=arguments[1],r=arguments[2];return l<i?i:l>r?r:l}},N.wrap=function(n,t){return n<0?t- -n%t:n%t},N.max=function(){if(3===arguments.length){var n=arguments[0],t=arguments[1],e=arguments[2],l=n;return t>l&&(l=t),e>l&&(l=e),l}if(4===arguments.length){var i=arguments[0],r=arguments[1],u=arguments[2],s=arguments[3],l=i;return r>l&&(l=r),u>l&&(l=u),s>l&&(l=s),l}},N.average=function(n,t){return(n+t)/2},N.LOG_10=Math.log(10),P.prototype.append=function(n){this.str+=n},P.prototype.setCharAt=function(n,t){this.str=this.str.substr(0,n)+t+this.str.substr(n+1)},P.prototype.toString=function(n){return this.str},L.prototype.intValue=function(){return this.value},L.prototype.compareTo=function(n){return this.value<n?-1:this.value>n?1:0},L.isNaN=function(n){return Number.isNaN(n)},R.isWhitespace=function(n){return n<=32&&n>=0||127==n},R.toUpperCase=function(n){return n.toUpperCase()},t(T.prototype,{le:function(n){return this.hi<n.hi||this.hi===n.hi&&this.lo<=n.lo},extractSignificantDigits:function(n,t){var e=this.abs(),l=T.magnitude(e.hi),i=T.TEN.pow(l);e=e.divide(i),e.gt(T.TEN)?(e=e.divide(T.TEN),l+=1):e.lt(T.ONE)&&(e=e.multiply(T.TEN),l-=1);for(var r=l+1,u=new P,s=T.MAX_PRINT_DIGITS-1,a=0;a<=s;a++){n&&a===r&&u.append(".");var o=Math.trunc(e.hi);if(o<0)break;var h=!1,f=0;o>9?(h=!0,f="9"):f="0"+o,u.append(f),e=e.subtract(T.valueOf(o)).multiply(T.TEN),h&&e.selfAdd(T.TEN);var c=!0,d=T.magnitude(e.hi);if(d<0&&Math.abs(d)>=s-a&&(c=!1),!c)break}return t[0]=l,u.toString()},sqr:function(){return this.multiply(this)},doubleValue:function(){return this.hi+this.lo},subtract:function(){if(arguments[0]instanceof T){var n=arguments[0];return this.add(n.negate())}if("number"==typeof arguments[0]){var t=arguments[0];return this.add(-t)}},equals:function(){if(1===arguments.length){var n=arguments[0];return this.hi===n.hi&&this.lo===n.lo}},isZero:function(){return 0===this.hi&&0===this.lo},selfSubtract:function(){if(arguments[0]instanceof T){var n=arguments[0];return this.isNaN()?this:this.selfAdd(-n.hi,-n.lo)}if("number"==typeof arguments[0]){var t=arguments[0];return this.isNaN()?this:this.selfAdd(-t,0)}},getSpecialNumberString:function(){return this.isZero()?"0.0":this.isNaN()?"NaN ":null},min:function(n){return this.le(n)?this:n},selfDivide:function(){if(1===arguments.length){if(arguments[0]instanceof T){var n=arguments[0];return this.selfDivide(n.hi,n.lo)}if("number"==typeof arguments[0]){var t=arguments[0];return this.selfDivide(t,0)}}else if(2===arguments.length){var e=arguments[0],l=arguments[1],i=null,r=null,u=null,s=null,a=null,o=null,h=null,f=null;return a=this.hi/e,o=T.SPLIT*a,i=o-a,f=T.SPLIT*e,i=o-i,r=a-i,u=f-e,h=a*e,u=f-u,s=e-u,f=i*u-h+i*s+r*u+r*s,o=(this.hi-h-f+this.lo-a*l)/e,f=a+o,this.hi=f,this.lo=a-f+o,this}},dump:function(){return"DD<"+this.hi+", "+this.lo+">"},divide:function(){if(arguments[0]instanceof T){var n=arguments[0],t=null,e=null,l=null,r=null,u=null,s=null,a=null,o=null;u=this.hi/n.hi,s=T.SPLIT*u,t=s-u,o=T.SPLIT*n.hi,t=s-t,e=u-t,l=o-n.hi,a=u*n.hi,l=o-l,r=n.hi-l,o=t*l-a+t*r+e*l+e*r,s=(this.hi-a-o+this.lo-u*n.lo)/n.hi,o=u+s;var h=o,f=u-o+s;return new T(h,f)}if("number"==typeof arguments[0]){var c=arguments[0];return i.isNaN(c)?T.createNaN():T.copy(this).selfDivide(c,0)}},ge:function(n){return this.hi>n.hi||this.hi===n.hi&&this.lo>=n.lo},pow:function(n){if(0===n)return T.valueOf(1);var t=new T(this),e=T.valueOf(1),l=Math.abs(n);if(l>1)for(;l>0;)l%2===1&&e.selfMultiply(t),l/=2,l>0&&(t=t.sqr());else e=t;return n<0?e.reciprocal():e},ceil:function(){if(this.isNaN())return T.NaN;var n=Math.ceil(this.hi),t=0;return n===this.hi&&(t=Math.ceil(this.lo)),new T(n,t)},compareTo:function(n){var t=n;return this.hi<t.hi?-1:this.hi>t.hi?1:this.lo<t.lo?-1:this.lo>t.lo?1:0},rint:function(){if(this.isNaN())return this;var n=this.add(.5);return n.floor()},setValue:function(){if(arguments[0]instanceof T){var n=arguments[0];return this.init(n),this}if("number"==typeof arguments[0]){var t=arguments[0];return this.init(t),this}},max:function(n){return this.ge(n)?this:n},sqrt:function(){if(this.isZero())return T.valueOf(0);if(this.isNegative())return T.NaN;var n=1/Math.sqrt(this.hi),t=this.hi*n,e=T.valueOf(t),l=this.subtract(e.sqr()),i=l.hi*(.5*n);return e.add(i)},selfAdd:function(){if(1===arguments.length){if(arguments[0]instanceof T){var n=arguments[0];return this.selfAdd(n.hi,n.lo)}if("number"==typeof arguments[0]){var t=arguments[0],e=null,l=null,i=null,r=null,u=null,s=null;return i=this.hi+t,u=i-this.hi,r=i-u,r=t-u+(this.hi-r),s=r+this.lo,e=i+s,l=s+(i-e),this.hi=e+l,this.lo=l+(e-this.hi),this}}else if(2===arguments.length){var a=arguments[0],o=arguments[1],e=null,l=null,h=null,f=null,i=null,r=null,u=null,s=null;i=this.hi+a,h=this.lo+o,u=i-this.hi,s=h-this.lo,r=i-u,f=h-s,r=a-u+(this.hi-r),f=o-s+(this.lo-f),u=r+h,e=i+u,l=u+(i-e),u=f+l;var c=e+u,d=u+(e-c);return this.hi=c,this.lo=d,this}},selfMultiply:function(){if(1===arguments.length){if(arguments[0]instanceof T){var n=arguments[0];return this.selfMultiply(n.hi,n.lo)}if("number"==typeof arguments[0]){var t=arguments[0];return this.selfMultiply(t,0)}}else if(2===arguments.length){var e=arguments[0],l=arguments[1],i=null,r=null,u=null,s=null,a=null,o=null;a=T.SPLIT*this.hi,i=a-this.hi,o=T.SPLIT*e,i=a-i,r=this.hi-i,u=o-e,a=this.hi*e,u=o-u,s=e-u,o=i*u-a+i*s+r*u+r*s+(this.hi*l+this.lo*e);var h=a+o;i=a-h;var f=o+i;return this.hi=h,this.lo=f,this}},selfSqr:function(){return this.selfMultiply(this)},floor:function(){if(this.isNaN())return T.NaN;var n=Math.floor(this.hi),t=0;return n===this.hi&&(t=Math.floor(this.lo)),new T(n,t)},negate:function(){return this.isNaN()?this:new T(-this.hi,-this.lo)},clone:function(){try{return null}catch(n){if(n instanceof CloneNotSupportedException)return null;throw n}finally{}},multiply:function(){if(arguments[0]instanceof T){var n=arguments[0];return n.isNaN()?T.createNaN():T.copy(this).selfMultiply(n)}if("number"==typeof arguments[0]){var t=arguments[0];return i.isNaN(t)?T.createNaN():T.copy(this).selfMultiply(t,0)}},isNaN:function(){return i.isNaN(this.hi)},intValue:function(){return Math.trunc(this.hi)},toString:function(){var n=T.magnitude(this.hi);return n>=-3&&n<=20?this.toStandardNotation():this.toSciNotation()},toStandardNotation:function(){var n=this.getSpecialNumberString();if(null!==n)return n;var t=new Array(1).fill(null),e=this.extractSignificantDigits(!0,t),l=t[0]+1,i=e;if("."===e.charAt(0))i="0"+e;else if(l<0)i="0."+T.stringOfChar("0",-l)+e;else if(e.indexOf(".")===-1){var r=l-e.length,u=T.stringOfChar("0",r);i=e+u+".0"}return this.isNegative()?"-"+i:i},reciprocal:function(){var n=null,t=null,e=null,l=null,i=null,r=null,u=null,s=null;i=1/this.hi,r=T.SPLIT*i,n=r-i,s=T.SPLIT*this.hi,n=r-n,t=i-n,e=s-this.hi,u=i*this.hi,e=s-e,l=this.hi-e,s=n*e-u+n*l+t*e+t*l,r=(1-u-s-i*this.lo)/this.hi;var a=i+r,o=i-a+r;return new T(a,o)},toSciNotation:function(){if(this.isZero())return T.SCI_NOT_ZERO;var n=this.getSpecialNumberString();if(null!==n)return n;var t=new Array(1).fill(null),e=this.extractSignificantDigits(!1,t),l=T.SCI_NOT_EXPONENT_CHAR+t[0];if("0"===e.charAt(0))throw new IllegalStateException("Found leading zero: "+e);var i="";e.length>1&&(i=e.substring(1));var r=e.charAt(0)+"."+i;return this.isNegative()?"-"+r+l:r+l},abs:function(){return this.isNaN()?T.NaN:this.isNegative()?this.negate():new T(this)},isPositive:function(){return this.hi>0||0===this.hi&&this.lo>0},lt:function(n){return this.hi<n.hi||this.hi===n.hi&&this.lo<n.lo},add:function(){if(arguments[0]instanceof T){var n=arguments[0];return T.copy(this).selfAdd(n)}if("number"==typeof arguments[0]){var t=arguments[0];return T.copy(this).selfAdd(t)}},init:function(){if(1===arguments.length){if("number"==typeof arguments[0]){var n=arguments[0];this.hi=n,this.lo=0}else if(arguments[0]instanceof T){var t=arguments[0];this.hi=t.hi,this.lo=t.lo}}else if(2===arguments.length){var e=arguments[0],l=arguments[1];this.hi=e,this.lo=l}},gt:function(n){return this.hi>n.hi||this.hi===n.hi&&this.lo>n.lo},isNegative:function(){return this.hi<0||0===this.hi&&this.lo<0},trunc:function(){return this.isNaN()?T.NaN:this.isPositive()?this.floor():this.ceil()},signum:function(){return this.hi>0?1:this.hi<0?-1:this.lo>0?1:this.lo<0?-1:0},interfaces_:function(){return[a,r,u]},getClass:function(){return T}}),T.sqr=function(n){return T.valueOf(n).selfMultiply(n)},T.valueOf=function(){if("string"==typeof arguments[0]){var n=arguments[0];return T.parse(n)}if("number"==typeof arguments[0]){var t=arguments[0];return new T(t)}},T.sqrt=function(n){return T.valueOf(n).sqrt()},T.parse=function(n){for(var t=0,e=n.length;R.isWhitespace(n.charAt(t));)t++;var l=!1;if(t<e){var i=n.charAt(t);"-"!==i&&"+"!==i||(t++,"-"===i&&(l=!0))}for(var r=new T,u=0,s=0,a=0;;){if(t>=e)break;var o=n.charAt(t);if(t++,R.isDigit(o)){var h=o-"0";r.selfMultiply(T.TEN),r.selfAdd(h),u++}else{if("."!==o){if("e"===o||"E"===o){var f=n.substring(t);try{a=L.parseInt(f)}catch(t){throw t instanceof NumberFormatException?new NumberFormatException("Invalid exponent "+f+" in string "+n):t}finally{}break}throw new NumberFormatException("Unexpected character '"+o+"' at position "+t+" in string "+n)}s=u}}var c=r,d=u-s-a;if(0===d)c=r;else if(d>0){var g=T.TEN.pow(d);c=r.divide(g)}else if(d<0){var g=T.TEN.pow(-d);c=r.multiply(g)}return l?c.negate():c},T.createNaN=function(){return new T(i.NaN,i.NaN)},T.copy=function(n){return new T(n)},T.magnitude=function(n){var t=Math.abs(n),e=Math.log(t)/Math.log(10),l=Math.trunc(Math.floor(e)),i=Math.pow(10,l);return 10*i<=t&&(l+=1),l},T.stringOfChar=function(n,t){for(var e=new P,l=0;l<t;l++)e.append(n)
;return e.toString()},T.PI=new T(3.141592653589793,1.2246467991473532e-16),T.TWO_PI=new T(6.283185307179586,2.4492935982947064e-16),T.PI_2=new T(1.5707963267948966,6.123233995736766e-17),T.E=new T(2.718281828459045,1.4456468917292502e-16),T.NaN=new T(i.NaN,i.NaN),T.EPS=1.23259516440783e-32,T.SPLIT=134217729,T.MAX_PRINT_DIGITS=32,T.TEN=T.valueOf(10),T.ONE=T.valueOf(1),T.SCI_NOT_EXPONENT_CHAR="E",T.SCI_NOT_ZERO="0.0E0",t(O.prototype,{interfaces_:function(){return[]},getClass:function(){return O}}),O.orientationIndex=function(n,t,e){var l=O.orientationIndexFilter(n,t,e);if(l<=1)return l;var i=T.valueOf(t.x).selfAdd(-n.x),r=T.valueOf(t.y).selfAdd(-n.y),u=T.valueOf(e.x).selfAdd(-t.x),s=T.valueOf(e.y).selfAdd(-t.y);return i.selfMultiply(s).selfSubtract(r.selfMultiply(u)).signum()},O.signOfDet2x2=function(n,t,e,l){var i=n.multiply(l).selfSubtract(t.multiply(e));return i.signum()},O.intersection=function(n,t,e,l){var i=T.valueOf(l.y).selfSubtract(e.y).selfMultiply(T.valueOf(t.x).selfSubtract(n.x)),r=T.valueOf(l.x).selfSubtract(e.x).selfMultiply(T.valueOf(t.y).selfSubtract(n.y)),u=i.subtract(r),s=T.valueOf(l.x).selfSubtract(e.x).selfMultiply(T.valueOf(n.y).selfSubtract(e.y)),a=T.valueOf(l.y).selfSubtract(e.y).selfMultiply(T.valueOf(n.x).selfSubtract(e.x)),o=s.subtract(a),h=o.selfDivide(u).doubleValue(),f=T.valueOf(n.x).selfAdd(T.valueOf(t.x).selfSubtract(n.x).selfMultiply(h)).doubleValue(),c=T.valueOf(t.x).selfSubtract(n.x).selfMultiply(T.valueOf(n.y).selfSubtract(e.y)),g=T.valueOf(t.y).selfSubtract(n.y).selfMultiply(T.valueOf(n.x).selfSubtract(e.x)),p=c.subtract(g),v=p.selfDivide(u).doubleValue(),m=T.valueOf(e.y).selfAdd(T.valueOf(l.y).selfSubtract(e.y).selfMultiply(v)).doubleValue();return new d(f,m)},O.orientationIndexFilter=function(n,t,e){var l=null,i=(n.x-e.x)*(t.y-e.y),r=(n.y-e.y)*(t.x-e.x),u=i-r;if(i>0){if(r<=0)return O.signum(u);l=i+r}else{if(!(i<0))return O.signum(u);if(r>=0)return O.signum(u);l=-i-r}var s=O.DP_SAFE_EPSILON*l;return u>=s||-u>=s?O.signum(u):2},O.signum=function(n){return n>0?1:n<0?-1:0},O.DP_SAFE_EPSILON=1e-15,t(A.prototype,{setOrdinate:function(n,t,e){},size:function(){},getOrdinate:function(n,t){},getCoordinate:function(){if(1===arguments.length){arguments[0]}else if(2===arguments.length){arguments[0],arguments[1]}},getCoordinateCopy:function(n){},getDimension:function(){},getX:function(n){},clone:function(){},expandEnvelope:function(n){},copy:function(){},getY:function(n){},toCoordinateArray:function(){},interfaces_:function(){return[u]},getClass:function(){return A}}),A.X=0,A.Y=1,A.Z=2,A.M=3,k.arraycopy=function(n,t,e,l,i){for(var r=0,u=t;u<t+i;u++)e[l+r]=n[u],r++},k.getProperty=function(n){return{"line.separator":"\n"}[n]},t(D.prototype,{getY:function(){var n=this.y/this.w;if(i.isNaN(n)||i.isInfinite(n))throw new C;return n},getX:function(){var n=this.x/this.w;if(i.isNaN(n)||i.isInfinite(n))throw new C;return n},getCoordinate:function(){var n=new d;return n.x=this.getX(),n.y=this.getY(),n},interfaces_:function(){return[]},getClass:function(){return D}}),D.intersection=function(n,t,e,l){var r=n.y-t.y,u=t.x-n.x,s=n.x*t.y-t.x*n.y,a=e.y-l.y,o=l.x-e.x,h=e.x*l.y-l.x*e.y,f=u*h-o*s,c=a*s-r*h,g=r*o-a*u,p=f/g,v=c/g;if(i.isNaN(p)||i.isInfinite(p)||i.isNaN(v)||i.isInfinite(v))throw new C;return new d(p,v)},t(F.prototype,{create:function(){if(1===arguments.length){if(arguments[0]instanceof Array){arguments[0]}else if(S(arguments[0],A)){arguments[0]}}else if(2===arguments.length){arguments[0],arguments[1]}},interfaces_:function(){return[]},getClass:function(){return F}}),t(B.prototype,{filter:function(n){},interfaces_:function(){return[]},getClass:function(){return B}}),t(G.prototype,{isGeometryCollection:function(){return this.getSortIndex()===G.SORTINDEX_GEOMETRYCOLLECTION},getFactory:function(){return this.factory},getGeometryN:function(n){return this},getArea:function(){return 0},isRectangle:function(){return!1},equals:function(){if(1===arguments.length){if(arguments[0]instanceof G){var n=arguments[0];return null!==n&&this.equalsTopo(n)}if(arguments[0]instanceof Object){var t=arguments[0];if(!(t instanceof G))return!1;var e=t;return this.equalsExact(e)}}},equalsExact:function(n){return this===n||this.equalsExact(n,0)},geometryChanged:function(){this.apply(G.geometryChangedFilter)},geometryChangedAction:function(){this.envelope=null},equalsNorm:function(n){return null!==n&&this.norm().equalsExact(n.norm())},getLength:function(){return 0},getNumGeometries:function(){return 1},compareTo:function(){if(1===arguments.length){var n=arguments[0],t=n;return this.getSortIndex()!==t.getSortIndex()?this.getSortIndex()-t.getSortIndex():this.isEmpty()&&t.isEmpty()?0:this.isEmpty()?-1:t.isEmpty()?1:this.compareToSameClass(n)}if(2===arguments.length){var e=arguments[0],l=arguments[1],t=e;return this.getSortIndex()!==t.getSortIndex()?this.getSortIndex()-t.getSortIndex():this.isEmpty()&&t.isEmpty()?0:this.isEmpty()?-1:t.isEmpty()?1:this.compareToSameClass(e,l)}},getUserData:function(){return this.userData},getSRID:function(){return this.SRID},getEnvelope:function(){return this.getFactory().toGeometry(this.getEnvelopeInternal())},checkNotGeometryCollection:function(n){if(n.getSortIndex()===G.SORTINDEX_GEOMETRYCOLLECTION)throw new l("This method does not support GeometryCollection arguments")},equal:function(n,t,e){return 0===e?n.equals(t):n.distance(t)<=e},norm:function(){var n=this.copy();return n.normalize(),n},getPrecisionModel:function(){return this.factory.getPrecisionModel()},getEnvelopeInternal:function(){return null===this.envelope&&(this.envelope=this.computeEnvelopeInternal()),new E(this.envelope)},setSRID:function(n){this.SRID=n},setUserData:function(n){this.userData=n},compare:function(n,t){for(var e=n.iterator(),l=t.iterator();e.hasNext()&&l.hasNext();){var i=e.next(),r=l.next(),u=i.compareTo(r);if(0!==u)return u}return e.hasNext()?1:l.hasNext()?-1:0},hashCode:function(){return this.getEnvelopeInternal().hashCode()},isGeometryCollectionOrDerived:function(){return this.getSortIndex()===G.SORTINDEX_GEOMETRYCOLLECTION||this.getSortIndex()===G.SORTINDEX_MULTIPOINT||this.getSortIndex()===G.SORTINDEX_MULTILINESTRING||this.getSortIndex()===G.SORTINDEX_MULTIPOLYGON},interfaces_:function(){return[u,r,a]},getClass:function(){return G}}),G.hasNonEmptyElements=function(n){for(var t=0;t<n.length;t++)if(!n[t].isEmpty())return!0;return!1},G.hasNullElements=function(n){for(var t=0;t<n.length;t++)if(null===n[t])return!0;return!1},G.serialVersionUID=0x799ea46522854c00,G.SORTINDEX_POINT=0,G.SORTINDEX_MULTIPOINT=1,G.SORTINDEX_LINESTRING=2,G.SORTINDEX_LINEARRING=3,G.SORTINDEX_MULTILINESTRING=4,G.SORTINDEX_POLYGON=5,G.SORTINDEX_MULTIPOLYGON=6,G.SORTINDEX_GEOMETRYCOLLECTION=7,G.geometryChangedFilter={interfaces_:function(){return[B]},filter:function(n){n.geometryChangedAction()}},t(z.prototype,{filter:function(n){},interfaces_:function(){return[]},getClass:function(){return z}}),t(q.prototype,{isInBoundary:function(n){},interfaces_:function(){return[]},getClass:function(){return q}}),t(j.prototype,{isInBoundary:function(n){return n%2===1},interfaces_:function(){return[q]},getClass:function(){return j}}),t(U.prototype,{isInBoundary:function(n){return n>0},interfaces_:function(){return[q]},getClass:function(){return U}}),t(V.prototype,{isInBoundary:function(n){return n>1},interfaces_:function(){return[q]},getClass:function(){return V}}),t(Y.prototype,{isInBoundary:function(n){return 1===n},interfaces_:function(){return[q]},getClass:function(){return Y}}),q.Mod2BoundaryNodeRule=j,q.EndPointBoundaryNodeRule=U,q.MultiValentEndPointBoundaryNodeRule=V,q.MonoValentEndPointBoundaryNodeRule=Y,q.MOD2_BOUNDARY_RULE=new j,q.ENDPOINT_BOUNDARY_RULE=new U,q.MULTIVALENT_ENDPOINT_BOUNDARY_RULE=new V,q.MONOVALENT_ENDPOINT_BOUNDARY_RULE=new Y,q.OGC_SFS_BOUNDARY_RULE=q.MOD2_BOUNDARY_RULE,t(X.prototype,{interfaces_:function(){return[]},getClass:function(){return X}}),X.isRing=function(n){return!(n.length<4)&&!!n[0].equals2D(n[n.length-1])},X.ptNotInList=function(n,t){for(var e=0;e<n.length;e++){var l=n[e];if(X.indexOf(l,t)<0)return l}return null},X.scroll=function(n,t){var e=X.indexOf(t,n);if(e<0)return null;var l=new Array(n.length).fill(null);k.arraycopy(n,e,l,0,n.length-e),k.arraycopy(n,0,l,n.length-e,e),k.arraycopy(l,0,n,0,n.length)},X.equals=function(){if(2===arguments.length){var n=arguments[0],t=arguments[1];if(n===t)return!0;if(null===n||null===t)return!1;if(n.length!==t.length)return!1;for(var e=0;e<n.length;e++)if(!n[e].equals(t[e]))return!1;return!0}if(3===arguments.length){var l=arguments[0],i=arguments[1],r=arguments[2];if(l===i)return!0;if(null===l||null===i)return!1;if(l.length!==i.length)return!1;for(var e=0;e<l.length;e++)if(0!==r.compare(l[e],i[e]))return!1;return!0}},X.intersection=function(n,t){for(var e=new M,l=0;l<n.length;l++)t.intersects(n[l])&&e.add(n[l],!0);return e.toCoordinateArray()},X.hasRepeatedPoints=function(n){for(var t=1;t<n.length;t++)if(n[t-1].equals(n[t]))return!0;return!1},X.removeRepeatedPoints=function(n){if(!X.hasRepeatedPoints(n))return n;var t=new M(n,!1);return t.toCoordinateArray()},X.reverse=function(n){for(var t=n.length-1,e=Math.trunc(t/2),l=0;l<=e;l++){var i=n[l];n[l]=n[t-l],n[t-l]=i}},X.removeNull=function(n){for(var t=0,e=0;e<n.length;e++)null!==n[e]&&t++;var l=new Array(t).fill(null);if(0===t)return l;for(var i=0,e=0;e<n.length;e++)null!==n[e]&&(l[i++]=n[e]);return l},X.copyDeep=function(){if(1===arguments.length){for(var n=arguments[0],t=new Array(n.length).fill(null),e=0;e<n.length;e++)t[e]=new d(n[e]);return t}if(5===arguments.length)for(var l=arguments[0],i=arguments[1],r=arguments[2],u=arguments[3],s=arguments[4],e=0;e<s;e++)r[u+e]=new d(l[i+e])},X.isEqualReversed=function(n,t){for(var e=0;e<n.length;e++){var l=n[e],i=t[n.length-e-1];if(0!==l.compareTo(i))return!1}return!0},X.envelope=function(n){for(var t=new E,e=0;e<n.length;e++)t.expandToInclude(n[e]);return t},X.toCoordinateArray=function(n){return n.toArray(X.coordArrayType)},X.atLeastNCoordinatesOrNothing=function(n,t){return t.length>=n?t:[]},X.indexOf=function(n,t){for(var e=0;e<t.length;e++)if(n.equals(t[e]))return e;return-1},X.increasingDirection=function(n){for(var t=0;t<Math.trunc(n.length/2);t++){var e=n.length-1-t,l=n[t].compareTo(n[e]);if(0!==l)return l}return 1},X.compare=function(n,t){for(var e=0;e<n.length&&e<t.length;){var l=n[e].compareTo(t[e]);if(0!==l)return l;e++}return e<t.length?-1:e<n.length?1:0},X.minCoordinate=function(n){for(var t=null,e=0;e<n.length;e++)(null===t||t.compareTo(n[e])>0)&&(t=n[e]);return t},X.extract=function(n,t,e){t=N.clamp(t,0,n.length),e=N.clamp(e,-1,n.length);var l=e-t+1;e<0&&(l=0),t>=n.length&&(l=0),e<t&&(l=0);var i=new Array(l).fill(null);if(0===l)return i;for(var r=0,u=t;u<=e;u++)i[r++]=n[u];return i},t(H.prototype,{compare:function(n,t){var e=n,l=t;return X.compare(e,l)},interfaces_:function(){return[s]},getClass:function(){return H}}),t(W.prototype,{compare:function(n,t){var e=n,l=t;if(e.length<l.length)return-1;if(e.length>l.length)return 1;if(0===e.length)return 0;var i=X.compare(e,l),r=X.isEqualReversed(e,l);return r?0:i},OLDcompare:function(n,t){var e=n,l=t;if(e.length<l.length)return-1;if(e.length>l.length)return 1;if(0===e.length)return 0;for(var i=X.increasingDirection(e),r=X.increasingDirection(l),u=i>0?0:e.length-1,s=r>0?0:e.length-1,a=0;a<e.length;a++){var o=e[u].compareTo(l[s]);if(0!==o)return o;u+=i,s+=r}return 0},interfaces_:function(){return[s]},getClass:function(){return W}}),X.ForwardComparator=H,X.BidirectionalComparator=W,X.coordArrayType=new Array(0).fill(null),Z.prototype.get=function(){},Z.prototype.put=function(){},Z.prototype.size=function(){},Z.prototype.values=function(){},Z.prototype.entrySet=function(){},J.prototype=new Z,K.prototype=new v,K.prototype.contains=function(){},Q.prototype=new K,Q.prototype.contains=function(n){for(var t=0,e=this.array_.length;t<e;t++){var l=this.array_[t];if(l===n)return!0}return!1},Q.prototype.add=function(n){return!this.contains(n)&&(this.array_.push(n),!0)},Q.prototype.addAll=function(n){for(var t=n.iterator();t.hasNext();)this.add(t.next());return!0},Q.prototype.remove=function(n){throw new javascript.util.OperationNotSupported},Q.prototype.size=function(){return this.array_.length},Q.prototype.isEmpty=function(){return 0===this.array_.length},Q.prototype.toArray=function(){for(var n=[],t=0,e=this.array_.length;t<e;t++)n.push(this.array_[t]);return n},Q.prototype.iterator=function(){return new $r(this)};var $r=function(n){this.hashSet_=n,this.position_=0};$r.prototype.next=function(){if(this.position_===this.hashSet_.size())throw new x;return this.hashSet_.array_[this.position_++]},$r.prototype.hasNext=function(){return this.position_<this.hashSet_.size()},$r.prototype.remove=function(){throw new w};var nu=0,tu=1;rn.prototype=new J,rn.prototype.get=function(n){for(var t=this.root_;null!==t;){var e=n.compareTo(t.key);if(e<0)t=t.left;else{if(!(e>0))return t.value;t=t.right}}return null},rn.prototype.put=function(n,t){if(null===this.root_)return this.root_={key:n,value:t,left:null,right:null,parent:null,color:nu,getValue:function(){return this.value},getKey:function(){return this.key}},this.size_=1,null;var e,l,i=this.root_;do{if(e=i,l=n.compareTo(i.key),l<0)i=i.left;else{if(!(l>0)){var r=i.value;return i.value=t,r}i=i.right}}while(null!==i);var u={key:n,left:null,right:null,value:t,parent:e,color:nu,getValue:function(){return this.value},getKey:function(){return this.key}};return l<0?e.left=u:e.right=u,this.fixAfterInsertion(u),this.size_++,null},rn.prototype.fixAfterInsertion=function(n){for(n.color=tu;null!=n&&n!=this.root_&&n.parent.color==tu;)if(nn(n)==en(nn(nn(n)))){var t=ln(nn(nn(n)));$(t)==tu?(tn(nn(n),nu),tn(t,nu),tn(nn(nn(n)),tu),n=nn(nn(n))):(n==ln(nn(n))&&(n=nn(n),this.rotateLeft(n)),tn(nn(n),nu),tn(nn(nn(n)),tu),this.rotateRight(nn(nn(n))))}else{var t=en(nn(nn(n)));$(t)==tu?(tn(nn(n),nu),tn(t,nu),tn(nn(nn(n)),tu),n=nn(nn(n))):(n==en(nn(n))&&(n=nn(n),this.rotateRight(n)),tn(nn(n),nu),tn(nn(nn(n)),tu),this.rotateLeft(nn(nn(n))))}this.root_.color=nu},rn.prototype.values=function(){var n=new _,t=this.getFirstEntry();if(null!==t)for(n.add(t.value);null!==(t=rn.successor(t));)n.add(t.value);return n},rn.prototype.entrySet=function(){var n=new Q,t=this.getFirstEntry();if(null!==t)for(n.add(t);null!==(t=rn.successor(t));)n.add(t);return n},rn.prototype.rotateLeft=function(n){if(null!=n){var t=n.right;n.right=t.left,null!=t.left&&(t.left.parent=n),t.parent=n.parent,null==n.parent?this.root_=t:n.parent.left==n?n.parent.left=t:n.parent.right=t,t.left=n,n.parent=t}},rn.prototype.rotateRight=function(n){if(null!=n){var t=n.left;n.left=t.right,null!=t.right&&(t.right.parent=n),t.parent=n.parent,null==n.parent?this.root_=t:n.parent.right==n?n.parent.right=t:n.parent.left=t,t.right=n,n.parent=t}},rn.prototype.getFirstEntry=function(){var n=this.root_;if(null!=n)for(;null!=n.left;)n=n.left;return n},rn.successor=function(n){if(null===n)return null;if(null!==n.right){for(var t=n.right;null!==t.left;)t=t.left;return t}for(var t=n.parent,e=n;null!==t&&e===t.right;)e=t,t=t.parent;return t},rn.prototype.size=function(){return this.size_},t(un.prototype,{interfaces_:function(){return[]},getClass:function(){return un}}),sn.prototype=new K,an.prototype=new sn,an.prototype.contains=function(n){for(var t=0,e=this.array_.length;t<e;t++){var l=this.array_[t];if(0===l.compareTo(n))return!0}return!1},an.prototype.add=function(n){if(this.contains(n))return!1;for(var t=0,e=this.array_.length;t<e;t++){var l=this.array_[t];if(1===l.compareTo(n))return this.array_.splice(t,0,n),!0}return this.array_.push(n),!0},an.prototype.addAll=function(n){for(var t=n.iterator();t.hasNext();)this.add(t.next());return!0},an.prototype.remove=function(n){throw new w},an.prototype.size=function(){return this.array_.length},an.prototype.isEmpty=function(){return 0===this.array_.length},an.prototype.toArray=function(){for(var n=[],t=0,e=this.array_.length;t<e;t++)n.push(this.array_[t]);return n},an.prototype.iterator=function(){return new eu(this)};var eu=function(n){this.treeSet_=n,this.position_=0};eu.prototype.next=function(){if(this.position_===this.treeSet_.size())throw new x;return this.treeSet_.array_[this.position_++]},eu.prototype.hasNext=function(){return this.position_<this.treeSet_.size()},eu.prototype.remove=function(){throw new w},on.sort=function(){var n,t,e,l,i=arguments[0];if(1===arguments.length)return l=function(n,t){return n.compareTo(t)},void i.sort(l);if(2===arguments.length)e=arguments[1],l=function(n,t){return e.compare(n,t)},i.sort(l);else{if(3===arguments.length){t=i.slice(arguments[1],arguments[2]),t.sort();var r=i.slice(0,arguments[1]).concat(t,i.slice(arguments[2],i.length));for(i.splice(0,i.length),n=0;n<r.length;n++)i.push(r[n]);return}if(4===arguments.length){for(t=i.slice(arguments[1],arguments[2]),e=arguments[3],l=function(n,t){return e.compare(n,t)},t.sort(l),r=i.slice(0,arguments[1]).concat(t,i.slice(arguments[2],i.length)),i.splice(0,i.length),n=0;n<r.length;n++)i.push(r[n]);return}}},on.asList=function(n){for(var t=new _,e=0,l=n.length;e<l;e++)t.add(n[e]);return t},t(hn.prototype,{interfaces_:function(){return[]},getClass:function(){return hn}}),hn.toDimensionSymbol=function(n){switch(n){case hn.FALSE:return hn.SYM_FALSE;case hn.TRUE:return hn.SYM_TRUE;case hn.DONTCARE:return hn.SYM_DONTCARE;case hn.P:return hn.SYM_P;case hn.L:return hn.SYM_L;case hn.A:return hn.SYM_A}throw new l("Unknown dimension value: "+n)},hn.toDimensionValue=function(n){switch(R.toUpperCase(n)){case hn.SYM_FALSE:return hn.FALSE;case hn.SYM_TRUE:return hn.TRUE;case hn.SYM_DONTCARE:return hn.DONTCARE;case hn.SYM_P:return hn.P;case hn.SYM_L:return hn.L;case hn.SYM_A:return hn.A}throw new l("Unknown dimension symbol: "+n)},hn.P=0,hn.L=1,hn.A=2,hn.FALSE=-1,hn.TRUE=-2,hn.DONTCARE=-3,hn.SYM_FALSE="F",hn.SYM_TRUE="T",hn.SYM_DONTCARE="*",hn.SYM_P="0",hn.SYM_L="1",hn.SYM_A="2",t(fn.prototype,{filter:function(n){},interfaces_:function(){return[]},getClass:function(){return fn}}),t(cn.prototype,{filter:function(n,t){},isDone:function(){},isGeometryChanged:function(){},interfaces_:function(){return[]},getClass:function(){return cn}}),h(dn,G),t(dn.prototype,{computeEnvelopeInternal:function(){for(var n=new E,t=0;t<this.geometries.length;t++)n.expandToInclude(this.geometries[t].getEnvelopeInternal());return n},getGeometryN:function(n){return this.geometries[n]},getSortIndex:function(){return G.SORTINDEX_GEOMETRYCOLLECTION},getCoordinates:function(){for(var n=new Array(this.getNumPoints()).fill(null),t=-1,e=0;e<this.geometries.length;e++)for(var l=this.geometries[e].getCoordinates(),i=0;i<l.length;i++)t++,n[t]=l[i];return n},getArea:function(){for(var n=0,t=0;t<this.geometries.length;t++)n+=this.geometries[t].getArea();return n},equalsExact:function(){if(2===arguments.length){var n=arguments[0],t=arguments[1];if(!this.isEquivalentClass(n))return!1;var e=n;if(this.geometries.length!==e.geometries.length)return!1;for(var l=0;l<this.geometries.length;l++)if(!this.geometries[l].equalsExact(e.geometries[l],t))return!1;return!0}return G.prototype.equalsExact.apply(this,arguments)},normalize:function(){for(var n=0;n<this.geometries.length;n++)this.geometries[n].normalize();on.sort(this.geometries)},getCoordinate:function(){return this.isEmpty()?null:this.geometries[0].getCoordinate()},getBoundaryDimension:function(){for(var n=hn.FALSE,t=0;t<this.geometries.length;t++)n=Math.max(n,this.geometries[t].getBoundaryDimension());return n},getDimension:function(){for(var n=hn.FALSE,t=0;t<this.geometries.length;t++)n=Math.max(n,this.geometries[t].getDimension());return n},getLength:function(){for(var n=0,t=0;t<this.geometries.length;t++)n+=this.geometries[t].getLength();return n},getNumPoints:function(){for(var n=0,t=0;t<this.geometries.length;t++)n+=this.geometries[t].getNumPoints();return n},getNumGeometries:function(){return this.geometries.length},reverse:function(){for(var n=this.geometries.length,t=new Array(n).fill(null),e=0;e<this.geometries.length;e++)t[e]=this.geometries[e].reverse();return this.getFactory().createGeometryCollection(t)},compareToSameClass:function(){if(1===arguments.length){var n=arguments[0],t=new an(on.asList(this.geometries)),e=new an(on.asList(n.geometries));return this.compare(t,e)}if(2===arguments.length){for(var l=arguments[0],i=arguments[1],r=l,u=this.getNumGeometries(),s=r.getNumGeometries(),a=0;a<u&&a<s;){var o=this.getGeometryN(a),h=r.getGeometryN(a),f=o.compareToSameClass(h,i);if(0!==f)return f;a++}return a<u?1:a<s?-1:0}},apply:function(){if(S(arguments[0],z))for(var n=arguments[0],t=0;t<this.geometries.length;t++)this.geometries[t].apply(n);else if(S(arguments[0],cn)){var e=arguments[0];if(0===this.geometries.length)return null;for(var t=0;t<this.geometries.length&&(this.geometries[t].apply(e),!e.isDone());t++);e.isGeometryChanged()&&this.geometryChanged()}else if(S(arguments[0],fn)){var l=arguments[0];l.filter(this);for(var t=0;t<this.geometries.length;t++)this.geometries[t].apply(l)}else if(S(arguments[0],B)){var i=arguments[0];i.filter(this);for(var t=0;t<this.geometries.length;t++)this.geometries[t].apply(i)}},getBoundary:function(){return this.checkNotGeometryCollection(this),c.shouldNeverReachHere(),null},clone:function(){var n=G.prototype.clone.call(this);n.geometries=new Array(this.geometries.length).fill(null);for(var t=0;t<this.geometries.length;t++)n.geometries[t]=this.geometries[t].clone();return n},getGeometryType:function(){return"GeometryCollection"},copy:function(){for(var n=new Array(this.geometries.length).fill(null),t=0;t<n.length;t++)n[t]=this.geometries[t].copy();return new dn(n,this.factory)},isEmpty:function(){for(var n=0;n<this.geometries.length;n++)if(!this.geometries[n].isEmpty())return!1;return!0},interfaces_:function(){return[]},getClass:function(){return dn}}),dn.serialVersionUID=-0x4f07bcb1f857d800,h(gn,dn),t(gn.prototype,{getSortIndex:function(){return G.SORTINDEX_MULTILINESTRING},equalsExact:function(){if(2===arguments.length){var n=arguments[0],t=arguments[1];return!!this.isEquivalentClass(n)&&dn.prototype.equalsExact.call(this,n,t)}return dn.prototype.equalsExact.apply(this,arguments)},getBoundaryDimension:function(){return this.isClosed()?hn.FALSE:0},isClosed:function(){if(this.isEmpty())return!1;for(var n=0;n<this.geometries.length;n++)if(!this.geometries[n].isClosed())return!1;return!0},getDimension:function(){return 1},reverse:function(){for(var n=this.geometries.length,t=new Array(n).fill(null),e=0;e<this.geometries.length;e++)t[n-1-e]=this.geometries[e].reverse();return this.getFactory().createMultiLineString(t)},getBoundary:function(){return new pn(this).getBoundary()},getGeometryType:function(){return"MultiLineString"},copy:function(){for(var n=new Array(this.geometries.length).fill(null),t=0;t<n.length;t++)n[t]=this.geometries[t].copy();return new gn(n,this.factory)},interfaces_:function(){return[un]},getClass:function(){return gn}}),gn.serialVersionUID=0x7155d2ab4afa8000,t(pn.prototype,{boundaryMultiLineString:function(n){if(this.geom.isEmpty())return this.getEmptyMultiPoint();var t=this.computeBoundaryCoordinates(n);return 1===t.length?this.geomFact.createPoint(t[0]):this.geomFact.createMultiPointFromCoords(t)},getBoundary:function(){return this.geom instanceof Cn?this.boundaryLineString(this.geom):this.geom instanceof gn?this.boundaryMultiLineString(this.geom):this.geom.getBoundary()},boundaryLineString:function(n){if(this.geom.isEmpty())return this.getEmptyMultiPoint();if(n.isClosed()){var t=this.bnRule.isInBoundary(2);return t?n.getStartPoint():this.geomFact.createMultiPoint()}return this.geomFact.createMultiPoint([n.getStartPoint(),n.getEndPoint()])},getEmptyMultiPoint:function(){return this.geomFact.createMultiPoint()},computeBoundaryCoordinates:function(n){var t=new _;this.endpointMap=new rn;for(var e=0;e<n.getNumGeometries();e++){var l=n.getGeometryN(e);0!==l.getNumPoints()&&(this.addEndpoint(l.getCoordinateN(0)),this.addEndpoint(l.getCoordinateN(l.getNumPoints()-1)))}for(var i=this.endpointMap.entrySet().iterator();i.hasNext();){var r=i.next(),u=r.getValue(),s=u.count;this.bnRule.isInBoundary(s)&&t.add(r.getKey())}return X.toCoordinateArray(t)},addEndpoint:function(n){var t=this.endpointMap.get(n);null===t&&(t=new vn,this.endpointMap.put(n,t)),t.count++},interfaces_:function(){return[]},getClass:function(){return pn}}),pn.getBoundary=function(){if(1===arguments.length){var n=arguments[0],t=new pn(n);return t.getBoundary()}if(2===arguments.length){var e=arguments[0],l=arguments[1],t=new pn(e,l);return t.getBoundary()}},t(vn.prototype,{interfaces_:function(){return[]},getClass:function(){return vn}}),t(En.prototype,{interfaces_:function(){return[]},getClass:function(){return En}}),En.chars=function(n,t){for(var e=new Array(t).fill(null),l=0;l<t;l++)e[l]=n;return new String(e)},En.getStackTrace=function(){if(1===arguments.length){var n=arguments[0],t=new wn,e=new mn(t);return n.printStackTrace(e),t.toString()}if(2===arguments.length){for(var l=arguments[0],i=arguments[1],r="",u=new yn(En.getStackTrace(l)),s=new Mn(u),a=0;a<i;a++)try{r+=s.readLine()+En.NEWLINE}catch(n){if(!(n instanceof _n))throw n;c.shouldNeverReachHere()}finally{}return r}},En.split=function(n,t){for(var e=t.length,l=new _,i=""+n,r=i.indexOf(t);r>=0;){var u=i.substring(0,r);l.add(u),i=i.substring(r+e),r=i.indexOf(t)}i.length>0&&l.add(i);for(var s=new Array(l.size()).fill(null),a=0;a<s.length;a++)s[a]=l.get(a);return s},En.toString=function(){if(1===arguments.length){var n=arguments[0];return En.SIMPLE_ORDINATE_FORMAT.format(n)}},En.spaces=function(n){return En.chars(" ",n)},En.NEWLINE=k.getProperty("line.separator"),En.SIMPLE_ORDINATE_FORMAT=new xn("0.#"),t(bn.prototype,{interfaces_:function(){return[]},getClass:function(){return bn}}),bn.copyCoord=function(n,t,e,l){for(var i=Math.min(n.getDimension(),e.getDimension()),r=0;r<i;r++)e.setOrdinate(l,r,n.getOrdinate(t,r))},bn.isRing=function(n){var t=n.size();return 0===t||!(t<=3)&&(n.getOrdinate(0,A.X)===n.getOrdinate(t-1,A.X)&&n.getOrdinate(0,A.Y)===n.getOrdinate(t-1,A.Y))},bn.isEqual=function(n,t){var e=n.size(),l=t.size();if(e!==l)return!1;for(var r=Math.min(n.getDimension(),t.getDimension()),u=0;u<e;u++)for(var s=0;s<r;s++){var a=n.getOrdinate(u,s),o=t.getOrdinate(u,s);if(!(n.getOrdinate(u,s)===t.getOrdinate(u,s)||i.isNaN(a)&&i.isNaN(o)))return!1}return!0},bn.extend=function(n,t,e){var l=n.create(e,t.getDimension()),i=t.size();if(bn.copy(t,0,l,0,i),i>0)for(var r=i;r<e;r++)bn.copy(t,i-1,l,r,1);return l},bn.reverse=function(n){for(var t=n.size()-1,e=Math.trunc(t/2),l=0;l<=e;l++)bn.swap(n,l,t-l)},bn.swap=function(n,t,e){if(t===e)return null;for(var l=0;l<n.getDimension();l++){var i=n.getOrdinate(t,l);n.setOrdinate(t,l,n.getOrdinate(e,l)),n.setOrdinate(e,l,i)}},bn.copy=function(n,t,e,l,i){for(var r=0;r<i;r++)bn.copyCoord(n,t+r,e,l+r)},bn.toString=function(){if(1===arguments.length){var n=arguments[0],t=n.size();if(0===t)return"()";var e=n.getDimension(),l=new P;l.append("(");for(var i=0;i<t;i++){i>0&&l.append(" ");for(var r=0;r<e;r++)r>0&&l.append(","),l.append(En.toString(n.getOrdinate(i,r)))}return l.append(")"),l.toString()}},bn.ensureValidRing=function(n,t){var e=t.size();if(0===e)return t;if(e<=3)return bn.createClosedRing(n,t,4);var l=t.getOrdinate(0,A.X)===t.getOrdinate(e-1,A.X)&&t.getOrdinate(0,A.Y)===t.getOrdinate(e-1,A.Y);return l?t:bn.createClosedRing(n,t,e+1)},bn.createClosedRing=function(n,t,e){var l=n.create(e,t.getDimension()),i=t.size();bn.copy(t,0,l,0,i);for(var r=i;r<e;r++)bn.copy(t,0,l,r,1);return l},h(Cn,G),t(Cn.prototype,{computeEnvelopeInternal:function(){return this.isEmpty()?new E:this.points.expandEnvelope(new E)},isRing:function(){return this.isClosed()&&this.isSimple()},getSortIndex:function(){return G.SORTINDEX_LINESTRING},getCoordinates:function(){return this.points.toCoordinateArray()},equalsExact:function(){if(2===arguments.length){var n=arguments[0],t=arguments[1];if(!this.isEquivalentClass(n))return!1;var e=n;if(this.points.size()!==e.points.size())return!1;for(var l=0;l<this.points.size();l++)if(!this.equal(this.points.getCoordinate(l),e.points.getCoordinate(l),t))return!1;return!0}return G.prototype.equalsExact.apply(this,arguments)},normalize:function(){for(var n=0;n<Math.trunc(this.points.size()/2);n++){var t=this.points.size()-1-n;if(!this.points.getCoordinate(n).equals(this.points.getCoordinate(t)))return this.points.getCoordinate(n).compareTo(this.points.getCoordinate(t))>0&&bn.reverse(this.points),null}},getCoordinate:function(){return this.isEmpty()?null:this.points.getCoordinate(0)},getBoundaryDimension:function(){return this.isClosed()?hn.FALSE:0},isClosed:function(){return!this.isEmpty()&&this.getCoordinateN(0).equals2D(this.getCoordinateN(this.getNumPoints()-1))},getEndPoint:function(){return this.isEmpty()?null:this.getPointN(this.getNumPoints()-1)},getDimension:function(){return 1},getLength:function(){return ft.computeLength(this.points)},getNumPoints:function(){return this.points.size()},reverse:function(){var n=this.points.copy();bn.reverse(n);var t=this.getFactory().createLineString(n);return t},compareToSameClass:function(){if(1===arguments.length){for(var n=arguments[0],t=n,e=0,l=0;e<this.points.size()&&l<t.points.size();){var i=this.points.getCoordinate(e).compareTo(t.points.getCoordinate(l));if(0!==i)return i;e++,l++}return e<this.points.size()?1:l<t.points.size()?-1:0}if(2===arguments.length){var r=arguments[0],u=arguments[1],t=r;return u.compare(this.points,t.points)}},apply:function(){if(S(arguments[0],z))for(var n=arguments[0],t=0;t<this.points.size();t++)n.filter(this.points.getCoordinate(t));else if(S(arguments[0],cn)){var e=arguments[0];if(0===this.points.size())return null;for(var t=0;t<this.points.size()&&(e.filter(this.points,t),!e.isDone());t++);e.isGeometryChanged()&&this.geometryChanged()}else if(S(arguments[0],fn)){var l=arguments[0];l.filter(this)}else if(S(arguments[0],B)){var i=arguments[0];i.filter(this)}},getBoundary:function(){return new pn(this).getBoundary()},isEquivalentClass:function(n){return n instanceof Cn},clone:function(){var n=G.prototype.clone.call(this);return n.points=this.points.clone(),n},getCoordinateN:function(n){return this.points.getCoordinate(n)},getGeometryType:function(){return"LineString"},copy:function(){return new Cn(this.points.copy(),this.factory)},getCoordinateSequence:function(){return this.points},isEmpty:function(){return 0===this.points.size()},init:function(n){if(null===n&&(n=this.getFactory().getCoordinateSequenceFactory().create([])),1===n.size())throw new l("Invalid number of points in LineString (found "+n.size()+" - must be 0 or >= 2)");this.points=n},isCoordinate:function(n){for(var t=0;t<this.points.size();t++)if(this.points.getCoordinate(t).equals(n))return!0;return!1},getStartPoint:function(){return this.isEmpty()?null:this.getPointN(0)},getPointN:function(n){return this.getFactory().createPoint(this.points.getCoordinate(n))},interfaces_:function(){return[un]},getClass:function(){return Cn}}),Cn.serialVersionUID=0x2b2b51ba435c8e00,t(In.prototype,{interfaces_:function(){return[]},getClass:function(){return In}}),h(Sn,G),t(Sn.prototype,{computeEnvelopeInternal:function(){if(this.isEmpty())return new E;var n=new E;return n.expandToInclude(this.coordinates.getX(0),this.coordinates.getY(0)),n},getSortIndex:function(){return G.SORTINDEX_POINT},getCoordinates:function(){return this.isEmpty()?[]:[this.getCoordinate()]},equalsExact:function(){if(2===arguments.length){var n=arguments[0],t=arguments[1];return!!this.isEquivalentClass(n)&&(!(!this.isEmpty()||!n.isEmpty())||this.isEmpty()===n.isEmpty()&&this.equal(n.getCoordinate(),this.getCoordinate(),t))}return G.prototype.equalsExact.apply(this,arguments)},normalize:function(){},getCoordinate:function(){return 0!==this.coordinates.size()?this.coordinates.getCoordinate(0):null},getBoundaryDimension:function(){return hn.FALSE},getDimension:function(){return 0},getNumPoints:function(){return this.isEmpty()?0:1},reverse:function(){return this.copy()},getX:function(){
if(null===this.getCoordinate())throw new IllegalStateException("getX called on empty Point");return this.getCoordinate().x},compareToSameClass:function(){if(1===arguments.length){var n=arguments[0],t=n;return this.getCoordinate().compareTo(t.getCoordinate())}if(2===arguments.length){var e=arguments[0],l=arguments[1],t=e;return l.compare(this.coordinates,t.coordinates)}},apply:function(){if(S(arguments[0],z)){var n=arguments[0];if(this.isEmpty())return null;n.filter(this.getCoordinate())}else if(S(arguments[0],cn)){var t=arguments[0];if(this.isEmpty())return null;t.filter(this.coordinates,0),t.isGeometryChanged()&&this.geometryChanged()}else if(S(arguments[0],fn)){var e=arguments[0];e.filter(this)}else if(S(arguments[0],B)){var l=arguments[0];l.filter(this)}},getBoundary:function(){return this.getFactory().createGeometryCollection(null)},clone:function(){var n=G.prototype.clone.call(this);return n.coordinates=this.coordinates.clone(),n},getGeometryType:function(){return"Point"},copy:function(){return new Sn(this.coordinates.copy(),this.factory)},getCoordinateSequence:function(){return this.coordinates},getY:function(){if(null===this.getCoordinate())throw new IllegalStateException("getY called on empty Point");return this.getCoordinate().y},isEmpty:function(){return 0===this.coordinates.size()},init:function(n){null===n&&(n=this.getFactory().getCoordinateSequenceFactory().create([])),c.isTrue(n.size()<=1),this.coordinates=n},isSimple:function(){return!0},interfaces_:function(){return[In]},getClass:function(){return Sn}}),Sn.serialVersionUID=0x44077bad161cbc00,t(Nn.prototype,{interfaces_:function(){return[]},getClass:function(){return Nn}}),h(Pn,G),t(Pn.prototype,{computeEnvelopeInternal:function(){return this.shell.getEnvelopeInternal()},getSortIndex:function(){return G.SORTINDEX_POLYGON},getCoordinates:function(){if(this.isEmpty())return[];for(var n=new Array(this.getNumPoints()).fill(null),t=-1,e=this.shell.getCoordinates(),l=0;l<e.length;l++)t++,n[t]=e[l];for(var i=0;i<this.holes.length;i++)for(var r=this.holes[i].getCoordinates(),u=0;u<r.length;u++)t++,n[t]=r[u];return n},getArea:function(){var n=0;n+=Math.abs(ft.signedArea(this.shell.getCoordinateSequence()));for(var t=0;t<this.holes.length;t++)n-=Math.abs(ft.signedArea(this.holes[t].getCoordinateSequence()));return n},isRectangle:function(){if(0!==this.getNumInteriorRing())return!1;if(null===this.shell)return!1;if(5!==this.shell.getNumPoints())return!1;for(var n=this.shell.getCoordinateSequence(),t=this.getEnvelopeInternal(),e=0;e<5;e++){var l=n.getX(e);if(l!==t.getMinX()&&l!==t.getMaxX())return!1;var i=n.getY(e);if(i!==t.getMinY()&&i!==t.getMaxY())return!1}for(var r=n.getX(0),u=n.getY(0),e=1;e<=4;e++){var l=n.getX(e),i=n.getY(e),s=l!==r,a=i!==u;if(s===a)return!1;r=l,u=i}return!0},equalsExact:function(){if(2===arguments.length){var n=arguments[0],t=arguments[1];if(!this.isEquivalentClass(n))return!1;var e=n,l=this.shell,i=e.shell;if(!l.equalsExact(i,t))return!1;if(this.holes.length!==e.holes.length)return!1;for(var r=0;r<this.holes.length;r++)if(!this.holes[r].equalsExact(e.holes[r],t))return!1;return!0}return G.prototype.equalsExact.apply(this,arguments)},normalize:function(){if(0===arguments.length){this.normalize(this.shell,!0);for(var n=0;n<this.holes.length;n++)this.normalize(this.holes[n],!1);on.sort(this.holes)}else if(2===arguments.length){var t=arguments[0],e=arguments[1];if(t.isEmpty())return null;var l=new Array(t.getCoordinates().length-1).fill(null);k.arraycopy(t.getCoordinates(),0,l,0,l.length);var i=X.minCoordinate(t.getCoordinates());X.scroll(l,i),k.arraycopy(l,0,t.getCoordinates(),0,l.length),t.getCoordinates()[l.length]=l[0],ft.isCCW(t.getCoordinates())===e&&X.reverse(t.getCoordinates())}},getCoordinate:function(){return this.shell.getCoordinate()},getNumInteriorRing:function(){return this.holes.length},getBoundaryDimension:function(){return 1},getDimension:function(){return 2},getLength:function(){var n=0;n+=this.shell.getLength();for(var t=0;t<this.holes.length;t++)n+=this.holes[t].getLength();return n},getNumPoints:function(){for(var n=this.shell.getNumPoints(),t=0;t<this.holes.length;t++)n+=this.holes[t].getNumPoints();return n},reverse:function(){var n=this.copy();n.shell=this.shell.copy().reverse(),n.holes=new Array(this.holes.length).fill(null);for(var t=0;t<this.holes.length;t++)n.holes[t]=this.holes[t].copy().reverse();return n},convexHull:function(){return this.getExteriorRing().convexHull()},compareToSameClass:function(){if(1===arguments.length){var n=arguments[0],t=this.shell,e=n.shell;return t.compareToSameClass(e)}if(2===arguments.length){var l=arguments[0],i=arguments[1],r=l,t=this.shell,e=r.shell,u=t.compareToSameClass(e,i);if(0!==u)return u;for(var s=this.getNumInteriorRing(),a=r.getNumInteriorRing(),o=0;o<s&&o<a;){var h=this.getInteriorRingN(o),f=r.getInteriorRingN(o),c=h.compareToSameClass(f,i);if(0!==c)return c;o++}return o<s?1:o<a?-1:0}},apply:function(){if(S(arguments[0],z)){var n=arguments[0];this.shell.apply(n);for(var t=0;t<this.holes.length;t++)this.holes[t].apply(n)}else if(S(arguments[0],cn)){var e=arguments[0];if(this.shell.apply(e),!e.isDone())for(var t=0;t<this.holes.length&&(this.holes[t].apply(e),!e.isDone());t++);e.isGeometryChanged()&&this.geometryChanged()}else if(S(arguments[0],fn)){var l=arguments[0];l.filter(this)}else if(S(arguments[0],B)){var i=arguments[0];i.filter(this),this.shell.apply(i);for(var t=0;t<this.holes.length;t++)this.holes[t].apply(i)}},getBoundary:function(){if(this.isEmpty())return this.getFactory().createMultiLineString();var n=new Array(this.holes.length+1).fill(null);n[0]=this.shell;for(var t=0;t<this.holes.length;t++)n[t+1]=this.holes[t];return n.length<=1?this.getFactory().createLinearRing(n[0].getCoordinateSequence()):this.getFactory().createMultiLineString(n)},clone:function(){var n=G.prototype.clone.call(this);n.shell=this.shell.clone(),n.holes=new Array(this.holes.length).fill(null);for(var t=0;t<this.holes.length;t++)n.holes[t]=this.holes[t].clone();return n},getGeometryType:function(){return"Polygon"},copy:function(){for(var n=this.shell.copy(),t=new Array(this.holes.length).fill(null),e=0;e<t.length;e++)t[e]=this.holes[e].copy();return new Pn(n,t,this.factory)},getExteriorRing:function(){return this.shell},isEmpty:function(){return this.shell.isEmpty()},getInteriorRingN:function(n){return this.holes[n]},interfaces_:function(){return[Nn]},getClass:function(){return Pn}}),Pn.serialVersionUID=-0x307ffefd8dc97200,h(Ln,dn),t(Ln.prototype,{getSortIndex:function(){return G.SORTINDEX_MULTIPOINT},isValid:function(){return!0},equalsExact:function(){if(2===arguments.length){var n=arguments[0],t=arguments[1];return!!this.isEquivalentClass(n)&&dn.prototype.equalsExact.call(this,n,t)}return dn.prototype.equalsExact.apply(this,arguments)},getCoordinate:function(){if(1===arguments.length){var n=arguments[0];return this.geometries[n].getCoordinate()}return dn.prototype.getCoordinate.apply(this,arguments)},getBoundaryDimension:function(){return hn.FALSE},getDimension:function(){return 0},getBoundary:function(){return this.getFactory().createGeometryCollection(null)},getGeometryType:function(){return"MultiPoint"},copy:function(){for(var n=new Array(this.geometries.length).fill(null),t=0;t<n.length;t++)n[t]=this.geometries[t].copy();return new Ln(n,this.factory)},interfaces_:function(){return[In]},getClass:function(){return Ln}}),Ln.serialVersionUID=-0x6fb1ed4162e0fc00,h(Rn,Cn),t(Rn.prototype,{getSortIndex:function(){return G.SORTINDEX_LINEARRING},getBoundaryDimension:function(){return hn.FALSE},isClosed:function(){return!!this.isEmpty()||Cn.prototype.isClosed.call(this)},reverse:function(){var n=this.points.copy();bn.reverse(n);var t=this.getFactory().createLinearRing(n);return t},validateConstruction:function(){if(!this.isEmpty()&&!Cn.prototype.isClosed.call(this))throw new l("Points of LinearRing do not form a closed linestring");if(this.getCoordinateSequence().size()>=1&&this.getCoordinateSequence().size()<Rn.MINIMUM_VALID_SIZE)throw new l("Invalid number of points in LinearRing (found "+this.getCoordinateSequence().size()+" - must be 0 or >= 4)")},getGeometryType:function(){return"LinearRing"},copy:function(){return new Rn(this.points.copy(),this.factory)},interfaces_:function(){return[]},getClass:function(){return Rn}}),Rn.MINIMUM_VALID_SIZE=4,Rn.serialVersionUID=-0x3b229e262367a600,h(Tn,dn),t(Tn.prototype,{getSortIndex:function(){return G.SORTINDEX_MULTIPOLYGON},equalsExact:function(){if(2===arguments.length){var n=arguments[0],t=arguments[1];return!!this.isEquivalentClass(n)&&dn.prototype.equalsExact.call(this,n,t)}return dn.prototype.equalsExact.apply(this,arguments)},getBoundaryDimension:function(){return 1},getDimension:function(){return 2},reverse:function(){for(var n=this.geometries.length,t=new Array(n).fill(null),e=0;e<this.geometries.length;e++)t[e]=this.geometries[e].reverse();return this.getFactory().createMultiPolygon(t)},getBoundary:function(){if(this.isEmpty())return this.getFactory().createMultiLineString();for(var n=new _,t=0;t<this.geometries.length;t++)for(var e=this.geometries[t],l=e.getBoundary(),i=0;i<l.getNumGeometries();i++)n.add(l.getGeometryN(i));var r=new Array(n.size()).fill(null);return this.getFactory().createMultiLineString(n.toArray(r))},getGeometryType:function(){return"MultiPolygon"},copy:function(){for(var n=new Array(this.geometries.length).fill(null),t=0;t<n.length;t++)n[t]=this.geometries[t].copy();return new Tn(n,this.factory)},interfaces_:function(){return[Nn]},getClass:function(){return Tn}}),Tn.serialVersionUID=-0x7a5aa1369171980,t(On.prototype,{setCopyUserData:function(n){this.isUserDataCopied=n},edit:function(n,t){if(null===n)return null;var e=this.editInternal(n,t);return this.isUserDataCopied&&e.setUserData(n.getUserData()),e},editInternal:function(n,t){return null===this.factory&&(this.factory=n.getFactory()),n instanceof dn?this.editGeometryCollection(n,t):n instanceof Pn?this.editPolygon(n,t):n instanceof Sn?t.edit(n,this.factory):n instanceof Cn?t.edit(n,this.factory):(c.shouldNeverReachHere("Unsupported Geometry class: "+n.getClass().getName()),null)},editGeometryCollection:function(n,t){for(var e=t.edit(n,this.factory),l=new _,i=0;i<e.getNumGeometries();i++){var r=this.edit(e.getGeometryN(i),t);null===r||r.isEmpty()||l.add(r)}return e.getClass()===Ln?this.factory.createMultiPoint(l.toArray([])):e.getClass()===gn?this.factory.createMultiLineString(l.toArray([])):e.getClass()===Tn?this.factory.createMultiPolygon(l.toArray([])):this.factory.createGeometryCollection(l.toArray([]))},editPolygon:function(n,t){var e=t.edit(n,this.factory);if(null===e&&(e=this.factory.createPolygon(null)),e.isEmpty())return e;var l=this.edit(e.getExteriorRing(),t);if(null===l||l.isEmpty())return this.factory.createPolygon();for(var i=new _,r=0;r<e.getNumInteriorRing();r++){var u=this.edit(e.getInteriorRingN(r),t);null===u||u.isEmpty()||i.add(u)}return this.factory.createPolygon(l,i.toArray([]))},interfaces_:function(){return[]},getClass:function(){return On}}),On.GeometryEditorOperation=An,t(kn.prototype,{edit:function(n,t){return n},interfaces_:function(){return[An]},getClass:function(){return kn}}),t(Dn.prototype,{edit:function(n,t){var e=this.editCoordinates(n.getCoordinates(),n);return null===e?n:n instanceof Rn?t.createLinearRing(e):n instanceof Cn?t.createLineString(e):n instanceof Sn?e.length>0?t.createPoint(e[0]):t.createPoint():n},interfaces_:function(){return[An]},getClass:function(){return Dn}}),t(Fn.prototype,{edit:function(n,t){return n instanceof Rn?t.createLinearRing(this.edit(n.getCoordinateSequence(),n)):n instanceof Cn?t.createLineString(this.edit(n.getCoordinateSequence(),n)):n instanceof Sn?t.createPoint(this.edit(n.getCoordinateSequence(),n)):n},interfaces_:function(){return[An]},getClass:function(){return Fn}}),On.NoOpGeometryOperation=kn,On.CoordinateOperation=Dn,On.CoordinateSequenceOperation=Fn,t(Bn.prototype,{setOrdinate:function(n,t,e){switch(t){case A.X:this.coordinates[n].x=e;break;case A.Y:this.coordinates[n].y=e;break;case A.Z:this.coordinates[n].z=e;break;default:throw new l("invalid ordinateIndex")}},size:function(){return this.coordinates.length},getOrdinate:function(n,t){switch(t){case A.X:return this.coordinates[n].x;case A.Y:return this.coordinates[n].y;case A.Z:return this.coordinates[n].z}return i.NaN},getCoordinate:function(){if(1===arguments.length){var n=arguments[0];return this.coordinates[n]}if(2===arguments.length){var t=arguments[0],e=arguments[1];e.x=this.coordinates[t].x,e.y=this.coordinates[t].y,e.z=this.coordinates[t].z}},getCoordinateCopy:function(n){return new d(this.coordinates[n])},getDimension:function(){return this.dimension},getX:function(n){return this.coordinates[n].x},clone:function(){for(var n=new Array(this.size()).fill(null),t=0;t<this.coordinates.length;t++)n[t]=this.coordinates[t].clone();return new Bn(n,this.dimension)},expandEnvelope:function(n){for(var t=0;t<this.coordinates.length;t++)n.expandToInclude(this.coordinates[t]);return n},copy:function(){for(var n=new Array(this.size()).fill(null),t=0;t<this.coordinates.length;t++)n[t]=this.coordinates[t].copy();return new Bn(n,this.dimension)},toString:function(){if(this.coordinates.length>0){var n=new P(17*this.coordinates.length);n.append("("),n.append(this.coordinates[0]);for(var t=1;t<this.coordinates.length;t++)n.append(", "),n.append(this.coordinates[t]);return n.append(")"),n.toString()}return"()"},getY:function(n){return this.coordinates[n].y},toCoordinateArray:function(){return this.coordinates},interfaces_:function(){return[A,a]},getClass:function(){return Bn}}),Bn.serialVersionUID=-0xcb44a778db18e00,t(Gn.prototype,{readResolve:function(){return Gn.instance()},create:function(){if(1===arguments.length){if(arguments[0]instanceof Array){var n=arguments[0];return new Bn(n)}if(S(arguments[0],A)){var t=arguments[0];return new Bn(t)}}else if(2===arguments.length){var e=arguments[0],l=arguments[1];return l>3&&(l=3),l<2?new Bn(e):new Bn(e,l)}},interfaces_:function(){return[F,a]},getClass:function(){return Gn}}),Gn.instance=function(){return Gn.instanceObject},Gn.serialVersionUID=-0x38e49fa6cf6f2e00,Gn.instanceObject=new Gn;var lu,iu=Object.defineProperty,ru=qn({delete:Un,has:Xn,get:Vn,set:Hn,keys:Zn,values:Jn,entries:Kn,forEach:nt,clear:Wn}),uu="undefined"!=typeof Map&&Map.prototype.values?Map:ru;tt.prototype=new Z,tt.prototype.get=function(n){return this.map_.get(n)||null},tt.prototype.put=function(n,t){return this.map_.set(n,t),t},tt.prototype.values=function(){for(var n=new _,t=this.map_.values(),e=t.next();!e.done;)n.add(e.value),e=t.next();return n},tt.prototype.entrySet=function(){var n=new Q;return this.map_.entries().forEach(function(t){return n.add(t)}),n},tt.prototype.size=function(){return this.map_.size()},t(et.prototype,{equals:function(n){if(!(n instanceof et))return!1;var t=n;return this.modelType===t.modelType&&this.scale===t.scale},compareTo:function(n){var t=n,e=this.getMaximumSignificantDigits(),l=t.getMaximumSignificantDigits();return new L(e).compareTo(new L(l))},getScale:function(){return this.scale},isFloating:function(){return this.modelType===et.FLOATING||this.modelType===et.FLOATING_SINGLE},getType:function(){return this.modelType},toString:function(){var n="UNKNOWN";return this.modelType===et.FLOATING?n="Floating":this.modelType===et.FLOATING_SINGLE?n="Floating-Single":this.modelType===et.FIXED&&(n="Fixed (Scale="+this.getScale()+")"),n},makePrecise:function(){if("number"==typeof arguments[0]){var n=arguments[0];if(i.isNaN(n))return n;if(this.modelType===et.FLOATING_SINGLE){var t=n;return t}return this.modelType===et.FIXED?Math.round(n*this.scale)/this.scale:n}if(arguments[0]instanceof d){var e=arguments[0];if(this.modelType===et.FLOATING)return null;e.x=this.makePrecise(e.x),e.y=this.makePrecise(e.y)}},getMaximumSignificantDigits:function(){var n=16;return this.modelType===et.FLOATING?n=16:this.modelType===et.FLOATING_SINGLE?n=6:this.modelType===et.FIXED&&(n=1+Math.trunc(Math.ceil(Math.log(this.getScale())/Math.log(10)))),n},setScale:function(n){this.scale=Math.abs(n)},interfaces_:function(){return[a,r]},getClass:function(){return et}}),et.mostPrecise=function(n,t){return n.compareTo(t)>=0?n:t},t(lt.prototype,{readResolve:function(){return lt.nameToTypeMap.get(this.name)},toString:function(){return this.name},interfaces_:function(){return[a]},getClass:function(){return lt}}),lt.serialVersionUID=-552860263173159e4,lt.nameToTypeMap=new tt,et.Type=lt,et.serialVersionUID=0x6bee6404e9a25c00,et.FIXED=new lt("FIXED"),et.FLOATING=new lt("FLOATING"),et.FLOATING_SINGLE=new lt("FLOATING SINGLE"),et.maximumPreciseValue=9007199254740992,t(it.prototype,{toGeometry:function(n){return n.isNull()?this.createPoint(null):n.getMinX()===n.getMaxX()&&n.getMinY()===n.getMaxY()?this.createPoint(new d(n.getMinX(),n.getMinY())):n.getMinX()===n.getMaxX()||n.getMinY()===n.getMaxY()?this.createLineString([new d(n.getMinX(),n.getMinY()),new d(n.getMaxX(),n.getMaxY())]):this.createPolygon(this.createLinearRing([new d(n.getMinX(),n.getMinY()),new d(n.getMinX(),n.getMaxY()),new d(n.getMaxX(),n.getMaxY()),new d(n.getMaxX(),n.getMinY()),new d(n.getMinX(),n.getMinY())]),null)},createLineString:function(){if(0===arguments.length)return this.createLineString(this.getCoordinateSequenceFactory().create([]));if(1===arguments.length){if(arguments[0]instanceof Array){var n=arguments[0];return this.createLineString(null!==n?this.getCoordinateSequenceFactory().create(n):null)}if(S(arguments[0],A)){var t=arguments[0];return new Cn(t,this)}}},createMultiLineString:function(){if(0===arguments.length)return new gn(null,this);if(1===arguments.length){var n=arguments[0];return new gn(n,this)}},buildGeometry:function(n){for(var t=null,e=!1,l=!1,i=n.iterator();i.hasNext();){var r=i.next(),u=r.getClass();null===t&&(t=u),u!==t&&(e=!0),r.isGeometryCollectionOrDerived()&&(l=!0)}if(null===t)return this.createGeometryCollection();if(e||l)return this.createGeometryCollection(it.toGeometryArray(n));var s=n.iterator().next(),a=n.size()>1;if(a){if(s instanceof Pn)return this.createMultiPolygon(it.toPolygonArray(n));if(s instanceof Cn)return this.createMultiLineString(it.toLineStringArray(n));if(s instanceof Sn)return this.createMultiPoint(it.toPointArray(n));c.shouldNeverReachHere("Unhandled class: "+s.getClass().getName())}return s},createMultiPointFromCoords:function(n){return this.createMultiPoint(null!==n?this.getCoordinateSequenceFactory().create(n):null)},createPoint:function(){if(0===arguments.length)return this.createPoint(this.getCoordinateSequenceFactory().create([]));if(1===arguments.length){if(arguments[0]instanceof d){var n=arguments[0];return this.createPoint(null!==n?this.getCoordinateSequenceFactory().create([n]):null)}if(S(arguments[0],A)){var t=arguments[0];return new Sn(t,this)}}},getCoordinateSequenceFactory:function(){return this.coordinateSequenceFactory},createPolygon:function(){if(0===arguments.length)return new Pn(null,null,this);if(1===arguments.length){if(S(arguments[0],A)){var n=arguments[0];return this.createPolygon(this.createLinearRing(n))}if(arguments[0]instanceof Array){var t=arguments[0];return this.createPolygon(this.createLinearRing(t))}if(arguments[0]instanceof Rn){var e=arguments[0];return this.createPolygon(e,null)}}else if(2===arguments.length){var l=arguments[0],i=arguments[1];return new Pn(l,i,this)}},getSRID:function(){return this.SRID},createGeometryCollection:function(){if(0===arguments.length)return new dn(null,this);if(1===arguments.length){var n=arguments[0];return new dn(n,this)}},createGeometry:function(n){var t=new On(this);return t.edit(n,{edit:function(){if(2===arguments.length){var n=arguments[0];arguments[1];return this.coordinateSequenceFactory.create(n)}}})},getPrecisionModel:function(){return this.precisionModel},createLinearRing:function(){if(0===arguments.length)return this.createLinearRing(this.getCoordinateSequenceFactory().create([]));if(1===arguments.length){if(arguments[0]instanceof Array){var n=arguments[0];return this.createLinearRing(null!==n?this.getCoordinateSequenceFactory().create(n):null)}if(S(arguments[0],A)){var t=arguments[0];return new Rn(t,this)}}},createMultiPolygon:function(){if(0===arguments.length)return new Tn(null,this);if(1===arguments.length){var n=arguments[0];return new Tn(n,this)}},createMultiPoint:function(){if(0===arguments.length)return new Ln(null,this);if(1===arguments.length){if(arguments[0]instanceof Array){var n=arguments[0];return new Ln(n,this)}if(arguments[0]instanceof Array){var t=arguments[0];return this.createMultiPoint(null!==t?this.getCoordinateSequenceFactory().create(t):null)}if(S(arguments[0],A)){var e=arguments[0];if(null===e)return this.createMultiPoint(new Array(0).fill(null));for(var l=new Array(e.size()).fill(null),i=0;i<e.size();i++){var r=this.getCoordinateSequenceFactory().create(1,e.getDimension());bn.copy(e,i,r,0,1),l[i]=this.createPoint(r)}return this.createMultiPoint(l)}}},interfaces_:function(){return[a]},getClass:function(){return it}}),it.toMultiPolygonArray=function(n){var t=new Array(n.size()).fill(null);return n.toArray(t)},it.toGeometryArray=function(n){if(null===n)return null;var t=new Array(n.size()).fill(null);return n.toArray(t)},it.getDefaultCoordinateSequenceFactory=function(){return Gn.instance()},it.toMultiLineStringArray=function(n){var t=new Array(n.size()).fill(null);return n.toArray(t)},it.toLineStringArray=function(n){var t=new Array(n.size()).fill(null);return n.toArray(t)},it.toMultiPointArray=function(n){var t=new Array(n.size()).fill(null);return n.toArray(t)},it.toLinearRingArray=function(n){var t=new Array(n.size()).fill(null);return n.toArray(t)},it.toPointArray=function(n){var t=new Array(n.size()).fill(null);return n.toArray(t)},it.toPolygonArray=function(n){var t=new Array(n.size()).fill(null);return n.toArray(t)},it.createPointFromInternalCoord=function(n,t){return t.getPrecisionModel().makePrecise(n),t.getFactory().createPoint(n)},it.serialVersionUID=-0x5ea75f2051eeb400;var su={typeStr:/^\s*(\w+)\s*\(\s*(.*)\s*\)\s*$/,emptyTypeStr:/^\s*(\w+)\s*EMPTY\s*$/,spaces:/\s+/,parenComma:/\)\s*,\s*\(/,doubleParenComma:/\)\s*\)\s*,\s*\(\s*\(/,trimParens:/^\s*\(?(.*?)\)?\s*$/};t(rt.prototype,{read:function(n){var t,e,l;n=n.replace(/[\n\r]/g," ");var i=su.typeStr.exec(n);if(n.search("EMPTY")!==-1&&(i=su.emptyTypeStr.exec(n),i[2]=void 0),i&&(e=i[1].toLowerCase(),l=i[2],ou[e]&&(t=ou[e].apply(this,[l]))),void 0===t)throw new Error("Could not parse WKT "+n);return t},write:function(n){return this.extractGeometry(n)},extractGeometry:function(n){var t=n.getGeometryType().toLowerCase();if(!au[t])return null;var e,l=t.toUpperCase();return e=n.isEmpty()?l+" EMPTY":l+"("+au[t].apply(this,[n])+")"}});var au={coordinate:function(n){return n.x+" "+n.y},point:function(n){return au.coordinate.call(this,n.coordinates.coordinates[0])},multipoint:function(n){for(var t=[],e=0,l=n.geometries.length;e<l;++e)t.push("("+au.point.apply(this,[n.geometries[e]])+")");return t.join(",")},linestring:function(n){for(var t=[],e=0,l=n.points.coordinates.length;e<l;++e)t.push(au.coordinate.apply(this,[n.points.coordinates[e]]));return t.join(",")},linearring:function(n){for(var t=[],e=0,l=n.points.coordinates.length;e<l;++e)t.push(au.coordinate.apply(this,[n.points.coordinates[e]]));return t.join(",")},multilinestring:function(n){for(var t=[],e=0,l=n.geometries.length;e<l;++e)t.push("("+au.linestring.apply(this,[n.geometries[e]])+")");return t.join(",")},polygon:function(n){var t=[];t.push("("+au.linestring.apply(this,[n.shell])+")");for(var e=0,l=n.holes.length;e<l;++e)t.push("("+au.linestring.apply(this,[n.holes[e]])+")");return t.join(",")},multipolygon:function(n){for(var t=[],e=0,l=n.geometries.length;e<l;++e)t.push("("+au.polygon.apply(this,[n.geometries[e]])+")");return t.join(",")},geometrycollection:function(n){for(var t=[],e=0,l=n.geometries.length;e<l;++e)t.push(this.extractGeometry(n.geometries[e]));return t.join(",")}},ou={point:function(n){if(void 0===n)return this.geometryFactory.createPoint();var t=n.trim().split(su.spaces);return this.geometryFactory.createPoint(new d(Number.parseFloat(t[0]),Number.parseFloat(t[1])))},multipoint:function(n){if(void 0===n)return this.geometryFactory.createMultiPoint();for(var t,e=n.trim().split(","),l=[],i=0,r=e.length;i<r;++i)t=e[i].replace(su.trimParens,"$1"),l.push(ou.point.apply(this,[t]));return this.geometryFactory.createMultiPoint(l)},linestring:function(n){if(void 0===n)return this.geometryFactory.createLineString();for(var t,e=n.trim().split(","),l=[],i=0,r=e.length;i<r;++i)t=e[i].trim().split(su.spaces),l.push(new d(Number.parseFloat(t[0]),Number.parseFloat(t[1])));return this.geometryFactory.createLineString(l)},linearring:function(n){if(void 0===n)return this.geometryFactory.createLinearRing();for(var t,e=n.trim().split(","),l=[],i=0,r=e.length;i<r;++i)t=e[i].trim().split(su.spaces),l.push(new d(Number.parseFloat(t[0]),Number.parseFloat(t[1])));return this.geometryFactory.createLinearRing(l)},multilinestring:function(n){if(void 0===n)return this.geometryFactory.createMultiLineString();for(var t,e=n.trim().split(su.parenComma),l=[],i=0,r=e.length;i<r;++i)t=e[i].replace(su.trimParens,"$1"),l.push(ou.linestring.apply(this,[t]));return this.geometryFactory.createMultiLineString(l)},polygon:function(n){if(void 0===n)return this.geometryFactory.createPolygon();for(var t,e,l,i,r=n.trim().split(su.parenComma),u=[],s=0,a=r.length;s<a;++s)t=r[s].replace(su.trimParens,"$1"),e=ou.linestring.apply(this,[t]),l=this.geometryFactory.createLinearRing(e.points),0===s?i=l:u.push(l);return this.geometryFactory.createPolygon(i,u)},multipolygon:function(n){if(void 0===n)return this.geometryFactory.createMultiPolygon();for(var t,e=n.trim().split(su.doubleParenComma),l=[],i=0,r=e.length;i<r;++i)t=e[i].replace(su.trimParens,"$1"),l.push(ou.polygon.apply(this,[t]));return this.geometryFactory.createMultiPolygon(l)},geometrycollection:function(n){if(void 0===n)return this.geometryFactory.createGeometryCollection();n=n.replace(/,\s*([A-Za-z])/g,"|$1");for(var t=n.trim().split("|"),e=[],l=0,i=t.length;l<i;++l)e.push(this.read(t[l]));return this.geometryFactory.createGeometryCollection(e)}};t(ut.prototype,{write:function(n){return this.parser.write(n)}}),t(ut,{toLineString:function(n,t){if(2!==arguments.length)throw new Error("Not implemented");return"LINESTRING ( "+n.x+" "+n.y+", "+t.x+" "+t.y+" )"}}),t(st.prototype,{getIndexAlongSegment:function(n,t){return this.computeIntLineIndex(),this.intLineIndex[n][t]},getTopologySummary:function(){var n=new P;return this.isEndPoint()&&n.append(" endpoint"),this._isProper&&n.append(" proper"),this.isCollinear()&&n.append(" collinear"),n.toString()},computeIntersection:function(n,t,e,l){this.inputLines[0][0]=n,this.inputLines[0][1]=t,this.inputLines[1][0]=e,this.inputLines[1][1]=l,this.result=this.computeIntersect(n,t,e,l)},getIntersectionNum:function(){return this.result},computeIntLineIndex:function(){if(0===arguments.length)null===this.intLineIndex&&(this.intLineIndex=Array(2).fill().map(function(){return Array(2)}),this.computeIntLineIndex(0),this.computeIntLineIndex(1));else if(1===arguments.length){var n=arguments[0],t=this.getEdgeDistance(n,0),e=this.getEdgeDistance(n,1);t>e?(this.intLineIndex[n][0]=0,this.intLineIndex[n][1]=1):(this.intLineIndex[n][0]=1,this.intLineIndex[n][1]=0)}},isProper:function(){return this.hasIntersection()&&this._isProper},setPrecisionModel:function(n){this.precisionModel=n},isInteriorIntersection:function(){if(0===arguments.length)return!!this.isInteriorIntersection(0)||!!this.isInteriorIntersection(1);if(1===arguments.length){for(var n=arguments[0],t=0;t<this.result;t++)if(!this.intPt[t].equals2D(this.inputLines[n][0])&&!this.intPt[t].equals2D(this.inputLines[n][1]))return!0;return!1}},getIntersection:function(n){return this.intPt[n]},isEndPoint:function(){return this.hasIntersection()&&!this._isProper},hasIntersection:function(){return this.result!==st.NO_INTERSECTION},getEdgeDistance:function(n,t){var e=st.computeEdgeDistance(this.intPt[t],this.inputLines[n][0],this.inputLines[n][1]);return e},isCollinear:function(){return this.result===st.COLLINEAR_INTERSECTION},toString:function(){return ut.toLineString(this.inputLines[0][0],this.inputLines[0][1])+" - "+ut.toLineString(this.inputLines[1][0],this.inputLines[1][1])+this.getTopologySummary()},getEndpoint:function(n,t){return this.inputLines[n][t]},isIntersection:function(n){for(var t=0;t<this.result;t++)if(this.intPt[t].equals2D(n))return!0;return!1},getIntersectionAlongSegment:function(n,t){return this.computeIntLineIndex(),this.intPt[this.intLineIndex[n][t]]},interfaces_:function(){return[]},getClass:function(){return st}}),st.computeEdgeDistance=function(n,t,e){var l=Math.abs(e.x-t.x),i=Math.abs(e.y-t.y),r=-1;if(n.equals(t))r=0;else if(n.equals(e))r=l>i?l:i;else{var u=Math.abs(n.x-t.x),s=Math.abs(n.y-t.y);r=l>i?u:s,0!==r||n.equals(t)||(r=Math.max(u,s))}return c.isTrue(!(0===r&&!n.equals(t)),"Bad distance calculation"),r},st.nonRobustComputeEdgeDistance=function(n,t,e){var l=n.x-t.x,i=n.y-t.y,r=Math.sqrt(l*l+i*i);return c.isTrue(!(0===r&&!n.equals(t)),"Invalid distance calculation"),r},st.DONT_INTERSECT=0,st.DO_INTERSECT=1,st.COLLINEAR=2,st.NO_INTERSECTION=0,st.POINT_INTERSECTION=1,st.COLLINEAR_INTERSECTION=2,h(at,st),t(at.prototype,{isInSegmentEnvelopes:function(n){var t=new E(this.inputLines[0][0],this.inputLines[0][1]),e=new E(this.inputLines[1][0],this.inputLines[1][1]);return t.contains(n)&&e.contains(n)},computeIntersection:function(){if(3!==arguments.length)return st.prototype.computeIntersection.apply(this,arguments);var n=arguments[0],t=arguments[1],e=arguments[2];return this._isProper=!1,E.intersects(t,e,n)&&0===ft.orientationIndex(t,e,n)&&0===ft.orientationIndex(e,t,n)?(this._isProper=!0,(n.equals(t)||n.equals(e))&&(this._isProper=!1),this.result=st.POINT_INTERSECTION,null):void(this.result=st.NO_INTERSECTION)},normalizeToMinimum:function(n,t,e,l,i){i.x=this.smallestInAbsValue(n.x,t.x,e.x,l.x),i.y=this.smallestInAbsValue(n.y,t.y,e.y,l.y),n.x-=i.x,n.y-=i.y,t.x-=i.x,t.y-=i.y,e.x-=i.x,e.y-=i.y,l.x-=i.x,l.y-=i.y},safeHCoordinateIntersection:function(n,t,e,l){var i=null;try{i=D.intersection(n,t,e,l)}catch(r){if(!(r instanceof C))throw r;i=at.nearestEndpoint(n,t,e,l)}finally{}return i},intersection:function(n,t,e,l){var i=this.intersectionWithNormalization(n,t,e,l);return this.isInSegmentEnvelopes(i)||(i=new d(at.nearestEndpoint(n,t,e,l))),null!==this.precisionModel&&this.precisionModel.makePrecise(i),i},smallestInAbsValue:function(n,t,e,l){var i=n,r=Math.abs(i);return Math.abs(t)<r&&(i=t,r=Math.abs(t)),Math.abs(e)<r&&(i=e,r=Math.abs(e)),Math.abs(l)<r&&(i=l),i},checkDD:function(n,t,e,l,i){var r=O.intersection(n,t,e,l),u=this.isInSegmentEnvelopes(r);k.out.println("DD in env = "+u+"  --------------------- "+r),i.distance(r)>1e-4&&k.out.println("Distance = "+i.distance(r))},intersectionWithNormalization:function(n,t,e,l){var i=new d(n),r=new d(t),u=new d(e),s=new d(l),a=new d;this.normalizeToEnvCentre(i,r,u,s,a);var o=this.safeHCoordinateIntersection(i,r,u,s);return o.x+=a.x,o.y+=a.y,o},computeCollinearIntersection:function(n,t,e,l){var i=E.intersects(n,t,e),r=E.intersects(n,t,l),u=E.intersects(e,l,n),s=E.intersects(e,l,t);return i&&r?(this.intPt[0]=e,this.intPt[1]=l,st.COLLINEAR_INTERSECTION):u&&s?(this.intPt[0]=n,this.intPt[1]=t,st.COLLINEAR_INTERSECTION):i&&u?(this.intPt[0]=e,this.intPt[1]=n,!e.equals(n)||r||s?st.COLLINEAR_INTERSECTION:st.POINT_INTERSECTION):i&&s?(this.intPt[0]=e,this.intPt[1]=t,!e.equals(t)||r||u?st.COLLINEAR_INTERSECTION:st.POINT_INTERSECTION):r&&u?(this.intPt[0]=l,this.intPt[1]=n,!l.equals(n)||i||s?st.COLLINEAR_INTERSECTION:st.POINT_INTERSECTION):r&&s?(this.intPt[0]=l,this.intPt[1]=t,!l.equals(t)||i||u?st.COLLINEAR_INTERSECTION:st.POINT_INTERSECTION):st.NO_INTERSECTION},normalizeToEnvCentre:function(n,t,e,l,i){
var r=n.x<t.x?n.x:t.x,u=n.y<t.y?n.y:t.y,s=n.x>t.x?n.x:t.x,a=n.y>t.y?n.y:t.y,o=e.x<l.x?e.x:l.x,h=e.y<l.y?e.y:l.y,f=e.x>l.x?e.x:l.x,c=e.y>l.y?e.y:l.y,d=r>o?r:o,g=s<f?s:f,p=u>h?u:h,v=a<c?a:c,m=(d+g)/2,y=(p+v)/2;i.x=m,i.y=y,n.x-=i.x,n.y-=i.y,t.x-=i.x,t.y-=i.y,e.x-=i.x,e.y-=i.y,l.x-=i.x,l.y-=i.y},computeIntersect:function(n,t,e,l){if(this._isProper=!1,!E.intersects(n,t,e,l))return st.NO_INTERSECTION;var i=ft.orientationIndex(n,t,e),r=ft.orientationIndex(n,t,l);if(i>0&&r>0||i<0&&r<0)return st.NO_INTERSECTION;var u=ft.orientationIndex(e,l,n),s=ft.orientationIndex(e,l,t);if(u>0&&s>0||u<0&&s<0)return st.NO_INTERSECTION;var a=0===i&&0===r&&0===u&&0===s;return a?this.computeCollinearIntersection(n,t,e,l):(0===i||0===r||0===u||0===s?(this._isProper=!1,n.equals2D(e)||n.equals2D(l)?this.intPt[0]=n:t.equals2D(e)||t.equals2D(l)?this.intPt[0]=t:0===i?this.intPt[0]=new d(e):0===r?this.intPt[0]=new d(l):0===u?this.intPt[0]=new d(n):0===s&&(this.intPt[0]=new d(t))):(this._isProper=!0,this.intPt[0]=this.intersection(n,t,e,l)),st.POINT_INTERSECTION)},interfaces_:function(){return[]},getClass:function(){return at}}),at.nearestEndpoint=function(n,t,e,l){var i=n,r=ft.distancePointLine(n,e,l),u=ft.distancePointLine(t,e,l);return u<r&&(r=u,i=t),u=ft.distancePointLine(e,n,t),u<r&&(r=u,i=e),u=ft.distancePointLine(l,n,t),u<r&&(r=u,i=l),i},t(ot.prototype,{interfaces_:function(){return[]},getClass:function(){return ot}}),ot.orientationIndex=function(n,t,e){var l=t.x-n.x,i=t.y-n.y,r=e.x-t.x,u=e.y-t.y;return ot.signOfDet2x2(l,i,r,u)},ot.signOfDet2x2=function(n,t,e,l){var i=null,r=null,u=null,s=0;if(i=1,0===n||0===l)return 0===t||0===e?0:t>0?e>0?-i:i:e>0?i:-i;if(0===t||0===e)return l>0?n>0?i:-i:n>0?-i:i;if(0<t?0<l?t<=l||(i=-i,r=n,n=e,e=r,r=t,t=l,l=r):t<=-l?(i=-i,e=-e,l=-l):(r=n,n=-e,e=r,r=t,t=-l,l=r):0<l?-t<=l?(i=-i,n=-n,t=-t):(r=-n,n=e,e=r,r=-t,t=l,l=r):t>=l?(n=-n,t=-t,e=-e,l=-l):(i=-i,r=-n,n=-e,e=r,r=-t,t=-l,l=r),0<n){if(!(0<e))return i;if(!(n<=e))return i}else{if(0<e)return-i;if(!(n>=e))return-i;i=-i,n=-n,e=-e}for(;;){if(s+=1,u=Math.floor(e/n),e-=u*n,l-=u*t,l<0)return-i;if(l>t)return i;if(n>e+e){if(t<l+l)return i}else{if(t>l+l)return-i;e=n-e,l=t-l,i=-i}if(0===l)return 0===e?0:-i;if(0===e)return i;if(u=Math.floor(n/e),n-=u*e,t-=u*l,t<0)return i;if(t>l)return-i;if(e>n+n){if(l<t+t)return-i}else{if(l>t+t)return i;n=e-n,t=l-t,i=-i}if(0===t)return 0===n?0:i;if(0===n)return-i}},t(ht.prototype,{countSegment:function(n,t){if(n.x<this.p.x&&t.x<this.p.x)return null;if(this.p.x===t.x&&this.p.y===t.y)return this.isPointOnSegment=!0,null;if(n.y===this.p.y&&t.y===this.p.y){var e=n.x,l=t.x;return e>l&&(e=t.x,l=n.x),this.p.x>=e&&this.p.x<=l&&(this.isPointOnSegment=!0),null}if(n.y>this.p.y&&t.y<=this.p.y||t.y>this.p.y&&n.y<=this.p.y){var i=n.x-this.p.x,r=n.y-this.p.y,u=t.x-this.p.x,s=t.y-this.p.y,a=ot.signOfDet2x2(i,r,u,s);if(0===a)return this.isPointOnSegment=!0,null;s<r&&(a=-a),a>0&&this.crossingCount++}},isPointInPolygon:function(){return this.getLocation()!==I.EXTERIOR},getLocation:function(){return this.isPointOnSegment?I.BOUNDARY:this.crossingCount%2===1?I.INTERIOR:I.EXTERIOR},isOnSegment:function(){return this.isPointOnSegment},interfaces_:function(){return[]},getClass:function(){return ht}}),ht.locatePointInRing=function(){if(arguments[0]instanceof d&&S(arguments[1],A)){for(var n=arguments[0],t=arguments[1],e=new ht(n),l=new d,i=new d,r=1;r<t.size();r++)if(t.getCoordinate(r,l),t.getCoordinate(r-1,i),e.countSegment(l,i),e.isOnSegment())return e.getLocation();return e.getLocation()}if(arguments[0]instanceof d&&arguments[1]instanceof Array){for(var u=arguments[0],s=arguments[1],e=new ht(u),r=1;r<s.length;r++){var l=s[r],i=s[r-1];if(e.countSegment(l,i),e.isOnSegment())return e.getLocation()}return e.getLocation()}},t(ft.prototype,{interfaces_:function(){return[]},getClass:function(){return ft}}),ft.orientationIndex=function(n,t,e){return O.orientationIndex(n,t,e)},ft.signedArea=function(){if(arguments[0]instanceof Array){var n=arguments[0];if(n.length<3)return 0;for(var t=0,e=n[0].x,l=1;l<n.length-1;l++){var i=n[l].x-e,r=n[l+1].y,u=n[l-1].y;t+=i*(u-r)}return t/2}if(S(arguments[0],A)){var s=arguments[0],a=s.size();if(a<3)return 0;var o=new d,h=new d,f=new d;s.getCoordinate(0,h),s.getCoordinate(1,f);var e=h.x;f.x-=e;for(var t=0,l=1;l<a-1;l++)o.y=h.y,h.x=f.x,h.y=f.y,s.getCoordinate(l+1,f),f.x-=e,t+=h.x*(o.y-f.y);return t/2}},ft.distanceLineLine=function(n,t,e,l){if(n.equals(t))return ft.distancePointLine(n,e,l);if(e.equals(l))return ft.distancePointLine(l,n,t);var i=!1;if(E.intersects(n,t,e,l)){var r=(t.x-n.x)*(l.y-e.y)-(t.y-n.y)*(l.x-e.x);if(0===r)i=!0;else{var u=(n.y-e.y)*(l.x-e.x)-(n.x-e.x)*(l.y-e.y),s=(n.y-e.y)*(t.x-n.x)-(n.x-e.x)*(t.y-n.y),a=s/r,o=u/r;(o<0||o>1||a<0||a>1)&&(i=!0)}}else i=!0;return i?N.min(ft.distancePointLine(n,e,l),ft.distancePointLine(t,e,l),ft.distancePointLine(e,n,t),ft.distancePointLine(l,n,t)):0},ft.isPointInRing=function(n,t){return ft.locatePointInRing(n,t)!==I.EXTERIOR},ft.computeLength=function(n){var t=n.size();if(t<=1)return 0;var e=0,l=new d;n.getCoordinate(0,l);for(var i=l.x,r=l.y,u=1;u<t;u++){n.getCoordinate(u,l);var s=l.x,a=l.y,o=s-i,h=a-r;e+=Math.sqrt(o*o+h*h),i=s,r=a}return e},ft.isCCW=function(n){var t=n.length-1;if(t<3)throw new l("Ring has fewer than 4 points, so orientation cannot be determined");for(var e=n[0],i=0,r=1;r<=t;r++){var u=n[r];u.y>e.y&&(e=u,i=r)}var s=i;do{s-=1,s<0&&(s=t)}while(n[s].equals2D(e)&&s!==i);var a=i;do{a=(a+1)%t}while(n[a].equals2D(e)&&a!==i);var o=n[s],h=n[a];if(o.equals2D(e)||h.equals2D(e)||o.equals2D(h))return!1;var f=ft.computeOrientation(o,e,h),c=!1;return c=0===f?o.x>h.x:f>0},ft.locatePointInRing=function(n,t){return ht.locatePointInRing(n,t)},ft.distancePointLinePerpendicular=function(n,t,e){var l=(e.x-t.x)*(e.x-t.x)+(e.y-t.y)*(e.y-t.y),i=((t.y-n.y)*(e.x-t.x)-(t.x-n.x)*(e.y-t.y))/l;return Math.abs(i)*Math.sqrt(l)},ft.computeOrientation=function(n,t,e){return ft.orientationIndex(n,t,e)},ft.distancePointLine=function(){if(2===arguments.length){var n=arguments[0],t=arguments[1];if(0===t.length)throw new l("Line array must contain at least one vertex");for(var e=n.distance(t[0]),i=0;i<t.length-1;i++){var r=ft.distancePointLine(n,t[i],t[i+1]);r<e&&(e=r)}return e}if(3===arguments.length){var u=arguments[0],s=arguments[1],a=arguments[2];if(s.x===a.x&&s.y===a.y)return u.distance(s);var o=(a.x-s.x)*(a.x-s.x)+(a.y-s.y)*(a.y-s.y),h=((u.x-s.x)*(a.x-s.x)+(u.y-s.y)*(a.y-s.y))/o;if(h<=0)return u.distance(s);if(h>=1)return u.distance(a);var f=((s.y-u.y)*(a.x-s.x)-(s.x-u.x)*(a.y-s.y))/o;return Math.abs(f)*Math.sqrt(o)}},ft.isOnLine=function(n,t){for(var e=new at,l=1;l<t.length;l++){var i=t[l-1],r=t[l];if(e.computeIntersection(n,i,r),e.hasIntersection())return!0}return!1},ft.CLOCKWISE=-1,ft.RIGHT=ft.CLOCKWISE,ft.COUNTERCLOCKWISE=1,ft.LEFT=ft.COUNTERCLOCKWISE,ft.COLLINEAR=0,ft.STRAIGHT=ft.COLLINEAR,t(ct.prototype,{minX:function(){return Math.min(this.p0.x,this.p1.x)},orientationIndex:function(){if(arguments[0]instanceof ct){var n=arguments[0],t=ft.orientationIndex(this.p0,this.p1,n.p0),e=ft.orientationIndex(this.p0,this.p1,n.p1);return t>=0&&e>=0?Math.max(t,e):t<=0&&e<=0?Math.max(t,e):0}if(arguments[0]instanceof d){var l=arguments[0];return ft.orientationIndex(this.p0,this.p1,l)}},toGeometry:function(n){return n.createLineString([this.p0,this.p1])},isVertical:function(){return this.p0.x===this.p1.x},equals:function(n){if(!(n instanceof ct))return!1;var t=n;return this.p0.equals(t.p0)&&this.p1.equals(t.p1)},intersection:function(n){var t=new at;return t.computeIntersection(this.p0,this.p1,n.p0,n.p1),t.hasIntersection()?t.getIntersection(0):null},project:function(){if(arguments[0]instanceof d){var n=arguments[0];if(n.equals(this.p0)||n.equals(this.p1))return new d(n);var t=this.projectionFactor(n),e=new d;return e.x=this.p0.x+t*(this.p1.x-this.p0.x),e.y=this.p0.y+t*(this.p1.y-this.p0.y),e}if(arguments[0]instanceof ct){var l=arguments[0],i=this.projectionFactor(l.p0),r=this.projectionFactor(l.p1);if(i>=1&&r>=1)return null;if(i<=0&&r<=0)return null;var u=this.project(l.p0);i<0&&(u=this.p0),i>1&&(u=this.p1);var s=this.project(l.p1);return r<0&&(s=this.p0),r>1&&(s=this.p1),new ct(u,s)}},normalize:function(){this.p1.compareTo(this.p0)<0&&this.reverse()},angle:function(){return Math.atan2(this.p1.y-this.p0.y,this.p1.x-this.p0.x)},getCoordinate:function(n){return 0===n?this.p0:this.p1},distancePerpendicular:function(n){return ft.distancePointLinePerpendicular(n,this.p0,this.p1)},minY:function(){return Math.min(this.p0.y,this.p1.y)},midPoint:function(){return ct.midPoint(this.p0,this.p1)},projectionFactor:function(n){if(n.equals(this.p0))return 0;if(n.equals(this.p1))return 1;var t=this.p1.x-this.p0.x,e=this.p1.y-this.p0.y,l=t*t+e*e;if(l<=0)return i.NaN;var r=((n.x-this.p0.x)*t+(n.y-this.p0.y)*e)/l;return r},closestPoints:function(n){var t=this.intersection(n);if(null!==t)return[t,t];var e=new Array(2).fill(null),l=i.MAX_VALUE,r=null,u=this.closestPoint(n.p0);l=u.distance(n.p0),e[0]=u,e[1]=n.p0;var s=this.closestPoint(n.p1);r=s.distance(n.p1),r<l&&(l=r,e[0]=s,e[1]=n.p1);var a=n.closestPoint(this.p0);r=a.distance(this.p0),r<l&&(l=r,e[0]=this.p0,e[1]=a);var o=n.closestPoint(this.p1);return r=o.distance(this.p1),r<l&&(l=r,e[0]=this.p1,e[1]=o),e},closestPoint:function(n){var t=this.projectionFactor(n);if(t>0&&t<1)return this.project(n);var e=this.p0.distance(n),l=this.p1.distance(n);return e<l?this.p0:this.p1},maxX:function(){return Math.max(this.p0.x,this.p1.x)},getLength:function(){return this.p0.distance(this.p1)},compareTo:function(n){var t=n,e=this.p0.compareTo(t.p0);return 0!==e?e:this.p1.compareTo(t.p1)},reverse:function(){var n=this.p0;this.p0=this.p1,this.p1=n},equalsTopo:function(n){return this.p0.equals(n.p0)&&this.p1.equals(n.p1)||this.p0.equals(n.p1)&&this.p1.equals(n.p0)},lineIntersection:function(n){try{var t=D.intersection(this.p0,this.p1,n.p0,n.p1);return t}catch(n){if(!(n instanceof C))throw n}finally{}return null},maxY:function(){return Math.max(this.p0.y,this.p1.y)},pointAlongOffset:function(n,t){var e=this.p0.x+n*(this.p1.x-this.p0.x),l=this.p0.y+n*(this.p1.y-this.p0.y),i=this.p1.x-this.p0.x,r=this.p1.y-this.p0.y,u=Math.sqrt(i*i+r*r),s=0,a=0;if(0!==t){if(u<=0)throw new IllegalStateException("Cannot compute offset from zero-length line segment");s=t*i/u,a=t*r/u}var o=e-a,h=l+s,f=new d(o,h);return f},setCoordinates:function(){if(1===arguments.length){var n=arguments[0];this.setCoordinates(n.p0,n.p1)}else if(2===arguments.length){var t=arguments[0],e=arguments[1];this.p0.x=t.x,this.p0.y=t.y,this.p1.x=e.x,this.p1.y=e.y}},segmentFraction:function(n){var t=this.projectionFactor(n);return t<0?t=0:(t>1||i.isNaN(t))&&(t=1),t},toString:function(){return"LINESTRING( "+this.p0.x+" "+this.p0.y+", "+this.p1.x+" "+this.p1.y+")"},isHorizontal:function(){return this.p0.y===this.p1.y},distance:function(){if(arguments[0]instanceof ct){var n=arguments[0];return ft.distanceLineLine(this.p0,this.p1,n.p0,n.p1)}if(arguments[0]instanceof d){var t=arguments[0];return ft.distancePointLine(t,this.p0,this.p1)}},pointAlong:function(n){var t=new d;return t.x=this.p0.x+n*(this.p1.x-this.p0.x),t.y=this.p0.y+n*(this.p1.y-this.p0.y),t},hashCode:function(){var n=java.lang.Double.doubleToLongBits(this.p0.x);n^=31*java.lang.Double.doubleToLongBits(this.p0.y);var t=Math.trunc(n)^Math.trunc(n>>32),e=java.lang.Double.doubleToLongBits(this.p1.x);e^=31*java.lang.Double.doubleToLongBits(this.p1.y);var l=Math.trunc(e)^Math.trunc(e>>32);return t^l},interfaces_:function(){return[r,a]},getClass:function(){return ct}}),ct.midPoint=function(n,t){return new d((n.x+t.x)/2,(n.y+t.y)/2)},ct.serialVersionUID=0x2d2172135f411c00,t(dt.prototype,{isIntersects:function(){return!this.isDisjoint()},isCovers:function(){var n=dt.isTrue(this.matrix[I.INTERIOR][I.INTERIOR])||dt.isTrue(this.matrix[I.INTERIOR][I.BOUNDARY])||dt.isTrue(this.matrix[I.BOUNDARY][I.INTERIOR])||dt.isTrue(this.matrix[I.BOUNDARY][I.BOUNDARY]);return n&&this.matrix[I.EXTERIOR][I.INTERIOR]===hn.FALSE&&this.matrix[I.EXTERIOR][I.BOUNDARY]===hn.FALSE},isCoveredBy:function(){var n=dt.isTrue(this.matrix[I.INTERIOR][I.INTERIOR])||dt.isTrue(this.matrix[I.INTERIOR][I.BOUNDARY])||dt.isTrue(this.matrix[I.BOUNDARY][I.INTERIOR])||dt.isTrue(this.matrix[I.BOUNDARY][I.BOUNDARY]);return n&&this.matrix[I.INTERIOR][I.EXTERIOR]===hn.FALSE&&this.matrix[I.BOUNDARY][I.EXTERIOR]===hn.FALSE},set:function(){if(1===arguments.length)for(var n=arguments[0],t=0;t<n.length;t++){var e=Math.trunc(t/3),l=t%3;this.matrix[e][l]=hn.toDimensionValue(n.charAt(t))}else if(3===arguments.length){var i=arguments[0],r=arguments[1],u=arguments[2];this.matrix[i][r]=u}},isContains:function(){return dt.isTrue(this.matrix[I.INTERIOR][I.INTERIOR])&&this.matrix[I.EXTERIOR][I.INTERIOR]===hn.FALSE&&this.matrix[I.EXTERIOR][I.BOUNDARY]===hn.FALSE},setAtLeast:function(){if(1===arguments.length)for(var n=arguments[0],t=0;t<n.length;t++){var e=Math.trunc(t/3),l=t%3;this.setAtLeast(e,l,hn.toDimensionValue(n.charAt(t)))}else if(3===arguments.length){var i=arguments[0],r=arguments[1],u=arguments[2];this.matrix[i][r]<u&&(this.matrix[i][r]=u)}},setAtLeastIfValid:function(n,t,e){n>=0&&t>=0&&this.setAtLeast(n,t,e)},isWithin:function(){return dt.isTrue(this.matrix[I.INTERIOR][I.INTERIOR])&&this.matrix[I.INTERIOR][I.EXTERIOR]===hn.FALSE&&this.matrix[I.BOUNDARY][I.EXTERIOR]===hn.FALSE},isTouches:function(n,t){return n>t?this.isTouches(t,n):(n===hn.A&&t===hn.A||n===hn.L&&t===hn.L||n===hn.L&&t===hn.A||n===hn.P&&t===hn.A||n===hn.P&&t===hn.L)&&(this.matrix[I.INTERIOR][I.INTERIOR]===hn.FALSE&&(dt.isTrue(this.matrix[I.INTERIOR][I.BOUNDARY])||dt.isTrue(this.matrix[I.BOUNDARY][I.INTERIOR])||dt.isTrue(this.matrix[I.BOUNDARY][I.BOUNDARY])))},isOverlaps:function(n,t){return n===hn.P&&t===hn.P||n===hn.A&&t===hn.A?dt.isTrue(this.matrix[I.INTERIOR][I.INTERIOR])&&dt.isTrue(this.matrix[I.INTERIOR][I.EXTERIOR])&&dt.isTrue(this.matrix[I.EXTERIOR][I.INTERIOR]):n===hn.L&&t===hn.L&&(1===this.matrix[I.INTERIOR][I.INTERIOR]&&dt.isTrue(this.matrix[I.INTERIOR][I.EXTERIOR])&&dt.isTrue(this.matrix[I.EXTERIOR][I.INTERIOR]))},isEquals:function(n,t){return n===t&&(dt.isTrue(this.matrix[I.INTERIOR][I.INTERIOR])&&this.matrix[I.INTERIOR][I.EXTERIOR]===hn.FALSE&&this.matrix[I.BOUNDARY][I.EXTERIOR]===hn.FALSE&&this.matrix[I.EXTERIOR][I.INTERIOR]===hn.FALSE&&this.matrix[I.EXTERIOR][I.BOUNDARY]===hn.FALSE)},toString:function(){for(var n=new P("123456789"),t=0;t<3;t++)for(var e=0;e<3;e++)n.setCharAt(3*t+e,hn.toDimensionSymbol(this.matrix[t][e]));return n.toString()},setAll:function(n){for(var t=0;t<3;t++)for(var e=0;e<3;e++)this.matrix[t][e]=n},get:function(n,t){return this.matrix[n][t]},transpose:function(){var n=this.matrix[1][0];return this.matrix[1][0]=this.matrix[0][1],this.matrix[0][1]=n,n=this.matrix[2][0],this.matrix[2][0]=this.matrix[0][2],this.matrix[0][2]=n,n=this.matrix[2][1],this.matrix[2][1]=this.matrix[1][2],this.matrix[1][2]=n,this},matches:function(n){if(9!==n.length)throw new l("Should be length 9: "+n);for(var t=0;t<3;t++)for(var e=0;e<3;e++)if(!dt.matches(this.matrix[t][e],n.charAt(3*t+e)))return!1;return!0},add:function(n){for(var t=0;t<3;t++)for(var e=0;e<3;e++)this.setAtLeast(t,e,n.get(t,e))},isDisjoint:function(){return this.matrix[I.INTERIOR][I.INTERIOR]===hn.FALSE&&this.matrix[I.INTERIOR][I.BOUNDARY]===hn.FALSE&&this.matrix[I.BOUNDARY][I.INTERIOR]===hn.FALSE&&this.matrix[I.BOUNDARY][I.BOUNDARY]===hn.FALSE},isCrosses:function(n,t){return n===hn.P&&t===hn.L||n===hn.P&&t===hn.A||n===hn.L&&t===hn.A?dt.isTrue(this.matrix[I.INTERIOR][I.INTERIOR])&&dt.isTrue(this.matrix[I.INTERIOR][I.EXTERIOR]):n===hn.L&&t===hn.P||n===hn.A&&t===hn.P||n===hn.A&&t===hn.L?dt.isTrue(this.matrix[I.INTERIOR][I.INTERIOR])&&dt.isTrue(this.matrix[I.EXTERIOR][I.INTERIOR]):n===hn.L&&t===hn.L&&0===this.matrix[I.INTERIOR][I.INTERIOR]},interfaces_:function(){return[u]},getClass:function(){return dt}}),dt.matches=function(){if(Number.isInteger(arguments[0])&&"string"==typeof arguments[1]){var n=arguments[0],t=arguments[1];return t===hn.SYM_DONTCARE||(t===hn.SYM_TRUE&&(n>=0||n===hn.TRUE)||(t===hn.SYM_FALSE&&n===hn.FALSE||(t===hn.SYM_P&&n===hn.P||(t===hn.SYM_L&&n===hn.L||t===hn.SYM_A&&n===hn.A))))}if("string"==typeof arguments[0]&&"string"==typeof arguments[1]){var e=arguments[0],l=arguments[1],i=new dt(e);return i.matches(l)}},dt.isTrue=function(n){return n>=0||n===hn.TRUE};var hu=Object.freeze({Coordinate:d,CoordinateList:M,Envelope:E,LineSegment:ct,GeometryFactory:it,Geometry:G,Point:Sn,LineString:Cn,LinearRing:Rn,Polygon:Pn,GeometryCollection:dn,MultiPoint:Ln,MultiLineString:gn,MultiPolygon:Tn,Dimension:hn,IntersectionMatrix:dt,PrecisionModel:et});t(gt.prototype,{addPoint:function(n){this.ptCount+=1,this.ptCentSum.x+=n.x,this.ptCentSum.y+=n.y},setBasePoint:function(n){null===this.areaBasePt&&(this.areaBasePt=n)},addLineSegments:function(n){for(var t=0,e=0;e<n.length-1;e++){var l=n[e].distance(n[e+1]);if(0!==l){t+=l;var i=(n[e].x+n[e+1].x)/2;this.lineCentSum.x+=l*i;var r=(n[e].y+n[e+1].y)/2;this.lineCentSum.y+=l*r}}this.totalLength+=t,0===t&&n.length>0&&this.addPoint(n[0])},addHole:function(n){for(var t=ft.isCCW(n),e=0;e<n.length-1;e++)this.addTriangle(this.areaBasePt,n[e],n[e+1],t);this.addLineSegments(n)},getCentroid:function(){var n=new d;if(Math.abs(this.areasum2)>0)n.x=this.cg3.x/3/this.areasum2,n.y=this.cg3.y/3/this.areasum2;else if(this.totalLength>0)n.x=this.lineCentSum.x/this.totalLength,n.y=this.lineCentSum.y/this.totalLength;else{if(!(this.ptCount>0))return null;n.x=this.ptCentSum.x/this.ptCount,n.y=this.ptCentSum.y/this.ptCount}return n},addShell:function(n){n.length>0&&this.setBasePoint(n[0]);for(var t=!ft.isCCW(n),e=0;e<n.length-1;e++)this.addTriangle(this.areaBasePt,n[e],n[e+1],t);this.addLineSegments(n)},addTriangle:function(n,t,e,l){var i=l?1:-1;gt.centroid3(n,t,e,this.triangleCent3);var r=gt.area2(n,t,e);this.cg3.x+=i*r*this.triangleCent3.x,this.cg3.y+=i*r*this.triangleCent3.y,this.areasum2+=i*r},add:function(){if(arguments[0]instanceof Pn){var n=arguments[0];this.addShell(n.getExteriorRing().getCoordinates());for(var t=0;t<n.getNumInteriorRing();t++)this.addHole(n.getInteriorRingN(t).getCoordinates())}else if(arguments[0]instanceof G){var e=arguments[0];if(e.isEmpty())return null;if(e instanceof Sn)this.addPoint(e.getCoordinate());else if(e instanceof Cn)this.addLineSegments(e.getCoordinates());else if(e instanceof Pn){var l=e;this.add(l)}else if(e instanceof dn)for(var i=e,t=0;t<i.getNumGeometries();t++)this.add(i.getGeometryN(t))}},interfaces_:function(){return[]},getClass:function(){return gt}}),gt.area2=function(n,t,e){return(t.x-n.x)*(e.y-n.y)-(e.x-n.x)*(t.y-n.y)},gt.centroid3=function(n,t,e,l){return l.x=n.x+t.x+e.x,l.y=n.y+t.y+e.y,null},gt.getCentroid=function(n){var t=new gt(n);return t.getCentroid()},pt.prototype=new Error,pt.prototype.name="EmptyStackException",vt.prototype=new y,vt.prototype.add=function(n){return this.array_.push(n),!0},vt.prototype.get=function(n){if(n<0||n>=this.size())throw new IndexOutOfBoundsException;return this.array_[n]},vt.prototype.push=function(n){return this.array_.push(n),n},vt.prototype.pop=function(n){if(0===this.array_.length)throw new pt;return this.array_.pop()},vt.prototype.peek=function(){if(0===this.array_.length)throw new pt;return this.array_[this.array_.length-1]},vt.prototype.empty=function(){return 0===this.array_.length},vt.prototype.isEmpty=function(){return this.empty()},vt.prototype.search=function(n){return this.array_.indexOf(n)},vt.prototype.size=function(){return this.array_.length},vt.prototype.toArray=function(){for(var n=[],t=0,e=this.array_.length;t<e;t++)n.push(this.array_[t]);return n},t(mt.prototype,{filter:function(n){this.treeSet.contains(n)||(this.list.add(n),this.treeSet.add(n))},getCoordinates:function(){var n=new Array(this.list.size()).fill(null);return this.list.toArray(n)},interfaces_:function(){return[z]},getClass:function(){return mt}}),mt.filterCoordinates=function(n){for(var t=new mt,e=0;e<n.length;e++)t.filter(n[e]);return t.getCoordinates()},t(yt.prototype,{preSort:function(n){for(var t=null,e=1;e<n.length;e++)(n[e].y<n[0].y||n[e].y===n[0].y&&n[e].x<n[0].x)&&(t=n[0],n[0]=n[e],n[e]=t);return on.sort(n,1,n.length,new xt(n[0])),n},computeOctRing:function(n){var t=this.computeOctPts(n),e=new M;return e.add(t,!1),e.size()<3?null:(e.closeRing(),e.toCoordinateArray())},lineOrPolygon:function(n){if(n=this.cleanRing(n),3===n.length)return this.geomFactory.createLineString([n[0],n[1]]);var t=this.geomFactory.createLinearRing(n);return this.geomFactory.createPolygon(t,null)},cleanRing:function(n){c.equals(n[0],n[n.length-1]);for(var t=new _,e=null,l=0;l<=n.length-2;l++){var i=n[l],r=n[l+1];i.equals(r)||null!==e&&this.isBetween(e,i,r)||(t.add(i),e=i)}t.add(n[n.length-1]);var u=new Array(t.size()).fill(null);return t.toArray(u)},isBetween:function(n,t,e){if(0!==ft.computeOrientation(n,t,e))return!1;if(n.x!==e.x){if(n.x<=t.x&&t.x<=e.x)return!0;if(e.x<=t.x&&t.x<=n.x)return!0}if(n.y!==e.y){if(n.y<=t.y&&t.y<=e.y)return!0;if(e.y<=t.y&&t.y<=n.y)return!0}return!1},reduce:function(n){var t=this.computeOctRing(n);if(null===t)return n;for(var e=new an,l=0;l<t.length;l++)e.add(t[l]);for(var l=0;l<n.length;l++)ft.isPointInRing(n[l],t)||e.add(n[l]);var i=X.toCoordinateArray(e);return i.length<3?this.padArray3(i):i},getConvexHull:function(){if(0===this.inputPts.length)return this.geomFactory.createGeometryCollection(null);if(1===this.inputPts.length)return this.geomFactory.createPoint(this.inputPts[0]);if(2===this.inputPts.length)return this.geomFactory.createLineString(this.inputPts);var n=this.inputPts;this.inputPts.length>50&&(n=this.reduce(this.inputPts));var t=this.preSort(n),e=this.grahamScan(t),l=this.toCoordinateArray(e);return this.lineOrPolygon(l)},padArray3:function(n){for(var t=new Array(3).fill(null),e=0;e<t.length;e++)e<n.length?t[e]=n[e]:t[e]=n[0];return t},computeOctPts:function(n){for(var t=new Array(8).fill(null),e=0;e<t.length;e++)t[e]=n[0];for(var l=1;l<n.length;l++)n[l].x<t[0].x&&(t[0]=n[l]),n[l].x-n[l].y<t[1].x-t[1].y&&(t[1]=n[l]),n[l].y>t[2].y&&(t[2]=n[l]),n[l].x+n[l].y>t[3].x+t[3].y&&(t[3]=n[l]),n[l].x>t[4].x&&(t[4]=n[l]),n[l].x-n[l].y>t[5].x-t[5].y&&(t[5]=n[l]),n[l].y<t[6].y&&(t[6]=n[l]),n[l].x+n[l].y<t[7].x+t[7].y&&(t[7]=n[l]);return t},toCoordinateArray:function(n){for(var t=new Array(n.size()).fill(null),e=0;e<n.size();e++){var l=n.get(e);t[e]=l}return t},grahamScan:function(n){var t=null,e=new vt;t=e.push(n[0]),t=e.push(n[1]),t=e.push(n[2]);for(var l=3;l<n.length;l++){for(t=e.pop();!e.empty()&&ft.computeOrientation(e.peek(),t,n[l])>0;)t=e.pop();t=e.push(t),t=e.push(n[l])}return t=e.push(n[0]),e},interfaces_:function(){return[]},getClass:function(){return yt}}),yt.extractCoordinates=function(n){var t=new mt;return n.apply(t),t.getCoordinates()},t(xt.prototype,{compare:function(n,t){var e=n,l=t;return xt.polarCompare(this.origin,e,l)},interfaces_:function(){return[s]},getClass:function(){return xt}}),xt.polarCompare=function(n,t,e){var l=t.x-n.x,i=t.y-n.y,r=e.x-n.x,u=e.y-n.y,s=ft.computeOrientation(n,t,e);if(s===ft.COUNTERCLOCKWISE)return 1;if(s===ft.CLOCKWISE)return-1;var a=l*l+i*i,o=r*r+u*u;return a<o?-1:a>o?1:0},yt.RadialComparator=xt,t(wt.prototype,{transformPoint:function(n,t){return this.factory.createPoint(this.transformCoordinates(n.getCoordinateSequence(),n))},transformPolygon:function(n,t){var e=!0,l=this.transformLinearRing(n.getExteriorRing(),n);null!==l&&l instanceof Rn&&!l.isEmpty()||(e=!1);for(var i=new _,r=0;r<n.getNumInteriorRing();r++){var u=this.transformLinearRing(n.getInteriorRingN(r),n);null===u||u.isEmpty()||(u instanceof Rn||(e=!1),i.add(u))}if(e)return this.factory.createPolygon(l,i.toArray([]));var s=new _;return null!==l&&s.add(l),s.addAll(i),this.factory.buildGeometry(s)},createCoordinateSequence:function(n){return this.factory.getCoordinateSequenceFactory().create(n)},getInputGeometry:function(){return this.inputGeom},transformMultiLineString:function(n,t){for(var e=new _,l=0;l<n.getNumGeometries();l++){var i=this.transformLineString(n.getGeometryN(l),n);null!==i&&(i.isEmpty()||e.add(i))}return this.factory.buildGeometry(e)},transformCoordinates:function(n,t){return this.copy(n)},transformLineString:function(n,t){return this.factory.createLineString(this.transformCoordinates(n.getCoordinateSequence(),n))},transformMultiPoint:function(n,t){for(var e=new _,l=0;l<n.getNumGeometries();l++){var i=this.transformPoint(n.getGeometryN(l),n);null!==i&&(i.isEmpty()||e.add(i))}return this.factory.buildGeometry(e)},transformMultiPolygon:function(n,t){for(var e=new _,l=0;l<n.getNumGeometries();l++){var i=this.transformPolygon(n.getGeometryN(l),n);null!==i&&(i.isEmpty()||e.add(i))}return this.factory.buildGeometry(e)},copy:function(n){return n.copy()},transformGeometryCollection:function(n,t){for(var e=new _,l=0;l<n.getNumGeometries();l++){var i=this.transform(n.getGeometryN(l));null!==i&&(this.pruneEmptyGeometry&&i.isEmpty()||e.add(i))}return this.preserveGeometryCollectionType?this.factory.createGeometryCollection(it.toGeometryArray(e)):this.factory.buildGeometry(e)},transform:function(n){if(this.inputGeom=n,this.factory=n.getFactory(),n instanceof Sn)return this.transformPoint(n,null);if(n instanceof Ln)return this.transformMultiPoint(n,null);if(n instanceof Rn)return this.transformLinearRing(n,null);if(n instanceof Cn)return this.transformLineString(n,null);if(n instanceof gn)return this.transformMultiLineString(n,null);if(n instanceof Pn)return this.transformPolygon(n,null);if(n instanceof Tn)return this.transformMultiPolygon(n,null);if(n instanceof dn)return this.transformGeometryCollection(n,null);throw new l("Unknown Geometry subtype: "+n.getClass().getName())},transformLinearRing:function(n,t){var e=this.transformCoordinates(n.getCoordinateSequence(),n);if(null===e)return this.factory.createLinearRing(null);var l=e.size();return l>0&&l<4&&!this.preserveType?this.factory.createLineString(e):this.factory.createLinearRing(e)},interfaces_:function(){return[]},getClass:function(){return wt}}),t(_t.prototype,{snapVertices:function(n,t){for(var e=this._isClosed?n.size()-1:n.size(),l=0;l<e;l++){var i=n.get(l),r=this.findSnapForVertex(i,t);null!==r&&(n.set(l,new d(r)),0===l&&this._isClosed&&n.set(n.size()-1,new d(r)))}},findSnapForVertex:function(n,t){for(var e=0;e<t.length;e++){if(n.equals2D(t[e]))return null;if(n.distance(t[e])<this.snapTolerance)return t[e]}return null},snapTo:function(n){var t=new M(this.srcPts);this.snapVertices(t,n),this.snapSegments(t,n);var e=t.toCoordinateArray();return e},snapSegments:function(n,t){if(0===t.length)return null;var e=t.length;t[0].equals2D(t[t.length-1])&&(e=t.length-1);for(var l=0;l<e;l++){var i=t[l],r=this.findSegmentIndexToSnap(i,n);r>=0&&n.add(r+1,new d(i),!1)}},findSegmentIndexToSnap:function(n,t){for(var e=i.MAX_VALUE,l=-1,r=0;r<t.size()-1;r++){if(this.seg.p0=t.get(r),this.seg.p1=t.get(r+1),this.seg.p0.equals2D(n)||this.seg.p1.equals2D(n)){if(this.allowSnappingToSourceVertices)continue;return-1}var u=this.seg.distance(n);u<this.snapTolerance&&u<e&&(e=u,l=r)}return l},setAllowSnappingToSourceVertices:function(n){this.allowSnappingToSourceVertices=n},interfaces_:function(){return[]},getClass:function(){return _t}}),_t.isClosed=function(n){return!(n.length<=1)&&n[0].equals2D(n[n.length-1])},t(Mt.prototype,{snapTo:function(n,t){var e=this.extractTargetCoordinates(n),l=new Et(t,e);return l.transform(this.srcGeom)},snapToSelf:function(n,t){var e=this.extractTargetCoordinates(this.srcGeom),l=new Et(n,e,!0),i=l.transform(this.srcGeom),r=i;return t&&S(r,Nn)&&(r=i.buffer(0)),r},computeSnapTolerance:function(n){var t=this.computeMinimumSegmentLength(n),e=t/10;return e},extractTargetCoordinates:function(n){for(var t=new an,e=n.getCoordinates(),l=0;l<e.length;l++)t.add(e[l]);return t.toArray(new Array(0).fill(null))},computeMinimumSegmentLength:function(n){for(var t=i.MAX_VALUE,e=0;e<n.length-1;e++){var l=n[e].distance(n[e+1]);l<t&&(t=l)}return t},interfaces_:function(){return[]},getClass:function(){return Mt}}),Mt.snap=function(n,t,e){var l=new Array(2).fill(null),i=new Mt(n);l[0]=i.snapTo(t,e);var r=new Mt(t);return l[1]=r.snapTo(l[0],e),l},Mt.computeOverlaySnapTolerance=function(){if(1===arguments.length){var n=arguments[0],t=Mt.computeSizeBasedSnapTolerance(n),e=n.getPrecisionModel();if(e.getType()===et.FIXED){var l=1/e.getScale()*2/1.415;l>t&&(t=l)}return t}if(2===arguments.length){var i=arguments[0],r=arguments[1];return Math.min(Mt.computeOverlaySnapTolerance(i),Mt.computeOverlaySnapTolerance(r))}},Mt.computeSizeBasedSnapTolerance=function(n){var t=n.getEnvelopeInternal(),e=Math.min(t.getHeight(),t.getWidth()),l=e*Mt.SNAP_PRECISION_FACTOR;return l},Mt.snapToSelf=function(n,t,e){var l=new Mt(n);return l.snapToSelf(t,e)},Mt.SNAP_PRECISION_FACTOR=1e-9,h(Et,wt),t(Et.prototype,{snapLine:function(n,t){var e=new _t(n,this.snapTolerance);return e.setAllowSnappingToSourceVertices(this.isSelfSnap),e.snapTo(t)},transformCoordinates:function(n,t){var e=n.toCoordinateArray(),l=this.snapLine(e,this.snapPts);return this.factory.getCoordinateSequenceFactory().create(l)},interfaces_:function(){return[]},getClass:function(){return Et}}),t(bt.prototype,{getCommon:function(){return i.longBitsToDouble(this.commonBits)},add:function(n){var t=i.doubleToLongBits(n);if(this.isFirst)return this.commonBits=t,this.commonSignExp=bt.signExpBits(this.commonBits),this.isFirst=!1,null;var e=bt.signExpBits(t);return e!==this.commonSignExp?(this.commonBits=0,null):(this.commonMantissaBitsCount=bt.numCommonMostSigMantissaBits(this.commonBits,t),void(this.commonBits=bt.zeroLowerBits(this.commonBits,64-(12+this.commonMantissaBitsCount))))},toString:function(){if(1===arguments.length){var n=arguments[0],t=i.longBitsToDouble(n),e=Long.toBinaryString(n),l="0000000000000000000000000000000000000000000000000000000000000000"+e,r=l.substring(l.length-64),u=r.substring(0,1)+"  "+r.substring(1,12)+"(exp) "+r.substring(12)+" [ "+t+" ]";return u}},interfaces_:function(){return[]},getClass:function(){return bt}}),bt.getBit=function(n,t){var e=1<<t;return 0!==(n&e)?1:0},bt.signExpBits=function(n){return n>>52},bt.zeroLowerBits=function(n,t){var e=(1<<t)-1,l=~e,i=n&l;return i},bt.numCommonMostSigMantissaBits=function(n,t){for(var e=0,l=52;l>=0;l--){if(bt.getBit(n,l)!==bt.getBit(t,l))return e;e++}return 52},t(Ct.prototype,{addCommonBits:function(n){var t=new St(this.commonCoord);n.apply(t),n.geometryChanged()},removeCommonBits:function(n){if(0===this.commonCoord.x&&0===this.commonCoord.y)return n;var t=new d(this.commonCoord);t.x=-t.x,t.y=-t.y;var e=new St(t);return n.apply(e),n.geometryChanged(),n},getCommonCoordinate:function(){return this.commonCoord},add:function(n){n.apply(this.ccFilter),this.commonCoord=this.ccFilter.getCommonCoordinate()},interfaces_:function(){return[]},getClass:function(){return Ct}}),t(It.prototype,{filter:function(n){this.commonBitsX.add(n.x),this.commonBitsY.add(n.y)},getCommonCoordinate:function(){return new d(this.commonBitsX.getCommon(),this.commonBitsY.getCommon())},interfaces_:function(){return[z]},getClass:function(){return It}}),t(St.prototype,{filter:function(n,t){var e=n.getOrdinate(t,0)+this.trans.x,l=n.getOrdinate(t,1)+this.trans.y;n.setOrdinate(t,0,e),n.setOrdinate(t,1,l)},isDone:function(){return!1},isGeometryChanged:function(){return!0},interfaces_:function(){return[cn]},getClass:function(){return St}}),Ct.CommonCoordinateFilter=It,Ct.Translater=St,t(Nt.prototype,{next:function(){if(this.atStart)return this.atStart=!1,Nt.isAtomic(this.parent)&&this.index++,this.parent;if(null!==this.subcollectionIterator){if(this.subcollectionIterator.hasNext())return this.subcollectionIterator.next();this.subcollectionIterator=null}if(this.index>=this.max)throw new x;var n=this.parent.getGeometryN(this.index++);return n instanceof dn?(this.subcollectionIterator=new Nt(n),this.subcollectionIterator.next()):n},remove:function(){throw new UnsupportedOperationException(this.getClass().getName())},hasNext:function(){if(this.atStart)return!0;if(null!==this.subcollectionIterator){if(this.subcollectionIterator.hasNext())return!0
;this.subcollectionIterator=null}return!(this.index>=this.max)},interfaces_:function(){return[p]},getClass:function(){return Nt}}),Nt.isAtomic=function(n){return!(n instanceof dn)},t(Pt.prototype,{locateInternal:function(){if(arguments[0]instanceof d&&arguments[1]instanceof Pn){var n=arguments[0],t=arguments[1];if(t.isEmpty())return I.EXTERIOR;var e=t.getExteriorRing(),l=this.locateInPolygonRing(n,e);if(l===I.EXTERIOR)return I.EXTERIOR;if(l===I.BOUNDARY)return I.BOUNDARY;for(var i=0;i<t.getNumInteriorRing();i++){var r=t.getInteriorRingN(i),u=this.locateInPolygonRing(n,r);if(u===I.INTERIOR)return I.EXTERIOR;if(u===I.BOUNDARY)return I.BOUNDARY}return I.INTERIOR}if(arguments[0]instanceof d&&arguments[1]instanceof Cn){var s=arguments[0],a=arguments[1];if(!a.getEnvelopeInternal().intersects(s))return I.EXTERIOR;var o=a.getCoordinates();return a.isClosed()||!s.equals(o[0])&&!s.equals(o[o.length-1])?ft.isOnLine(s,o)?I.INTERIOR:I.EXTERIOR:I.BOUNDARY}if(arguments[0]instanceof d&&arguments[1]instanceof Sn){var h=arguments[0],f=arguments[1],c=f.getCoordinate();return c.equals2D(h)?I.INTERIOR:I.EXTERIOR}},locateInPolygonRing:function(n,t){return t.getEnvelopeInternal().intersects(n)?ft.locatePointInRing(n,t.getCoordinates()):I.EXTERIOR},intersects:function(n,t){return this.locate(n,t)!==I.EXTERIOR},updateLocationInfo:function(n){n===I.INTERIOR&&(this.isIn=!0),n===I.BOUNDARY&&this.numBoundaries++},computeLocation:function(n,t){if(t instanceof Sn&&this.updateLocationInfo(this.locateInternal(n,t)),t instanceof Cn)this.updateLocationInfo(this.locateInternal(n,t));else if(t instanceof Pn)this.updateLocationInfo(this.locateInternal(n,t));else if(t instanceof gn)for(var e=t,l=0;l<e.getNumGeometries();l++){var i=e.getGeometryN(l);this.updateLocationInfo(this.locateInternal(n,i))}else if(t instanceof Tn)for(var r=t,l=0;l<r.getNumGeometries();l++){var u=r.getGeometryN(l);this.updateLocationInfo(this.locateInternal(n,u))}else if(t instanceof dn)for(var s=new Nt(t);s.hasNext();){var a=s.next();a!==t&&this.computeLocation(n,a)}},locate:function(n,t){return t.isEmpty()?I.EXTERIOR:t instanceof Cn?this.locateInternal(n,t):t instanceof Pn?this.locateInternal(n,t):(this.isIn=!1,this.numBoundaries=0,this.computeLocation(n,t),this.boundaryRule.isInBoundary(this.numBoundaries)?I.BOUNDARY:this.numBoundaries>0||this.isIn?I.INTERIOR:I.EXTERIOR)},interfaces_:function(){return[]},getClass:function(){return Pt}}),t(Lt.prototype,{interfaces_:function(){return[]},getClass:function(){return Lt}}),Lt.octant=function(){if("number"==typeof arguments[0]&&"number"==typeof arguments[1]){var n=arguments[0],t=arguments[1];if(0===n&&0===t)throw new l("Cannot compute the octant for point ( "+n+", "+t+" )");var e=Math.abs(n),i=Math.abs(t);return n>=0?t>=0?e>=i?0:1:e>=i?7:6:t>=0?e>=i?3:2:e>=i?4:5}if(arguments[0]instanceof d&&arguments[1]instanceof d){var r=arguments[0],u=arguments[1],s=u.x-r.x,a=u.y-r.y;if(0===s&&0===a)throw new l("Cannot compute the octant for two identical points "+r);return Lt.octant(s,a)}},t(Rt.prototype,{getCoordinates:function(){},size:function(){},getCoordinate:function(n){},isClosed:function(){},setData:function(n){},getData:function(){},interfaces_:function(){return[]},getClass:function(){return Rt}}),t(Tt.prototype,{getCoordinates:function(){return this.pts},size:function(){return this.pts.length},getCoordinate:function(n){return this.pts[n]},isClosed:function(){return this.pts[0].equals(this.pts[this.pts.length-1])},getSegmentOctant:function(n){return n===this.pts.length-1?-1:Lt.octant(this.getCoordinate(n),this.getCoordinate(n+1))},setData:function(n){this.data=n},getData:function(){return this.data},toString:function(){return ut.toLineString(new Bn(this.pts))},interfaces_:function(){return[Rt]},getClass:function(){return Tt}}),t(Ot.prototype,{getBounds:function(){},interfaces_:function(){return[]},getClass:function(){return Ot}}),t(At.prototype,{getItem:function(){return this.item},getBounds:function(){return this.bounds},interfaces_:function(){return[Ot,a]},getClass:function(){return At}}),t(kt.prototype,{poll:function(){if(this.isEmpty())return null;var n=this.items.get(1);return this.items.set(1,this.items.get(this._size)),this._size-=1,this.reorder(1),n},size:function(){return this._size},reorder:function(n){for(var t=null,e=this.items.get(n);2*n<=this._size&&(t=2*n,t!==this._size&&this.items.get(t+1).compareTo(this.items.get(t))<0&&t++,this.items.get(t).compareTo(e)<0);n=t)this.items.set(n,this.items.get(t));this.items.set(n,e)},clear:function(){this._size=0,this.items.clear()},isEmpty:function(){return 0===this._size},add:function(n){this.items.add(null),this._size+=1;var t=this._size;for(this.items.set(0,n);n.compareTo(this.items.get(Math.trunc(t/2)))<0;t/=2)this.items.set(t,this.items.get(Math.trunc(t/2)));this.items.set(t,n)},interfaces_:function(){return[]},getClass:function(){return kt}}),t(Dt.prototype,{visitItem:function(n){},interfaces_:function(){return[]},getClass:function(){return Dt}}),t(Ft.prototype,{insert:function(n,t){},remove:function(n,t){},query:function(){if(1===arguments.length){arguments[0]}else if(2===arguments.length){arguments[0],arguments[1]}},interfaces_:function(){return[]},getClass:function(){return Ft}}),t(Bt.prototype,{getLevel:function(){return this.level},size:function(){return this.childBoundables.size()},getChildBoundables:function(){return this.childBoundables},addChildBoundable:function(n){c.isTrue(null===this.bounds),this.childBoundables.add(n)},isEmpty:function(){return this.childBoundables.isEmpty()},getBounds:function(){return null===this.bounds&&(this.bounds=this.computeBounds()),this.bounds},interfaces_:function(){return[Ot,a]},getClass:function(){return Bt}}),Bt.serialVersionUID=0x5a1e55ec41369800;var fu={reverseOrder:function(){return{compare:function(n,t){return t.compareTo(n)}}},min:function(n){return fu.sort(n),n.get(0)},sort:function(n,t){var e=n.toArray();t?on.sort(e,t):on.sort(e);for(var l=n.iterator(),i=0,r=e.length;i<r;i++)l.next(),l.set(e[i])},singletonList:function(n){var t=new _;return t.add(n),t}};t(Gt.prototype,{expandToQueue:function(n,t){var e=Gt.isComposite(this.boundable1),i=Gt.isComposite(this.boundable2);if(e&&i)return Gt.area(this.boundable1)>Gt.area(this.boundable2)?(this.expand(this.boundable1,this.boundable2,n,t),null):(this.expand(this.boundable2,this.boundable1,n,t),null);if(e)return this.expand(this.boundable1,this.boundable2,n,t),null;if(i)return this.expand(this.boundable2,this.boundable1,n,t),null;throw new l("neither boundable is composite")},isLeaves:function(){return!(Gt.isComposite(this.boundable1)||Gt.isComposite(this.boundable2))},compareTo:function(n){var t=n;return this._distance<t._distance?-1:this._distance>t._distance?1:0},expand:function(n,t,e,l){for(var i=n.getChildBoundables(),r=i.iterator();r.hasNext();){var u=r.next(),s=new Gt(u,t,this.itemDistance);s.getDistance()<l&&e.add(s)}},getBoundable:function(n){return 0===n?this.boundable1:this.boundable2},getDistance:function(){return this._distance},distance:function(){return this.isLeaves()?this.itemDistance.distance(this.boundable1,this.boundable2):this.boundable1.getBounds().distance(this.boundable2.getBounds())},interfaces_:function(){return[r]},getClass:function(){return Gt}}),Gt.area=function(n){return n.getBounds().getArea()},Gt.isComposite=function(n){return n instanceof Bt},t(zt.prototype,{getNodeCapacity:function(){return this.nodeCapacity},lastNode:function(n){return n.get(n.size()-1)},size:function n(){if(0===arguments.length)return this.isEmpty()?0:(this.build(),this.size(this.root));if(1===arguments.length){for(var t=arguments[0],n=0,e=t.getChildBoundables().iterator();e.hasNext();){var l=e.next();l instanceof Bt?n+=this.size(l):l instanceof At&&(n+=1)}return n}},removeItem:function(n,t){for(var e=null,l=n.getChildBoundables().iterator();l.hasNext();){var i=l.next();i instanceof At&&i.getItem()===t&&(e=i)}return null!==e&&(n.getChildBoundables().remove(e),!0)},itemsTree:function(){if(0===arguments.length){this.build();var n=this.itemsTree(this.root);return null===n?new _:n}if(1===arguments.length){for(var t=arguments[0],e=new _,l=t.getChildBoundables().iterator();l.hasNext();){var i=l.next();if(i instanceof Bt){var r=this.itemsTree(i);null!==r&&e.add(r)}else i instanceof At?e.add(i.getItem()):c.shouldNeverReachHere()}return e.size()<=0?null:e}},insert:function(n,t){c.isTrue(!this.built,"Cannot insert items into an STR packed R-tree after it has been built."),this.itemBoundables.add(new At(n,t))},boundablesAtLevel:function(){if(1===arguments.length){var n=arguments[0],t=new _;return this.boundablesAtLevel(n,this.root,t),t}if(3===arguments.length){var e=arguments[0],l=arguments[1],i=arguments[2];if(c.isTrue(e>-2),l.getLevel()===e)return i.add(l),null;for(var r=l.getChildBoundables().iterator();r.hasNext();){var u=r.next();u instanceof Bt?this.boundablesAtLevel(e,u,i):(c.isTrue(u instanceof At),e===-1&&i.add(u))}return null}},query:function(){if(1===arguments.length){var n=arguments[0];this.build();var t=new _;return this.isEmpty()?t:(this.getIntersectsOp().intersects(this.root.getBounds(),n)&&this.query(n,this.root,t),t)}if(2===arguments.length){var e=arguments[0],l=arguments[1];if(this.build(),this.isEmpty())return null;this.getIntersectsOp().intersects(this.root.getBounds(),e)&&this.query(e,this.root,l)}else if(3===arguments.length)if(S(arguments[2],Dt)&&arguments[0]instanceof Object&&arguments[1]instanceof Bt)for(var i=arguments[0],r=arguments[1],u=arguments[2],s=r.getChildBoundables(),a=0;a<s.size();a++){var o=s.get(a);this.getIntersectsOp().intersects(o.getBounds(),i)&&(o instanceof Bt?this.query(i,o,u):o instanceof At?u.visitItem(o.getItem()):c.shouldNeverReachHere())}else if(S(arguments[2],y)&&arguments[0]instanceof Object&&arguments[1]instanceof Bt)for(var h=arguments[0],f=arguments[1],d=arguments[2],s=f.getChildBoundables(),a=0;a<s.size();a++){var o=s.get(a);this.getIntersectsOp().intersects(o.getBounds(),h)&&(o instanceof Bt?this.query(h,o,d):o instanceof At?d.add(o.getItem()):c.shouldNeverReachHere())}},build:function(){return this.built?null:(this.root=this.itemBoundables.isEmpty()?this.createNode(0):this.createHigherLevels(this.itemBoundables,-1),this.itemBoundables=null,void(this.built=!0))},getRoot:function(){return this.build(),this.root},remove:function(){if(2===arguments.length){var n=arguments[0],t=arguments[1];return this.build(),!!this.getIntersectsOp().intersects(this.root.getBounds(),n)&&this.remove(n,this.root,t)}if(3===arguments.length){var e=arguments[0],l=arguments[1],i=arguments[2],r=this.removeItem(l,i);if(r)return!0;for(var u=null,s=l.getChildBoundables().iterator();s.hasNext();){var a=s.next();if(this.getIntersectsOp().intersects(a.getBounds(),e)&&a instanceof Bt&&(r=this.remove(e,a,i))){u=a;break}}return null!==u&&u.getChildBoundables().isEmpty()&&l.getChildBoundables().remove(u),r}},createHigherLevels:function(n,t){c.isTrue(!n.isEmpty());var e=this.createParentBoundables(n,t+1);return 1===e.size()?e.get(0):this.createHigherLevels(e,t+1)},depth:function(){if(0===arguments.length)return this.isEmpty()?0:(this.build(),this.depth(this.root));if(1===arguments.length){for(var n=arguments[0],t=0,e=n.getChildBoundables().iterator();e.hasNext();){var l=e.next();if(l instanceof Bt){var i=this.depth(l);i>t&&(t=i)}}return t+1}},createParentBoundables:function(n,t){c.isTrue(!n.isEmpty());var e=new _;e.add(this.createNode(t));var l=new _(n);fu.sort(l,this.getComparator());for(var i=l.iterator();i.hasNext();){var r=i.next();this.lastNode(e).getChildBoundables().size()===this.getNodeCapacity()&&e.add(this.createNode(t)),this.lastNode(e).addChildBoundable(r)}return e},isEmpty:function(){return this.built?this.root.isEmpty():this.itemBoundables.isEmpty()},interfaces_:function(){return[a]},getClass:function(){return zt}}),zt.compareDoubles=function(n,t){return n>t?1:n<t?-1:0},zt.IntersectsOp=qt,zt.serialVersionUID=-0x35ef64c82d4c5400,zt.DEFAULT_NODE_CAPACITY=10,t(jt.prototype,{distance:function(n,t){},interfaces_:function(){return[]},getClass:function(){return jt}}),h(Ut,zt),t(Ut.prototype,{createParentBoundablesFromVerticalSlices:function(n,t){c.isTrue(n.length>0);for(var e=new _,l=0;l<n.length;l++)e.addAll(this.createParentBoundablesFromVerticalSlice(n[l],t));return e},createNode:function(n){return new Vt(n)},size:function(){return 0===arguments.length?zt.prototype.size.call(this):zt.prototype.size.apply(this,arguments)},insert:function(){if(2!==arguments.length)return zt.prototype.insert.apply(this,arguments);var n=arguments[0],t=arguments[1];return n.isNull()?null:void zt.prototype.insert.call(this,n,t)},getIntersectsOp:function(){return Ut.intersectsOp},verticalSlices:function(n,t){for(var e=Math.trunc(Math.ceil(n.size()/t)),l=new Array(t).fill(null),i=n.iterator(),r=0;r<t;r++){l[r]=new _;for(var u=0;i.hasNext()&&u<e;){var s=i.next();l[r].add(s),u++}}return l},query:function(){if(1===arguments.length){var n=arguments[0];return zt.prototype.query.call(this,n)}if(2===arguments.length){var t=arguments[0],e=arguments[1];zt.prototype.query.call(this,t,e)}else if(3===arguments.length)if(S(arguments[2],Dt)&&arguments[0]instanceof Object&&arguments[1]instanceof Bt){var l=arguments[0],i=arguments[1],r=arguments[2];zt.prototype.query.call(this,l,i,r)}else if(S(arguments[2],y)&&arguments[0]instanceof Object&&arguments[1]instanceof Bt){var u=arguments[0],s=arguments[1],a=arguments[2];zt.prototype.query.call(this,u,s,a)}},getComparator:function(){return Ut.yComparator},createParentBoundablesFromVerticalSlice:function(n,t){return zt.prototype.createParentBoundables.call(this,n,t)},remove:function(){if(2===arguments.length){var n=arguments[0],t=arguments[1];return zt.prototype.remove.call(this,n,t)}return zt.prototype.remove.apply(this,arguments)},depth:function(){return 0===arguments.length?zt.prototype.depth.call(this):zt.prototype.depth.apply(this,arguments)},createParentBoundables:function(n,t){c.isTrue(!n.isEmpty());var e=Math.trunc(Math.ceil(n.size()/this.getNodeCapacity())),l=new _(n);fu.sort(l,Ut.xComparator);var i=this.verticalSlices(l,Math.trunc(Math.ceil(Math.sqrt(e))));return this.createParentBoundablesFromVerticalSlices(i,t)},nearestNeighbour:function(){if(1===arguments.length){if(S(arguments[0],jt)){var n=arguments[0],t=new Gt(this.getRoot(),this.getRoot(),n);return this.nearestNeighbour(t)}if(arguments[0]instanceof Gt){var e=arguments[0];return this.nearestNeighbour(e,i.POSITIVE_INFINITY)}}else if(2===arguments.length){if(arguments[0]instanceof Ut&&S(arguments[1],jt)){var l=arguments[0],r=arguments[1],t=new Gt(this.getRoot(),l.getRoot(),r);return this.nearestNeighbour(t)}if(arguments[0]instanceof Gt&&"number"==typeof arguments[1]){var u=arguments[0],s=arguments[1],a=s,o=null,h=new kt;for(h.add(u);!h.isEmpty()&&a>0;){var f=h.poll(),c=f.getDistance();if(c>=a)break;f.isLeaves()?(a=c,o=f):f.expandToQueue(h,a)}return[o.getBoundable(0).getItem(),o.getBoundable(1).getItem()]}}else if(3===arguments.length){var d=arguments[0],g=arguments[1],p=arguments[2],v=new At(d,g),t=new Gt(this.getRoot(),v,p);return this.nearestNeighbour(t)[0]}},interfaces_:function(){return[Ft,a]},getClass:function(){return Ut}}),Ut.centreX=function(n){return Ut.avg(n.getMinX(),n.getMaxX())},Ut.avg=function(n,t){return(n+t)/2},Ut.centreY=function(n){return Ut.avg(n.getMinY(),n.getMaxY())},h(Vt,Bt),t(Vt.prototype,{computeBounds:function(){for(var n=null,t=this.getChildBoundables().iterator();t.hasNext();){var e=t.next();null===n?n=new E(e.getBounds()):n.expandToInclude(e.getBounds())}return n},interfaces_:function(){return[]},getClass:function(){return Vt}}),Ut.STRtreeNode=Vt,Ut.serialVersionUID=0x39920f7d5f261e0,Ut.xComparator={interfaces_:function(){return[s]},compare:function(n,t){return zt.compareDoubles(Ut.centreX(n.getBounds()),Ut.centreX(t.getBounds()))}},Ut.yComparator={interfaces_:function(){return[s]},compare:function(n,t){return zt.compareDoubles(Ut.centreY(n.getBounds()),Ut.centreY(t.getBounds()))}},Ut.intersectsOp={interfaces_:function(){return[IntersectsOp]},intersects:function(n,t){return n.intersects(t)}},Ut.DEFAULT_NODE_CAPACITY=10,t(Yt.prototype,{interfaces_:function(){return[]},getClass:function(){return Yt}}),Yt.relativeSign=function(n,t){return n<t?-1:n>t?1:0},Yt.compare=function(n,t,e){if(t.equals2D(e))return 0;var l=Yt.relativeSign(t.x,e.x),i=Yt.relativeSign(t.y,e.y);switch(n){case 0:return Yt.compareValue(l,i);case 1:return Yt.compareValue(i,l);case 2:return Yt.compareValue(i,-l);case 3:return Yt.compareValue(-l,i);case 4:return Yt.compareValue(-l,-i);case 5:return Yt.compareValue(-i,-l);case 6:return Yt.compareValue(-i,l);case 7:return Yt.compareValue(l,-i)}return c.shouldNeverReachHere("invalid octant value"),0},Yt.compareValue=function(n,t){return n<0?-1:n>0?1:t<0?-1:t>0?1:0},t(Xt.prototype,{getCoordinate:function(){return this.coord},print:function(n){n.print(this.coord),n.print(" seg # = "+this.segmentIndex)},compareTo:function(n){var t=n;return this.segmentIndex<t.segmentIndex?-1:this.segmentIndex>t.segmentIndex?1:this.coord.equals2D(t.coord)?0:Yt.compare(this.segmentOctant,this.coord,t.coord)},isEndPoint:function(n){return 0===this.segmentIndex&&!this._isInterior||this.segmentIndex===n},isInterior:function(){return this._isInterior},interfaces_:function(){return[r]},getClass:function(){return Xt}}),t(Ht.prototype,{getSplitCoordinates:function(){var n=new M;this.addEndpoints();for(var t=this.iterator(),e=t.next();t.hasNext();){var l=t.next();this.addEdgeCoordinates(e,l,n),e=l}return n.toCoordinateArray()},addCollapsedNodes:function(){var n=new _;this.findCollapsesFromInsertedNodes(n),this.findCollapsesFromExistingVertices(n);for(var t=n.iterator();t.hasNext();){var e=t.next().intValue();this.add(this.edge.getCoordinate(e),e)}},print:function(n){n.println("Intersections:");for(var t=this.iterator();t.hasNext();){var e=t.next();e.print(n)}},findCollapsesFromExistingVertices:function(n){for(var t=0;t<this.edge.size()-2;t++){var e=this.edge.getCoordinate(t),l=(this.edge.getCoordinate(t+1),this.edge.getCoordinate(t+2));e.equals2D(l)&&n.add(new L(t+1))}},addEdgeCoordinates:function(n,t,e){var l=t.segmentIndex-n.segmentIndex+2,i=this.edge.getCoordinate(t.segmentIndex),r=t.isInterior()||!t.coord.equals2D(i);r||l--;e.add(new d(n.coord),!1);for(var u=n.segmentIndex+1;u<=t.segmentIndex;u++)e.add(this.edge.getCoordinate(u));r&&e.add(new d(t.coord))},iterator:function(){return this.nodeMap.values().iterator()},addSplitEdges:function(n){this.addEndpoints(),this.addCollapsedNodes();for(var t=this.iterator(),e=t.next();t.hasNext();){var l=t.next(),i=this.createSplitEdge(e,l);n.add(i),e=l}},findCollapseIndex:function(n,t,e){if(!n.coord.equals2D(t.coord))return!1;var l=t.segmentIndex-n.segmentIndex;return t.isInterior()||l--,1===l&&(e[0]=n.segmentIndex+1,!0)},findCollapsesFromInsertedNodes:function(n){for(var t=new Array(1).fill(null),e=this.iterator(),l=e.next();e.hasNext();){var i=e.next(),r=this.findCollapseIndex(l,i,t);r&&n.add(new L(t[0])),l=i}},getEdge:function(){return this.edge},addEndpoints:function(){var n=this.edge.size()-1;this.add(this.edge.getCoordinate(0),0),this.add(this.edge.getCoordinate(n),n)},createSplitEdge:function(n,t){var e=t.segmentIndex-n.segmentIndex+2,l=this.edge.getCoordinate(t.segmentIndex),i=t.isInterior()||!t.coord.equals2D(l);i||e--;var r=new Array(e).fill(null),u=0;r[u++]=new d(n.coord);for(var s=n.segmentIndex+1;s<=t.segmentIndex;s++)r[u++]=this.edge.getCoordinate(s);return i&&(r[u]=new d(t.coord)),new Jt(r,this.edge.getData())},add:function(n,t){var e=new Xt(this.edge,n,t,this.edge.getSegmentOctant(t)),l=this.nodeMap.get(e);return null!==l?(c.isTrue(l.coord.equals2D(n),"Found equal nodes with different coordinates"),l):(this.nodeMap.put(e,e),e)},checkSplitEdgesCorrectness:function(n){var t=this.edge.getCoordinates(),e=n.get(0),l=e.getCoordinate(0);if(!l.equals2D(t[0]))throw new o("bad split edge start point at "+l);var i=n.get(n.size()-1),r=i.getCoordinates(),u=r[r.length-1];if(!u.equals2D(t[t.length-1]))throw new o("bad split edge end point at "+u)},interfaces_:function(){return[]},getClass:function(){return Ht}}),t(Wt.prototype,{next:function(){return null===this.currNode?(this.currNode=this.nextNode,this.currSegIndex=this.currNode.segmentIndex,this.readNextNode(),this.currNode):null===this.nextNode?null:this.nextNode.segmentIndex===this.currNode.segmentIndex?(this.currNode=this.nextNode,this.currSegIndex=this.currNode.segmentIndex,this.readNextNode(),this.currNode):(this.nextNode.segmentIndex>this.currNode.segmentIndex,null)},remove:function(){throw new UnsupportedOperationException(this.getClass().getName())},hasNext:function(){return null!==this.nextNode},readNextNode:function(){this.nodeIt.hasNext()?this.nextNode=this.nodeIt.next():this.nextNode=null},interfaces_:function(){return[p]},getClass:function(){return Wt}}),t(Zt.prototype,{addIntersection:function(n,t){},interfaces_:function(){return[Rt]},getClass:function(){return Zt}}),t(Jt.prototype,{getCoordinates:function(){return this.pts},size:function(){return this.pts.length},getCoordinate:function(n){return this.pts[n]},isClosed:function(){return this.pts[0].equals(this.pts[this.pts.length-1])},getSegmentOctant:function(n){return n===this.pts.length-1?-1:this.safeOctant(this.getCoordinate(n),this.getCoordinate(n+1))},setData:function(n){this.data=n},safeOctant:function(n,t){return n.equals2D(t)?0:Lt.octant(n,t)},getData:function(){return this.data},addIntersection:function(){if(2===arguments.length){var n=arguments[0],t=arguments[1];this.addIntersectionNode(n,t)}else if(4===arguments.length){var e=arguments[0],l=arguments[1],i=(arguments[2],arguments[3]),r=new d(e.getIntersection(i));this.addIntersection(r,l)}},toString:function(){return ut.toLineString(new Bn(this.pts))},getNodeList:function(){return this.nodeList},addIntersectionNode:function(n,t){var e=t,l=e+1;if(l<this.pts.length){var i=this.pts[l];n.equals2D(i)&&(e=l)}var r=this.nodeList.add(n,e);return r},addIntersections:function(n,t,e){for(var l=0;l<n.getIntersectionNum();l++)this.addIntersection(n,t,e,l)},interfaces_:function(){return[Zt]},getClass:function(){return Jt}}),Jt.getNodedSubstrings=function(){if(1===arguments.length){var n=arguments[0],t=new _;return Jt.getNodedSubstrings(n,t),t}if(2===arguments.length)for(var e=arguments[0],l=arguments[1],i=e.iterator();i.hasNext();){var r=i.next();r.getNodeList().addSplitEdges(l)}},t(Kt.prototype,{overlap:function(){if(2===arguments.length){arguments[0],arguments[1]}else if(4===arguments.length){var n=arguments[0],t=arguments[1],e=arguments[2],l=arguments[3];n.getLineSegment(t,this.overlapSeg1),e.getLineSegment(l,this.overlapSeg2),this.overlap(this.overlapSeg1,this.overlapSeg2)}},interfaces_:function(){return[]},getClass:function(){return Kt}}),t(Qt.prototype,{getLineSegment:function(n,t){t.p0=this.pts[n],t.p1=this.pts[n+1]},computeSelect:function(n,t,e,l){var i=this.pts[t],r=this.pts[e];if(l.tempEnv1.init(i,r),e-t===1)return l.select(this,t),null;if(!n.intersects(l.tempEnv1))return null;var u=Math.trunc((t+e)/2);t<u&&this.computeSelect(n,t,u,l),u<e&&this.computeSelect(n,u,e,l)},getCoordinates:function(){for(var n=new Array(this.end-this.start+1).fill(null),t=0,e=this.start;e<=this.end;e++)n[t++]=this.pts[e];return n},computeOverlaps:function(n,t){this.computeOverlapsInternal(this.start,this.end,n,n.start,n.end,t)},setId:function(n){this.id=n},select:function(n,t){this.computeSelect(n,this.start,this.end,t)},getEnvelope:function(){if(null===this.env){var n=this.pts[this.start],t=this.pts[this.end];this.env=new E(n,t)}return this.env},getEndIndex:function(){return this.end},getStartIndex:function(){return this.start},getContext:function(){return this.context},getId:function(){return this.id},computeOverlapsInternal:function(n,t,e,l,i,r){var u=this.pts[n],s=this.pts[t],a=e.pts[l],o=e.pts[i];if(t-n===1&&i-l===1)return r.overlap(this,n,e,l),null;if(r.tempEnv1.init(u,s),r.tempEnv2.init(a,o),!r.tempEnv1.intersects(r.tempEnv2))return null;var h=Math.trunc((n+t)/2),f=Math.trunc((l+i)/2);n<h&&(l<f&&this.computeOverlapsInternal(n,h,e,l,f,r),f<i&&this.computeOverlapsInternal(n,h,e,f,i,r)),h<t&&(l<f&&this.computeOverlapsInternal(h,t,e,l,f,r),f<i&&this.computeOverlapsInternal(h,t,e,f,i,r))},interfaces_:function(){return[]},getClass:function(){return Qt}}),t($t.prototype,{interfaces_:function(){return[]},getClass:function(){return $t}}),$t.isNorthern=function(n){return n===$t.NE||n===$t.NW},$t.isOpposite=function(n,t){if(n===t)return!1;var e=(n-t+4)%4;return 2===e},$t.commonHalfPlane=function(n,t){if(n===t)return n;var e=(n-t+4)%4;if(2===e)return-1;var l=n<t?n:t,i=n>t?n:t;return 0===l&&3===i?3:l},$t.isInHalfPlane=function(n,t){return t===$t.SE?n===$t.SE||n===$t.SW:n===t||n===t+1},$t.quadrant=function(){if("number"==typeof arguments[0]&&"number"==typeof arguments[1]){var n=arguments[0],t=arguments[1];if(0===n&&0===t)throw new l("Cannot compute the quadrant for point ( "+n+", "+t+" )");return n>=0?t>=0?$t.NE:$t.SE:t>=0?$t.NW:$t.SW}if(arguments[0]instanceof d&&arguments[1]instanceof d){var e=arguments[0],i=arguments[1];if(i.x===e.x&&i.y===e.y)throw new l("Cannot compute the quadrant for two identical points "+e);return i.x>=e.x?i.y>=e.y?$t.NE:$t.SE:i.y>=e.y?$t.NW:$t.SW}},$t.NE=0,$t.NW=1,$t.SW=2,$t.SE=3,t(ne.prototype,{interfaces_:function(){return[]},getClass:function(){return ne}}),ne.getChainStartIndices=function(n){var t=0,e=new _;e.add(new L(t));do{var l=ne.findChainEnd(n,t);e.add(new L(l)),t=l}while(t<n.length-1);var i=ne.toIntArray(e);return i},ne.findChainEnd=function(n,t){for(var e=t;e<n.length-1&&n[e].equals2D(n[e+1]);)e++;if(e>=n.length-1)return n.length-1;for(var l=$t.quadrant(n[e],n[e+1]),i=t+1;i<n.length;){if(!n[i-1].equals2D(n[i])){var r=$t.quadrant(n[i-1],n[i]);if(r!==l)break}i++}return i-1},ne.getChains=function(){if(1===arguments.length){var n=arguments[0];return ne.getChains(n,null)}if(2===arguments.length){for(var t=arguments[0],e=arguments[1],l=new _,i=ne.getChainStartIndices(t),r=0;r<i.length-1;r++){var u=new Qt(t,i[r],i[r+1],e);l.add(u)}return l}},ne.toIntArray=function(n){for(var t=new Array(n.size()).fill(null),e=0;e<t.length;e++)t[e]=n.get(e).intValue();return t},t(te.prototype,{computeNodes:function(n){},getNodedSubstrings:function(){},interfaces_:function(){return[]},getClass:function(){return te}}),t(ee.prototype,{setSegmentIntersector:function(n){this.segInt=n},interfaces_:function(){return[te]},getClass:function(){return ee}}),h(le,ee),t(le.prototype,{getMonotoneChains:function(){return this.monoChains},getNodedSubstrings:function(){return Jt.getNodedSubstrings(this.nodedSegStrings)},getIndex:function(){return this.index},add:function(n){for(var t=ne.getChains(n.getCoordinates(),n),e=t.iterator();e.hasNext();){var l=e.next();l.setId(this.idCounter++),this.index.insert(l.getEnvelope(),l),this.monoChains.add(l)}},computeNodes:function(n){this.nodedSegStrings=n;for(var t=n.iterator();t.hasNext();)this.add(t.next());this.intersectChains()},intersectChains:function(){for(var n=new ie(this.segInt),t=this.monoChains.iterator();t.hasNext();)for(var e=t.next(),l=this.index.query(e.getEnvelope()),i=l.iterator();i.hasNext();){var r=i.next();if(r.getId()>e.getId()&&(e.computeOverlaps(r,n),this.nOverlaps++),this.segInt.isDone())return null}},interfaces_:function(){return[]},getClass:function(){return le}}),h(ie,Kt),t(ie.prototype,{overlap:function(){if(4!==arguments.length)return Kt.prototype.overlap.apply(this,arguments);var n=arguments[0],t=arguments[1],e=arguments[2],l=arguments[3],i=n.getContext(),r=e.getContext();this.si.processIntersections(i,t,r,l)},interfaces_:function(){return[]},getClass:function(){return ie}}),le.SegmentOverlapAction=ie,h(re,o),t(re.prototype,{getCoordinate:function(){return this.pt},interfaces_:function(){return[]},getClass:function(){return re}}),re.msgWithCoord=function(n,t){return null!==t?n+" [ "+t+" ]":n},t(ue.prototype,{processIntersections:function(n,t,e,l){},isDone:function(){},interfaces_:function(){return[]},getClass:function(){return ue}}),t(se.prototype,{getInteriorIntersection:function(){return this.interiorIntersection},setCheckEndSegmentsOnly:function(n){this.isCheckEndSegmentsOnly=n},getIntersectionSegments:function(){return this.intSegments},count:function(){return this.intersectionCount},getIntersections:function(){return this.intersections},setFindAllIntersections:function(n){this.findAllIntersections=n},setKeepIntersections:function(n){this.keepIntersections=n},processIntersections:function(n,t,e,l){if(!this.findAllIntersections&&this.hasIntersection())return null;if(n===e&&t===l)return null;if(this.isCheckEndSegmentsOnly){var i=this.isEndSegment(n,t)||this.isEndSegment(e,l);if(!i)return null}var r=n.getCoordinates()[t],u=n.getCoordinates()[t+1],s=e.getCoordinates()[l],a=e.getCoordinates()[l+1];this.li.computeIntersection(r,u,s,a),this.li.hasIntersection()&&this.li.isInteriorIntersection()&&(this.intSegments=new Array(4).fill(null),this.intSegments[0]=r,this.intSegments[1]=u,this.intSegments[2]=s,this.intSegments[3]=a,this.interiorIntersection=this.li.getIntersection(0),this.keepIntersections&&this.intersections.add(this.interiorIntersection),this.intersectionCount++)},isEndSegment:function(n,t){return 0===t||t>=n.size()-2},hasIntersection:function(){return null!==this.interiorIntersection},isDone:function(){return!this.findAllIntersections&&null!==this.interiorIntersection},interfaces_:function(){return[ue]},getClass:function(){return se}}),se.createAllIntersectionsFinder=function(n){var t=new se(n);return t.setFindAllIntersections(!0),t},se.createAnyIntersectionFinder=function(n){return new se(n)},se.createIntersectionCounter=function(n){var t=new se(n);return t.setFindAllIntersections(!0),t.setKeepIntersections(!1),t},t(ae.prototype,{execute:function(){return null!==this.segInt?null:void this.checkInteriorIntersections()},getIntersections:function(){return this.segInt.getIntersections()},isValid:function(){return this.execute(),this._isValid},setFindAllIntersections:function(n){this.findAllIntersections=n},checkInteriorIntersections:function(){this._isValid=!0,this.segInt=new se(this.li),this.segInt.setFindAllIntersections(this.findAllIntersections);var n=new le;if(n.setSegmentIntersector(this.segInt),n.computeNodes(this.segStrings),this.segInt.hasIntersection())return this._isValid=!1,null},checkValid:function(){if(this.execute(),!this._isValid)throw new re(this.getErrorMessage(),this.segInt.getInteriorIntersection())},getErrorMessage:function(){if(this._isValid)return"no intersections found";var n=this.segInt.getIntersectionSegments();return"found non-noded intersection between "+ut.toLineString(n[0],n[1])+" and "+ut.toLineString(n[2],n[3])},interfaces_:function(){return[]},getClass:function(){return ae}}),ae.computeIntersections=function(n){var t=new ae(n);return t.setFindAllIntersections(!0),t.isValid(),t.getIntersections()},t(oe.prototype,{checkValid:function(){this.nv.checkValid()},interfaces_:function(){return[]},getClass:function(){return oe}}),oe.toSegmentStrings=function(n){for(var t=new _,e=n.iterator();e.hasNext();){var l=e.next();t.add(new Tt(l.getCoordinates(),l))}return t},oe.checkValid=function(n){var t=new oe(n);t.checkValid()},t(he.prototype,{map:function(n){for(var t=new _,e=0;e<n.getNumGeometries();e++){var l=this.mapOp.map(n.getGeometryN(e));l.isEmpty()||t.add(l)}return n.getFactory().createGeometryCollection(it.toGeometryArray(t))},interfaces_:function(){return[]},getClass:function(){return he}}),he.map=function(n,t){var e=new he(t);return e.map(n)},t(fe.prototype,{interfaces_:function(){return[]},getClass:function(){return fe}}),fe.opposite=function(n){return n===fe.LEFT?fe.RIGHT:n===fe.RIGHT?fe.LEFT:n},fe.ON=0,fe.LEFT=1,fe.RIGHT=2,t(ce.prototype,{setAllLocations:function(n){for(var t=0;t<this.location.length;t++)this.location[t]=n},isNull:function(){for(var n=0;n<this.location.length;n++)if(this.location[n]!==I.NONE)return!1;return!0},setAllLocationsIfNull:function(n){for(var t=0;t<this.location.length;t++)this.location[t]===I.NONE&&(this.location[t]=n)},isLine:function(){
return 1===this.location.length},merge:function(n){if(n.location.length>this.location.length){var t=new Array(3).fill(null);t[fe.ON]=this.location[fe.ON],t[fe.LEFT]=I.NONE,t[fe.RIGHT]=I.NONE,this.location=t}for(var e=0;e<this.location.length;e++)this.location[e]===I.NONE&&e<n.location.length&&(this.location[e]=n.location[e])},getLocations:function(){return this.location},flip:function(){if(this.location.length<=1)return null;var n=this.location[fe.LEFT];this.location[fe.LEFT]=this.location[fe.RIGHT],this.location[fe.RIGHT]=n},toString:function(){var n=new P;return this.location.length>1&&n.append(I.toLocationSymbol(this.location[fe.LEFT])),n.append(I.toLocationSymbol(this.location[fe.ON])),this.location.length>1&&n.append(I.toLocationSymbol(this.location[fe.RIGHT])),n.toString()},setLocations:function(n,t,e){this.location[fe.ON]=n,this.location[fe.LEFT]=t,this.location[fe.RIGHT]=e},get:function(n){return n<this.location.length?this.location[n]:I.NONE},isArea:function(){return this.location.length>1},isAnyNull:function(){for(var n=0;n<this.location.length;n++)if(this.location[n]===I.NONE)return!0;return!1},setLocation:function(){if(1===arguments.length){var n=arguments[0];this.setLocation(fe.ON,n)}else if(2===arguments.length){var t=arguments[0],e=arguments[1];this.location[t]=e}},init:function(n){this.location=new Array(n).fill(null),this.setAllLocations(I.NONE)},isEqualOnSide:function(n,t){return this.location[t]===n.location[t]},allPositionsEqual:function(n){for(var t=0;t<this.location.length;t++)if(this.location[t]!==n)return!1;return!0},interfaces_:function(){return[]},getClass:function(){return ce}}),t(de.prototype,{getGeometryCount:function(){var n=0;return this.elt[0].isNull()||n++,this.elt[1].isNull()||n++,n},setAllLocations:function(n,t){this.elt[n].setAllLocations(t)},isNull:function(n){return this.elt[n].isNull()},setAllLocationsIfNull:function(){if(1===arguments.length){var n=arguments[0];this.setAllLocationsIfNull(0,n),this.setAllLocationsIfNull(1,n)}else if(2===arguments.length){var t=arguments[0],e=arguments[1];this.elt[t].setAllLocationsIfNull(e)}},isLine:function(n){return this.elt[n].isLine()},merge:function(n){for(var t=0;t<2;t++)null===this.elt[t]&&null!==n.elt[t]?this.elt[t]=new ce(n.elt[t]):this.elt[t].merge(n.elt[t])},flip:function(){this.elt[0].flip(),this.elt[1].flip()},getLocation:function(){if(1===arguments.length){var n=arguments[0];return this.elt[n].get(fe.ON)}if(2===arguments.length){var t=arguments[0],e=arguments[1];return this.elt[t].get(e)}},toString:function(){var n=new P;return null!==this.elt[0]&&(n.append("A:"),n.append(this.elt[0].toString())),null!==this.elt[1]&&(n.append(" B:"),n.append(this.elt[1].toString())),n.toString()},isArea:function(){if(0===arguments.length)return this.elt[0].isArea()||this.elt[1].isArea();if(1===arguments.length){var n=arguments[0];return this.elt[n].isArea()}},isAnyNull:function(n){return this.elt[n].isAnyNull()},setLocation:function(){if(2===arguments.length){var n=arguments[0],t=arguments[1];this.elt[n].setLocation(fe.ON,t)}else if(3===arguments.length){var e=arguments[0],l=arguments[1],i=arguments[2];this.elt[e].setLocation(l,i)}},isEqualOnSide:function(n,t){return this.elt[0].isEqualOnSide(n.elt[0],t)&&this.elt[1].isEqualOnSide(n.elt[1],t)},allPositionsEqual:function(n,t){return this.elt[n].allPositionsEqual(t)},toLine:function(n){this.elt[n].isArea()&&(this.elt[n]=new ce(this.elt[n].location[0]))},interfaces_:function(){return[]},getClass:function(){return de}}),de.toLineLabel=function(n){for(var t=new de(I.NONE),e=0;e<2;e++)t.setLocation(e,n.getLocation(e));return t},t(ge.prototype,{computeRing:function(){if(null!==this.ring)return null;for(var n=new Array(this.pts.size()).fill(null),t=0;t<this.pts.size();t++)n[t]=this.pts.get(t);this.ring=this.geometryFactory.createLinearRing(n),this._isHole=ft.isCCW(this.ring.getCoordinates())},isIsolated:function(){return 1===this.label.getGeometryCount()},computePoints:function(n){this.startDe=n;var t=n,e=!0;do{if(null===t)throw new re("Found null DirectedEdge");if(t.getEdgeRing()===this)throw new re("Directed Edge visited twice during ring-building at "+t.getCoordinate());this.edges.add(t);var l=t.getLabel();c.isTrue(l.isArea()),this.mergeLabel(l),this.addPoints(t.getEdge(),t.isForward(),e),e=!1,this.setEdgeRing(t,this),t=this.getNext(t)}while(t!==this.startDe)},getLinearRing:function(){return this.ring},getCoordinate:function(n){return this.pts.get(n)},computeMaxNodeDegree:function(){this.maxNodeDegree=0;var n=this.startDe;do{var t=n.getNode(),e=t.getEdges().getOutgoingDegree(this);e>this.maxNodeDegree&&(this.maxNodeDegree=e),n=this.getNext(n)}while(n!==this.startDe);this.maxNodeDegree*=2},addPoints:function(n,t,e){var l=n.getCoordinates();if(t){var i=1;e&&(i=0);for(var r=i;r<l.length;r++)this.pts.add(l[r])}else{var i=l.length-2;e&&(i=l.length-1);for(var r=i;r>=0;r--)this.pts.add(l[r])}},isHole:function(){return this._isHole},setInResult:function(){var n=this.startDe;do{n.getEdge().setInResult(!0),n=n.getNext()}while(n!==this.startDe)},containsPoint:function(n){var t=this.getLinearRing(),e=t.getEnvelopeInternal();if(!e.contains(n))return!1;if(!ft.isPointInRing(n,t.getCoordinates()))return!1;for(var l=this.holes.iterator();l.hasNext();){var i=l.next();if(i.containsPoint(n))return!1}return!0},addHole:function(n){this.holes.add(n)},isShell:function(){return null===this.shell},getLabel:function(){return this.label},getEdges:function(){return this.edges},getMaxNodeDegree:function(){return this.maxNodeDegree<0&&this.computeMaxNodeDegree(),this.maxNodeDegree},getShell:function(){return this.shell},mergeLabel:function(){if(1===arguments.length){var n=arguments[0];this.mergeLabel(n,0),this.mergeLabel(n,1)}else if(2===arguments.length){var t=arguments[0],e=arguments[1],l=t.getLocation(e,fe.RIGHT);if(l===I.NONE)return null;if(this.label.getLocation(e)===I.NONE)return this.label.setLocation(e,l),null}},setShell:function(n){this.shell=n,null!==n&&n.addHole(this)},toPolygon:function(n){for(var t=new Array(this.holes.size()).fill(null),e=0;e<this.holes.size();e++)t[e]=this.holes.get(e).getLinearRing();var l=n.createPolygon(this.getLinearRing(),t);return l},interfaces_:function(){return[]},getClass:function(){return ge}}),h(pe,ge),t(pe.prototype,{setEdgeRing:function(n,t){n.setMinEdgeRing(t)},getNext:function(n){return n.getNextMin()},interfaces_:function(){return[]},getClass:function(){return pe}}),h(ve,ge),t(ve.prototype,{buildMinimalRings:function(){var n=new _,t=this.startDe;do{if(null===t.getMinEdgeRing()){var e=new pe(t,this.geometryFactory);n.add(e)}t=t.getNext()}while(t!==this.startDe);return n},setEdgeRing:function(n,t){n.setEdgeRing(t)},linkDirectedEdgesForMinimalEdgeRings:function(){var n=this.startDe;do{var t=n.getNode();t.getEdges().linkMinimalDirectedEdges(this),n=n.getNext()}while(n!==this.startDe)},getNext:function(n){return n.getNext()},interfaces_:function(){return[]},getClass:function(){return ve}}),t(me.prototype,{setVisited:function(n){this._isVisited=n},setInResult:function(n){this._isInResult=n},isCovered:function(){return this._isCovered},isCoveredSet:function(){return this._isCoveredSet},setLabel:function(n){this.label=n},getLabel:function(){return this.label},setCovered:function(n){this._isCovered=n,this._isCoveredSet=!0},updateIM:function(n){c.isTrue(this.label.getGeometryCount()>=2,"found partial label"),this.computeIM(n)},isInResult:function(){return this._isInResult},isVisited:function(){return this._isVisited},interfaces_:function(){return[]},getClass:function(){return me}}),h(ye,me),t(ye.prototype,{isIncidentEdgeInResult:function(){for(var n=this.getEdges().getEdges().iterator();n.hasNext();){var t=n.next();if(t.getEdge().isInResult())return!0}return!1},isIsolated:function(){return 1===this.label.getGeometryCount()},getCoordinate:function(){return this.coord},print:function(n){n.println("node "+this.coord+" lbl: "+this.label)},computeIM:function(n){},computeMergedLocation:function(n,t){var e=I.NONE;if(e=this.label.getLocation(t),!n.isNull(t)){var l=n.getLocation(t);e!==I.BOUNDARY&&(e=l)}return e},setLabel:function(){if(2!==arguments.length)return me.prototype.setLabel.apply(this,arguments);var n=arguments[0],t=arguments[1];null===this.label?this.label=new de(n,t):this.label.setLocation(n,t)},getEdges:function(){return this.edges},mergeLabel:function(){if(arguments[0]instanceof ye){var n=arguments[0];this.mergeLabel(n.label)}else if(arguments[0]instanceof de)for(var t=arguments[0],e=0;e<2;e++){var l=this.computeMergedLocation(t,e),i=this.label.getLocation(e);i===I.NONE&&this.label.setLocation(e,l)}},add:function(n){this.edges.insert(n),n.setNode(this)},setLabelBoundary:function(n){if(null===this.label)return null;var t=I.NONE;null!==this.label&&(t=this.label.getLocation(n));var e=null;switch(t){case I.BOUNDARY:e=I.INTERIOR;break;case I.INTERIOR:e=I.BOUNDARY;break;default:e=I.BOUNDARY}this.label.setLocation(n,e)},interfaces_:function(){return[]},getClass:function(){return ye}}),t(xe.prototype,{find:function(n){return this.nodeMap.get(n)},addNode:function(){if(arguments[0]instanceof d){var n=arguments[0],t=this.nodeMap.get(n);return null===t&&(t=this.nodeFact.createNode(n),this.nodeMap.put(n,t)),t}if(arguments[0]instanceof ye){var e=arguments[0],t=this.nodeMap.get(e.getCoordinate());return null===t?(this.nodeMap.put(e.getCoordinate(),e),e):(t.mergeLabel(e),t)}},print:function(n){for(var t=this.iterator();t.hasNext();){var e=t.next();e.print(n)}},iterator:function(){return this.nodeMap.values().iterator()},values:function(){return this.nodeMap.values()},getBoundaryNodes:function(n){for(var t=new _,e=this.iterator();e.hasNext();){var l=e.next();l.getLabel().getLocation(n)===I.BOUNDARY&&t.add(l)}return t},add:function(n){var t=n.getCoordinate(),e=this.addNode(t);e.add(n)},interfaces_:function(){return[]},getClass:function(){return xe}}),t(we.prototype,{compareDirection:function(n){return this.dx===n.dx&&this.dy===n.dy?0:this.quadrant>n.quadrant?1:this.quadrant<n.quadrant?-1:ft.computeOrientation(n.p0,n.p1,this.p1)},getDy:function(){return this.dy},getCoordinate:function(){return this.p0},setNode:function(n){this.node=n},print:function(n){var t=Math.atan2(this.dy,this.dx),e=this.getClass().getName(),l=e.lastIndexOf("."),i=e.substring(l+1);n.print("  "+i+": "+this.p0+" - "+this.p1+" "+this.quadrant+":"+t+"   "+this.label)},compareTo:function(n){var t=n;return this.compareDirection(t)},getDirectedCoordinate:function(){return this.p1},getDx:function(){return this.dx},getLabel:function(){return this.label},getEdge:function(){return this.edge},getQuadrant:function(){return this.quadrant},getNode:function(){return this.node},toString:function(){var n=Math.atan2(this.dy,this.dx),t=this.getClass().getName(),e=t.lastIndexOf("."),l=t.substring(e+1);return"  "+l+": "+this.p0+" - "+this.p1+" "+this.quadrant+":"+n+"   "+this.label},computeLabel:function(n){},init:function(n,t){this.p0=n,this.p1=t,this.dx=t.x-n.x,this.dy=t.y-n.y,this.quadrant=$t.quadrant(this.dx,this.dy),c.isTrue(!(0===this.dx&&0===this.dy),"EdgeEnd with identical endpoints found")},interfaces_:function(){return[r]},getClass:function(){return we}}),h(_e,we),t(_e.prototype,{getNextMin:function(){return this.nextMin},getDepth:function(n){return this.depth[n]},setVisited:function(n){this._isVisited=n},computeDirectedLabel:function(){this.label=new de(this.edge.getLabel()),this._isForward||this.label.flip()},getNext:function(){return this.next},setDepth:function(n,t){if(this.depth[n]!==-999&&this.depth[n]!==t)throw new re("assigned depths do not match",this.getCoordinate());this.depth[n]=t},isInteriorAreaEdge:function n(){for(var n=!0,t=0;t<2;t++)this.label.isArea(t)&&this.label.getLocation(t,fe.LEFT)===I.INTERIOR&&this.label.getLocation(t,fe.RIGHT)===I.INTERIOR||(n=!1);return n},setNextMin:function(n){this.nextMin=n},print:function(n){we.prototype.print.call(this,n),n.print(" "+this.depth[fe.LEFT]+"/"+this.depth[fe.RIGHT]),n.print(" ("+this.getDepthDelta()+")"),this._isInResult&&n.print(" inResult")},setMinEdgeRing:function(n){this.minEdgeRing=n},isLineEdge:function(){var n=this.label.isLine(0)||this.label.isLine(1),t=!this.label.isArea(0)||this.label.allPositionsEqual(0,I.EXTERIOR),e=!this.label.isArea(1)||this.label.allPositionsEqual(1,I.EXTERIOR);return n&&t&&e},setEdgeRing:function(n){this.edgeRing=n},getMinEdgeRing:function(){return this.minEdgeRing},getDepthDelta:function(){var n=this.edge.getDepthDelta();return this._isForward||(n=-n),n},setInResult:function(n){this._isInResult=n},getSym:function(){return this.sym},isForward:function(){return this._isForward},getEdge:function(){return this.edge},printEdge:function(n){this.print(n),n.print(" "),this._isForward?this.edge.print(n):this.edge.printReverse(n)},setSym:function(n){this.sym=n},setVisitedEdge:function(n){this.setVisited(n),this.sym.setVisited(n)},setEdgeDepths:function(n,t){var e=this.getEdge().getDepthDelta();this._isForward||(e=-e);var l=1;n===fe.LEFT&&(l=-1);var i=fe.opposite(n),r=e*l,u=t+r;this.setDepth(n,t),this.setDepth(i,u)},getEdgeRing:function(){return this.edgeRing},isInResult:function(){return this._isInResult},setNext:function(n){this.next=n},isVisited:function(){return this._isVisited},interfaces_:function(){return[]},getClass:function(){return _e}}),_e.depthFactor=function(n,t){return n===I.EXTERIOR&&t===I.INTERIOR?1:n===I.INTERIOR&&t===I.EXTERIOR?-1:0},t(Me.prototype,{createNode:function(n){return new ye(n,null)},interfaces_:function(){return[]},getClass:function(){return Me}}),t(Ee.prototype,{printEdges:function(n){n.println("Edges:");for(var t=0;t<this.edges.size();t++){n.println("edge "+t+":");var e=this.edges.get(t);e.print(n),e.eiList.print(n)}},find:function(n){return this.nodes.find(n)},addNode:function(){if(arguments[0]instanceof ye){var n=arguments[0];return this.nodes.addNode(n)}if(arguments[0]instanceof d){var t=arguments[0];return this.nodes.addNode(t)}},getNodeIterator:function(){return this.nodes.iterator()},linkResultDirectedEdges:function(){for(var n=this.nodes.iterator();n.hasNext();){var t=n.next();t.getEdges().linkResultDirectedEdges()}},debugPrintln:function(n){k.out.println(n)},isBoundaryNode:function(n,t){var e=this.nodes.find(t);if(null===e)return!1;var l=e.getLabel();return null!==l&&l.getLocation(n)===I.BOUNDARY},linkAllDirectedEdges:function(){for(var n=this.nodes.iterator();n.hasNext();){var t=n.next();t.getEdges().linkAllDirectedEdges()}},matchInSameDirection:function(n,t,e,l){return!!n.equals(e)&&(ft.computeOrientation(n,t,l)===ft.COLLINEAR&&$t.quadrant(n,t)===$t.quadrant(e,l))},getEdgeEnds:function(){return this.edgeEndList},debugPrint:function(n){k.out.print(n)},getEdgeIterator:function(){return this.edges.iterator()},findEdgeInSameDirection:function(n,t){for(var e=0;e<this.edges.size();e++){var l=this.edges.get(e),i=l.getCoordinates();if(this.matchInSameDirection(n,t,i[0],i[1]))return l;if(this.matchInSameDirection(n,t,i[i.length-1],i[i.length-2]))return l}return null},insertEdge:function(n){this.edges.add(n)},findEdgeEnd:function(n){for(var t=this.getEdgeEnds().iterator();t.hasNext();){var e=t.next();if(e.getEdge()===n)return e}return null},addEdges:function(n){for(var t=n.iterator();t.hasNext();){var e=t.next();this.edges.add(e);var l=new _e(e,!0),i=new _e(e,!1);l.setSym(i),i.setSym(l),this.add(l),this.add(i)}},add:function(n){this.nodes.add(n),this.edgeEndList.add(n)},getNodes:function(){return this.nodes.values()},findEdge:function(n,t){for(var e=0;e<this.edges.size();e++){var l=this.edges.get(e),i=l.getCoordinates();if(n.equals(i[0])&&t.equals(i[1]))return l}return null},interfaces_:function(){return[]},getClass:function(){return Ee}}),Ee.linkResultDirectedEdges=function(n){for(var t=n.iterator();t.hasNext();){var e=t.next();e.getEdges().linkResultDirectedEdges()}},t(be.prototype,{sortShellsAndHoles:function(n,t,e){for(var l=n.iterator();l.hasNext();){var i=l.next();i.isHole()?e.add(i):t.add(i)}},computePolygons:function(n){for(var t=new _,e=n.iterator();e.hasNext();){var l=e.next(),i=l.toPolygon(this.geometryFactory);t.add(i)}return t},placeFreeHoles:function(n,t){for(var e=t.iterator();e.hasNext();){var l=e.next();if(null===l.getShell()){var i=this.findEdgeRingContaining(l,n);if(null===i)throw new re("unable to assign hole to a shell",l.getCoordinate(0));l.setShell(i)}}},buildMinimalEdgeRings:function(n,t,e){for(var l=new _,i=n.iterator();i.hasNext();){var r=i.next();if(r.getMaxNodeDegree()>2){r.linkDirectedEdgesForMinimalEdgeRings();var u=r.buildMinimalRings(),s=this.findShell(u);null!==s?(this.placePolygonHoles(s,u),t.add(s)):e.addAll(u)}else l.add(r)}return l},containsPoint:function(n){for(var t=this.shellList.iterator();t.hasNext();){var e=t.next();if(e.containsPoint(n))return!0}return!1},buildMaximalEdgeRings:function(n){for(var t=new _,e=n.iterator();e.hasNext();){var l=e.next();if(l.isInResult()&&l.getLabel().isArea()&&null===l.getEdgeRing()){var i=new ve(l,this.geometryFactory);t.add(i),i.setInResult()}}return t},placePolygonHoles:function(n,t){for(var e=t.iterator();e.hasNext();){var l=e.next();l.isHole()&&l.setShell(n)}},getPolygons:function(){var n=this.computePolygons(this.shellList);return n},findEdgeRingContaining:function(n,t){for(var e=n.getLinearRing(),l=e.getEnvelopeInternal(),i=e.getCoordinateN(0),r=null,u=null,s=t.iterator();s.hasNext();){var a=s.next(),o=a.getLinearRing(),h=o.getEnvelopeInternal();null!==r&&(u=r.getLinearRing().getEnvelopeInternal());var f=!1;h.contains(l)&&ft.isPointInRing(i,o.getCoordinates())&&(f=!0),f&&(null===r||u.contains(h))&&(r=a)}return r},findShell:function(n){for(var t=0,e=null,l=n.iterator();l.hasNext();){var i=l.next();i.isHole()||(e=i,t++)}return c.isTrue(t<=1,"found two shells in MinimalEdgeRing list"),e},add:function(){if(1===arguments.length){var n=arguments[0];this.add(n.getEdgeEnds(),n.getNodes())}else if(2===arguments.length){var t=arguments[0],e=arguments[1];Ee.linkResultDirectedEdges(e);var l=this.buildMaximalEdgeRings(t),i=new _,r=this.buildMinimalEdgeRings(l,this.shellList,i);this.sortShellsAndHoles(r,this.shellList,i),this.placeFreeHoles(this.shellList,i)}},interfaces_:function(){return[]},getClass:function(){return be}}),t(Ce.prototype,{collectLines:function(n){for(var t=this.op.getGraph().getEdgeEnds().iterator();t.hasNext();){var e=t.next();this.collectLineEdge(e,n,this.lineEdgesList),this.collectBoundaryTouchEdge(e,n,this.lineEdgesList)}},labelIsolatedLine:function(n,t){var e=this.ptLocator.locate(n.getCoordinate(),this.op.getArgGeometry(t));n.getLabel().setLocation(t,e)},build:function(n){return this.findCoveredLineEdges(),this.collectLines(n),this.buildLines(n),this.resultLineList},collectLineEdge:function(n,t,e){var l=n.getLabel(),i=n.getEdge();n.isLineEdge()&&(n.isVisited()||!ll.isResultOfOp(l,t)||i.isCovered()||(e.add(i),n.setVisitedEdge(!0)))},findCoveredLineEdges:function(){for(var n=this.op.getGraph().getNodes().iterator();n.hasNext();){var t=n.next();t.getEdges().findCoveredLineEdges()}for(var e=this.op.getGraph().getEdgeEnds().iterator();e.hasNext();){var l=e.next(),i=l.getEdge();if(l.isLineEdge()&&!i.isCoveredSet()){var r=this.op.isCoveredByA(l.getCoordinate());i.setCovered(r)}}},labelIsolatedLines:function(n){for(var t=n.iterator();t.hasNext();){var e=t.next(),l=e.getLabel();e.isIsolated()&&(l.isNull(0)?this.labelIsolatedLine(e,0):this.labelIsolatedLine(e,1))}},buildLines:function(n){for(var t=this.lineEdgesList.iterator();t.hasNext();){var e=t.next(),l=(e.getLabel(),this.geometryFactory.createLineString(e.getCoordinates()));this.resultLineList.add(l),e.setInResult(!0)}},collectBoundaryTouchEdge:function(n,t,e){var l=n.getLabel();return n.isLineEdge()?null:n.isVisited()?null:n.isInteriorAreaEdge()?null:n.getEdge().isInResult()?null:(c.isTrue(!(n.isInResult()||n.getSym().isInResult())||!n.getEdge().isInResult()),void(ll.isResultOfOp(l,t)&&t===ll.INTERSECTION&&(e.add(n.getEdge()),n.setVisitedEdge(!0))))},interfaces_:function(){return[]},getClass:function(){return Ce}}),t(Ie.prototype,{filterCoveredNodeToPoint:function(n){var t=n.getCoordinate();if(!this.op.isCoveredByLA(t)){var e=this.geometryFactory.createPoint(t);this.resultPointList.add(e)}},extractNonCoveredResultNodes:function(n){for(var t=this.op.getGraph().getNodes().iterator();t.hasNext();){var e=t.next();if(!(e.isInResult()||e.isIncidentEdgeInResult()||0!==e.getEdges().getDegree()&&n!==ll.INTERSECTION)){var l=e.getLabel();ll.isResultOfOp(l,n)&&this.filterCoveredNodeToPoint(e)}}},build:function(n){return this.extractNonCoveredResultNodes(n),this.resultPointList},interfaces_:function(){return[]},getClass:function(){return Ie}}),t(Se.prototype,{locate:function(n){},interfaces_:function(){return[]},getClass:function(){return Se}}),t(Ne.prototype,{locate:function(n){return Ne.locate(n,this.geom)},interfaces_:function(){return[Se]},getClass:function(){return Ne}}),Ne.isPointInRing=function(n,t){return!!t.getEnvelopeInternal().intersects(n)&&ft.isPointInRing(n,t.getCoordinates())},Ne.containsPointInPolygon=function(n,t){if(t.isEmpty())return!1;var e=t.getExteriorRing();if(!Ne.isPointInRing(n,e))return!1;for(var l=0;l<t.getNumInteriorRing();l++){var i=t.getInteriorRingN(l);if(Ne.isPointInRing(n,i))return!1}return!0},Ne.containsPoint=function(n,t){if(t instanceof Pn)return Ne.containsPointInPolygon(n,t);if(t instanceof dn)for(var e=new Nt(t);e.hasNext();){var l=e.next();if(l!==t&&Ne.containsPoint(n,l))return!0}return!1},Ne.locate=function(n,t){return t.isEmpty()?I.EXTERIOR:Ne.containsPoint(n,t)?I.INTERIOR:I.EXTERIOR},t(Pe.prototype,{getNextCW:function(n){this.getEdges();var t=this.edgeList.indexOf(n),e=t-1;return 0===t&&(e=this.edgeList.size()-1),this.edgeList.get(e)},propagateSideLabels:function(n){for(var t=I.NONE,e=this.iterator();e.hasNext();){var l=e.next(),i=l.getLabel();i.isArea(n)&&i.getLocation(n,fe.LEFT)!==I.NONE&&(t=i.getLocation(n,fe.LEFT))}if(t===I.NONE)return null;for(var r=t,e=this.iterator();e.hasNext();){var l=e.next(),i=l.getLabel();if(i.getLocation(n,fe.ON)===I.NONE&&i.setLocation(n,fe.ON,r),i.isArea(n)){var u=i.getLocation(n,fe.LEFT),s=i.getLocation(n,fe.RIGHT);if(s!==I.NONE){if(s!==r)throw new re("side location conflict",l.getCoordinate());u===I.NONE&&c.shouldNeverReachHere("found single null side (at "+l.getCoordinate()+")"),r=u}else c.isTrue(i.getLocation(n,fe.LEFT)===I.NONE,"found single null side"),i.setLocation(n,fe.RIGHT,r),i.setLocation(n,fe.LEFT,r)}}},getCoordinate:function(){var n=this.iterator();if(!n.hasNext())return null;var t=n.next();return t.getCoordinate()},print:function(n){k.out.println("EdgeEndStar:   "+this.getCoordinate());for(var t=this.iterator();t.hasNext();){var e=t.next();e.print(n)}},isAreaLabelsConsistent:function(n){return this.computeEdgeEndLabels(n.getBoundaryNodeRule()),this.checkAreaLabelsConsistent(0)},checkAreaLabelsConsistent:function(n){var t=this.getEdges();if(t.size()<=0)return!0;var e=t.size()-1,l=t.get(e).getLabel(),i=l.getLocation(n,fe.LEFT);c.isTrue(i!==I.NONE,"Found unlabelled area edge");for(var r=i,u=this.iterator();u.hasNext();){var s=u.next(),a=s.getLabel();c.isTrue(a.isArea(n),"Found non-area edge");var o=a.getLocation(n,fe.LEFT),h=a.getLocation(n,fe.RIGHT);if(o===h)return!1;if(h!==r)return!1;r=o}return!0},findIndex:function(n){this.iterator();for(var t=0;t<this.edgeList.size();t++){var e=this.edgeList.get(t);if(e===n)return t}return-1},iterator:function(){return this.getEdges().iterator()},getEdges:function(){return null===this.edgeList&&(this.edgeList=new _(this.edgeMap.values())),this.edgeList},getLocation:function(n,t,e){return this.ptInAreaLocation[n]===I.NONE&&(this.ptInAreaLocation[n]=Ne.locate(t,e[n].getGeometry())),this.ptInAreaLocation[n]},toString:function(){var n=new P;n.append("EdgeEndStar:   "+this.getCoordinate()),n.append("\n");for(var t=this.iterator();t.hasNext();){var e=t.next();n.append(e),n.append("\n")}return n.toString()},computeEdgeEndLabels:function(n){for(var t=this.iterator();t.hasNext();){var e=t.next();e.computeLabel(n)}},computeLabelling:function(n){this.computeEdgeEndLabels(n[0].getBoundaryNodeRule()),this.propagateSideLabels(0),this.propagateSideLabels(1);for(var t=[!1,!1],e=this.iterator();e.hasNext();)for(var l=e.next(),i=l.getLabel(),r=0;r<2;r++)i.isLine(r)&&i.getLocation(r)===I.BOUNDARY&&(t[r]=!0);for(var e=this.iterator();e.hasNext();)for(var l=e.next(),i=l.getLabel(),r=0;r<2;r++)if(i.isAnyNull(r)){var u=I.NONE;if(t[r])u=I.EXTERIOR;else{var s=l.getCoordinate();u=this.getLocation(r,s,n)}i.setAllLocationsIfNull(r,u)}},getDegree:function(){return this.edgeMap.size()},insertEdgeEnd:function(n,t){this.edgeMap.put(n,t),this.edgeList=null},interfaces_:function(){return[]},getClass:function(){return Pe}}),h(Le,Pe),t(Le.prototype,{linkResultDirectedEdges:function(){this.getResultAreaEdges();for(var n=null,t=null,e=this.SCANNING_FOR_INCOMING,l=0;l<this.resultAreaEdgeList.size();l++){var i=this.resultAreaEdgeList.get(l),r=i.getSym();if(i.getLabel().isArea())switch(null===n&&i.isInResult()&&(n=i),e){case this.SCANNING_FOR_INCOMING:if(!r.isInResult())continue;t=r,e=this.LINKING_TO_OUTGOING;break;case this.LINKING_TO_OUTGOING:if(!i.isInResult())continue;t.setNext(i),e=this.SCANNING_FOR_INCOMING}}if(e===this.LINKING_TO_OUTGOING){if(null===n)throw new re("no outgoing dirEdge found",this.getCoordinate());c.isTrue(n.isInResult(),"unable to link last incoming dirEdge"),t.setNext(n)}},insert:function(n){var t=n;this.insertEdgeEnd(t,t)},getRightmostEdge:function(){var n=this.getEdges(),t=n.size();if(t<1)return null;var e=n.get(0);if(1===t)return e;var l=n.get(t-1),i=e.getQuadrant(),r=l.getQuadrant();if($t.isNorthern(i)&&$t.isNorthern(r))return e;if(!$t.isNorthern(i)&&!$t.isNorthern(r))return l;return 0!==e.getDy()?e:0!==l.getDy()?l:(c.shouldNeverReachHere("found two horizontal edges incident on node"),null)},print:function(n){k.out.println("DirectedEdgeStar: "+this.getCoordinate());for(var t=this.iterator();t.hasNext();){var e=t.next();n.print("out "),e.print(n),n.println(),n.print("in "),e.getSym().print(n),n.println()}},getResultAreaEdges:function(){if(null!==this.resultAreaEdgeList)return this.resultAreaEdgeList;this.resultAreaEdgeList=new _;for(var n=this.iterator();n.hasNext();){var t=n.next();(t.isInResult()||t.getSym().isInResult())&&this.resultAreaEdgeList.add(t)}return this.resultAreaEdgeList},updateLabelling:function(n){for(var t=this.iterator();t.hasNext();){var e=t.next(),l=e.getLabel();l.setAllLocationsIfNull(0,n.getLocation(0)),l.setAllLocationsIfNull(1,n.getLocation(1))}},linkAllDirectedEdges:function(){this.getEdges();for(var n=null,t=null,e=this.edgeList.size()-1;e>=0;e--){var l=this.edgeList.get(e),i=l.getSym();null===t&&(t=i),null!==n&&i.setNext(n),n=l}t.setNext(n)},computeDepths:function(){if(1===arguments.length){var n=arguments[0],t=this.findIndex(n),e=(n.getLabel(),n.getDepth(fe.LEFT)),l=n.getDepth(fe.RIGHT),i=this.computeDepths(t+1,this.edgeList.size(),e),r=this.computeDepths(0,t,i);if(r!==l)throw new re("depth mismatch at "+n.getCoordinate())}else if(3===arguments.length){for(var u=arguments[0],s=arguments[1],a=arguments[2],o=a,h=u;h<s;h++){var f=this.edgeList.get(h);f.getLabel();f.setEdgeDepths(fe.RIGHT,o),o=f.getDepth(fe.LEFT)}return o}},mergeSymLabels:function(){for(var n=this.iterator();n.hasNext();){var t=n.next(),e=t.getLabel();e.merge(t.getSym().getLabel())}},linkMinimalDirectedEdges:function(n){for(var t=null,e=null,l=this.SCANNING_FOR_INCOMING,i=this.resultAreaEdgeList.size()-1;i>=0;i--){var r=this.resultAreaEdgeList.get(i),u=r.getSym();switch(null===t&&r.getEdgeRing()===n&&(t=r),l){case this.SCANNING_FOR_INCOMING:if(u.getEdgeRing()!==n)continue;e=u,l=this.LINKING_TO_OUTGOING;break;case this.LINKING_TO_OUTGOING:if(r.getEdgeRing()!==n)continue;e.setNextMin(r),l=this.SCANNING_FOR_INCOMING}}l===this.LINKING_TO_OUTGOING&&(c.isTrue(null!==t,"found null for first outgoing dirEdge"),c.isTrue(t.getEdgeRing()===n,"unable to link last incoming dirEdge"),e.setNextMin(t))},getOutgoingDegree:function(){if(0===arguments.length){for(var n=0,t=this.iterator();t.hasNext();){var e=t.next();e.isInResult()&&n++}return n}if(1===arguments.length){for(var l=arguments[0],n=0,t=this.iterator();t.hasNext();){var e=t.next();e.getEdgeRing()===l&&n++}return n}},getLabel:function(){return this.label},findCoveredLineEdges:function(){for(var n=I.NONE,t=this.iterator();t.hasNext();){var e=t.next(),l=e.getSym();if(!e.isLineEdge()){if(e.isInResult()){n=I.INTERIOR;break}if(l.isInResult()){n=I.EXTERIOR;break}}}if(n===I.NONE)return null;for(var i=n,t=this.iterator();t.hasNext();){var e=t.next(),l=e.getSym();e.isLineEdge()?e.getEdge().setCovered(i===I.INTERIOR):(e.isInResult()&&(i=I.EXTERIOR),l.isInResult()&&(i=I.INTERIOR))}},computeLabelling:function(n){Pe.prototype.computeLabelling.call(this,n),this.label=new de(I.NONE);for(var t=this.iterator();t.hasNext();)for(var e=t.next(),l=e.getEdge(),i=l.getLabel(),r=0;r<2;r++){var u=i.getLocation(r);u!==I.INTERIOR&&u!==I.BOUNDARY||this.label.setLocation(r,I.INTERIOR)}},interfaces_:function(){return[]},getClass:function(){return Le}}),h(Re,Me),t(Re.prototype,{createNode:function(n){return new ye(n,new Le)},interfaces_:function(){return[]},getClass:function(){return Re}}),t(Te.prototype,{computeIntersections:function(n,t){this.mce.computeIntersectsForChain(this.chainIndex,n.mce,n.chainIndex,t)},interfaces_:function(){return[]},getClass:function(){return Te}}),t(Oe.prototype,{isDelete:function(){return this.eventType===Oe.DELETE},setDeleteEventIndex:function(n){this.deleteEventIndex=n},getObject:function(){return this.obj},compareTo:function(n){var t=n;return this.xValue<t.xValue?-1:this.xValue>t.xValue?1:this.eventType<t.eventType?-1:this.eventType>t.eventType?1:0},getInsertEvent:function(){return this.insertEvent},isInsert:function(){return this.eventType===Oe.INSERT},isSameLabel:function(n){return null!==this.label&&this.label===n.label},getDeleteEventIndex:function(){return this.deleteEventIndex},interfaces_:function(){return[r]},getClass:function(){return Oe}}),Oe.INSERT=1,Oe.DELETE=2,t(Ae.prototype,{interfaces_:function(){return[]},getClass:function(){return Ae}}),t(ke.prototype,{isTrivialIntersection:function(n,t,e,l){if(n===e&&1===this.li.getIntersectionNum()){if(ke.isAdjacentSegments(t,l))return!0;if(n.isClosed()){var i=n.getNumPoints()-1;if(0===t&&l===i||0===l&&t===i)return!0}}return!1},getProperIntersectionPoint:function(){return this.properIntersectionPoint},setIsDoneIfProperInt:function(n){this.isDoneWhenProperInt=n},hasProperInteriorIntersection:function(){return this.hasProperInterior},isBoundaryPointInternal:function(n,t){for(var e=t.iterator();e.hasNext();){var l=e.next(),i=l.getCoordinate();if(n.isIntersection(i))return!0}return!1},hasProperIntersection:function(){return this.hasProper},hasIntersection:function(){return this._hasIntersection},isDone:function(){return this._isDone},isBoundaryPoint:function(n,t){return null!==t&&(!!this.isBoundaryPointInternal(n,t[0])||!!this.isBoundaryPointInternal(n,t[1]))},setBoundaryNodes:function(n,t){this.bdyNodes=new Array(2).fill(null),this.bdyNodes[0]=n,this.bdyNodes[1]=t},addIntersections:function(n,t,e,l){if(n===e&&t===l)return null;this.numTests++;var i=n.getCoordinates()[t],r=n.getCoordinates()[t+1],u=e.getCoordinates()[l],s=e.getCoordinates()[l+1];this.li.computeIntersection(i,r,u,s),this.li.hasIntersection()&&(this.recordIsolated&&(n.setIsolated(!1),e.setIsolated(!1)),this.numIntersections++,this.isTrivialIntersection(n,t,e,l)||(this._hasIntersection=!0,!this.includeProper&&this.li.isProper()||(n.addIntersections(this.li,t,0),e.addIntersections(this.li,l,1)),this.li.isProper()&&(this.properIntersectionPoint=this.li.getIntersection(0).copy(),this.hasProper=!0,this.isDoneWhenProperInt&&(this._isDone=!0),this.isBoundaryPoint(this.li,this.bdyNodes)||(this.hasProperInterior=!0))))},interfaces_:function(){return[]},getClass:function(){return ke}}),ke.isAdjacentSegments=function(n,t){return 1===Math.abs(n-t)},h(De,Ae),t(De.prototype,{prepareEvents:function(){fu.sort(this.events);for(var n=0;n<this.events.size();n++){var t=this.events.get(n)
;t.isDelete()&&t.getInsertEvent().setDeleteEventIndex(n)}},computeIntersections:function(){if(1===arguments.length){var n=arguments[0];this.nOverlaps=0,this.prepareEvents();for(var t=0;t<this.events.size();t++){var e=this.events.get(t);if(e.isInsert()&&this.processOverlaps(t,e.getDeleteEventIndex(),e,n),n.isDone())break}}else if(3===arguments.length)if(arguments[2]instanceof ke&&S(arguments[0],y)&&S(arguments[1],y)){var l=arguments[0],i=arguments[1],r=arguments[2];this.addEdges(l,l),this.addEdges(i,i),this.computeIntersections(r)}else if("boolean"==typeof arguments[2]&&S(arguments[0],y)&&arguments[1]instanceof ke){var u=arguments[0],s=arguments[1],a=arguments[2];a?this.addEdges(u,null):this.addEdges(u),this.computeIntersections(s)}},addEdge:function(n,t){for(var e=n.getMonotoneChainEdge(),l=e.getStartIndexes(),i=0;i<l.length-1;i++){var r=new Te(e,i),u=new Oe(t,e.getMinX(i),r);this.events.add(u),this.events.add(new Oe(e.getMaxX(i),u))}},processOverlaps:function(n,t,e,l){for(var i=e.getObject(),r=n;r<t;r++){var u=this.events.get(r);if(u.isInsert()){var s=u.getObject();e.isSameLabel(u)||(i.computeIntersections(s,l),this.nOverlaps++)}}},addEdges:function(){if(1===arguments.length)for(var n=arguments[0],t=n.iterator();t.hasNext();){var e=t.next();this.addEdge(e,e)}else if(2===arguments.length)for(var l=arguments[0],i=arguments[1],t=l.iterator();t.hasNext();){var e=t.next();this.addEdge(e,i)}},interfaces_:function(){return[]},getClass:function(){return De}}),t(Fe.prototype,{getMin:function(){return this.min},intersects:function(n,t){return!(this.min>t||this.max<n)},getMax:function(){return this.max},toString:function(){return ut.toLineString(new d(this.min,0),new d(this.max,0))},interfaces_:function(){return[]},getClass:function(){return Fe}}),t(Be.prototype,{compare:function(n,t){var e=n,l=t,i=(e.min+e.max)/2,r=(l.min+l.max)/2;return i<r?-1:i>r?1:0},interfaces_:function(){return[s]},getClass:function(){return Be}}),Fe.NodeComparator=Be,h(Ge,Fe),t(Ge.prototype,{query:function(n,t,e){return this.intersects(n,t)?void e.visitItem(this.item):null},interfaces_:function(){return[]},getClass:function(){return Ge}}),h(ze,Fe),t(ze.prototype,{buildExtent:function(n,t){this.min=Math.min(n.min,t.min),this.max=Math.max(n.max,t.max)},query:function(n,t,e){return this.intersects(n,t)?(null!==this.node1&&this.node1.query(n,t,e),void(null!==this.node2&&this.node2.query(n,t,e))):null},interfaces_:function(){return[]},getClass:function(){return ze}}),t(qe.prototype,{buildTree:function(){fu.sort(this.leaves,new IntervalRTreeNode.NodeComparator);for(var n=this.leaves,t=null,e=new _;;){if(this.buildLevel(n,e),1===e.size())return e.get(0);t=n,n=e,e=t}},insert:function(n,t,e){if(null!==this.root)throw new IllegalStateException("Index cannot be added to once it has been queried");this.leaves.add(new Ge(n,t,e))},query:function(n,t,e){this.init(),this.root.query(n,t,e)},buildRoot:function(){return null!==this.root?null:void(this.root=this.buildTree())},printNode:function(n){k.out.println(ut.toLineString(new d(n.min,this.level),new d(n.max,this.level)))},init:function(){return null!==this.root?null:void this.buildRoot()},buildLevel:function(n,t){this.level++,t.clear();for(var e=0;e<n.size();e+=2){var l=n.get(e),i=e+1<n.size()?n.get(e):null;if(null===i)t.add(l);else{var r=new ze(n.get(e),n.get(e+1));t.add(r)}}},interfaces_:function(){return[]},getClass:function(){return qe}}),t(je.prototype,{filter:function(n){if(this.isForcedToLineString&&n instanceof Rn){var t=n.getFactory().createLineString(n.getCoordinateSequence());return this.lines.add(t),null}n instanceof Cn&&this.lines.add(n)},setForceToLineString:function(n){this.isForcedToLineString=n},interfaces_:function(){return[B]},getClass:function(){return je}}),je.getGeometry=function(){if(1===arguments.length){var n=arguments[0];return n.getFactory().buildGeometry(je.getLines(n))}if(2===arguments.length){var t=arguments[0],e=arguments[1];return t.getFactory().buildGeometry(je.getLines(t,e))}},je.getLines=function(){if(1===arguments.length){var n=arguments[0];return je.getLines(n,!1)}if(2===arguments.length){if(S(arguments[0],v)&&S(arguments[1],v)){for(var t=arguments[0],e=arguments[1],l=t.iterator();l.hasNext();){var i=l.next();je.getLines(i,e)}return e}if(arguments[0]instanceof G&&"boolean"==typeof arguments[1]){var r=arguments[0],u=arguments[1],s=new _;return r.apply(new je(s,u)),s}if(arguments[0]instanceof G&&S(arguments[1],v)){var a=arguments[0],o=arguments[1];return a instanceof Cn?o.add(a):a.apply(new je(o)),o}}else if(3===arguments.length){if("boolean"==typeof arguments[2]&&S(arguments[0],v)&&S(arguments[1],v)){for(var h=arguments[0],f=arguments[1],c=arguments[2],l=h.iterator();l.hasNext();){var i=l.next();je.getLines(i,f,c)}return f}if("boolean"==typeof arguments[2]&&arguments[0]instanceof G&&S(arguments[1],v)){var d=arguments[0],g=arguments[1],p=arguments[2];return d.apply(new je(g,p)),g}}},t(Ue.prototype,{visitItem:function(n){this.items.add(n)},getItems:function(){return this.items},interfaces_:function(){return[Dt]},getClass:function(){return Ue}}),t(Ve.prototype,{locate:function(n){var t=new ht(n),e=new Ye(t);return this.index.query(n.y,n.y,e),t.getLocation()},interfaces_:function(){return[Se]},getClass:function(){return Ve}}),t(Ye.prototype,{visitItem:function(n){var t=n;this.counter.countSegment(t.getCoordinate(0),t.getCoordinate(1))},interfaces_:function(){return[Dt]},getClass:function(){return Ye}}),t(Xe.prototype,{init:function(n){for(var t=je.getLines(n),e=t.iterator();e.hasNext();){var l=e.next(),i=l.getCoordinates();this.addLine(i)}},addLine:function(n){for(var t=1;t<n.length;t++){var e=new ct(n[t-1],n[t]),l=Math.min(e.p0.y,e.p1.y),i=Math.max(e.p0.y,e.p1.y);this.index.insert(l,i,e)}},query:function(){if(2===arguments.length){var n=arguments[0],t=arguments[1],e=new Ue;return this.index.query(n,t,e),e.getItems()}if(3===arguments.length){var l=arguments[0],i=arguments[1],r=arguments[2];this.index.query(l,i,r)}},interfaces_:function(){return[]},getClass:function(){return Xe}}),Ve.SegmentVisitor=Ye,Ve.IntervalIndexedGeometry=Xe,t(He.prototype,{getSegmentIndex:function(){return this.segmentIndex},getCoordinate:function(){return this.coord},print:function(n){n.print(this.coord),n.print(" seg # = "+this.segmentIndex),n.println(" dist = "+this.dist)},compareTo:function(n){var t=n;return this.compare(t.segmentIndex,t.dist)},isEndPoint:function(n){return 0===this.segmentIndex&&0===this.dist||this.segmentIndex===n},toString:function(){return this.coord+" seg # = "+this.segmentIndex+" dist = "+this.dist},getDistance:function(){return this.dist},compare:function(n,t){return this.segmentIndex<n?-1:this.segmentIndex>n?1:this.dist<t?-1:this.dist>t?1:0},interfaces_:function(){return[r]},getClass:function(){return He}}),t(We.prototype,{print:function(n){n.println("Intersections:");for(var t=this.iterator();t.hasNext();){var e=t.next();e.print(n)}},iterator:function(){return this.nodeMap.values().iterator()},addSplitEdges:function(n){this.addEndpoints();for(var t=this.iterator(),e=t.next();t.hasNext();){var l=t.next(),i=this.createSplitEdge(e,l);n.add(i),e=l}},addEndpoints:function(){var n=this.edge.pts.length-1;this.add(this.edge.pts[0],0,0),this.add(this.edge.pts[n],n,0)},createSplitEdge:function(n,t){var e=t.segmentIndex-n.segmentIndex+2,l=this.edge.pts[t.segmentIndex],i=t.dist>0||!t.coord.equals2D(l);i||e--;var r=new Array(e).fill(null),u=0;r[u++]=new d(n.coord);for(var s=n.segmentIndex+1;s<=t.segmentIndex;s++)r[u++]=this.edge.pts[s];return i&&(r[u]=t.coord),new Qe(r,new de(this.edge.label))},add:function(n,t,e){var l=new He(n,t,e),i=this.nodeMap.get(l);return null!==i?i:(this.nodeMap.put(l,l),l)},isIntersection:function(n){for(var t=this.iterator();t.hasNext();){var e=t.next();if(e.coord.equals(n))return!0}return!1},interfaces_:function(){return[]},getClass:function(){return We}}),t(Ze.prototype,{getChainStartIndices:function(n){var t=0,e=new _;e.add(new L(t));do{var l=this.findChainEnd(n,t);e.add(new L(l)),t=l}while(t<n.length-1);var i=Ze.toIntArray(e);return i},findChainEnd:function(n,t){for(var e=$t.quadrant(n[t],n[t+1]),l=t+1;l<n.length;){var i=$t.quadrant(n[l-1],n[l]);if(i!==e)break;l++}return l-1},interfaces_:function(){return[]},getClass:function(){return Ze}}),Ze.toIntArray=function(n){for(var t=new Array(n.size()).fill(null),e=0;e<t.length;e++)t[e]=n.get(e).intValue();return t},t(Je.prototype,{getCoordinates:function(){return this.pts},getMaxX:function(n){var t=this.pts[this.startIndex[n]].x,e=this.pts[this.startIndex[n+1]].x;return t>e?t:e},getMinX:function(n){var t=this.pts[this.startIndex[n]].x,e=this.pts[this.startIndex[n+1]].x;return t<e?t:e},computeIntersectsForChain:function(){if(4===arguments.length){var n=arguments[0],t=arguments[1],e=arguments[2],l=arguments[3];this.computeIntersectsForChain(this.startIndex[n],this.startIndex[n+1],t,t.startIndex[e],t.startIndex[e+1],l)}else if(6===arguments.length){var i=arguments[0],r=arguments[1],u=arguments[2],s=arguments[3],a=arguments[4],o=arguments[5],h=this.pts[i],f=this.pts[r],c=u.pts[s],d=u.pts[a];if(r-i===1&&a-s===1)return o.addIntersections(this.e,i,u.e,s),null;if(this.env1.init(h,f),this.env2.init(c,d),!this.env1.intersects(this.env2))return null;var g=Math.trunc((i+r)/2),p=Math.trunc((s+a)/2);i<g&&(s<p&&this.computeIntersectsForChain(i,g,u,s,p,o),p<a&&this.computeIntersectsForChain(i,g,u,p,a,o)),g<r&&(s<p&&this.computeIntersectsForChain(g,r,u,s,p,o),p<a&&this.computeIntersectsForChain(g,r,u,p,a,o))}},getStartIndexes:function(){return this.startIndex},computeIntersects:function(n,t){for(var e=0;e<this.startIndex.length-1;e++)for(var l=0;l<n.startIndex.length-1;l++)this.computeIntersectsForChain(e,n,l,t)},interfaces_:function(){return[]},getClass:function(){return Je}}),t(Ke.prototype,{getDepth:function(n,t){return this.depth[n][t]},setDepth:function(n,t,e){this.depth[n][t]=e},isNull:function(){if(0===arguments.length){for(var n=0;n<2;n++)for(var t=0;t<3;t++)if(this.depth[n][t]!==Ke.NULL_VALUE)return!1;return!0}if(1===arguments.length){var e=arguments[0];return this.depth[e][1]===Ke.NULL_VALUE}if(2===arguments.length){var l=arguments[0],i=arguments[1];return this.depth[l][i]===Ke.NULL_VALUE}},normalize:function(){for(var n=0;n<2;n++)if(!this.isNull(n)){var t=this.depth[n][1];this.depth[n][2]<t&&(t=this.depth[n][2]),t<0&&(t=0);for(var e=1;e<3;e++){var l=0;this.depth[n][e]>t&&(l=1),this.depth[n][e]=l}}},getDelta:function(n){return this.depth[n][fe.RIGHT]-this.depth[n][fe.LEFT]},getLocation:function(n,t){return this.depth[n][t]<=0?I.EXTERIOR:I.INTERIOR},toString:function(){return"A: "+this.depth[0][1]+","+this.depth[0][2]+" B: "+this.depth[1][1]+","+this.depth[1][2]},add:function(){if(1===arguments.length)for(var n=arguments[0],t=0;t<2;t++)for(var e=1;e<3;e++){var l=n.getLocation(t,e);l!==I.EXTERIOR&&l!==I.INTERIOR||(this.isNull(t,e)?this.depth[t][e]=Ke.depthAtLocation(l):this.depth[t][e]+=Ke.depthAtLocation(l))}else if(3===arguments.length){var i=arguments[0],r=arguments[1],u=arguments[2];u===I.INTERIOR&&this.depth[i][r]++}},interfaces_:function(){return[]},getClass:function(){return Ke}}),Ke.depthAtLocation=function(n){return n===I.EXTERIOR?0:n===I.INTERIOR?1:Ke.NULL_VALUE},Ke.NULL_VALUE=-1,h(Qe,me),t(Qe.prototype,{getDepth:function(){return this.depth},getCollapsedEdge:function(){var n=new Array(2).fill(null);n[0]=this.pts[0],n[1]=this.pts[1];var t=new Qe(n,de.toLineLabel(this.label));return t},isIsolated:function(){return this._isIsolated},getCoordinates:function(){return this.pts},setIsolated:function(n){this._isIsolated=n},setName:function(n){this.name=n},equals:function(n){if(!(n instanceof Qe))return!1;var t=n;if(this.pts.length!==t.pts.length)return!1;for(var e=!0,l=!0,i=this.pts.length,r=0;r<this.pts.length;r++)if(this.pts[r].equals2D(t.pts[r])||(e=!1),this.pts[r].equals2D(t.pts[--i])||(l=!1),!e&&!l)return!1;return!0},getCoordinate:function(){if(0===arguments.length)return this.pts.length>0?this.pts[0]:null;if(1===arguments.length){var n=arguments[0];return this.pts[n]}},print:function(n){n.print("edge "+this.name+": "),n.print("LINESTRING (");for(var t=0;t<this.pts.length;t++)t>0&&n.print(","),n.print(this.pts[t].x+" "+this.pts[t].y);n.print(")  "+this.label+" "+this.depthDelta)},computeIM:function(n){Qe.updateIM(this.label,n)},isCollapsed:function(){return!!this.label.isArea()&&(3===this.pts.length&&!!this.pts[0].equals(this.pts[2]))},isClosed:function(){return this.pts[0].equals(this.pts[this.pts.length-1])},getMaximumSegmentIndex:function(){return this.pts.length-1},getDepthDelta:function(){return this.depthDelta},getNumPoints:function(){return this.pts.length},printReverse:function(n){n.print("edge "+this.name+": ");for(var t=this.pts.length-1;t>=0;t--)n.print(this.pts[t]+" ");n.println("")},getMonotoneChainEdge:function(){return null===this.mce&&(this.mce=new Je(this)),this.mce},getEnvelope:function(){if(null===this.env){this.env=new E;for(var n=0;n<this.pts.length;n++)this.env.expandToInclude(this.pts[n])}return this.env},addIntersection:function(n,t,e,l){var i=new d(n.getIntersection(l)),r=t,u=n.getEdgeDistance(e,l),s=r+1;if(s<this.pts.length){var a=this.pts[s];i.equals2D(a)&&(r=s,u=0)}this.eiList.add(i,r,u)},toString:function(){var n=new P;n.append("edge "+this.name+": "),n.append("LINESTRING (");for(var t=0;t<this.pts.length;t++)t>0&&n.append(","),n.append(this.pts[t].x+" "+this.pts[t].y);return n.append(")  "+this.label+" "+this.depthDelta),n.toString()},isPointwiseEqual:function(n){if(this.pts.length!==n.pts.length)return!1;for(var t=0;t<this.pts.length;t++)if(!this.pts[t].equals2D(n.pts[t]))return!1;return!0},setDepthDelta:function(n){this.depthDelta=n},getEdgeIntersectionList:function(){return this.eiList},addIntersections:function(n,t,e){for(var l=0;l<n.getIntersectionNum();l++)this.addIntersection(n,t,e,l)},interfaces_:function(){return[]},getClass:function(){return Qe}}),Qe.updateIM=function(){if(2!==arguments.length)return me.prototype.updateIM.apply(this,arguments);var n=arguments[0],t=arguments[1];t.setAtLeastIfValid(n.getLocation(0,fe.ON),n.getLocation(1,fe.ON),1),n.isArea()&&(t.setAtLeastIfValid(n.getLocation(0,fe.LEFT),n.getLocation(1,fe.LEFT),2),t.setAtLeastIfValid(n.getLocation(0,fe.RIGHT),n.getLocation(1,fe.RIGHT),2))},h($e,Ee),t($e.prototype,{insertBoundaryPoint:function(n,t){var e=this.nodes.addNode(t),l=e.getLabel(),i=1,r=I.NONE;r=l.getLocation(n,fe.ON),r===I.BOUNDARY&&i++;var u=$e.determineBoundary(this.boundaryNodeRule,i);l.setLocation(n,u)},computeSelfNodes:function(){if(2===arguments.length){var n=arguments[0],t=arguments[1];return this.computeSelfNodes(n,t,!1)}if(3===arguments.length){var e=arguments[0],l=arguments[1],i=arguments[2],r=new ke(e,!0,!1);r.setIsDoneIfProperInt(i);var u=this.createEdgeSetIntersector(),s=this.parentGeom instanceof Rn||this.parentGeom instanceof Pn||this.parentGeom instanceof Tn,a=l||!s;return u.computeIntersections(this.edges,r,a),this.addSelfIntersectionNodes(this.argIndex),r}},computeSplitEdges:function(n){for(var t=this.edges.iterator();t.hasNext();){var e=t.next();e.eiList.addSplitEdges(n)}},computeEdgeIntersections:function(n,t,e){var l=new ke(t,e,!0);l.setBoundaryNodes(this.getBoundaryNodes(),n.getBoundaryNodes());var i=this.createEdgeSetIntersector();return i.computeIntersections(this.edges,n.edges,l),l},getGeometry:function(){return this.parentGeom},getBoundaryNodeRule:function(){return this.boundaryNodeRule},hasTooFewPoints:function(){return this._hasTooFewPoints},addPoint:function(){if(arguments[0]instanceof Sn){var n=arguments[0],t=n.getCoordinate();this.insertPoint(this.argIndex,t,I.INTERIOR)}else if(arguments[0]instanceof d){var e=arguments[0];this.insertPoint(this.argIndex,e,I.INTERIOR)}},addPolygon:function(n){this.addPolygonRing(n.getExteriorRing(),I.EXTERIOR,I.INTERIOR);for(var t=0;t<n.getNumInteriorRing();t++){var e=n.getInteriorRingN(t);this.addPolygonRing(e,I.INTERIOR,I.EXTERIOR)}},addEdge:function(n){this.insertEdge(n);var t=n.getCoordinates();this.insertPoint(this.argIndex,t[0],I.BOUNDARY),this.insertPoint(this.argIndex,t[t.length-1],I.BOUNDARY)},addLineString:function(n){var t=X.removeRepeatedPoints(n.getCoordinates());if(t.length<2)return this._hasTooFewPoints=!0,this.invalidPoint=t[0],null;var e=new Qe(t,new de(this.argIndex,I.INTERIOR));this.lineEdgeMap.put(n,e),this.insertEdge(e),c.isTrue(t.length>=2,"found LineString with single point"),this.insertBoundaryPoint(this.argIndex,t[0]),this.insertBoundaryPoint(this.argIndex,t[t.length-1])},getInvalidPoint:function(){return this.invalidPoint},getBoundaryPoints:function(){for(var n=this.getBoundaryNodes(),t=new Array(n.size()).fill(null),e=0,l=n.iterator();l.hasNext();){var i=l.next();t[e++]=i.getCoordinate().copy()}return t},getBoundaryNodes:function(){return null===this.boundaryNodes&&(this.boundaryNodes=this.nodes.getBoundaryNodes(this.argIndex)),this.boundaryNodes},addSelfIntersectionNode:function(n,t,e){return this.isBoundaryNode(n,t)?null:void(e===I.BOUNDARY&&this.useBoundaryDeterminationRule?this.insertBoundaryPoint(n,t):this.insertPoint(n,t,e))},addPolygonRing:function(n,t,e){if(n.isEmpty())return null;var l=X.removeRepeatedPoints(n.getCoordinates());if(l.length<4)return this._hasTooFewPoints=!0,this.invalidPoint=l[0],null;var i=t,r=e;ft.isCCW(l)&&(i=e,r=t);var u=new Qe(l,new de(this.argIndex,I.BOUNDARY,i,r));this.lineEdgeMap.put(n,u),this.insertEdge(u),this.insertPoint(this.argIndex,l[0],I.BOUNDARY)},insertPoint:function(n,t,e){var l=this.nodes.addNode(t),i=l.getLabel();null===i?l.label=new de(n,e):i.setLocation(n,e)},createEdgeSetIntersector:function(){return new De},addSelfIntersectionNodes:function(n){for(var t=this.edges.iterator();t.hasNext();)for(var e=t.next(),l=e.getLabel().getLocation(n),i=e.eiList.iterator();i.hasNext();){var r=i.next();this.addSelfIntersectionNode(n,r.coord,l)}},add:function(){if(1!==arguments.length)return Ee.prototype.add.apply(this,arguments);var n=arguments[0];if(n.isEmpty())return null;if(n instanceof Tn&&(this.useBoundaryDeterminationRule=!1),n instanceof Pn)this.addPolygon(n);else if(n instanceof Cn)this.addLineString(n);else if(n instanceof Sn)this.addPoint(n);else if(n instanceof Ln)this.addCollection(n);else if(n instanceof gn)this.addCollection(n);else if(n instanceof Tn)this.addCollection(n);else{if(!(n instanceof dn))throw new UnsupportedOperationException(n.getClass().getName());this.addCollection(n)}},addCollection:function(n){for(var t=0;t<n.getNumGeometries();t++){var e=n.getGeometryN(t);this.add(e)}},locate:function(n){return S(this.parentGeom,Nn)&&this.parentGeom.getNumGeometries()>50?(null===this.areaPtLocator&&(this.areaPtLocator=new Ve(this.parentGeom)),this.areaPtLocator.locate(n)):this.ptLocator.locate(n,this.parentGeom)},findEdge:function(){if(1===arguments.length){var n=arguments[0];return this.lineEdgeMap.get(n)}return Ee.prototype.findEdge.apply(this,arguments)},interfaces_:function(){return[]},getClass:function(){return $e}}),$e.determineBoundary=function(n,t){return n.isInBoundary(t)?I.BOUNDARY:I.INTERIOR},t(nl.prototype,{getArgGeometry:function(n){return this.arg[n].getGeometry()},setComputationPrecision:function(n){this.resultPrecisionModel=n,this.li.setPrecisionModel(this.resultPrecisionModel)},interfaces_:function(){return[]},getClass:function(){return nl}}),t(tl.prototype,{compareTo:function(n){var t=n,e=tl.compareOriented(this.pts,this._orientation,t.pts,t._orientation);return e},interfaces_:function(){return[r]},getClass:function(){return tl}}),tl.orientation=function(n){return 1===X.increasingDirection(n)},tl.compareOriented=function(n,t,e,l){for(var i=t?1:-1,r=l?1:-1,u=t?n.length:-1,s=l?e.length:-1,a=t?0:n.length-1,o=l?0:e.length-1;;){var h=n[a].compareTo(e[o]);if(0!==h)return h;a+=i,o+=r;var f=a===u,c=o===s;if(f&&!c)return-1;if(!f&&c)return 1;if(f&&c)return 0}},t(el.prototype,{print:function(n){n.print("MULTILINESTRING ( ");for(var t=0;t<this.edges.size();t++){var e=this.edges.get(t);t>0&&n.print(","),n.print("(");for(var l=e.getCoordinates(),i=0;i<l.length;i++)i>0&&n.print(","),n.print(l[i].x+" "+l[i].y);n.println(")")}n.print(")  ")},addAll:function(n){for(var t=n.iterator();t.hasNext();)this.add(t.next())},findEdgeIndex:function(n){for(var t=0;t<this.edges.size();t++)if(this.edges.get(t).equals(n))return t;return-1},iterator:function(){return this.edges.iterator()},getEdges:function(){return this.edges},get:function(n){return this.edges.get(n)},findEqualEdge:function(n){var t=new tl(n.getCoordinates()),e=this.ocaMap.get(t);return e},add:function(n){this.edges.add(n);var t=new tl(n.getCoordinates());this.ocaMap.put(t,n)},interfaces_:function(){return[]},getClass:function(){return el}}),h(ll,nl),t(ll.prototype,{insertUniqueEdge:function(n){var t=this.edgeList.findEqualEdge(n);if(null!==t){var e=t.getLabel(),l=n.getLabel();t.isPointwiseEqual(n)||(l=new de(n.getLabel()),l.flip());var i=t.getDepth();i.isNull()&&i.add(e),i.add(l),e.merge(l)}else this.edgeList.add(n)},getGraph:function(){return this.graph},cancelDuplicateResultEdges:function(){for(var n=this.graph.getEdgeEnds().iterator();n.hasNext();){var t=n.next(),e=t.getSym();t.isInResult()&&e.isInResult()&&(t.setInResult(!1),e.setInResult(!1))}},isCoveredByLA:function(n){return!!this.isCovered(n,this.resultLineList)||!!this.isCovered(n,this.resultPolyList)},computeGeometry:function(n,t,e,l){var i=new _;return i.addAll(n),i.addAll(t),i.addAll(e),i.isEmpty()?ll.createEmptyResult(l,this.arg[0].getGeometry(),this.arg[1].getGeometry(),this.geomFact):this.geomFact.buildGeometry(i)},mergeSymLabels:function(){for(var n=this.graph.getNodes().iterator();n.hasNext();){var t=n.next();t.getEdges().mergeSymLabels()}},isCovered:function(n,t){for(var e=t.iterator();e.hasNext();){var l=e.next(),i=this.ptLocator.locate(n,l);if(i!==I.EXTERIOR)return!0}return!1},replaceCollapsedEdges:function(){for(var n=new _,t=this.edgeList.iterator();t.hasNext();){var e=t.next();e.isCollapsed()&&(t.remove(),n.add(e.getCollapsedEdge()))}this.edgeList.addAll(n)},updateNodeLabelling:function(){for(var n=this.graph.getNodes().iterator();n.hasNext();){var t=n.next(),e=t.getEdges().getLabel();t.getLabel().merge(e)}},getResultGeometry:function(n){return this.computeOverlay(n),this.resultGeom},insertUniqueEdges:function(n){for(var t=n.iterator();t.hasNext();){var e=t.next();this.insertUniqueEdge(e)}},computeOverlay:function(n){this.copyPoints(0),this.copyPoints(1),this.arg[0].computeSelfNodes(this.li,!1),this.arg[1].computeSelfNodes(this.li,!1),this.arg[0].computeEdgeIntersections(this.arg[1],this.li,!0);var t=new _;this.arg[0].computeSplitEdges(t),this.arg[1].computeSplitEdges(t);this.insertUniqueEdges(t),this.computeLabelsFromDepths(),this.replaceCollapsedEdges(),oe.checkValid(this.edgeList.getEdges()),this.graph.addEdges(this.edgeList.getEdges()),this.computeLabelling(),this.labelIncompleteNodes(),this.findResultAreaEdges(n),this.cancelDuplicateResultEdges();var e=new be(this.geomFact);e.add(this.graph),this.resultPolyList=e.getPolygons();var l=new Ce(this,this.geomFact,this.ptLocator);this.resultLineList=l.build(n);var i=new Ie(this,this.geomFact,this.ptLocator);this.resultPointList=i.build(n),this.resultGeom=this.computeGeometry(this.resultPointList,this.resultLineList,this.resultPolyList,n)},labelIncompleteNode:function(n,t){var e=this.ptLocator.locate(n.getCoordinate(),this.arg[t].getGeometry());n.getLabel().setLocation(t,e)},copyPoints:function(n){for(var t=this.arg[n].getNodeIterator();t.hasNext();){var e=t.next(),l=this.graph.addNode(e.getCoordinate());l.setLabel(n,e.getLabel().getLocation(n))}},findResultAreaEdges:function(n){for(var t=this.graph.getEdgeEnds().iterator();t.hasNext();){var e=t.next(),l=e.getLabel();l.isArea()&&!e.isInteriorAreaEdge()&&ll.isResultOfOp(l.getLocation(0,fe.RIGHT),l.getLocation(1,fe.RIGHT),n)&&e.setInResult(!0)}},computeLabelsFromDepths:function(){for(var n=this.edgeList.iterator();n.hasNext();){var t=n.next(),e=t.getLabel(),l=t.getDepth();if(!l.isNull()){l.normalize();for(var i=0;i<2;i++)e.isNull(i)||!e.isArea()||l.isNull(i)||(0===l.getDelta(i)?e.toLine(i):(c.isTrue(!l.isNull(i,fe.LEFT),"depth of LEFT side has not been initialized"),e.setLocation(i,fe.LEFT,l.getLocation(i,fe.LEFT)),c.isTrue(!l.isNull(i,fe.RIGHT),"depth of RIGHT side has not been initialized"),e.setLocation(i,fe.RIGHT,l.getLocation(i,fe.RIGHT))))}}},computeLabelling:function(){for(var n=this.graph.getNodes().iterator();n.hasNext();){var t=n.next();t.getEdges().computeLabelling(this.arg)}this.mergeSymLabels(),this.updateNodeLabelling()},labelIncompleteNodes:function(){for(var n=0,t=this.graph.getNodes().iterator();t.hasNext();){var e=t.next(),l=e.getLabel();e.isIsolated()&&(n++,l.isNull(0)?this.labelIncompleteNode(e,0):this.labelIncompleteNode(e,1)),e.getEdges().updateLabelling(l)}},isCoveredByA:function(n){return!!this.isCovered(n,this.resultPolyList)},interfaces_:function(){return[]},getClass:function(){return ll}}),ll.overlayOp=function(n,t,e){var l=new ll(n,t),i=l.getResultGeometry(e);return i},ll.intersection=function(n,t){if(n.isEmpty()||t.isEmpty())return ll.createEmptyResult(ll.INTERSECTION,n,t,n.getFactory());if(n.isGeometryCollection()){var e=t;return he.map(n,{interfaces_:function(){return[MapOp]},map:function(n){return n.intersection(e)}})}return n.checkNotGeometryCollection(n),n.checkNotGeometryCollection(t),rl.overlayOp(n,t,ll.INTERSECTION)},ll.symDifference=function(n,t){if(n.isEmpty()||t.isEmpty()){if(n.isEmpty()&&t.isEmpty())return ll.createEmptyResult(ll.SYMDIFFERENCE,n,t,n.getFactory());if(n.isEmpty())return t.copy();if(t.isEmpty())return n.copy()}return n.checkNotGeometryCollection(n),n.checkNotGeometryCollection(t),rl.overlayOp(n,t,ll.SYMDIFFERENCE)},ll.resultDimension=function(n,t,e){var l=t.getDimension(),i=e.getDimension(),r=-1;switch(n){case ll.INTERSECTION:r=Math.min(l,i);break;case ll.UNION:r=Math.max(l,i);break;case ll.DIFFERENCE:r=l;break;case ll.SYMDIFFERENCE:r=Math.max(l,i)}return r},ll.createEmptyResult=function(n,t,e,l){var i=null;switch(ll.resultDimension(n,t,e)){case-1:i=l.createGeometryCollection(new Array(0).fill(null));break;case 0:i=l.createPoint();break;case 1:i=l.createLineString();break;case 2:i=l.createPolygon()}return i},ll.difference=function(n,t){return n.isEmpty()?ll.createEmptyResult(ll.DIFFERENCE,n,t,n.getFactory()):t.isEmpty()?n.copy():(n.checkNotGeometryCollection(n),n.checkNotGeometryCollection(t),rl.overlayOp(n,t,ll.DIFFERENCE))},ll.isResultOfOp=function(){if(2===arguments.length){var n=arguments[0],t=arguments[1],e=n.getLocation(0),l=n.getLocation(1);return ll.isResultOfOp(e,l,t)}if(3===arguments.length){var i=arguments[0],r=arguments[1],u=arguments[2];switch(i===I.BOUNDARY&&(i=I.INTERIOR),r===I.BOUNDARY&&(r=I.INTERIOR),u){case ll.INTERSECTION:return i===I.INTERIOR&&r===I.INTERIOR;case ll.UNION:return i===I.INTERIOR||r===I.INTERIOR;case ll.DIFFERENCE:return i===I.INTERIOR&&r!==I.INTERIOR;case ll.SYMDIFFERENCE:return i===I.INTERIOR&&r!==I.INTERIOR||i!==I.INTERIOR&&r===I.INTERIOR}return!1}},ll.INTERSECTION=1,ll.UNION=2,ll.DIFFERENCE=3,ll.SYMDIFFERENCE=4,t(il.prototype,{selfSnap:function(n){var t=new Mt(n),e=t.snapTo(n,this.snapTolerance);return e},removeCommonBits:function(n){this.cbr=new Ct,this.cbr.add(n[0]),this.cbr.add(n[1]);var t=new Array(2).fill(null);return t[0]=this.cbr.removeCommonBits(n[0].copy()),t[1]=this.cbr.removeCommonBits(n[1].copy()),t},prepareResult:function(n){return this.cbr.addCommonBits(n),n},getResultGeometry:function(n){var t=this.snap(this.geom),e=ll.overlayOp(t[0],t[1],n);return this.prepareResult(e)},checkValid:function(n){n.isValid()||k.out.println("Snapped geometry is invalid")},computeSnapTolerance:function(){this.snapTolerance=Mt.computeOverlaySnapTolerance(this.geom[0],this.geom[1])},snap:function(n){var t=this.removeCommonBits(n),e=Mt.snap(t[0],t[1],this.snapTolerance);return e},interfaces_:function(){return[]},getClass:function(){return il}}),il.overlayOp=function(n,t,e){var l=new il(n,t);return l.getResultGeometry(e)},il.union=function(n,t){return il.overlayOp(n,t,ll.UNION)},il.intersection=function(n,t){return il.overlayOp(n,t,ll.INTERSECTION)},il.symDifference=function(n,t){return il.overlayOp(n,t,ll.SYMDIFFERENCE)},il.difference=function(n,t){return il.overlayOp(n,t,ll.DIFFERENCE)},t(rl.prototype,{getResultGeometry:function(n){var t=null,e=!1,l=null;try{t=ll.overlayOp(this.geom[0],this.geom[1],n);var i=!0;i&&(e=!0)}catch(n){if(!(n instanceof o))throw n;l=n}finally{}if(!e)try{t=il.overlayOp(this.geom[0],this.geom[1],n)}catch(n){throw n instanceof o?l:n}finally{}return t},interfaces_:function(){return[]},getClass:function(){return rl}}),rl.overlayOp=function(n,t,e){var l=new rl(n,t);return l.getResultGeometry(e)},rl.union=function(n,t){return rl.overlayOp(n,t,ll.UNION)},rl.intersection=function(n,t){return rl.overlayOp(n,t,ll.INTERSECTION)},rl.symDifference=function(n,t){return rl.overlayOp(n,t,ll.SYMDIFFERENCE)},rl.difference=function(n,t){return rl.overlayOp(n,t,ll.DIFFERENCE)},t(ul.prototype,{addPolygon:function(n){if(n.isEmpty())return null;var t=null,e=0,l=this.horizontalBisector(n);if(0===l.getLength())e=0,t=l.getCoordinate();else{var i=rl.overlayOp(l,n,ll.INTERSECTION),r=this.widestGeometry(i);e=r.getEnvelopeInternal().getWidth(),t=ul.centre(r.getEnvelopeInternal())}(null===this.interiorPoint||e>this.maxWidth)&&(this.interiorPoint=t,this.maxWidth=e)},getInteriorPoint:function(){return this.interiorPoint},widestGeometry:function n(){if(arguments[0]instanceof dn){var t=arguments[0];if(t.isEmpty())return t;for(var n=t.getGeometryN(0),e=1;e<t.getNumGeometries();e++)t.getGeometryN(e).getEnvelopeInternal().getWidth()>n.getEnvelopeInternal().getWidth()&&(n=t.getGeometryN(e));return n}if(arguments[0]instanceof G){var l=arguments[0];return l instanceof dn?this.widestGeometry(l):l}},horizontalBisector:function(n){var t=n.getEnvelopeInternal(),e=sl.getBisectorY(n);return this.factory.createLineString([new d(t.getMinX(),e),new d(t.getMaxX(),e)])},add:function(n){if(n instanceof Pn)this.addPolygon(n);else if(n instanceof dn)for(var t=n,e=0;e<t.getNumGeometries();e++)this.add(t.getGeometryN(e))},interfaces_:function(){return[]},getClass:function(){return ul}}),ul.centre=function(n){return new d(ul.avg(n.getMinX(),n.getMaxX()),ul.avg(n.getMinY(),n.getMaxY()))},ul.avg=function(n,t){return(n+t)/2},t(sl.prototype,{updateInterval:function(n){n<=this.centreY?n>this.loY&&(this.loY=n):n>this.centreY&&n<this.hiY&&(this.hiY=n)},getBisectorY:function(){this.process(this.poly.getExteriorRing());for(var n=0;n<this.poly.getNumInteriorRing();n++)this.process(this.poly.getInteriorRingN(n));var t=ul.avg(this.hiY,this.loY);return t},process:function(n){for(var t=n.getCoordinateSequence(),e=0;e<t.size();e++){var l=t.getY(e);this.updateInterval(l)}},interfaces_:function(){return[]},getClass:function(){return sl}}),sl.getBisectorY=function(n){var t=new sl(n);return t.getBisectorY()},ul.SafeBisectorFinder=sl,t(al.prototype,{addEndpoints:function(){if(arguments[0]instanceof G){var n=arguments[0];if(n instanceof Cn)this.addEndpoints(n.getCoordinates());else if(n instanceof dn)for(var t=n,e=0;e<t.getNumGeometries();e++)this.addEndpoints(t.getGeometryN(e))}else if(arguments[0]instanceof Array){var l=arguments[0];this.add(l[0]),this.add(l[l.length-1])}},getInteriorPoint:function(){return this.interiorPoint},addInterior:function(){if(arguments[0]instanceof G){var n=arguments[0];if(n instanceof Cn)this.addInterior(n.getCoordinates());else if(n instanceof dn)for(var t=n,e=0;e<t.getNumGeometries();e++)this.addInterior(t.getGeometryN(e))}else if(arguments[0]instanceof Array)for(var l=arguments[0],e=1;e<l.length-1;e++)this.add(l[e])},add:function(n){var t=n.distance(this.centroid);t<this.minDistance&&(this.interiorPoint=new d(n),this.minDistance=t)},interfaces_:function(){return[]},getClass:function(){return al}}),t(hl.prototype,{getInteriorPoint:function(){return this.interiorPoint},add:function(){if(arguments[0]instanceof G){var n=arguments[0];if(n instanceof Sn)this.add(n.getCoordinate());else if(n instanceof dn)for(var t=n,e=0;e<t.getNumGeometries();e++)this.add(t.getGeometryN(e))
}else if(arguments[0]instanceof d){var l=arguments[0],i=l.distance(this.centroid);i<this.minDistance&&(this.interiorPoint=new d(l),this.minDistance=i)}},interfaces_:function(){return[]},getClass:function(){return hl}}),t(fl.prototype,{select:function(){if(1===arguments.length){arguments[0]}else if(2===arguments.length){var n=arguments[0],t=arguments[1];n.getLineSegment(t,this.selectedSegment),this.select(this.selectedSegment)}},interfaces_:function(){return[]},getClass:function(){return fl}}),t(cl.prototype,{hasChildren:function(){for(var n=0;n<2;n++)if(null!==this.subnode[n])return!0;return!1},isPrunable:function(){return!(this.hasChildren()||this.hasItems())},addAllItems:function(n){n.addAll(this.items);for(var t=0;t<2;t++)null!==this.subnode[t]&&this.subnode[t].addAllItems(n);return n},size:function(){for(var n=0,t=0;t<2;t++)null!==this.subnode[t]&&(n+=this.subnode[t].size());return n+this.items.size()},addAllItemsFromOverlapping:function(n,t){return null===n||this.isSearchMatch(n)?(t.addAll(this.items),null!==this.subnode[0]&&this.subnode[0].addAllItemsFromOverlapping(n,t),void(null!==this.subnode[1]&&this.subnode[1].addAllItemsFromOverlapping(n,t))):null},hasItems:function(){return!this.items.isEmpty()},remove:function(n,t){if(!this.isSearchMatch(n))return!1;for(var e=!1,l=0;l<2;l++)if(null!==this.subnode[l]&&(e=this.subnode[l].remove(n,t))){this.subnode[l].isPrunable()&&(this.subnode[l]=null);break}return e?e:e=this.items.remove(t)},getItems:function(){return this.items},depth:function(){for(var n=0,t=0;t<2;t++)if(null!==this.subnode[t]){var e=this.subnode[t].depth();e>n&&(n=e)}return n+1},nodeSize:function(){for(var n=0,t=0;t<2;t++)null!==this.subnode[t]&&(n+=this.subnode[t].nodeSize());return n+1},add:function(n){this.items.add(n)},interfaces_:function(){return[]},getClass:function(){return cl}}),cl.getSubnodeIndex=function(n,t){var e=-1;return n.min>=t&&(e=1),n.max<=t&&(e=0),e},t(dl.prototype,{expandToInclude:function(n){n.max>this.max&&(this.max=n.max),n.min<this.min&&(this.min=n.min)},getWidth:function(){return this.max-this.min},overlaps:function(){if(1===arguments.length){var n=arguments[0];return this.overlaps(n.min,n.max)}if(2===arguments.length){var t=arguments[0],e=arguments[1];return!(this.min>e||this.max<t)}},getMin:function(){return this.min},toString:function(){return"["+this.min+", "+this.max+"]"},contains:function(){if(1===arguments.length){if(arguments[0]instanceof dl){var n=arguments[0];return this.contains(n.min,n.max)}if("number"==typeof arguments[0]){var t=arguments[0];return t>=this.min&&t<=this.max}}else if(2===arguments.length){var e=arguments[0],l=arguments[1];return e>=this.min&&l<=this.max}},init:function(n,t){this.min=n,this.max=t,n>t&&(this.min=t,this.max=n)},getMax:function(){return this.max},interfaces_:function(){return[]},getClass:function(){return dl}}),gl.exponent=function(n){return pl(64,n)-1023},gl.powerOf2=function(n){return Math.pow(2,n)},t(vl.prototype,{getInterval:function(){return this.interval},getLevel:function(){return this.level},computeKey:function(n){for(this.level=vl.computeLevel(n),this.interval=new dl,this.computeInterval(this.level,n);!this.interval.contains(n);)this.level+=1,this.computeInterval(this.level,n)},computeInterval:function(n,t){var e=gl.powerOf2(n);this.pt=Math.floor(t.getMin()/e)*e,this.interval.init(this.pt,this.pt+e)},getPoint:function(){return this.pt},interfaces_:function(){return[]},getClass:function(){return vl}}),vl.computeLevel=function(n){var t=n.getWidth(),e=gl.exponent(t)+1;return e},h(ml,cl),t(ml.prototype,{getInterval:function(){return this.interval},find:function(n){var t=cl.getSubnodeIndex(n,this.centre);if(t===-1)return this;if(null!==this.subnode[t]){var e=this.subnode[t];return e.find(n)}return this},insert:function(n){c.isTrue(null===this.interval||this.interval.contains(n.interval));var t=cl.getSubnodeIndex(n.interval,this.centre);if(n.level===this.level-1)this.subnode[t]=n;else{var e=this.createSubnode(t);e.insert(n),this.subnode[t]=e}},isSearchMatch:function(n){return n.overlaps(this.interval)},getSubnode:function(n){return null===this.subnode[n]&&(this.subnode[n]=this.createSubnode(n)),this.subnode[n]},getNode:function(n){var t=cl.getSubnodeIndex(n,this.centre);if(t!==-1){var e=this.getSubnode(t);return e.getNode(n)}return this},createSubnode:function(n){var t=0,e=0;switch(n){case 0:t=this.interval.getMin(),e=this.centre;break;case 1:t=this.centre,e=this.interval.getMax()}var l=new dl(t,e),i=new ml(l,this.level-1);return i},interfaces_:function(){return[]},getClass:function(){return ml}}),ml.createNode=function(n){var t=new vl(n),e=new ml(t.getInterval(),t.getLevel());return e},ml.createExpanded=function(n,t){var e=new dl(t);null!==n&&e.expandToInclude(n.interval);var l=ml.createNode(e);return null!==n&&l.insert(n),l},t(yl.prototype,{interfaces_:function(){return[]},getClass:function(){return yl}});yl.isZeroWidth=function(n,t){var e=t-n;if(0===e)return!0;var l=Math.max(Math.abs(n),Math.abs(t)),i=e/l,r=gl.exponent(i);return r<=yl.MIN_BINARY_EXPONENT};yl.MIN_BINARY_EXPONENT=-50,h(xl,cl),t(xl.prototype,{insert:function(n,t){var e=cl.getSubnodeIndex(n,xl.origin);if(e===-1)return this.add(t),null;var l=this.subnode[e];if(null===l||!l.getInterval().contains(n)){var i=ml.createExpanded(l,n);this.subnode[e]=i}this.insertContained(this.subnode[e],n,t)},isSearchMatch:function(n){return!0},insertContained:function(n,t,e){c.isTrue(n.getInterval().contains(t));var l=yl.isZeroWidth(t.getMin(),t.getMax()),i=null;i=l?n.find(t):n.getNode(t),i.add(e)},interfaces_:function(){return[]},getClass:function(){return xl}}),xl.origin=0,t(wl.prototype,{size:function(){return null!==this.root?this.root.size():0},insert:function(n,t){this.collectStats(n);var e=wl.ensureExtent(n,this.minExtent);this.root.insert(e,t)},query:function(){if(1===arguments.length){if("number"==typeof arguments[0]){var n=arguments[0];return this.query(new dl(n,n))}if(arguments[0]instanceof dl){var t=arguments[0],e=new _;return this.query(t,e),e}}else if(2===arguments.length){var l=arguments[0],i=arguments[1];this.root.addAllItemsFromOverlapping(l,i)}},iterator:function(){var n=new _;return this.root.addAllItems(n),n.iterator()},remove:function(n,t){var e=wl.ensureExtent(n,this.minExtent);return this.root.remove(e,t)},collectStats:function(n){var t=n.getWidth();t<this.minExtent&&t>0&&(this.minExtent=t)},depth:function(){return null!==this.root?this.root.depth():0},nodeSize:function(){return null!==this.root?this.root.nodeSize():0},interfaces_:function(){return[]},getClass:function(){return wl}}),wl.ensureExtent=function(n,t){var e=n.getMin(),l=n.getMax();return e!==l?n:(e===l&&(e-=t/2,l=e+t/2),new dl(e,l))},t(_l.prototype,{isInside:function(n){},interfaces_:function(){return[]},getClass:function(){return _l}}),t(Ml.prototype,{testLineSegment:function(n,t){var e=null,l=null,i=null,r=null,u=null,s=t.p0,a=t.p1;l=s.x-n.x,i=s.y-n.y,r=a.x-n.x,u=a.y-n.y,(i>0&&u<=0||u>0&&i<=0)&&(e=ot.signOfDet2x2(l,i,r,u)/(u-i),0<e&&this.crossings++)},buildIndex:function(){this.tree=new wl;for(var n=X.removeRepeatedPoints(this.ring.getCoordinates()),t=ne.getChains(n),e=0;e<t.size();e++){var l=t.get(e),i=l.getEnvelope();this.interval.min=i.getMinY(),this.interval.max=i.getMaxY(),this.tree.insert(this.interval,l)}},testMonotoneChain:function(n,t,e){e.select(n,t)},isInside:function(n){this.crossings=0;var t=new E(i.NEGATIVE_INFINITY,i.POSITIVE_INFINITY,n.y,n.y);this.interval.min=n.y,this.interval.max=n.y;for(var e=this.tree.query(this.interval),l=new El(this,n),r=e.iterator();r.hasNext();){var u=r.next();this.testMonotoneChain(t,l,u)}return this.crossings%2===1},interfaces_:function(){return[_l]},getClass:function(){return Ml}}),h(El,fl),t(El.prototype,{select:function(){if(1!==arguments.length)return fl.prototype.select.apply(this,arguments);var n=arguments[0];this.mcp.testLineSegment(this.p,n)},interfaces_:function(){return[]},getClass:function(){return El}}),Ml.MCSelecter=El,t(bl.prototype,{interfaces_:function(){return[]},getClass:function(){return bl}}),bl.toDegrees=function(n){return 180*n/Math.PI},bl.normalize=function(n){for(;n>Math.PI;)n-=bl.PI_TIMES_2;for(;n<=-Math.PI;)n+=bl.PI_TIMES_2;return n},bl.angle=function(){if(1===arguments.length){var n=arguments[0];return Math.atan2(n.y,n.x)}if(2===arguments.length){var t=arguments[0],e=arguments[1],l=e.x-t.x,i=e.y-t.y;return Math.atan2(i,l)}},bl.isAcute=function(n,t,e){var l=n.x-t.x,i=n.y-t.y,r=e.x-t.x,u=e.y-t.y,s=l*r+i*u;return s>0},bl.isObtuse=function(n,t,e){var l=n.x-t.x,i=n.y-t.y,r=e.x-t.x,u=e.y-t.y,s=l*r+i*u;return s<0},bl.interiorAngle=function(n,t,e){var l=bl.angle(t,n),i=bl.angle(t,e);return Math.abs(i-l)},bl.normalizePositive=function(n){if(n<0){for(;n<0;)n+=bl.PI_TIMES_2;n>=bl.PI_TIMES_2&&(n=0)}else{for(;n>=bl.PI_TIMES_2;)n-=bl.PI_TIMES_2;n<0&&(n=0)}return n},bl.angleBetween=function(n,t,e){var l=bl.angle(t,n),i=bl.angle(t,e);return bl.diff(l,i)},bl.diff=function(n,t){var e=null;return e=n<t?t-n:n-t,e>Math.PI&&(e=2*Math.PI-e),e},bl.toRadians=function(n){return n*Math.PI/180},bl.getTurn=function(n,t){var e=Math.sin(t-n);return e>0?bl.COUNTERCLOCKWISE:e<0?bl.CLOCKWISE:bl.NONE},bl.angleBetweenOriented=function(n,t,e){var l=bl.angle(t,n),i=bl.angle(t,e),r=i-l;return r<=-Math.PI?r+bl.PI_TIMES_2:r>Math.PI?r-bl.PI_TIMES_2:r},bl.PI_TIMES_2=2*Math.PI,bl.PI_OVER_2=Math.PI/2,bl.PI_OVER_4=Math.PI/4,bl.COUNTERCLOCKWISE=ft.COUNTERCLOCKWISE,bl.CLOCKWISE=ft.CLOCKWISE,bl.NONE=ft.COLLINEAR,t(Cl.prototype,{area:function(){return Cl.area(this.p0,this.p1,this.p2)},signedArea:function(){return Cl.signedArea(this.p0,this.p1,this.p2)},interpolateZ:function(n){if(null===n)throw new l("Supplied point is null.");return Cl.interpolateZ(n,this.p0,this.p1,this.p2)},longestSideLength:function(){return Cl.longestSideLength(this.p0,this.p1,this.p2)},isAcute:function(){return Cl.isAcute(this.p0,this.p1,this.p2)},circumcentre:function(){return Cl.circumcentre(this.p0,this.p1,this.p2)},area3D:function(){return Cl.area3D(this.p0,this.p1,this.p2)},centroid:function(){return Cl.centroid(this.p0,this.p1,this.p2)},inCentre:function(){return Cl.inCentre(this.p0,this.p1,this.p2)},interfaces_:function(){return[]},getClass:function(){return Cl}}),Cl.area=function(n,t,e){return Math.abs(((e.x-n.x)*(t.y-n.y)-(t.x-n.x)*(e.y-n.y))/2)},Cl.signedArea=function(n,t,e){return((e.x-n.x)*(t.y-n.y)-(t.x-n.x)*(e.y-n.y))/2},Cl.det=function(n,t,e,l){return n*l-t*e},Cl.interpolateZ=function(n,t,e,l){var i=t.x,r=t.y,u=e.x-i,s=l.x-i,a=e.y-r,o=l.y-r,h=u*o-s*a,f=n.x-i,c=n.y-r,d=(o*f-s*c)/h,g=(-a*f+u*c)/h,p=t.z+d*(e.z-t.z)+g*(l.z-t.z);return p},Cl.longestSideLength=function(n,t,e){var l=n.distance(t),i=t.distance(e),r=e.distance(n),u=l;return i>u&&(u=i),r>u&&(u=r),u},Cl.isAcute=function(n,t,e){return!!bl.isAcute(n,t,e)&&(!!bl.isAcute(t,e,n)&&!!bl.isAcute(e,n,t))},Cl.circumcentre=function(n,t,e){var l=e.x,i=e.y,r=n.x-l,u=n.y-i,s=t.x-l,a=t.y-i,o=2*Cl.det(r,u,s,a),h=Cl.det(u,r*r+u*u,a,s*s+a*a),f=Cl.det(r,r*r+u*u,s,s*s+a*a),c=l-h/o,g=i+f/o;return new d(c,g)},Cl.perpendicularBisector=function(n,t){var e=t.x-n.x,l=t.y-n.y,i=new D(n.x+e/2,n.y+l/2,1),r=new D(n.x-l+e/2,n.y+e+l/2,1);return new D(i,r)},Cl.angleBisector=function(n,t,e){var l=t.distance(n),i=t.distance(e),r=l/(l+i),u=e.x-n.x,s=e.y-n.y,a=new d(n.x+r*u,n.y+r*s);return a},Cl.area3D=function(n,t,e){var l=t.x-n.x,i=t.y-n.y,r=t.z-n.z,u=e.x-n.x,s=e.y-n.y,a=e.z-n.z,o=i*a-r*s,h=r*u-l*a,f=l*s-i*u,c=o*o+h*h+f*f,d=Math.sqrt(c)/2;return d},Cl.centroid=function(n,t,e){var l=(n.x+t.x+e.x)/3,i=(n.y+t.y+e.y)/3;return new d(l,i)},Cl.inCentre=function(n,t,e){var l=t.distance(e),i=n.distance(e),r=n.distance(t),u=l+i+r,s=(l*n.x+i*t.x+r*e.x)/u,a=(l*n.y+i*t.y+r*e.y)/u;return new d(s,a)},t(Il.prototype,{getRadius:function(){return this.compute(),this.radius},getDiameter:function(){switch(this.compute(),this.extremalPts.length){case 0:return this.input.getFactory().createLineString();case 1:return this.input.getFactory().createPoint(this.centre)}var n=this.extremalPts[0],t=this.extremalPts[1];return this.input.getFactory().createLineString([n,t])},getExtremalPoints:function(){return this.compute(),this.extremalPts},computeCirclePoints:function(){if(this.input.isEmpty())return this.extremalPts=new Array(0).fill(null),null;if(1===this.input.getNumPoints()){var n=this.input.getCoordinates();return this.extremalPts=[new d(n[0])],null}var t=this.input.convexHull(),e=t.getCoordinates(),n=e;if(e[0].equals2D(e[e.length-1])&&(n=new Array(e.length-1).fill(null),X.copyDeep(e,0,n,0,e.length-1)),n.length<=2)return this.extremalPts=X.copyDeep(n),null;for(var l=Il.lowestPoint(n),i=Il.pointWitMinAngleWithX(n,l),r=0;r<n.length;r++){var u=Il.pointWithMinAngleWithSegment(n,l,i);if(bl.isObtuse(l,u,i))return this.extremalPts=[new d(l),new d(i)],null;if(bl.isObtuse(u,l,i))l=u;else{if(!bl.isObtuse(u,i,l))return this.extremalPts=[new d(l),new d(i),new d(u)],null;i=u}}c.shouldNeverReachHere("Logic failure in Minimum Bounding Circle algorithm!")},compute:function(){return null!==this.extremalPts?null:(this.computeCirclePoints(),this.computeCentre(),void(null!==this.centre&&(this.radius=this.centre.distance(this.extremalPts[0]))))},getFarthestPoints:function(){switch(this.compute(),this.extremalPts.length){case 0:return this.input.getFactory().createLineString();case 1:return this.input.getFactory().createPoint(this.centre)}var n=this.extremalPts[0],t=this.extremalPts[this.extremalPts.length-1];return this.input.getFactory().createLineString([n,t])},getCircle:function(){if(this.compute(),null===this.centre)return this.input.getFactory().createPolygon();var n=this.input.getFactory().createPoint(this.centre);return 0===this.radius?n:n.buffer(this.radius)},getCentre:function(){return this.compute(),this.centre},computeCentre:function(){switch(this.extremalPts.length){case 0:this.centre=null;break;case 1:this.centre=this.extremalPts[0];break;case 2:this.centre=new d((this.extremalPts[0].x+this.extremalPts[1].x)/2,(this.extremalPts[0].y+this.extremalPts[1].y)/2);break;case 3:this.centre=Cl.circumcentre(this.extremalPts[0],this.extremalPts[1],this.extremalPts[2])}},interfaces_:function(){return[]},getClass:function(){return Il}}),Il.pointWitMinAngleWithX=function(n,t){for(var e=i.MAX_VALUE,l=null,r=0;r<n.length;r++){var u=n[r];if(u!==t){var s=u.x-t.x,a=u.y-t.y;a<0&&(a=-a);var o=Math.sqrt(s*s+a*a),h=a/o;h<e&&(e=h,l=u)}}return l},Il.lowestPoint=function(n){for(var t=n[0],e=1;e<n.length;e++)n[e].y<t.y&&(t=n[e]);return t},Il.pointWithMinAngleWithSegment=function(n,t,e){for(var l=i.MAX_VALUE,r=null,u=0;u<n.length;u++){var s=n[u];if(s!==t&&s!==e){var a=bl.angleBetween(t,s,e);a<l&&(l=a,r=s)}}return r},t(Sl.prototype,{getWidthCoordinate:function(){return this.computeMinimumDiameter(),this.minWidthPt},getSupportingSegment:function(){return this.computeMinimumDiameter(),this.inputGeom.getFactory().createLineString([this.minBaseSeg.p0,this.minBaseSeg.p1])},getDiameter:function(){if(this.computeMinimumDiameter(),null===this.minWidthPt)return this.inputGeom.getFactory().createLineString(null);var n=this.minBaseSeg.project(this.minWidthPt);return this.inputGeom.getFactory().createLineString([n,this.minWidthPt])},computeWidthConvex:function(n){n instanceof Pn?this.convexHullPts=n.getExteriorRing().getCoordinates():this.convexHullPts=n.getCoordinates(),0===this.convexHullPts.length?(this.minWidth=0,this.minWidthPt=null,this.minBaseSeg=null):1===this.convexHullPts.length?(this.minWidth=0,this.minWidthPt=this.convexHullPts[0],this.minBaseSeg.p0=this.convexHullPts[0],this.minBaseSeg.p1=this.convexHullPts[0]):2===this.convexHullPts.length||3===this.convexHullPts.length?(this.minWidth=0,this.minWidthPt=this.convexHullPts[0],this.minBaseSeg.p0=this.convexHullPts[0],this.minBaseSeg.p1=this.convexHullPts[1]):this.computeConvexRingMinDiameter(this.convexHullPts)},computeConvexRingMinDiameter:function(n){this.minWidth=i.MAX_VALUE;for(var t=1,e=new ct,l=0;l<n.length-1;l++)e.p0=n[l],e.p1=n[l+1],t=this.findMaxPerpDistance(n,e,t)},computeMinimumDiameter:function(){if(null!==this.minWidthPt)return null;if(this.isConvex)this.computeWidthConvex(this.inputGeom);else{var n=new yt(this.inputGeom).getConvexHull();this.computeWidthConvex(n)}},getLength:function(){return this.computeMinimumDiameter(),this.minWidth},findMaxPerpDistance:function(n,t,e){for(var l=t.distancePerpendicular(n[e]),i=l,r=e,u=r;i>=l;)l=i,r=u,u=Sl.nextIndex(n,r),i=t.distancePerpendicular(n[u]);return l<this.minWidth&&(this.minPtIndex=r,this.minWidth=l,this.minWidthPt=n[this.minPtIndex],this.minBaseSeg=new ct(t)),r},getMinimumRectangle:function(){if(this.computeMinimumDiameter(),0===this.minWidth)return this.minBaseSeg.p0.equals2D(this.minBaseSeg.p1)?this.inputGeom.getFactory().createPoint(this.minBaseSeg.p0):this.minBaseSeg.toGeometry(this.inputGeom.getFactory());for(var n=this.minBaseSeg.p1.x-this.minBaseSeg.p0.x,t=this.minBaseSeg.p1.y-this.minBaseSeg.p0.y,e=i.MAX_VALUE,l=-i.MAX_VALUE,r=i.MAX_VALUE,u=-i.MAX_VALUE,s=0;s<this.convexHullPts.length;s++){var a=Sl.computeC(n,t,this.convexHullPts[s]);a>l&&(l=a),a<e&&(e=a);var o=Sl.computeC(-t,n,this.convexHullPts[s]);o>u&&(u=o),o<r&&(r=o)}var h=Sl.computeSegmentForLine(-n,-t,u),f=Sl.computeSegmentForLine(-n,-t,r),c=Sl.computeSegmentForLine(-t,n,l),d=Sl.computeSegmentForLine(-t,n,e),g=c.lineIntersection(h),p=d.lineIntersection(h),v=d.lineIntersection(f),m=c.lineIntersection(f),y=this.inputGeom.getFactory().createLinearRing([g,p,v,m,g]);return this.inputGeom.getFactory().createPolygon(y,null)},interfaces_:function(){return[]},getClass:function(){return Sl}}),Sl.nextIndex=function(n,t){return t++,t>=n.length&&(t=0),t},Sl.computeC=function(n,t,e){return n*e.y-t*e.x},Sl.getMinimumDiameter=function(n){return new Sl(n).getDiameter()},Sl.getMinimumRectangle=function(n){return new Sl(n).getMinimumRectangle()},Sl.computeSegmentForLine=function(n,t,e){var l=null,i=null;return Math.abs(t)>Math.abs(n)?(l=new d(0,e/t),i=new d(1,e/t-n/t)):(l=new d(e/n,0),i=new d(e/n-t/n,1)),new ct(l,i)};var cu=Object.freeze({Centroid:gt,CGAlgorithms:ft,ConvexHull:yt,InteriorPointArea:ul,InteriorPointLine:al,InteriorPointPoint:hl,RobustLineIntersector:at,MCPointInRing:Ml,MinimumBoundingCircle:Il,MinimumDiameter:Sl});t(Nl.prototype,{getResultGeometry:function(){return new Pl(this.distanceTolerance).transform(this.inputGeom)},setDistanceTolerance:function(n){if(n<=0)throw new l("Tolerance must be positive");this.distanceTolerance=n},interfaces_:function(){return[]},getClass:function(){return Nl}}),Nl.densifyPoints=function(n,t,e){for(var l=new ct,i=new M,r=0;r<n.length-1;r++){l.p0=n[r],l.p1=n[r+1],i.add(l.p0,!1);var u=l.getLength(),s=Math.trunc(u/t)+1;if(s>1)for(var a=u/s,o=1;o<s;o++){var h=o*a/u,f=l.pointAlong(h);e.makePrecise(f),i.add(f,!1)}}return i.add(n[n.length-1],!1),i.toCoordinateArray()},Nl.densify=function(n,t){var e=new Nl(n);return e.setDistanceTolerance(t),e.getResultGeometry()},h(Pl,wt),t(Pl.prototype,{transformMultiPolygon:function(n,t){var e=wt.prototype.transformMultiPolygon.call(this,n,t);return this.createValidArea(e)},transformPolygon:function(n,t){var e=wt.prototype.transformPolygon.call(this,n,t);return t instanceof Tn?e:this.createValidArea(e)},transformCoordinates:function(n,t){var e=n.toCoordinateArray(),l=Nl.densifyPoints(e,this.distanceTolerance,t.getPrecisionModel());return t instanceof Cn&&1===l.length&&(l=new Array(0).fill(null)),this.factory.getCoordinateSequenceFactory().create(l)},createValidArea:function(n){return n.buffer(0)},interfaces_:function(){return[]},getClass:function(){return Pl}}),Nl.DensifyTransformer=Pl;var du=Object.freeze({Densifier:Nl});t(Ll.prototype,{find:function(n){var t=this;do{if(null===t)return null;if(t.dest().equals2D(n))return t;t=t.oNext()}while(t!==this);return null},dest:function(){return this._sym._orig},oNext:function(){return this._sym._next},insert:function(n){if(this.oNext()===this)return this.insertAfter(n),null;var t=this.compareTo(n),e=this;do{var l=e.oNext(),i=l.compareTo(n);if(i!==t||l===this)return e.insertAfter(n),null;e=l}while(e!==this);c.shouldNeverReachHere()},insertAfter:function(n){c.equals(this._orig,n.orig());var t=this.oNext();this._sym.setNext(n),n.sym().setNext(t)},degree:function n(){var n=0,t=this;do{n++,t=t.oNext()}while(t!==this);return n},equals:function(){if(2===arguments.length){var n=arguments[0],t=arguments[1];return this._orig.equals2D(n)&&this._sym._orig.equals(t)}},deltaY:function(){return this._sym._orig.y-this._orig.y},sym:function(){return this._sym},prev:function(){return this._sym.next()._sym},compareAngularDirection:function(n){var t=this.deltaX(),e=this.deltaY(),l=n.deltaX(),i=n.deltaY();if(t===l&&e===i)return 0;var r=$t.quadrant(t,e),u=$t.quadrant(l,i);return r>u?1:r<u?-1:ft.computeOrientation(n._orig,n.dest(),this.dest())},prevNode:function(){for(var n=this;2===n.degree();)if(n=n.prev(),n===this)return null;return n},compareTo:function(n){var t=n,e=this.compareAngularDirection(t);return e},next:function(){return this._next},setSym:function(n){this._sym=n},orig:function(){return this._orig},toString:function(){return"HE("+this._orig.x+" "+this._orig.y+", "+this._sym._orig.x+" "+this._sym._orig.y+")"},setNext:function(n){this._next=n},init:function(n){this.setSym(n),n.setSym(this),this.setNext(n),n.setNext(this)},deltaX:function(){return this._sym._orig.x-this._orig.x},interfaces_:function(){return[]},getClass:function(){return Ll}}),Ll.init=function(n,t){if(null!==n._sym||null!==t._sym||null!==n._next||null!==t._next)throw new IllegalStateException("Edges are already initialized");return n.init(t),n},Ll.create=function(n,t){var e=new Ll(n),l=new Ll(t);return e.init(l),e},h(Rl,Ll),t(Rl.prototype,{mark:function(){this._isMarked=!0},setMark:function(n){this._isMarked=n},isMarked:function(){return this._isMarked},interfaces_:function(){return[]},getClass:function(){return Rl}}),Rl.setMarkBoth=function(n,t){n.setMark(t),n.sym().setMark(t)},Rl.isMarked=function(n){return n.isMarked()},Rl.setMark=function(n,t){n.setMark(t)},Rl.markBoth=function(n){n.mark(),n.sym().mark()},Rl.mark=function(n){n.mark()},t(Tl.prototype,{insert:function(n,t,e){var l=this.create(n,t);null!==e?e.insert(l):this.vertexMap.put(n,l);var i=this.vertexMap.get(t);return null!==i?i.insert(l.sym()):this.vertexMap.put(t,l.sym()),l},create:function(n,t){var e=this.createEdge(n),l=this.createEdge(t);return Ll.init(e,l),e},createEdge:function(n){return new Ll(n)},addEdge:function(n,t){if(!Tl.isValidEdge(n,t))return null;var e=this.vertexMap.get(n),l=null;if(null!==e&&(l=e.find(t)),null!==l)return l;var i=this.insert(n,t,e);return i},getVertexEdges:function(){return this.vertexMap.values()},findEdge:function(n,t){var e=this.vertexMap.get(n);return null===e?null:e.find(t)},interfaces_:function(){return[]},getClass:function(){return Tl}}),Tl.isValidEdge=function(n,t){var e=t.compareTo(n);return 0!==e},h(Ol,Rl),t(Ol.prototype,{setStart:function(){this._isStart=!0},isStart:function(){return this._isStart},interfaces_:function(){return[]},getClass:function(){return Ol}}),h(Al,Tl),t(Al.prototype,{createEdge:function(n){return new Ol(n)},interfaces_:function(){return[]},getClass:function(){return Al}}),t(kl.prototype,{addLine:function(n){this.lines.add(this.factory.createLineString(n.toCoordinateArray()))},updateRingStartEdge:function(n){return n.isStart()||(n=n.sym(),n.isStart())?null===this.ringStartEdge?(this.ringStartEdge=n,null):void(n.orig().compareTo(this.ringStartEdge.orig())<0&&(this.ringStartEdge=n)):null},getResult:function(){return null===this.result&&this.computeResult(),this.result},process:function(n){var t=n.prevNode();null===t&&(t=n),this.stackEdges(t),this.buildLines()},buildRing:function(n){var t=new M,e=n;for(t.add(e.orig().copy(),!1);2===e.sym().degree();){var l=e.next();if(l===n)break;t.add(l.orig().copy(),!1),e=l}t.add(e.dest().copy(),!1),this.addLine(t)},buildLine:function(n){var t=new M,e=n;for(this.ringStartEdge=null,Rl.markBoth(e),t.add(e.orig().copy(),!1);2===e.sym().degree();){this.updateRingStartEdge(e);var l=e.next();if(l===n)return this.buildRing(this.ringStartEdge),null;t.add(l.orig().copy(),!1),e=l,Rl.markBoth(e)}t.add(e.dest().copy(),!1),this.stackEdges(e.sym()),this.addLine(t)},stackEdges:function(n){var t=n;do{Rl.isMarked(t)||this.nodeEdgeStack.add(t),t=t.oNext()}while(t!==n)},computeResult:function(){for(var n=this.graph.getVertexEdges(),t=n.iterator();t.hasNext();){var e=t.next();Rl.isMarked(e)||this.process(e)}this.result=this.factory.buildGeometry(this.lines)},buildLines:function(){for(;!this.nodeEdgeStack.empty();){var n=this.nodeEdgeStack.pop();Rl.isMarked(n)||this.buildLine(n)}},add:function(){if(arguments[0]instanceof G){var n=arguments[0];n.apply({interfaces_:function(){return[B]},filter:function(n){n instanceof Cn&&this.add(n)}})}else if(S(arguments[0],v))for(var t=arguments[0],e=t.iterator();e.hasNext();){var l=e.next();this.add(l)}else if(arguments[0]instanceof Cn){var i=arguments[0];null===this.factory&&(this.factory=i.getFactory());for(var r=i.getCoordinateSequence(),u=!1,e=1;e<r.size();e++){var s=this.graph.addEdge(r.getCoordinate(e-1),r.getCoordinate(e));null!==s&&(u||(s.setStart(),u=!0))}}},interfaces_:function(){return[]},getClass:function(){return kl}}),kl.dissolve=function(n){var t=new kl;return t.add(n),t.getResult()};var gu=Object.freeze({LineDissolver:kl}),pu=Object.freeze({GeometryGraph:$e});t(Dl.prototype,{hasChildren:function(){for(var n=0;n<4;n++)if(null!==this.subnode[n])return!0;return!1},isPrunable:function(){return!(this.hasChildren()||this.hasItems())},addAllItems:function(n){n.addAll(this.items);for(var t=0;t<4;t++)null!==this.subnode[t]&&this.subnode[t].addAllItems(n);return n},getNodeCount:function(){for(var n=0,t=0;t<4;t++)null!==this.subnode[t]&&(n+=this.subnode[t].size());return n+1},size:function(){for(var n=0,t=0;t<4;t++)null!==this.subnode[t]&&(n+=this.subnode[t].size());return n+this.items.size()},addAllItemsFromOverlapping:function(n,t){if(!this.isSearchMatch(n))return null;t.addAll(this.items);for(var e=0;e<4;e++)null!==this.subnode[e]&&this.subnode[e].addAllItemsFromOverlapping(n,t)},visitItems:function(n,t){for(var e=this.items.iterator();e.hasNext();)t.visitItem(e.next())},hasItems:function(){return!this.items.isEmpty()},remove:function(n,t){if(!this.isSearchMatch(n))return!1;for(var e=!1,l=0;l<4;l++)if(null!==this.subnode[l]&&(e=this.subnode[l].remove(n,t))){this.subnode[l].isPrunable()&&(this.subnode[l]=null);break}return e?e:e=this.items.remove(t)},visit:function(n,t){if(!this.isSearchMatch(n))return null;this.visitItems(n,t);for(var e=0;e<4;e++)null!==this.subnode[e]&&this.subnode[e].visit(n,t)},getItems:function(){return this.items},depth:function(){for(var n=0,t=0;t<4;t++)if(null!==this.subnode[t]){var e=this.subnode[t].depth();e>n&&(n=e)}return n+1},isEmpty:function n(){var n=!0;this.items.isEmpty()||(n=!1);for(var t=0;t<4;t++)null!==this.subnode[t]&&(this.subnode[t].isEmpty()||(n=!1));return n},add:function(n){this.items.add(n)},interfaces_:function(){return[a]},getClass:function(){return Dl}}),Dl.getSubnodeIndex=function(n,t,e){var l=-1;return n.getMinX()>=t&&(n.getMinY()>=e&&(l=3),n.getMaxY()<=e&&(l=1)),n.getMaxX()<=t&&(n.getMinY()>=e&&(l=2),n.getMaxY()<=e&&(l=0)),l},t(Fl.prototype,{getLevel:function(){return this.level},computeKey:function(){if(1===arguments.length){var n=arguments[0];for(this.level=Fl.computeQuadLevel(n),this.env=new E,this.computeKey(this.level,n);!this.env.contains(n);)this.level+=1,this.computeKey(this.level,n)}else if(2===arguments.length){var t=arguments[0],e=arguments[1],l=gl.powerOf2(t);this.pt.x=Math.floor(e.getMinX()/l)*l,this.pt.y=Math.floor(e.getMinY()/l)*l,this.env.init(this.pt.x,this.pt.x+l,this.pt.y,this.pt.y+l)}},getEnvelope:function(){return this.env},getCentre:function(){return new d((this.env.getMinX()+this.env.getMaxX())/2,(this.env.getMinY()+this.env.getMaxY())/2)},getPoint:function(){return this.pt},interfaces_:function(){return[]},getClass:function(){return Fl}}),Fl.computeQuadLevel=function(n){var t=n.getWidth(),e=n.getHeight(),l=t>e?t:e,i=gl.exponent(l)+1;return i},h(Bl,Dl),t(Bl.prototype,{find:function(n){var t=Dl.getSubnodeIndex(n,this.centrex,this.centrey);if(t===-1)return this;if(null!==this.subnode[t]){var e=this.subnode[t];return e.find(n)}return this},isSearchMatch:function(n){return this.env.intersects(n)},getSubnode:function(n){return null===this.subnode[n]&&(this.subnode[n]=this.createSubnode(n)),this.subnode[n]},getEnvelope:function(){return this.env},getNode:function(n){var t=Dl.getSubnodeIndex(n,this.centrex,this.centrey);if(t!==-1){var e=this.getSubnode(t);return e.getNode(n)}return this},createSubnode:function(n){var t=0,e=0,l=0,i=0;switch(n){case 0:t=this.env.getMinX(),e=this.centrex,l=this.env.getMinY(),i=this.centrey;break;case 1:t=this.centrex,e=this.env.getMaxX(),l=this.env.getMinY(),i=this.centrey;break;case 2:t=this.env.getMinX(),e=this.centrex,l=this.centrey,i=this.env.getMaxY();break;case 3:t=this.centrex,e=this.env.getMaxX(),l=this.centrey,i=this.env.getMaxY()}var r=new E(t,e,l,i),u=new Bl(r,this.level-1);return u},insertNode:function(n){c.isTrue(null===this.env||this.env.contains(n.env));var t=Dl.getSubnodeIndex(n.env,this.centrex,this.centrey);if(n.level===this.level-1)this.subnode[t]=n;else{var e=this.createSubnode(t);e.insertNode(n),this.subnode[t]=e}},interfaces_:function(){return[]},getClass:function(){return Bl}}),Bl.createNode=function(n){var t=new Fl(n),e=new Bl(t.getEnvelope(),t.getLevel());return e},Bl.createExpanded=function(n,t){var e=new E(t);null!==n&&e.expandToInclude(n.env);var l=Bl.createNode(e);return null!==n&&l.insertNode(n),l},h(Gl,Dl),t(Gl.prototype,{insert:function(n,t){var e=Dl.getSubnodeIndex(n,Gl.origin.x,Gl.origin.y);if(e===-1)return this.add(t),null;var l=this.subnode[e];if(null===l||!l.getEnvelope().contains(n)){var i=Bl.createExpanded(l,n);this.subnode[e]=i}this.insertContained(this.subnode[e],n,t)},isSearchMatch:function(n){return!0},insertContained:function(n,t,e){c.isTrue(n.getEnvelope().contains(t));var l=yl.isZeroWidth(t.getMinX(),t.getMaxX()),i=yl.isZeroWidth(t.getMinY(),t.getMaxY()),r=null;r=l||i?n.find(t):n.getNode(t),r.add(e)},interfaces_:function(){return[]},getClass:function(){return Gl}}),Gl.origin=new d(0,0),t(zl.prototype,{size:function(){return null!==this.root?this.root.size():0},insert:function(n,t){this.collectStats(n);var e=zl.ensureExtent(n,this.minExtent);this.root.insert(e,t)},query:function(){if(1===arguments.length){var n=arguments[0],t=new Ue;return this.query(n,t),t.getItems()}if(2===arguments.length){var e=arguments[0],l=arguments[1];this.root.visit(e,l)}},queryAll:function(){var n=new _;return this.root.addAllItems(n),n},remove:function(n,t){var e=zl.ensureExtent(n,this.minExtent);return this.root.remove(e,t)},collectStats:function(n){var t=n.getWidth();t<this.minExtent&&t>0&&(this.minExtent=t);var e=n.getHeight();e<this.minExtent&&e>0&&(this.minExtent=e)},depth:function(){return null!==this.root?this.root.depth():0},isEmpty:function(){return null===this.root},interfaces_:function(){return[Ft,a]},getClass:function(){return zl}}),zl.ensureExtent=function(n,t){var e=n.getMinX(),l=n.getMaxX(),i=n.getMinY(),r=n.getMaxY();return e!==l&&i!==r?n:(e===l&&(e-=t/2,l=e+t/2),i===r&&(i-=t/2,r=i+t/2),new E(e,l,i,r))},zl.serialVersionUID=-0x678b60c967a25400;var vu=Object.freeze({Quadtree:zl}),mu=Object.freeze({STRtree:Ut}),yu=Object.freeze({quadtree:vu,strtree:mu}),xu=["Point","MultiPoint","LineString","MultiLineString","Polygon","MultiPolygon"];t(ql.prototype,{read:function(n){var t=void 0;t="string"==typeof n?JSON.parse(n):n;var e=t.type;if(!wu[e])throw new Error("Unknown GeoJSON type: "+t.type);return xu.indexOf(e)!==-1?wu[e].apply(this,[t.coordinates]):"GeometryCollection"===e?wu[e].apply(this,[t.geometries]):wu[e].apply(this,[t])},write:function(n){var t=n.getGeometryType();if(!_u[t])throw new Error("Geometry is not supported");return _u[t].apply(this,[n])}});var wu={Feature:function(n){var t={};for(var e in n)t[e]=n[e];if(n.geometry){var l=n.geometry.type;if(!wu[l])throw new Error("Unknown GeoJSON type: "+n.type);t.geometry=this.read(n.geometry)}
return n.bbox&&(t.bbox=wu.bbox.apply(this,[n.bbox])),t},FeatureCollection:function(n){var t={};if(n.features){t.features=[];for(var e=0;e<n.features.length;++e)t.features.push(this.read(n.features[e]))}return n.bbox&&(t.bbox=this.parse.bbox.apply(this,[n.bbox])),t},coordinates:function n(t){for(var n=[],e=0;e<t.length;++e){var l=t[e];n.push(new d(l[0],l[1]))}return n},bbox:function(n){return this.geometryFactory.createLinearRing([new d(n[0],n[1]),new d(n[2],n[1]),new d(n[2],n[3]),new d(n[0],n[3]),new d(n[0],n[1])])},Point:function(n){var t=new d(n[0],n[1]);return this.geometryFactory.createPoint(t)},MultiPoint:function(n){for(var t=[],e=0;e<n.length;++e)t.push(wu.Point.apply(this,[n[e]]));return this.geometryFactory.createMultiPoint(t)},LineString:function(n){var t=wu.coordinates.apply(this,[n]);return this.geometryFactory.createLineString(t)},MultiLineString:function(n){for(var t=[],e=0;e<n.length;++e)t.push(wu.LineString.apply(this,[n[e]]));return this.geometryFactory.createMultiLineString(t)},Polygon:function(n){for(var t=wu.coordinates.apply(this,[n[0]]),e=this.geometryFactory.createLinearRing(t),l=[],i=1;i<n.length;++i){var r=n[i],u=wu.coordinates.apply(this,[r]),s=this.geometryFactory.createLinearRing(u);l.push(s)}return this.geometryFactory.createPolygon(e,l)},MultiPolygon:function(n){for(var t=[],e=0;e<n.length;++e){var l=n[e];t.push(wu.Polygon.apply(this,[l]))}return this.geometryFactory.createMultiPolygon(t)},GeometryCollection:function(n){for(var t=[],e=0;e<n.length;++e){var l=n[e];t.push(this.read(l))}return this.geometryFactory.createGeometryCollection(t)}},_u={coordinate:function(n){return[n.x,n.y]},Point:function(n){var t=_u.coordinate.apply(this,[n.getCoordinate()]);return{type:"Point",coordinates:t}},MultiPoint:function(n){for(var t=[],e=0;e<n.geometries.length;++e){var l=n.geometries[e],i=_u.Point.apply(this,[l]);t.push(i.coordinates)}return{type:"MultiPoint",coordinates:t}},LineString:function(n){for(var t=[],e=n.getCoordinates(),l=0;l<e.length;++l){var i=e[l];t.push(_u.coordinate.apply(this,[i]))}return{type:"LineString",coordinates:t}},MultiLineString:function(n){for(var t=[],e=0;e<n.geometries.length;++e){var l=n.geometries[e],i=_u.LineString.apply(this,[l]);t.push(i.coordinates)}return{type:"MultiLineString",coordinates:t}},Polygon:function(n){var t=[],e=_u.LineString.apply(this,[n.shell]);t.push(e.coordinates);for(var l=0;l<n.holes.length;++l){var i=n.holes[l],r=_u.LineString.apply(this,[i]);t.push(r.coordinates)}return{type:"Polygon",coordinates:t}},MultiPolygon:function(n){for(var t=[],e=0;e<n.geometries.length;++e){var l=n.geometries[e],i=_u.Polygon.apply(this,[l]);t.push(i.coordinates)}return{type:"MultiPolygon",coordinates:t}},GeometryCollection:function(n){for(var t=[],e=0;e<n.geometries.length;++e){var l=n.geometries[e],i=l.getGeometryType();t.push(_u[i].apply(this,[l]))}return{type:"GeometryCollection",geometries:t}}};t(jl.prototype,{read:function(n){var t=this.parser.read(n);return this.precisionModel.getType()===et.FIXED&&this.reducePrecision(t),t},reducePrecision:function(n){var t,e;if(n.coordinate)this.precisionModel.makePrecise(n.coordinate);else if(n.points)for(t=0,e=n.points.length;t<e;t++)this.precisionModel.makePrecise(n.points[t]);else if(n.geometries)for(t=0,e=n.geometries.length;t<e;t++)this.reducePrecision(n.geometries[t])}}),t(Ul.prototype,{write:function(n){return this.parser.write(n)}}),t(Vl.prototype,{read:function(n){var t=this.parser.read(n);return this.precisionModel.getType()===et.FIXED&&this.reducePrecision(t),t},reducePrecision:function(n){if(n.coordinate)this.precisionModel.makePrecise(n.coordinate);else if(n.points)for(var t=0,e=n.points.coordinates.length;t<e;t++)this.precisionModel.makePrecise(n.points.coordinates[t]);else if(n.geometries)for(var l=0,i=n.geometries.length;l<i;l++)this.reducePrecision(n.geometries[l])}}),t(Xl.prototype,{read:function(n){var t=this.ol;return n instanceof t.geom.Point?this.convertFromPoint(n):n instanceof t.geom.LineString?this.convertFromLineString(n):n instanceof t.geom.LinearRing?this.convertFromLinearRing(n):n instanceof t.geom.Polygon?this.convertFromPolygon(n):n instanceof t.geom.MultiPoint?this.convertFromMultiPoint(n):n instanceof t.geom.MultiLineString?this.convertFromMultiLineString(n):n instanceof t.geom.MultiPolygon?this.convertFromMultiPolygon(n):n instanceof t.geom.GeometryCollection?this.convertFromCollection(n):void 0},convertFromPoint:function(n){var t=n.getCoordinates();return this.geometryFactory.createPoint(new d(t[0],t[1]))},convertFromLineString:function(n){return this.geometryFactory.createLineString(n.getCoordinates().map(function(n){return new d(n[0],n[1])}))},convertFromLinearRing:function(n){return this.geometryFactory.createLinearRing(n.getCoordinates().map(function(n){return new d(n[0],n[1])}))},convertFromPolygon:function(n){for(var t=n.getLinearRings(),e=null,l=[],i=0;i<t.length;i++){var r=this.convertFromLinearRing(t[i]);0===i?e=r:l.push(r)}return this.geometryFactory.createPolygon(e,l)},convertFromMultiPoint:function(n){var t=n.getPoints().map(function(n){return this.convertFromPoint(n)},this);return this.geometryFactory.createMultiPoint(t)},convertFromMultiLineString:function(n){var t=n.getLineStrings().map(function(n){return this.convertFromLineString(n)},this);return this.geometryFactory.createMultiLineString(t)},convertFromMultiPolygon:function(n){var t=n.getPolygons().map(function(n){return this.convertFromPolygon(n)},this);return this.geometryFactory.createMultiPolygon(t)},convertFromCollection:function(n){var t=n.getGeometries().map(function(n){return this.read(n)},this);return this.geometryFactory.createGeometryCollection(t)},write:function(n){return"Point"===n.getGeometryType()?this.convertToPoint(n.getCoordinate()):"LineString"===n.getGeometryType()?this.convertToLineString(n):"LinearRing"===n.getGeometryType()?this.convertToLinearRing(n):"Polygon"===n.getGeometryType()?this.convertToPolygon(n):"MultiPoint"===n.getGeometryType()?this.convertToMultiPoint(n):"MultiLineString"===n.getGeometryType()?this.convertToMultiLineString(n):"MultiPolygon"===n.getGeometryType()?this.convertToMultiPolygon(n):"GeometryCollection"===n.getGeometryType()?this.convertToCollection(n):void 0},convertToPoint:function(n){return new this.ol.geom.Point([n.x,n.y])},convertToLineString:function(n){var t=n.points.coordinates.map(Yl);return new this.ol.geom.LineString(t)},convertToLinearRing:function(n){var t=n.points.coordinates.map(Yl);return new this.ol.geom.LinearRing(t)},convertToPolygon:function(n){for(var t=[n.shell.points.coordinates.map(Yl)],e=0;e<n.holes.length;e++)t.push(n.holes[e].points.coordinates.map(Yl));return new this.ol.geom.Polygon(t)},convertToMultiPoint:function(n){return new this.ol.geom.MultiPoint(n.getCoordinates().map(Yl))},convertToMultiLineString:function(n){for(var t=[],e=0;e<n.geometries.length;e++)t.push(this.convertToLineString(n.geometries[e]).getCoordinates());return new this.ol.geom.MultiLineString(t)},convertToMultiPolygon:function(n){for(var t=[],e=0;e<n.geometries.length;e++)t.push(this.convertToPolygon(n.geometries[e]).getCoordinates());return new this.ol.geom.MultiPolygon(t)},convertToCollection:function(n){for(var t=[],e=0;e<n.geometries.length;e++){var l=n.geometries[e];t.push(this.write(l))}return new this.ol.geom.GeometryCollection(t)}});var Mu=Object.freeze({GeoJSONReader:jl,GeoJSONWriter:Ul,OL3Parser:Xl,WKTReader:Vl,WKTWriter:ut});t(Hl.prototype,{rescale:function(){if(S(arguments[0],v))for(var n=arguments[0],t=n.iterator();t.hasNext();){var e=t.next();this.rescale(e.getCoordinates())}else if(arguments[0]instanceof Array){var l=arguments[0],i=null,r=null;2===l.length&&(i=new d(l[0]),r=new d(l[1]));for(var t=0;t<l.length;t++)l[t].x=l[t].x/this.scaleFactor+this.offsetX,l[t].y=l[t].y/this.scaleFactor+this.offsetY;2===l.length&&l[0].equals2D(l[1])&&k.out.println(l)}},scale:function(){if(S(arguments[0],v)){for(var n=arguments[0],t=new _,e=n.iterator();e.hasNext();){var l=e.next();t.add(new Jt(this.scale(l.getCoordinates()),l.getData()))}return t}if(arguments[0]instanceof Array){for(var i=arguments[0],r=new Array(i.length).fill(null),e=0;e<i.length;e++)r[e]=new d(Math.round((i[e].x-this.offsetX)*this.scaleFactor),Math.round((i[e].y-this.offsetY)*this.scaleFactor),i[e].z);var u=X.removeRepeatedPoints(r);return u}},isIntegerPrecision:function(){return 1===this.scaleFactor},getNodedSubstrings:function(){var n=this.noder.getNodedSubstrings();return this.isScaled&&this.rescale(n),n},computeNodes:function(n){var t=n;this.isScaled&&(t=this.scale(n)),this.noder.computeNodes(t)},interfaces_:function(){return[te]},getClass:function(){return Hl}});var Eu=Object.freeze({MCIndexNoder:le,ScaledNoder:Hl,SegmentString:Rt});t(Wl.prototype,{isSimpleMultiPoint:function(n){if(n.isEmpty())return!0;for(var t=new an,e=0;e<n.getNumGeometries();e++){var l=n.getGeometryN(e),i=l.getCoordinate();if(t.contains(i))return this.nonSimpleLocation=i,!1;t.add(i)}return!0},isSimplePolygonal:function(n){for(var t=je.getLines(n),e=t.iterator();e.hasNext();){var l=e.next();if(!this.isSimpleLinearGeometry(l))return!1}return!0},hasClosedEndpointIntersection:function(n){for(var t=new rn,e=n.getEdgeIterator();e.hasNext();){var l=e.next(),i=(l.getMaximumSegmentIndex(),l.isClosed()),r=l.getCoordinate(0);this.addEndpoint(t,r,i);var u=l.getCoordinate(l.getNumPoints()-1);this.addEndpoint(t,u,i)}for(var e=t.values().iterator();e.hasNext();){var s=e.next();if(s.isClosed&&2!==s.degree)return this.nonSimpleLocation=s.getCoordinate(),!0}return!1},getNonSimpleLocation:function(){return this.nonSimpleLocation},isSimpleLinearGeometry:function(n){if(n.isEmpty())return!0;var t=new $e(0,n),e=new at,l=t.computeSelfNodes(e,!0);return!l.hasIntersection()||(l.hasProperIntersection()?(this.nonSimpleLocation=l.getProperIntersectionPoint(),!1):!this.hasNonEndpointIntersection(t)&&(!this.isClosedEndpointsInInterior||!this.hasClosedEndpointIntersection(t)))},hasNonEndpointIntersection:function(n){for(var t=n.getEdgeIterator();t.hasNext();)for(var e=t.next(),l=e.getMaximumSegmentIndex(),i=e.getEdgeIntersectionList().iterator();i.hasNext();){var r=i.next();if(!r.isEndPoint(l))return this.nonSimpleLocation=r.getCoordinate(),!0}return!1},addEndpoint:function(n,t,e){var l=n.get(t);null===l&&(l=new Zl(t),n.put(t,l)),l.addEndpoint(e)},computeSimple:function(n){return this.nonSimpleLocation=null,!!n.isEmpty()||(n instanceof Cn?this.isSimpleLinearGeometry(n):n instanceof gn?this.isSimpleLinearGeometry(n):n instanceof Ln?this.isSimpleMultiPoint(n):S(n,Nn)?this.isSimplePolygonal(n):!(n instanceof dn)||this.isSimpleGeometryCollection(n))},isSimple:function(){return this.nonSimpleLocation=null,this.computeSimple(this.inputGeom)},isSimpleGeometryCollection:function(n){for(var t=0;t<n.getNumGeometries();t++){var e=n.getGeometryN(t);if(!this.computeSimple(e))return!1}return!0},interfaces_:function(){return[]},getClass:function(){return Wl}}),t(Zl.prototype,{addEndpoint:function(n){this.degree++,this.isClosed|=n},getCoordinate:function(){return this.pt},interfaces_:function(){return[]},getClass:function(){return Zl}}),Wl.EndpointInfo=Zl,t(Jl.prototype,{getEndCapStyle:function(){return this.endCapStyle},isSingleSided:function(){return this._isSingleSided},setQuadrantSegments:function(n){this.quadrantSegments=n,0===this.quadrantSegments&&(this.joinStyle=Jl.JOIN_BEVEL),this.quadrantSegments<0&&(this.joinStyle=Jl.JOIN_MITRE,this.mitreLimit=Math.abs(this.quadrantSegments)),n<=0&&(this.quadrantSegments=1),this.joinStyle!==Jl.JOIN_ROUND&&(this.quadrantSegments=Jl.DEFAULT_QUADRANT_SEGMENTS)},getJoinStyle:function(){return this.joinStyle},setJoinStyle:function(n){this.joinStyle=n},setSimplifyFactor:function(n){this.simplifyFactor=n<0?0:n},getSimplifyFactor:function(){return this.simplifyFactor},getQuadrantSegments:function(){return this.quadrantSegments},setEndCapStyle:function(n){this.endCapStyle=n},getMitreLimit:function(){return this.mitreLimit},setMitreLimit:function(n){this.mitreLimit=n},setSingleSided:function(n){this._isSingleSided=n},interfaces_:function(){return[]},getClass:function(){return Jl}}),Jl.bufferDistanceError=function(n){var t=Math.PI/2/n;return 1-Math.cos(t/2)},Jl.CAP_ROUND=1,Jl.CAP_FLAT=2,Jl.CAP_SQUARE=3,Jl.JOIN_ROUND=1,Jl.JOIN_MITRE=2,Jl.JOIN_BEVEL=3,Jl.DEFAULT_QUADRANT_SEGMENTS=8,Jl.DEFAULT_MITRE_LIMIT=5,Jl.DEFAULT_SIMPLIFY_FACTOR=.01,t(Kl.prototype,{getCoordinate:function(){return this.minCoord},getRightmostSide:function(n,t){var e=this.getRightmostSideOfSegment(n,t);return e<0&&(e=this.getRightmostSideOfSegment(n,t-1)),e<0&&(this.minCoord=null,this.checkForRightmostCoordinate(n)),e},findRightmostEdgeAtVertex:function(){var n=this.minDe.getEdge().getCoordinates();c.isTrue(this.minIndex>0&&this.minIndex<n.length,"rightmost point expected to be interior vertex of edge");var t=n[this.minIndex-1],e=n[this.minIndex+1],l=ft.computeOrientation(this.minCoord,e,t),i=!1;t.y<this.minCoord.y&&e.y<this.minCoord.y&&l===ft.COUNTERCLOCKWISE?i=!0:t.y>this.minCoord.y&&e.y>this.minCoord.y&&l===ft.CLOCKWISE&&(i=!0),i&&(this.minIndex=this.minIndex-1)},getRightmostSideOfSegment:function(n,t){var e=n.getEdge(),l=e.getCoordinates();if(t<0||t+1>=l.length)return-1;if(l[t].y===l[t+1].y)return-1;var i=fe.LEFT;return l[t].y<l[t+1].y&&(i=fe.RIGHT),i},getEdge:function(){return this.orientedDe},checkForRightmostCoordinate:function(n){for(var t=n.getEdge().getCoordinates(),e=0;e<t.length-1;e++)(null===this.minCoord||t[e].x>this.minCoord.x)&&(this.minDe=n,this.minIndex=e,this.minCoord=t[e])},findRightmostEdgeAtNode:function(){var n=this.minDe.getNode(),t=n.getEdges();this.minDe=t.getRightmostEdge(),this.minDe.isForward()||(this.minDe=this.minDe.getSym(),this.minIndex=this.minDe.getEdge().getCoordinates().length-1)},findEdge:function(n){for(var t=n.iterator();t.hasNext();){var e=t.next();e.isForward()&&this.checkForRightmostCoordinate(e)}c.isTrue(0!==this.minIndex||this.minCoord.equals(this.minDe.getCoordinate()),"inconsistency in rightmost processing"),0===this.minIndex?this.findRightmostEdgeAtNode():this.findRightmostEdgeAtVertex(),this.orientedDe=this.minDe;var l=this.getRightmostSide(this.minDe,this.minIndex);l===fe.LEFT&&(this.orientedDe=this.minDe.getSym())},interfaces_:function(){return[]},getClass:function(){return Kl}}),Ql.prototype.addLast=function(n){this.array_.push(n)},Ql.prototype.removeFirst=function(){return this.array_.shift()},Ql.prototype.isEmpty=function(){return 0===this.array_.length},t($l.prototype,{clearVisitedEdges:function(){for(var n=this.dirEdgeList.iterator();n.hasNext();){var t=n.next();t.setVisited(!1)}},getRightmostCoordinate:function(){return this.rightMostCoord},computeNodeDepth:function(n){for(var t=null,e=n.getEdges().iterator();e.hasNext();){var l=e.next();if(l.isVisited()||l.getSym().isVisited()){t=l;break}}if(null===t)throw new re("unable to find edge to compute depths at "+n.getCoordinate());n.getEdges().computeDepths(t);for(var e=n.getEdges().iterator();e.hasNext();){var l=e.next();l.setVisited(!0),this.copySymDepths(l)}},computeDepth:function(n){this.clearVisitedEdges();var t=this.finder.getEdge();t.getNode(),t.getLabel();t.setEdgeDepths(fe.RIGHT,n),this.copySymDepths(t),this.computeDepths(t)},create:function(n){this.addReachable(n),this.finder.findEdge(this.dirEdgeList),this.rightMostCoord=this.finder.getCoordinate()},findResultEdges:function(){for(var n=this.dirEdgeList.iterator();n.hasNext();){var t=n.next();t.getDepth(fe.RIGHT)>=1&&t.getDepth(fe.LEFT)<=0&&!t.isInteriorAreaEdge()&&t.setInResult(!0)}},computeDepths:function(n){var t=new Q,e=new Ql,l=n.getNode();for(e.addLast(l),t.add(l),n.setVisited(!0);!e.isEmpty();){var i=e.removeFirst();t.add(i),this.computeNodeDepth(i);for(var r=i.getEdges().iterator();r.hasNext();){var u=r.next(),s=u.getSym();if(!s.isVisited()){var a=s.getNode();t.contains(a)||(e.addLast(a),t.add(a))}}}},compareTo:function(n){var t=n;return this.rightMostCoord.x<t.rightMostCoord.x?-1:this.rightMostCoord.x>t.rightMostCoord.x?1:0},getEnvelope:function(){if(null===this.env){for(var n=new E,t=this.dirEdgeList.iterator();t.hasNext();)for(var e=t.next(),l=e.getEdge().getCoordinates(),i=0;i<l.length-1;i++)n.expandToInclude(l[i]);this.env=n}return this.env},addReachable:function(n){var t=new vt;for(t.add(n);!t.empty();){var e=t.pop();this.add(e,t)}},copySymDepths:function(n){var t=n.getSym();t.setDepth(fe.LEFT,n.getDepth(fe.RIGHT)),t.setDepth(fe.RIGHT,n.getDepth(fe.LEFT))},add:function(n,t){n.setVisited(!0),this.nodes.add(n);for(var e=n.getEdges().iterator();e.hasNext();){var l=e.next();this.dirEdgeList.add(l);var i=l.getSym(),r=i.getNode();r.isVisited()||t.push(r)}},getNodes:function(){return this.nodes},getDirectedEdges:function(){return this.dirEdgeList},interfaces_:function(){return[r]},getClass:function(){return $l}}),t(ni.prototype,{isDeletable:function(n,t,e,l){var i=this.inputLine[n],r=this.inputLine[t],u=this.inputLine[e];return!!this.isConcave(i,r,u)&&(!!this.isShallow(i,r,u,l)&&this.isShallowSampled(i,r,n,e,l))},deleteShallowConcavities:function(){for(var n=1,t=(this.inputLine.length-1,this.findNextNonDeletedIndex(n)),e=this.findNextNonDeletedIndex(t),l=!1;e<this.inputLine.length;){var i=!1;this.isDeletable(n,t,e,this.distanceTol)&&(this.isDeleted[t]=ni.DELETE,i=!0,l=!0),n=i?e:t,t=this.findNextNonDeletedIndex(n),e=this.findNextNonDeletedIndex(t)}return l},isShallowConcavity:function(n,t,e,l){var i=ft.computeOrientation(n,t,e),r=i===this.angleOrientation;if(!r)return!1;var u=ft.distancePointLine(t,n,e);return u<l},isShallowSampled:function(n,t,e,l,i){var r=Math.trunc((l-e)/ni.NUM_PTS_TO_CHECK);r<=0&&(r=1);for(var u=e;u<l;u+=r)if(!this.isShallow(n,t,this.inputLine[u],i))return!1;return!0},isConcave:function n(t,e,l){var i=ft.computeOrientation(t,e,l),n=i===this.angleOrientation;return n},simplify:function(n){this.distanceTol=Math.abs(n),n<0&&(this.angleOrientation=ft.CLOCKWISE),this.isDeleted=new Array(this.inputLine.length).fill(null);var t=!1;do{t=this.deleteShallowConcavities()}while(t);return this.collapseLine()},findNextNonDeletedIndex:function(n){for(var t=n+1;t<this.inputLine.length&&this.isDeleted[t]===ni.DELETE;)t++;return t},isShallow:function(n,t,e,l){var i=ft.distancePointLine(t,n,e);return i<l},collapseLine:function(){for(var n=new M,t=0;t<this.inputLine.length;t++)this.isDeleted[t]!==ni.DELETE&&n.add(this.inputLine[t]);return n.toCoordinateArray()},interfaces_:function(){return[]},getClass:function(){return ni}}),ni.simplify=function(n,t){var e=new ni(n);return e.simplify(t)},ni.INIT=0,ni.DELETE=1,ni.KEEP=1,ni.NUM_PTS_TO_CHECK=10,t(ti.prototype,{getCoordinates:function(){var n=this.ptList.toArray(ti.COORDINATE_ARRAY_TYPE);return n},setPrecisionModel:function(n){this.precisionModel=n},addPt:function(n){var t=new d(n);return this.precisionModel.makePrecise(t),this.isRedundant(t)?null:void this.ptList.add(t)},reverse:function(){},addPts:function(n,t){if(t)for(var e=0;e<n.length;e++)this.addPt(n[e]);else for(var e=n.length-1;e>=0;e--)this.addPt(n[e])},isRedundant:function(n){if(this.ptList.size()<1)return!1;var t=this.ptList.get(this.ptList.size()-1),e=n.distance(t);return e<this.minimimVertexDistance},toString:function(){var n=new it,t=n.createLineString(this.getCoordinates());return t.toString()},closeRing:function(){if(this.ptList.size()<1)return null;var n=new d(this.ptList.get(0)),t=this.ptList.get(this.ptList.size()-1),e=null;return this.ptList.size()>=2&&(e=this.ptList.get(this.ptList.size()-2)),n.equals(t)?null:void this.ptList.add(n)},setMinimumVertexDistance:function(n){this.minimimVertexDistance=n},interfaces_:function(){return[]},getClass:function(){return ti}}),ti.COORDINATE_ARRAY_TYPE=new Array(0).fill(null),t(ei.prototype,{addNextSegment:function(n,t){if(this.s0=this.s1,this.s1=this.s2,this.s2=n,this.seg0.setCoordinates(this.s0,this.s1),this.computeOffsetSegment(this.seg0,this.side,this.distance,this.offset0),this.seg1.setCoordinates(this.s1,this.s2),this.computeOffsetSegment(this.seg1,this.side,this.distance,this.offset1),this.s1.equals(this.s2))return null;var e=ft.computeOrientation(this.s0,this.s1,this.s2),l=e===ft.CLOCKWISE&&this.side===fe.LEFT||e===ft.COUNTERCLOCKWISE&&this.side===fe.RIGHT;0===e?this.addCollinear(t):l?this.addOutsideTurn(e,t):this.addInsideTurn(e,t)},addLineEndCap:function(n,t){var e=new ct(n,t),l=new ct;this.computeOffsetSegment(e,fe.LEFT,this.distance,l);var i=new ct;this.computeOffsetSegment(e,fe.RIGHT,this.distance,i);var r=t.x-n.x,u=t.y-n.y,s=Math.atan2(u,r);switch(this.bufParams.getEndCapStyle()){case Jl.CAP_ROUND:this.segList.addPt(l.p1),this.addFilletArc(t,s+Math.PI/2,s-Math.PI/2,ft.CLOCKWISE,this.distance),this.segList.addPt(i.p1);break;case Jl.CAP_FLAT:this.segList.addPt(l.p1),this.segList.addPt(i.p1);break;case Jl.CAP_SQUARE:var a=new d;a.x=Math.abs(this.distance)*Math.cos(s),a.y=Math.abs(this.distance)*Math.sin(s);var o=new d(l.p1.x+a.x,l.p1.y+a.y),h=new d(i.p1.x+a.x,i.p1.y+a.y);this.segList.addPt(o),this.segList.addPt(h)}},getCoordinates:function(){var n=this.segList.getCoordinates();return n},addMitreJoin:function(n,t,e,l){var i=!0,r=null;try{r=D.intersection(t.p0,t.p1,e.p0,e.p1);var u=l<=0?1:r.distance(n)/Math.abs(l);u>this.bufParams.getMitreLimit()&&(i=!1)}catch(n){if(!(n instanceof C))throw n;r=new d(0,0),i=!1}finally{}i?this.segList.addPt(r):this.addLimitedMitreJoin(t,e,l,this.bufParams.getMitreLimit())},addFilletCorner:function(n,t,e,l,i){var r=t.x-n.x,u=t.y-n.y,s=Math.atan2(u,r),a=e.x-n.x,o=e.y-n.y,h=Math.atan2(o,a);l===ft.CLOCKWISE?s<=h&&(s+=2*Math.PI):s>=h&&(s-=2*Math.PI),this.segList.addPt(t),this.addFilletArc(n,s,h,l,i),this.segList.addPt(e)},addOutsideTurn:function(n,t){return this.offset0.p1.distance(this.offset1.p0)<this.distance*ei.OFFSET_SEGMENT_SEPARATION_FACTOR?(this.segList.addPt(this.offset0.p1),null):void(this.bufParams.getJoinStyle()===Jl.JOIN_MITRE?this.addMitreJoin(this.s1,this.offset0,this.offset1,this.distance):this.bufParams.getJoinStyle()===Jl.JOIN_BEVEL?this.addBevelJoin(this.offset0,this.offset1):(t&&this.segList.addPt(this.offset0.p1),this.addFilletCorner(this.s1,this.offset0.p1,this.offset1.p0,n,this.distance),this.segList.addPt(this.offset1.p0)))},createSquare:function(n){this.segList.addPt(new d(n.x+this.distance,n.y+this.distance)),this.segList.addPt(new d(n.x+this.distance,n.y-this.distance)),this.segList.addPt(new d(n.x-this.distance,n.y-this.distance)),this.segList.addPt(new d(n.x-this.distance,n.y+this.distance)),this.segList.closeRing()},addSegments:function(n,t){this.segList.addPts(n,t)},addFirstSegment:function(){this.segList.addPt(this.offset1.p0)},addLastSegment:function(){this.segList.addPt(this.offset1.p1)},initSideSegments:function(n,t,e){this.s1=n,this.s2=t,this.side=e,this.seg1.setCoordinates(n,t),this.computeOffsetSegment(this.seg1,e,this.distance,this.offset1)},addLimitedMitreJoin:function(n,t,e,l){var i=this.seg0.p1,r=bl.angle(i,this.seg0.p0),u=(bl.angle(i,this.seg1.p1),bl.angleBetweenOriented(this.seg0.p0,i,this.seg1.p1)),s=u/2,a=bl.normalize(r+s),o=bl.normalize(a+Math.PI),h=l*e,f=h*Math.abs(Math.sin(s)),c=e-f,g=i.x+h*Math.cos(o),p=i.y+h*Math.sin(o),v=new d(g,p),m=new ct(i,v),y=m.pointAlongOffset(1,c),x=m.pointAlongOffset(1,-c);this.side===fe.LEFT?(this.segList.addPt(y),this.segList.addPt(x)):(this.segList.addPt(x),this.segList.addPt(y))},computeOffsetSegment:function(n,t,e,l){var i=t===fe.LEFT?1:-1,r=n.p1.x-n.p0.x,u=n.p1.y-n.p0.y,s=Math.sqrt(r*r+u*u),a=i*e*r/s,o=i*e*u/s;l.p0.x=n.p0.x-o,l.p0.y=n.p0.y+a,l.p1.x=n.p1.x-o,l.p1.y=n.p1.y+a},addFilletArc:function(n,t,e,l,i){var r=l===ft.CLOCKWISE?-1:1,u=Math.abs(t-e),s=Math.trunc(u/this.filletAngleQuantum+.5);if(s<1)return null;var a=null,o=null;a=0,o=u/s;for(var h=a,f=new d;h<u;){var c=t+r*h;f.x=n.x+i*Math.cos(c),f.y=n.y+i*Math.sin(c),this.segList.addPt(f),h+=o}},addInsideTurn:function(n,t){if(this.li.computeIntersection(this.offset0.p0,this.offset0.p1,this.offset1.p0,this.offset1.p1),this.li.hasIntersection())this.segList.addPt(this.li.getIntersection(0));else if(this._hasNarrowConcaveAngle=!0,this.offset0.p1.distance(this.offset1.p0)<this.distance*ei.INSIDE_TURN_VERTEX_SNAP_DISTANCE_FACTOR)this.segList.addPt(this.offset0.p1);else{if(this.segList.addPt(this.offset0.p1),this.closingSegLengthFactor>0){var e=new d((this.closingSegLengthFactor*this.offset0.p1.x+this.s1.x)/(this.closingSegLengthFactor+1),(this.closingSegLengthFactor*this.offset0.p1.y+this.s1.y)/(this.closingSegLengthFactor+1));this.segList.addPt(e);var l=new d((this.closingSegLengthFactor*this.offset1.p0.x+this.s1.x)/(this.closingSegLengthFactor+1),(this.closingSegLengthFactor*this.offset1.p0.y+this.s1.y)/(this.closingSegLengthFactor+1));this.segList.addPt(l)}else this.segList.addPt(this.s1);this.segList.addPt(this.offset1.p0)}},createCircle:function(n){var t=new d(n.x+this.distance,n.y);this.segList.addPt(t),this.addFilletArc(n,0,2*Math.PI,-1,this.distance),this.segList.closeRing()},addBevelJoin:function(n,t){this.segList.addPt(n.p1),this.segList.addPt(t.p0)},init:function(n){this.distance=n,this.maxCurveSegmentError=n*(1-Math.cos(this.filletAngleQuantum/2)),this.segList=new ti,this.segList.setPrecisionModel(this.precisionModel),this.segList.setMinimumVertexDistance(n*ei.CURVE_VERTEX_SNAP_DISTANCE_FACTOR)},addCollinear:function(n){this.li.computeIntersection(this.s0,this.s1,this.s1,this.s2);var t=this.li.getIntersectionNum();t>=2&&(this.bufParams.getJoinStyle()===Jl.JOIN_BEVEL||this.bufParams.getJoinStyle()===Jl.JOIN_MITRE?(n&&this.segList.addPt(this.offset0.p1),this.segList.addPt(this.offset1.p0)):this.addFilletCorner(this.s1,this.offset0.p1,this.offset1.p0,ft.CLOCKWISE,this.distance))},closeRing:function(){this.segList.closeRing()},hasNarrowConcaveAngle:function(){return this._hasNarrowConcaveAngle},interfaces_:function(){return[]},getClass:function(){return ei}}),ei.OFFSET_SEGMENT_SEPARATION_FACTOR=.001,ei.INSIDE_TURN_VERTEX_SNAP_DISTANCE_FACTOR=.001,ei.CURVE_VERTEX_SNAP_DISTANCE_FACTOR=1e-6,ei.MAX_CLOSING_SEG_LEN_FACTOR=80,t(li.prototype,{getOffsetCurve:function(n,t){if(this.distance=t,0===t)return null;var e=t<0,l=Math.abs(t),i=this.getSegGen(l);n.length<=1?this.computePointCurve(n[0],i):this.computeOffsetCurve(n,e,i);var r=i.getCoordinates();return e&&X.reverse(r),r},computeSingleSidedBufferCurve:function(n,t,e){var l=this.simplifyTolerance(this.distance);if(t){e.addSegments(n,!0);var i=ni.simplify(n,-l),r=i.length-1;e.initSideSegments(i[r],i[r-1],fe.LEFT),e.addFirstSegment();for(var u=r-2;u>=0;u--)e.addNextSegment(i[u],!0)}else{e.addSegments(n,!1);var s=ni.simplify(n,l),a=s.length-1;e.initSideSegments(s[0],s[1],fe.LEFT),e.addFirstSegment();for(var u=2;u<=a;u++)e.addNextSegment(s[u],!0)}e.addLastSegment(),e.closeRing()},computeRingBufferCurve:function(n,t,e){var l=this.simplifyTolerance(this.distance);t===fe.RIGHT&&(l=-l);var i=ni.simplify(n,l),r=i.length-1;e.initSideSegments(i[r-1],i[0],t);for(var u=1;u<=r;u++){var s=1!==u;e.addNextSegment(i[u],s)}e.closeRing()},computeLineBufferCurve:function(n,t){var e=this.simplifyTolerance(this.distance),l=ni.simplify(n,e),i=l.length-1;t.initSideSegments(l[0],l[1],fe.LEFT);for(var r=2;r<=i;r++)t.addNextSegment(l[r],!0);t.addLastSegment(),t.addLineEndCap(l[i-1],l[i]);var u=ni.simplify(n,-e),s=u.length-1;t.initSideSegments(u[s],u[s-1],fe.LEFT);for(var r=s-2;r>=0;r--)t.addNextSegment(u[r],!0);t.addLastSegment(),t.addLineEndCap(u[1],u[0]),t.closeRing()},computePointCurve:function(n,t){switch(this.bufParams.getEndCapStyle()){case Jl.CAP_ROUND:t.createCircle(n);break;case Jl.CAP_SQUARE:t.createSquare(n)}},getLineCurve:function(n,t){if(this.distance=t,t<0&&!this.bufParams.isSingleSided())return null;if(0===t)return null;var e=Math.abs(t),l=this.getSegGen(e);if(n.length<=1)this.computePointCurve(n[0],l);else if(this.bufParams.isSingleSided()){var i=t<0;this.computeSingleSidedBufferCurve(n,i,l)}else this.computeLineBufferCurve(n,l);var r=l.getCoordinates();return r},getBufferParameters:function(){return this.bufParams},simplifyTolerance:function(n){return n*this.bufParams.getSimplifyFactor()},getRingCurve:function(n,t,e){if(this.distance=e,n.length<=2)return this.getLineCurve(n,e);if(0===e)return li.copyCoordinates(n);var l=this.getSegGen(e);return this.computeRingBufferCurve(n,t,l),l.getCoordinates()},computeOffsetCurve:function(n,t,e){var l=this.simplifyTolerance(this.distance);if(t){var i=ni.simplify(n,-l),r=i.length-1;e.initSideSegments(i[r],i[r-1],fe.LEFT),e.addFirstSegment();for(var u=r-2;u>=0;u--)e.addNextSegment(i[u],!0)}else{var s=ni.simplify(n,l),a=s.length-1;e.initSideSegments(s[0],s[1],fe.LEFT),e.addFirstSegment();for(var u=2;u<=a;u++)e.addNextSegment(s[u],!0)}e.addLastSegment()},getSegGen:function(n){return new ei(this.precisionModel,this.bufParams,n)},interfaces_:function(){return[]},getClass:function(){return li}}),li.copyCoordinates=function(n){for(var t=new Array(n.length).fill(null),e=0;e<t.length;e++)t[e]=new d(n[e]);return t},t(ii.prototype,{findStabbedSegments:function(){if(1===arguments.length){for(var n=arguments[0],t=new _,e=this.subgraphs.iterator();e.hasNext();){var l=e.next(),i=l.getEnvelope();n.y<i.getMinY()||n.y>i.getMaxY()||this.findStabbedSegments(n,l.getDirectedEdges(),t)}return t}if(3===arguments.length)if(S(arguments[2],y)&&arguments[0]instanceof d&&arguments[1]instanceof _e)for(var r=arguments[0],u=arguments[1],s=arguments[2],a=u.getEdge().getCoordinates(),e=0;e<a.length-1;e++){this.seg.p0=a[e],this.seg.p1=a[e+1],this.seg.p0.y>this.seg.p1.y&&this.seg.reverse();var o=Math.max(this.seg.p0.x,this.seg.p1.x);if(!(o<r.x||this.seg.isHorizontal()||r.y<this.seg.p0.y||r.y>this.seg.p1.y||ft.computeOrientation(this.seg.p0,this.seg.p1,r)===ft.RIGHT)){var h=u.getDepth(fe.LEFT);this.seg.p0.equals(a[e])||(h=u.getDepth(fe.RIGHT));var f=new ri(this.seg,h);s.add(f)}}else if(S(arguments[2],y)&&arguments[0]instanceof d&&S(arguments[1],y))for(var c=arguments[0],g=arguments[1],p=arguments[2],e=g.iterator();e.hasNext();){var v=e.next();v.isForward()&&this.findStabbedSegments(c,v,p)}},getDepth:function(n){var t=this.findStabbedSegments(n);if(0===t.size())return 0;var e=fu.min(t);return e.leftDepth},interfaces_:function(){return[]},getClass:function(){return ii}}),t(ri.prototype,{compareTo:function(n){var t=n;if(this.upwardSeg.minX()>=t.upwardSeg.maxX())return 1;if(this.upwardSeg.maxX()<=t.upwardSeg.minX())return-1;var e=this.upwardSeg.orientationIndex(t.upwardSeg);return 0!==e?e:(e=-1*t.upwardSeg.orientationIndex(this.upwardSeg),0!==e?e:this.upwardSeg.compareTo(t.upwardSeg))},compareX:function(n,t){var e=n.p0.compareTo(t.p0);return 0!==e?e:n.p1.compareTo(t.p1)},toString:function(){return this.upwardSeg.toString()},interfaces_:function(){return[r]},getClass:function(){return ri}}),ii.DepthSegment=ri,t(ui.prototype,{addPoint:function(n){if(this.distance<=0)return null;var t=n.getCoordinates(),e=this.curveBuilder.getLineCurve(t,this.distance);this.addCurve(e,I.EXTERIOR,I.INTERIOR)},addPolygon:function(n){var t=this.distance,e=fe.LEFT;this.distance<0&&(t=-this.distance,e=fe.RIGHT);var l=n.getExteriorRing(),i=X.removeRepeatedPoints(l.getCoordinates());if(this.distance<0&&this.isErodedCompletely(l,this.distance))return null;if(this.distance<=0&&i.length<3)return null;this.addPolygonRing(i,t,e,I.EXTERIOR,I.INTERIOR);for(var r=0;r<n.getNumInteriorRing();r++){var u=n.getInteriorRingN(r),s=X.removeRepeatedPoints(u.getCoordinates());this.distance>0&&this.isErodedCompletely(u,-this.distance)||this.addPolygonRing(s,t,fe.opposite(e),I.INTERIOR,I.EXTERIOR)}},isTriangleErodedCompletely:function(n,t){var e=new Cl(n[0],n[1],n[2]),l=e.inCentre(),i=ft.distancePointLine(l,e.p0,e.p1);return i<Math.abs(t)},addLineString:function(n){if(this.distance<=0&&!this.curveBuilder.getBufferParameters().isSingleSided())return null;var t=X.removeRepeatedPoints(n.getCoordinates()),e=this.curveBuilder.getLineCurve(t,this.distance);this.addCurve(e,I.EXTERIOR,I.INTERIOR)},addCurve:function(n,t,e){if(null===n||n.length<2)return null;var l=new Jt(n,new de(0,I.BOUNDARY,t,e));this.curveList.add(l)},getCurves:function(){return this.add(this.inputGeom),this.curveList},addPolygonRing:function(n,t,e,l,i){if(0===t&&n.length<Rn.MINIMUM_VALID_SIZE)return null
;var r=l,u=i;n.length>=Rn.MINIMUM_VALID_SIZE&&ft.isCCW(n)&&(r=i,u=l,e=fe.opposite(e));var s=this.curveBuilder.getRingCurve(n,e,t);this.addCurve(s,r,u)},add:function(n){if(n.isEmpty())return null;if(n instanceof Pn)this.addPolygon(n);else if(n instanceof Cn)this.addLineString(n);else if(n instanceof Sn)this.addPoint(n);else if(n instanceof Ln)this.addCollection(n);else if(n instanceof gn)this.addCollection(n);else if(n instanceof Tn)this.addCollection(n);else{if(!(n instanceof dn))throw new UnsupportedOperationException(n.getClass().getName());this.addCollection(n)}},isErodedCompletely:function(n,t){var e=n.getCoordinates();if(e.length<4)return t<0;if(4===e.length)return this.isTriangleErodedCompletely(e,t);var l=n.getEnvelopeInternal(),i=Math.min(l.getHeight(),l.getWidth());return t<0&&2*Math.abs(t)>i},addCollection:function(n){for(var t=0;t<n.getNumGeometries();t++){var e=n.getGeometryN(t);this.add(e)}},interfaces_:function(){return[]},getClass:function(){return ui}}),t(si.prototype,{isTrivialIntersection:function(n,t,e,l){if(n===e&&1===this.li.getIntersectionNum()){if(si.isAdjacentSegments(t,l))return!0;if(n.isClosed()){var i=n.size()-1;if(0===t&&l===i||0===l&&t===i)return!0}}return!1},getProperIntersectionPoint:function(){return this.properIntersectionPoint},hasProperInteriorIntersection:function(){return this.hasProperInterior},getLineIntersector:function(){return this.li},hasProperIntersection:function(){return this.hasProper},processIntersections:function(n,t,e,l){if(n===e&&t===l)return null;this.numTests++;var i=n.getCoordinates()[t],r=n.getCoordinates()[t+1],u=e.getCoordinates()[l],s=e.getCoordinates()[l+1];this.li.computeIntersection(i,r,u,s),this.li.hasIntersection()&&(this.numIntersections++,this.li.isInteriorIntersection()&&(this.numInteriorIntersections++,this.hasInterior=!0),this.isTrivialIntersection(n,t,e,l)||(this._hasIntersection=!0,n.addIntersections(this.li,t,0),e.addIntersections(this.li,l,1),this.li.isProper()&&(this.numProperIntersections++,this.hasProper=!0,this.hasProperInterior=!0)))},hasIntersection:function(){return this._hasIntersection},isDone:function(){return!1},hasInteriorIntersection:function(){return this.hasInterior},interfaces_:function(){return[ue]},getClass:function(){return si}}),si.isAdjacentSegments=function(n,t){return 1===Math.abs(n-t)},t(ai.prototype,{setWorkingPrecisionModel:function(n){this.workingPrecisionModel=n},insertUniqueEdge:function(n){var t=this.edgeList.findEqualEdge(n);if(null!==t){var e=t.getLabel(),l=n.getLabel();t.isPointwiseEqual(n)||(l=new de(n.getLabel()),l.flip()),e.merge(l);var i=ai.depthDelta(l),r=t.getDepthDelta(),u=r+i;t.setDepthDelta(u)}else this.edgeList.add(n),n.setDepthDelta(ai.depthDelta(n.getLabel()))},buildSubgraphs:function(n,t){for(var e=new _,l=n.iterator();l.hasNext();){var i=l.next(),r=i.getRightmostCoordinate(),u=new ii(e),s=u.getDepth(r);i.computeDepth(s),i.findResultEdges(),e.add(i),t.add(i.getDirectedEdges(),i.getNodes())}},createSubgraphs:function(n){for(var t=new _,e=n.getNodes().iterator();e.hasNext();){var l=e.next();if(!l.isVisited()){var i=new $l;i.create(l),t.add(i)}}return fu.sort(t,fu.reverseOrder()),t},createEmptyResultGeometry:function(){var n=this.geomFact.createPolygon();return n},getNoder:function(n){if(null!==this.workingNoder)return this.workingNoder;var t=new le,e=new at;return e.setPrecisionModel(n),t.setSegmentIntersector(new si(e)),t},buffer:function(n,t){var e=this.workingPrecisionModel;null===e&&(e=n.getPrecisionModel()),this.geomFact=n.getFactory();var l=new li(e,this.bufParams),i=new ui(n,t,l),r=i.getCurves();if(r.size()<=0)return this.createEmptyResultGeometry();this.computeNodedEdges(r,e),this.graph=new Ee(new Re),this.graph.addEdges(this.edgeList.getEdges());var u=this.createSubgraphs(this.graph),s=new be(this.geomFact);this.buildSubgraphs(u,s);var a=s.getPolygons();if(a.size()<=0)return this.createEmptyResultGeometry();var o=this.geomFact.buildGeometry(a);return o},computeNodedEdges:function(n,t){var e=this.getNoder(t);e.computeNodes(n);for(var l=e.getNodedSubstrings(),i=l.iterator();i.hasNext();){var r=i.next(),u=r.getCoordinates();if(2!==u.length||!u[0].equals2D(u[1])){var s=r.getData(),a=new Qe(r.getCoordinates(),new de(s));this.insertUniqueEdge(a)}}},setNoder:function(n){this.workingNoder=n},interfaces_:function(){return[]},getClass:function(){return ai}}),ai.depthDelta=function(n){var t=n.getLocation(0,fe.LEFT),e=n.getLocation(0,fe.RIGHT);return t===I.INTERIOR&&e===I.EXTERIOR?1:t===I.EXTERIOR&&e===I.INTERIOR?-1:0},ai.convertSegStrings=function(n){for(var t=new it,e=new _;n.hasNext();){var l=n.next(),i=t.createLineString(l.getCoordinates());e.add(i)}return t.buildGeometry(e)},t(oi.prototype,{checkEndPtVertexIntersections:function(){if(0===arguments.length)for(var n=this.segStrings.iterator();n.hasNext();){var t=n.next(),e=t.getCoordinates();this.checkEndPtVertexIntersections(e[0],this.segStrings),this.checkEndPtVertexIntersections(e[e.length-1],this.segStrings)}else if(2===arguments.length)for(var l=arguments[0],i=arguments[1],n=i.iterator();n.hasNext();)for(var t=n.next(),e=t.getCoordinates(),r=1;r<e.length-1;r++)if(e[r].equals(l))throw new o("found endpt/interior pt intersection at index "+r+" :pt "+l)},checkInteriorIntersections:function(){if(0===arguments.length)for(var n=this.segStrings.iterator();n.hasNext();)for(var t=n.next(),e=this.segStrings.iterator();e.hasNext();){var l=e.next();this.checkInteriorIntersections(t,l)}else if(2===arguments.length)for(var i=arguments[0],r=arguments[1],u=i.getCoordinates(),s=r.getCoordinates(),a=0;a<u.length-1;a++)for(var h=0;h<s.length-1;h++)this.checkInteriorIntersections(i,a,r,h);else if(4===arguments.length){var f=arguments[0],c=arguments[1],d=arguments[2],g=arguments[3];if(f===d&&c===g)return null;var p=f.getCoordinates()[c],v=f.getCoordinates()[c+1],m=d.getCoordinates()[g],y=d.getCoordinates()[g+1];if(this.li.computeIntersection(p,v,m,y),this.li.hasIntersection()&&(this.li.isProper()||this.hasInteriorIntersection(this.li,p,v)||this.hasInteriorIntersection(this.li,m,y)))throw new o("found non-noded intersection at "+p+"-"+v+" and "+m+"-"+y)}},checkValid:function(){this.checkEndPtVertexIntersections(),this.checkInteriorIntersections(),this.checkCollapses()},checkCollapses:function(){if(0===arguments.length)for(var n=this.segStrings.iterator();n.hasNext();){var t=n.next();this.checkCollapses(t)}else if(1===arguments.length)for(var e=arguments[0],l=e.getCoordinates(),n=0;n<l.length-2;n++)this.checkCollapse(l[n],l[n+1],l[n+2])},hasInteriorIntersection:function(n,t,e){for(var l=0;l<n.getIntersectionNum();l++){var i=n.getIntersection(l);if(!i.equals(t)&&!i.equals(e))return!0}return!1},checkCollapse:function(n,t,e){if(n.equals(e))throw new o("found non-noded collapse at "+oi.fact.createLineString([n,t,e]))},interfaces_:function(){return[]},getClass:function(){return oi}}),oi.fact=new it,t(hi.prototype,{intersectsScaled:function(n,t){var e=Math.min(n.x,t.x),l=Math.max(n.x,t.x),i=Math.min(n.y,t.y),r=Math.max(n.y,t.y),u=this.maxx<e||this.minx>l||this.maxy<i||this.miny>r;if(u)return!1;var s=this.intersectsToleranceSquare(n,t);return c.isTrue(!(u&&s),"Found bad envelope test"),s},initCorners:function(n){var t=.5;this.minx=n.x-t,this.maxx=n.x+t,this.miny=n.y-t,this.maxy=n.y+t,this.corner[0]=new d(this.maxx,this.maxy),this.corner[1]=new d(this.minx,this.maxy),this.corner[2]=new d(this.minx,this.miny),this.corner[3]=new d(this.maxx,this.miny)},intersects:function(n,t){return 1===this.scaleFactor?this.intersectsScaled(n,t):(this.copyScaled(n,this.p0Scaled),this.copyScaled(t,this.p1Scaled),this.intersectsScaled(this.p0Scaled,this.p1Scaled))},scale:function(n){return Math.round(n*this.scaleFactor)},getCoordinate:function(){return this.originalPt},copyScaled:function(n,t){t.x=this.scale(n.x),t.y=this.scale(n.y)},getSafeEnvelope:function(){if(null===this.safeEnv){var n=hi.SAFE_ENV_EXPANSION_FACTOR/this.scaleFactor;this.safeEnv=new E(this.originalPt.x-n,this.originalPt.x+n,this.originalPt.y-n,this.originalPt.y+n)}return this.safeEnv},intersectsPixelClosure:function(n,t){return this.li.computeIntersection(n,t,this.corner[0],this.corner[1]),!!this.li.hasIntersection()||(this.li.computeIntersection(n,t,this.corner[1],this.corner[2]),!!this.li.hasIntersection()||(this.li.computeIntersection(n,t,this.corner[2],this.corner[3]),!!this.li.hasIntersection()||(this.li.computeIntersection(n,t,this.corner[3],this.corner[0]),!!this.li.hasIntersection())))},intersectsToleranceSquare:function(n,t){var e=!1,l=!1;return this.li.computeIntersection(n,t,this.corner[0],this.corner[1]),!!this.li.isProper()||(this.li.computeIntersection(n,t,this.corner[1],this.corner[2]),!!this.li.isProper()||(this.li.hasIntersection()&&(e=!0),this.li.computeIntersection(n,t,this.corner[2],this.corner[3]),!!this.li.isProper()||(this.li.hasIntersection()&&(l=!0),this.li.computeIntersection(n,t,this.corner[3],this.corner[0]),!!this.li.isProper()||(!(!e||!l)||(!!n.equals(this.pt)||!!t.equals(this.pt))))))},addSnappedNode:function(n,t){var e=n.getCoordinate(t),l=n.getCoordinate(t+1);return!!this.intersects(e,l)&&(n.addIntersection(this.getCoordinate(),t),!0)},interfaces_:function(){return[]},getClass:function(){return hi}}),hi.SAFE_ENV_EXPANSION_FACTOR=.75,t(fi.prototype,{snap:function(){if(1===arguments.length){var n=arguments[0];return this.snap(n,null,-1)}if(3===arguments.length){var t=arguments[0],e=arguments[1],l=arguments[2],i=t.getSafeEnvelope(),r=new ci(t,e,l);return this.index.query(i,{interfaces_:function(){return[Dt]},visitItem:function(n){var t=n;t.select(i,r)}}),r.isNodeAdded()}},interfaces_:function(){return[]},getClass:function(){return fi}}),h(ci,fl),t(ci.prototype,{isNodeAdded:function(){return this._isNodeAdded},select:function(){if(2!==arguments.length)return fl.prototype.select.apply(this,arguments);var n=arguments[0],t=arguments[1],e=n.getContext();return null!==this.parentEdge&&e===this.parentEdge&&t===this.hotPixelVertexIndex?null:void(this._isNodeAdded=this.hotPixel.addSnappedNode(e,t))},interfaces_:function(){return[]},getClass:function(){return ci}}),fi.HotPixelSnapAction=ci,t(di.prototype,{processIntersections:function(n,t,e,l){if(n===e&&t===l)return null;var i=n.getCoordinates()[t],r=n.getCoordinates()[t+1],u=e.getCoordinates()[l],s=e.getCoordinates()[l+1];if(this.li.computeIntersection(i,r,u,s),this.li.hasIntersection()&&this.li.isInteriorIntersection()){for(var a=0;a<this.li.getIntersectionNum();a++)this.interiorIntersections.add(this.li.getIntersection(a));n.addIntersections(this.li,t,0),e.addIntersections(this.li,l,1)}},isDone:function(){return!1},getInteriorIntersections:function(){return this.interiorIntersections},interfaces_:function(){return[ue]},getClass:function(){return di}}),t(gi.prototype,{checkCorrectness:function(n){var t=Jt.getNodedSubstrings(n),e=new oi(t);try{e.checkValid()}catch(n){if(!(n instanceof b))throw n;n.printStackTrace()}finally{}},getNodedSubstrings:function(){return Jt.getNodedSubstrings(this.nodedSegStrings)},snapRound:function(n,t){var e=this.findInteriorIntersections(n,t);this.computeIntersectionSnaps(e),this.computeVertexSnaps(n)},findInteriorIntersections:function(n,t){var e=new di(t);return this.noder.setSegmentIntersector(e),this.noder.computeNodes(n),e.getInteriorIntersections()},computeVertexSnaps:function(){if(S(arguments[0],v))for(var n=arguments[0],t=n.iterator();t.hasNext();){var e=t.next();this.computeVertexSnaps(e)}else if(arguments[0]instanceof Jt)for(var l=arguments[0],i=l.getCoordinates(),r=0;r<i.length;r++){var u=new hi(i[r],this.scaleFactor,this.li),s=this.pointSnapper.snap(u,l,r);s&&l.addIntersection(i[r],r)}},computeNodes:function(n){this.nodedSegStrings=n,this.noder=new le,this.pointSnapper=new fi(this.noder.getIndex()),this.snapRound(n,this.li)},computeIntersectionSnaps:function(n){for(var t=n.iterator();t.hasNext();){var e=t.next(),l=new hi(e,this.scaleFactor,this.li);this.pointSnapper.snap(l)}},interfaces_:function(){return[te]},getClass:function(){return gi}}),t(pi.prototype,{bufferFixedPrecision:function(n){var t=new Hl(new gi(new et(1)),n.getScale()),e=new ai(this.bufParams);e.setWorkingPrecisionModel(n),e.setNoder(t),this.resultGeometry=e.buffer(this.argGeom,this.distance)},bufferReducedPrecision:function(){if(0===arguments.length){for(var n=pi.MAX_PRECISION_DIGITS;n>=0;n--){try{this.bufferReducedPrecision(n)}catch(n){if(!(n instanceof re))throw n;this.saveException=n}finally{}if(null!==this.resultGeometry)return null}throw this.saveException}if(1===arguments.length){var t=arguments[0],e=pi.precisionScaleFactor(this.argGeom,this.distance,t),l=new et(e);this.bufferFixedPrecision(l)}},computeGeometry:function(){if(this.bufferOriginalPrecision(),null!==this.resultGeometry)return null;var n=this.argGeom.getFactory().getPrecisionModel();n.getType()===et.FIXED?this.bufferFixedPrecision(n):this.bufferReducedPrecision()},setQuadrantSegments:function(n){this.bufParams.setQuadrantSegments(n)},bufferOriginalPrecision:function(){try{var n=new ai(this.bufParams);this.resultGeometry=n.buffer(this.argGeom,this.distance)}catch(n){if(!(n instanceof o))throw n;this.saveException=n}finally{}},getResultGeometry:function(n){return this.distance=n,this.computeGeometry(),this.resultGeometry},setEndCapStyle:function(n){this.bufParams.setEndCapStyle(n)},interfaces_:function(){return[]},getClass:function(){return pi}}),pi.bufferOp=function(){if(2===arguments.length){var n=arguments[0],t=arguments[1],e=new pi(n),l=e.getResultGeometry(t);return l}if(3===arguments.length){if(Number.isInteger(arguments[2])&&arguments[0]instanceof G&&"number"==typeof arguments[1]){var i=arguments[0],r=arguments[1],u=arguments[2],s=new pi(i);s.setQuadrantSegments(u);var l=s.getResultGeometry(r);return l}if(arguments[2]instanceof Jl&&arguments[0]instanceof G&&"number"==typeof arguments[1]){var a=arguments[0],o=arguments[1],h=arguments[2],s=new pi(a,h),l=s.getResultGeometry(o);return l}}else if(4===arguments.length){var f=arguments[0],c=arguments[1],d=arguments[2],g=arguments[3],s=new pi(f);s.setQuadrantSegments(d),s.setEndCapStyle(g);var l=s.getResultGeometry(c);return l}},pi.precisionScaleFactor=function(n,t,e){var l=n.getEnvelopeInternal(),i=N.max(Math.abs(l.getMaxX()),Math.abs(l.getMaxY()),Math.abs(l.getMinX()),Math.abs(l.getMinY())),r=t>0?t:0,u=i+2*r,s=Math.trunc(Math.log(u)/Math.log(10)+1),a=e-s,o=Math.pow(10,a);return o},pi.CAP_ROUND=Jl.CAP_ROUND,pi.CAP_BUTT=Jl.CAP_FLAT,pi.CAP_FLAT=Jl.CAP_FLAT,pi.CAP_SQUARE=Jl.CAP_SQUARE,pi.MAX_PRECISION_DIGITS=12;var bu=Object.freeze({BufferOp:pi,BufferParameters:Jl});t(vi.prototype,{filter:function(n){n instanceof Pn&&this.comps.add(n)},interfaces_:function(){return[fn]},getClass:function(){return vi}}),vi.getPolygons=function(){if(1===arguments.length){var n=arguments[0];return vi.getPolygons(n,new _)}if(2===arguments.length){var t=arguments[0],e=arguments[1];return t instanceof Pn?e.add(t):t instanceof dn&&t.apply(new vi(e)),e}},t(mi.prototype,{isInsideArea:function(){return this.segIndex===mi.INSIDE_AREA},getCoordinate:function(){return this.pt},getGeometryComponent:function(){return this.component},getSegmentIndex:function(){return this.segIndex},interfaces_:function(){return[]},getClass:function(){return mi}}),mi.INSIDE_AREA=-1,t(yi.prototype,{filter:function(n){n instanceof Sn&&this.pts.add(n)},interfaces_:function(){return[fn]},getClass:function(){return yi}}),yi.getPoints=function(){if(1===arguments.length){var n=arguments[0];return n instanceof Sn?fu.singletonList(n):yi.getPoints(n,new _)}if(2===arguments.length){var t=arguments[0],e=arguments[1];return t instanceof Sn?e.add(t):t instanceof dn&&t.apply(new yi(e)),e}},t(xi.prototype,{filter:function(n){(n instanceof Sn||n instanceof Cn||n instanceof Pn)&&this.locations.add(new mi(n,0,n.getCoordinate()))},interfaces_:function(){return[fn]},getClass:function(){return xi}}),xi.getLocations=function(n){var t=new _;return n.apply(new xi(t)),t},t(wi.prototype,{computeContainmentDistance:function(){if(0===arguments.length){var n=new Array(2).fill(null);if(this.computeContainmentDistance(0,n),this.minDistance<=this.terminateDistance)return null;this.computeContainmentDistance(1,n)}else if(2===arguments.length){var t=arguments[0],e=arguments[1],l=1-t,i=vi.getPolygons(this.geom[t]);if(i.size()>0){var r=xi.getLocations(this.geom[l]);if(this.computeContainmentDistance(r,i,e),this.minDistance<=this.terminateDistance)return this.minDistanceLocation[l]=e[0],this.minDistanceLocation[t]=e[1],null}}else if(3===arguments.length)if(arguments[2]instanceof Array&&S(arguments[0],y)&&S(arguments[1],y)){for(var u=arguments[0],s=arguments[1],a=arguments[2],o=0;o<u.size();o++)for(var h=u.get(o),f=0;f<s.size();f++)if(this.computeContainmentDistance(h,s.get(f),a),this.minDistance<=this.terminateDistance)return null}else if(arguments[2]instanceof Array&&arguments[0]instanceof mi&&arguments[1]instanceof Pn){var c=arguments[0],d=arguments[1],g=arguments[2],p=c.getCoordinate();if(I.EXTERIOR!==this.ptLocator.locate(p,d))return this.minDistance=0,g[0]=c,g[1]=new mi(d,p),null}},computeMinDistanceLinesPoints:function(n,t,e){for(var l=0;l<n.size();l++)for(var i=n.get(l),r=0;r<t.size();r++){var u=t.get(r);if(this.computeMinDistance(i,u,e),this.minDistance<=this.terminateDistance)return null}},computeFacetDistance:function(){var n=new Array(2).fill(null),t=je.getLines(this.geom[0]),e=je.getLines(this.geom[1]),l=yi.getPoints(this.geom[0]),i=yi.getPoints(this.geom[1]);return this.computeMinDistanceLines(t,e,n),this.updateMinDistance(n,!1),this.minDistance<=this.terminateDistance?null:(n[0]=null,n[1]=null,this.computeMinDistanceLinesPoints(t,i,n),this.updateMinDistance(n,!1),this.minDistance<=this.terminateDistance?null:(n[0]=null,n[1]=null,this.computeMinDistanceLinesPoints(e,l,n),this.updateMinDistance(n,!0),this.minDistance<=this.terminateDistance?null:(n[0]=null,n[1]=null,this.computeMinDistancePoints(l,i,n),void this.updateMinDistance(n,!1))))},nearestLocations:function(){return this.computeMinDistance(),this.minDistanceLocation},updateMinDistance:function(n,t){return null===n[0]?null:void(t?(this.minDistanceLocation[0]=n[1],this.minDistanceLocation[1]=n[0]):(this.minDistanceLocation[0]=n[0],this.minDistanceLocation[1]=n[1]))},nearestPoints:function(){this.computeMinDistance();var n=[this.minDistanceLocation[0].getCoordinate(),this.minDistanceLocation[1].getCoordinate()];return n},computeMinDistance:function(){if(0===arguments.length){if(null!==this.minDistanceLocation)return null;if(this.minDistanceLocation=new Array(2).fill(null),this.computeContainmentDistance(),this.minDistance<=this.terminateDistance)return null;this.computeFacetDistance()}else if(3===arguments.length)if(arguments[2]instanceof Array&&arguments[0]instanceof Cn&&arguments[1]instanceof Sn){var n=arguments[0],t=arguments[1],e=arguments[2];if(n.getEnvelopeInternal().distance(t.getEnvelopeInternal())>this.minDistance)return null;for(var l=n.getCoordinates(),i=t.getCoordinate(),r=0;r<l.length-1;r++){var u=ft.distancePointLine(i,l[r],l[r+1]);if(u<this.minDistance){this.minDistance=u;var s=new ct(l[r],l[r+1]),a=s.closestPoint(i);e[0]=new mi(n,r,a),e[1]=new mi(t,0,i)}if(this.minDistance<=this.terminateDistance)return null}}else if(arguments[2]instanceof Array&&arguments[0]instanceof Cn&&arguments[1]instanceof Cn){var o=arguments[0],h=arguments[1],f=arguments[2];if(o.getEnvelopeInternal().distance(h.getEnvelopeInternal())>this.minDistance)return null;for(var l=o.getCoordinates(),c=h.getCoordinates(),r=0;r<l.length-1;r++)for(var d=0;d<c.length-1;d++){var u=ft.distanceLineLine(l[r],l[r+1],c[d],c[d+1]);if(u<this.minDistance){this.minDistance=u;var g=new ct(l[r],l[r+1]),p=new ct(c[d],c[d+1]),v=g.closestPoints(p);f[0]=new mi(o,r,v[0]),f[1]=new mi(h,d,v[1])}if(this.minDistance<=this.terminateDistance)return null}}},computeMinDistancePoints:function(n,t,e){for(var l=0;l<n.size();l++)for(var i=n.get(l),r=0;r<t.size();r++){var u=t.get(r),s=i.getCoordinate().distance(u.getCoordinate());if(s<this.minDistance&&(this.minDistance=s,e[0]=new mi(i,0,i.getCoordinate()),e[1]=new mi(u,0,u.getCoordinate())),this.minDistance<=this.terminateDistance)return null}},distance:function(){if(null===this.geom[0]||null===this.geom[1])throw new l("null geometries are not supported");return this.geom[0].isEmpty()||this.geom[1].isEmpty()?0:(this.computeMinDistance(),this.minDistance)},computeMinDistanceLines:function(n,t,e){for(var l=0;l<n.size();l++)for(var i=n.get(l),r=0;r<t.size();r++){var u=t.get(r);if(this.computeMinDistance(i,u,e),this.minDistance<=this.terminateDistance)return null}},interfaces_:function(){return[]},getClass:function(){return wi}}),wi.distance=function(n,t){var e=new wi(n,t);return e.distance()},wi.isWithinDistance=function(n,t,e){var l=new wi(n,t,e);return l.distance()<=e},wi.nearestPoints=function(n,t){var e=new wi(n,t);return e.nearestPoints()};var Cu=Object.freeze({DistanceOp:wi});t(_i.prototype,{getCoordinates:function(){if(null===this.coordinates){for(var n=0,t=0,e=new M,l=this.directedEdges.iterator();l.hasNext();){var i=l.next();i.getEdgeDirection()?n++:t++,e.add(i.getEdge().getLine().getCoordinates(),!1,i.getEdgeDirection())}this.coordinates=e.toCoordinateArray(),t>n&&X.reverse(this.coordinates)}return this.coordinates},toLineString:function(){return this.factory.createLineString(this.getCoordinates())},add:function(n){this.directedEdges.add(n)},interfaces_:function(){return[]},getClass:function(){return _i}}),t(Mi.prototype,{setVisited:function(n){this._isVisited=n},isMarked:function(){return this._isMarked},setData:function(n){this.data=n},getData:function(){return this.data},setMarked:function(n){this._isMarked=n},getContext:function(){return this.data},isVisited:function(){return this._isVisited},setContext:function(n){this.data=n},interfaces_:function(){return[]},getClass:function(){return Mi}}),Mi.getComponentWithVisitedState=function(n,t){for(;n.hasNext();){var e=n.next();if(e.isVisited()===t)return e}return null},Mi.setVisited=function(n,t){for(;n.hasNext();){var e=n.next();e.setVisited(t)}},Mi.setMarked=function(n,t){for(;n.hasNext();){var e=n.next();e.setMarked(t)}},h(Ei,Mi),t(Ei.prototype,{isRemoved:function(){return null===this.parentEdge},compareDirection:function(n){return this.quadrant>n.quadrant?1:this.quadrant<n.quadrant?-1:ft.computeOrientation(n.p0,n.p1,this.p1)},getCoordinate:function(){return this.from.getCoordinate()},print:function(n){var t=this.getClass().getName(),e=t.lastIndexOf("."),l=t.substring(e+1);n.print("  "+l+": "+this.p0+" - "+this.p1+" "+this.quadrant+":"+this.angle)},getDirectionPt:function(){return this.p1},getAngle:function(){return this.angle},compareTo:function(n){var t=n;return this.compareDirection(t)},getFromNode:function(){return this.from},getSym:function(){return this.sym},setEdge:function(n){this.parentEdge=n},remove:function(){this.sym=null,this.parentEdge=null},getEdge:function(){return this.parentEdge},getQuadrant:function(){return this.quadrant},setSym:function(n){this.sym=n},getToNode:function(){return this.to},getEdgeDirection:function(){return this.edgeDirection},interfaces_:function(){return[r]},getClass:function(){return Ei}}),Ei.toEdges=function(n){for(var t=new _,e=n.iterator();e.hasNext();)t.add(e.next().parentEdge);return t},h(bi,Ei),t(bi.prototype,{getNext:function(){return 2!==this.getToNode().getDegree()?null:this.getToNode().getOutEdges().getEdges().get(0)===this.getSym()?this.getToNode().getOutEdges().getEdges().get(1):(c.isTrue(this.getToNode().getOutEdges().getEdges().get(1)===this.getSym()),this.getToNode().getOutEdges().getEdges().get(0))},interfaces_:function(){return[]},getClass:function(){return bi}}),h(Ci,Mi),t(Ci.prototype,{isRemoved:function(){return null===this.dirEdge},setDirectedEdges:function(n,t){this.dirEdge=[n,t],n.setEdge(this),t.setEdge(this),n.setSym(t),t.setSym(n),n.getFromNode().addOutEdge(n),t.getFromNode().addOutEdge(t)},getDirEdge:function(){if(Number.isInteger(arguments[0])){var n=arguments[0];return this.dirEdge[n]}if(arguments[0]instanceof Si){var t=arguments[0];return this.dirEdge[0].getFromNode()===t?this.dirEdge[0]:this.dirEdge[1].getFromNode()===t?this.dirEdge[1]:null}},remove:function(){this.dirEdge=null},getOppositeNode:function(n){return this.dirEdge[0].getFromNode()===n?this.dirEdge[0].getToNode():this.dirEdge[1].getFromNode()===n?this.dirEdge[1].getToNode():null},interfaces_:function(){return[]},getClass:function(){return Ci}}),t(Ii.prototype,{getNextEdge:function(n){var t=this.getIndex(n);return this.outEdges.get(this.getIndex(t+1))},getCoordinate:function(){var n=this.iterator();if(!n.hasNext())return null;var t=n.next();return t.getCoordinate()},iterator:function(){return this.sortEdges(),this.outEdges.iterator()},sortEdges:function(){this.sorted||(fu.sort(this.outEdges),this.sorted=!0)},remove:function(n){this.outEdges.remove(n)},getEdges:function(){return this.sortEdges(),this.outEdges},getNextCWEdge:function(n){var t=this.getIndex(n);return this.outEdges.get(this.getIndex(t-1))},getIndex:function(){if(arguments[0]instanceof Ci){var n=arguments[0];this.sortEdges();for(var t=0;t<this.outEdges.size();t++){var e=this.outEdges.get(t);if(e.getEdge()===n)return t}return-1}if(arguments[0]instanceof Ei){var l=arguments[0];this.sortEdges();for(var t=0;t<this.outEdges.size();t++){var e=this.outEdges.get(t);if(e===l)return t}return-1}if(Number.isInteger(arguments[0])){var i=arguments[0],r=i%this.outEdges.size();return r<0&&(r+=this.outEdges.size()),r}},add:function(n){this.outEdges.add(n),this.sorted=!1},getDegree:function(){return this.outEdges.size()},interfaces_:function(){return[]},getClass:function(){return Ii}}),h(Si,Mi),t(Si.prototype,{isRemoved:function(){return null===this.pt},addOutEdge:function(n){this.deStar.add(n)},getCoordinate:function(){return this.pt},getOutEdges:function(){return this.deStar},remove:function(){if(0===arguments.length)this.pt=null;else if(1===arguments.length){var n=arguments[0];this.deStar.remove(n)}},getIndex:function(n){return this.deStar.getIndex(n)},getDegree:function(){return this.deStar.getDegree()},interfaces_:function(){return[]},getClass:function(){return Si}}),Si.getEdgesBetween=function(n,t){var e=Ei.toEdges(n.getOutEdges().getEdges()),l=new Q(e),i=Ei.toEdges(t.getOutEdges().getEdges());return l.retainAll(i),l},h(Ni,Ci),t(Ni.prototype,{getLine:function(){return this.line},interfaces_:function(){return[]},getClass:function(){return Ni}}),t(Pi.prototype,{find:function(n){return this.nodeMap.get(n)},iterator:function(){return this.nodeMap.values().iterator()},remove:function(n){return this.nodeMap.remove(n)},values:function(){return this.nodeMap.values()},add:function(n){return this.nodeMap.put(n.getCoordinate(),n),n},interfaces_:function(){return[]},getClass:function(){return Pi}}),t(Li.prototype,{findNodesOfDegree:function(n){for(var t=new _,e=this.nodeIterator();e.hasNext();){var l=e.next();l.getDegree()===n&&t.add(l)}return t},dirEdgeIterator:function(){return this.dirEdges.iterator()},edgeIterator:function(){return this.edges.iterator()},remove:function(){if(arguments[0]instanceof Ci){var n=arguments[0];this.remove(n.getDirEdge(0)),this.remove(n.getDirEdge(1)),this.edges.remove(n),n.remove()}else if(arguments[0]instanceof Ei){var t=arguments[0],e=t.getSym();null!==e&&e.setSym(null),t.getFromNode().remove(t),t.remove(),this.dirEdges.remove(t)}else if(arguments[0]instanceof Si){for(var l=arguments[0],i=l.getOutEdges().getEdges(),r=i.iterator();r.hasNext();){var u=r.next(),e=u.getSym();null!==e&&this.remove(e),this.dirEdges.remove(u);var s=u.getEdge();null!==s&&this.edges.remove(s)}this.nodeMap.remove(l.getCoordinate()),l.remove()}},findNode:function(n){return this.nodeMap.find(n)},getEdges:function(){return this.edges},nodeIterator:function(){return this.nodeMap.iterator()},contains:function(){if(arguments[0]instanceof Ci){var n=arguments[0];return this.edges.contains(n)}if(arguments[0]instanceof Ei){var t=arguments[0];return this.dirEdges.contains(t)}},add:function(){if(arguments[0]instanceof Si){var n=arguments[0];this.nodeMap.add(n)}else if(arguments[0]instanceof Ci){var t=arguments[0];this.edges.add(t),this.add(t.getDirEdge(0)),this.add(t.getDirEdge(1))}else if(arguments[0]instanceof Ei){var e=arguments[0];this.dirEdges.add(e)}},getNodes:function(){return this.nodeMap.values()},interfaces_:function(){return[]},getClass:function(){return Li}}),h(Ri,Li),t(Ri.prototype,{addEdge:function(n){if(n.isEmpty())return null;var t=X.removeRepeatedPoints(n.getCoordinates());if(t.length<=1)return null;var e=t[0],l=t[t.length-1],i=this.getNode(e),r=this.getNode(l),u=new bi(i,r,t[1],!0),s=new bi(r,i,t[t.length-2],!1),a=new Ni(n);a.setDirectedEdges(u,s),this.add(a)},getNode:function(n){var t=this.findNode(n);return null===t&&(t=new Si(n),this.add(t)),t},interfaces_:function(){return[]},getClass:function(){return Ri}}),t(Ti.prototype,{buildEdgeStringsForUnprocessedNodes:function(){for(var n=this.graph.getNodes().iterator();n.hasNext();){var t=n.next();t.isMarked()||(c.isTrue(2===t.getDegree()),this.buildEdgeStringsStartingAt(t),t.setMarked(!0))}},buildEdgeStringsForNonDegree2Nodes:function(){for(var n=this.graph.getNodes().iterator();n.hasNext();){var t=n.next();2!==t.getDegree()&&(this.buildEdgeStringsStartingAt(t),t.setMarked(!0))}},buildEdgeStringsForObviousStartNodes:function(){this.buildEdgeStringsForNonDegree2Nodes()},getMergedLineStrings:function(){return this.merge(),this.mergedLineStrings},buildEdgeStringsStartingAt:function(n){for(var t=n.getOutEdges().iterator();t.hasNext();){var e=t.next();e.getEdge().isMarked()||this.edgeStrings.add(this.buildEdgeStringStartingWith(e))}},merge:function(){if(null!==this.mergedLineStrings)return null;Mi.setMarked(this.graph.nodeIterator(),!1),Mi.setMarked(this.graph.edgeIterator(),!1),this.edgeStrings=new _,this.buildEdgeStringsForObviousStartNodes(),this.buildEdgeStringsForIsolatedLoops(),this.mergedLineStrings=new _;for(var n=this.edgeStrings.iterator();n.hasNext();){var t=n.next();this.mergedLineStrings.add(t.toLineString())}},buildEdgeStringStartingWith:function(n){var t=new _i(this.factory),e=n;do{t.add(e),e.getEdge().setMarked(!0),e=e.getNext()}while(null!==e&&e!==n);return t},add:function(){if(arguments[0]instanceof G){var n=arguments[0];n.apply({interfaces_:function(){return[B]},filter:function(n){n instanceof Cn&&this.add(n)}})}else if(S(arguments[0],v)){var t=arguments[0];this.mergedLineStrings=null;for(var e=t.iterator();e.hasNext();){var l=e.next();this.add(l)}}else if(arguments[0]instanceof Cn){var i=arguments[0];null===this.factory&&(this.factory=i.getFactory()),this.graph.addEdge(i)}},buildEdgeStringsForIsolatedLoops:function(){this.buildEdgeStringsForUnprocessedNodes()},interfaces_:function(){return[]},getClass:function(){return Ti}});var Iu=Object.freeze({LineMerger:Ti}),Su=Object.freeze({OverlayOp:ll});h(Oi,Ei),t(Oi.prototype,{getNext:function(){return this.next},isInRing:function(){return null!==this.edgeRing},setRing:function(n){this.edgeRing=n},setLabel:function(n){this.label=n},getLabel:function(){return this.label},setNext:function(n){this.next=n},getRing:function(){return this.edgeRing},interfaces_:function(){return[]},getClass:function(){return Oi}}),h(Ai,Ci),t(Ai.prototype,{getLine:function(){return this.line},interfaces_:function(){return[]},getClass:function(){return Ai}}),t(ki.prototype,{visitInteriorRing:function(n,t){var e=n.getCoordinates(),l=e[0],i=ki.findDifferentPoint(e,l),r=t.findEdgeInSameDirection(l,i),u=t.findEdgeEnd(r),s=null;u.getLabel().getLocation(0,fe.RIGHT)===I.INTERIOR?s=u:u.getSym().getLabel().getLocation(0,fe.RIGHT)===I.INTERIOR&&(s=u.getSym()),c.isTrue(null!==s,"unable to find dirEdge with Interior on RHS"),this.visitLinkedDirectedEdges(s)},visitShellInteriors:function(n,t){if(n instanceof Pn){var e=n;this.visitInteriorRing(e.getExteriorRing(),t)}if(n instanceof Tn)for(var l=n,i=0;i<l.getNumGeometries();i++){var e=l.getGeometryN(i);this.visitInteriorRing(e.getExteriorRing(),t)}},getCoordinate:function(){return this.disconnectedRingcoord},setInteriorEdgesInResult:function(n){
for(var t=n.getEdgeEnds().iterator();t.hasNext();){var e=t.next();e.getLabel().getLocation(0,fe.RIGHT)===I.INTERIOR&&e.setInResult(!0)}},visitLinkedDirectedEdges:function(n){var t=n,e=n;do{c.isTrue(null!==e,"found null Directed Edge"),e.setVisited(!0),e=e.getNext()}while(e!==t)},buildEdgeRings:function(n){for(var t=new _,e=n.iterator();e.hasNext();){var l=e.next();if(l.isInResult()&&null===l.getEdgeRing()){var i=new ve(l,this.geometryFactory);i.linkDirectedEdgesForMinimalEdgeRings();var r=i.buildMinimalRings();t.addAll(r)}}return t},hasUnvisitedShellEdge:function(n){for(var t=0;t<n.size();t++){var e=n.get(t);if(!e.isHole()){var l=e.getEdges(),i=l.get(0);if(i.getLabel().getLocation(0,fe.RIGHT)===I.INTERIOR)for(var r=0;r<l.size();r++)if(i=l.get(r),!i.isVisited())return this.disconnectedRingcoord=i.getCoordinate(),!0}}return!1},isInteriorsConnected:function(){var n=new _;this.geomGraph.computeSplitEdges(n);var t=new Ee(new Re);t.addEdges(n),this.setInteriorEdgesInResult(t),t.linkResultDirectedEdges();var e=this.buildEdgeRings(t.getEdgeEnds());return this.visitShellInteriors(this.geomGraph.getGeometry(),t),!this.hasUnvisitedShellEdge(e)},interfaces_:function(){return[]},getClass:function(){return ki}}),ki.findDifferentPoint=function(n,t){for(var e=0;e<n.length;e++)if(!n[e].equals(t))return n[e];return null},t(Di.prototype,{createEdgeEndForNext:function(n,t,e,l){var i=e.segmentIndex+1;if(i>=n.getNumPoints()&&null===l)return null;var r=n.getCoordinate(i);null!==l&&l.segmentIndex===e.segmentIndex&&(r=l.coord);var u=new we(n,e.coord,r,new de(n.getLabel()));t.add(u)},createEdgeEndForPrev:function(n,t,e,l){var i=e.segmentIndex;if(0===e.dist){if(0===i)return null;i--}var r=n.getCoordinate(i);null!==l&&l.segmentIndex>=i&&(r=l.coord);var u=new de(n.getLabel());u.flip();var s=new we(n,e.coord,r,u);t.add(s)},computeEdgeEnds:function(){if(1===arguments.length){for(var n=arguments[0],t=new _,e=n;e.hasNext();){var l=e.next();this.computeEdgeEnds(l,t)}return t}if(2===arguments.length){var i=arguments[0],r=arguments[1],u=i.getEdgeIntersectionList();u.addEndpoints();var s=u.iterator(),a=null,o=null;if(!s.hasNext())return null;var h=s.next();do{a=o,o=h,h=null,s.hasNext()&&(h=s.next()),null!==o&&(this.createEdgeEndForPrev(i,r,o,a),this.createEdgeEndForNext(i,r,o,h))}while(null!==o)}},interfaces_:function(){return[]},getClass:function(){return Di}}),h(Fi,we),t(Fi.prototype,{insert:function(n){this.edgeEnds.add(n)},print:function(n){n.println("EdgeEndBundle--> Label: "+this.label);for(var t=this.iterator();t.hasNext();){var e=t.next();e.print(n),n.println()}},iterator:function(){return this.edgeEnds.iterator()},getEdgeEnds:function(){return this.edgeEnds},computeLabelOn:function(n,t){for(var e=0,l=!1,i=this.iterator();i.hasNext();){var r=i.next(),u=r.getLabel().getLocation(n);u===I.BOUNDARY&&e++,u===I.INTERIOR&&(l=!0)}var u=I.NONE;l&&(u=I.INTERIOR),e>0&&(u=$e.determineBoundary(t,e)),this.label.setLocation(n,u)},computeLabelSide:function(n,t){for(var e=this.iterator();e.hasNext();){var l=e.next();if(l.getLabel().isArea()){var i=l.getLabel().getLocation(n,t);if(i===I.INTERIOR)return this.label.setLocation(n,t,I.INTERIOR),null;i===I.EXTERIOR&&this.label.setLocation(n,t,I.EXTERIOR)}}},getLabel:function(){return this.label},computeLabelSides:function(n){this.computeLabelSide(n,fe.LEFT),this.computeLabelSide(n,fe.RIGHT)},updateIM:function(n){Qe.updateIM(this.label,n)},computeLabel:function(n){for(var t=!1,e=this.iterator();e.hasNext();){var l=e.next();l.getLabel().isArea()&&(t=!0)}t?this.label=new de(I.NONE,I.NONE,I.NONE):this.label=new de(I.NONE);for(var i=0;i<2;i++)this.computeLabelOn(i,n),t&&this.computeLabelSides(i)},interfaces_:function(){return[]},getClass:function(){return Fi}}),h(Bi,Pe),t(Bi.prototype,{updateIM:function(n){for(var t=this.iterator();t.hasNext();){var e=t.next();e.updateIM(n)}},insert:function(n){var t=this.edgeMap.get(n);null===t?(t=new Fi(n),this.insertEdgeEnd(n,t)):t.insert(n)},interfaces_:function(){return[]},getClass:function(){return Bi}}),h(Gi,ye),t(Gi.prototype,{updateIMFromEdges:function(n){this.edges.updateIM(n)},computeIM:function(n){n.setAtLeastIfValid(this.label.getLocation(0),this.label.getLocation(1),0)},interfaces_:function(){return[]},getClass:function(){return Gi}}),h(zi,Me),t(zi.prototype,{createNode:function(n){return new Gi(n,new Bi)},interfaces_:function(){return[]},getClass:function(){return zi}}),t(qi.prototype,{insertEdgeEnds:function(n){for(var t=n.iterator();t.hasNext();){var e=t.next();this.nodes.add(e)}},getNodeIterator:function(){return this.nodes.iterator()},copyNodesAndLabels:function(n,t){for(var e=n.getNodeIterator();e.hasNext();){var l=e.next(),i=this.nodes.addNode(l.getCoordinate());i.setLabel(t,l.getLabel().getLocation(t))}},build:function(n){this.computeIntersectionNodes(n,0),this.copyNodesAndLabels(n,0);var t=new Di,e=t.computeEdgeEnds(n.getEdgeIterator());this.insertEdgeEnds(e)},computeIntersectionNodes:function(n,t){for(var e=n.getEdgeIterator();e.hasNext();)for(var l=e.next(),i=l.getLabel().getLocation(t),r=l.getEdgeIntersectionList().iterator();r.hasNext();){var u=r.next(),s=this.nodes.addNode(u.coord);i===I.BOUNDARY?s.setLabelBoundary(t):s.getLabel().isNull(t)&&s.setLabel(t,I.INTERIOR)}},interfaces_:function(){return[]},getClass:function(){return qi}}),t(ji.prototype,{isNodeEdgeAreaLabelsConsistent:function(){for(var n=this.nodeGraph.getNodeIterator();n.hasNext();){var t=n.next();if(!t.getEdges().isAreaLabelsConsistent(this.geomGraph))return this.invalidPoint=t.getCoordinate().copy(),!1}return!0},getInvalidPoint:function(){return this.invalidPoint},hasDuplicateRings:function(){for(var n=this.nodeGraph.getNodeIterator();n.hasNext();)for(var t=n.next(),e=t.getEdges().iterator();e.hasNext();){var l=e.next();if(l.getEdgeEnds().size()>1)return this.invalidPoint=l.getEdge().getCoordinate(0),!0}return!1},isNodeConsistentArea:function(){var n=this.geomGraph.computeSelfNodes(this.li,!0,!0);return n.hasProperIntersection()?(this.invalidPoint=n.getProperIntersectionPoint(),!1):(this.nodeGraph.build(this.geomGraph),this.isNodeEdgeAreaLabelsConsistent())},interfaces_:function(){return[]},getClass:function(){return ji}}),t(Ui.prototype,{buildIndex:function(){this.index=new Ut;for(var n=0;n<this.rings.size();n++){var t=this.rings.get(n),e=t.getEnvelopeInternal();this.index.insert(e,t)}},getNestedPoint:function(){return this.nestedPt},isNonNested:function(){this.buildIndex();for(var n=0;n<this.rings.size();n++)for(var t=this.rings.get(n),e=t.getCoordinates(),l=this.index.query(t.getEnvelopeInternal()),i=0;i<l.size();i++){var r=l.get(i),u=r.getCoordinates();if(t!==r&&t.getEnvelopeInternal().intersects(r.getEnvelopeInternal())){var s=Yi.findPtNotNode(e,r,this.graph);if(null!==s){var a=ft.isPointInRing(s,u);if(a)return this.nestedPt=s,!1}}}return!0},add:function(n){this.rings.add(n),this.totalEnv.expandToInclude(n.getEnvelopeInternal())},interfaces_:function(){return[]},getClass:function(){return Ui}}),t(Vi.prototype,{getErrorType:function(){return this.errorType},getMessage:function(){return Vi.errMsg[this.errorType]},getCoordinate:function(){return this.pt},toString:function(){var n="";return null!==this.pt&&(n=" at or near point "+this.pt),this.getMessage()+n},interfaces_:function(){return[]},getClass:function(){return Vi}}),Vi.ERROR=0,Vi.REPEATED_POINT=1,Vi.HOLE_OUTSIDE_SHELL=2,Vi.NESTED_HOLES=3,Vi.DISCONNECTED_INTERIOR=4,Vi.SELF_INTERSECTION=5,Vi.RING_SELF_INTERSECTION=6,Vi.NESTED_SHELLS=7,Vi.DUPLICATE_RINGS=8,Vi.TOO_FEW_POINTS=9,Vi.INVALID_COORDINATE=10,Vi.RING_NOT_CLOSED=11,Vi.errMsg=["Topology Validation Error","Repeated Point","Hole lies outside shell","Holes are nested","Interior is disconnected","Self-intersection","Ring Self-intersection","Nested shells","Duplicate Rings","Too few distinct points in geometry component","Invalid Coordinate","Ring is not closed"],t(Yi.prototype,{checkInvalidCoordinates:function(){if(arguments[0]instanceof Array){for(var n=arguments[0],t=0;t<n.length;t++)if(!Yi.isValid(n[t]))return this.validErr=new Vi(Vi.INVALID_COORDINATE,n[t]),null}else if(arguments[0]instanceof Pn){var e=arguments[0];if(this.checkInvalidCoordinates(e.getExteriorRing().getCoordinates()),null!==this.validErr)return null;for(var t=0;t<e.getNumInteriorRing();t++)if(this.checkInvalidCoordinates(e.getInteriorRingN(t).getCoordinates()),null!==this.validErr)return null}},checkHolesNotNested:function(n,t){for(var e=new Ui(t),l=0;l<n.getNumInteriorRing();l++){var i=n.getInteriorRingN(l);e.add(i)}var r=e.isNonNested();r||(this.validErr=new Vi(Vi.NESTED_HOLES,e.getNestedPoint()))},checkConsistentArea:function(n){var t=new ji(n),e=t.isNodeConsistentArea();return e?void(t.hasDuplicateRings()&&(this.validErr=new Vi(Vi.DUPLICATE_RINGS,t.getInvalidPoint()))):(this.validErr=new Vi(Vi.SELF_INTERSECTION,t.getInvalidPoint()),null)},isValid:function(){return this.checkValid(this.parentGeometry),null===this.validErr},checkShellInsideHole:function(n,t,e){var l=n.getCoordinates(),i=t.getCoordinates(),r=Yi.findPtNotNode(l,t,e);if(null!==r){var u=ft.isPointInRing(r,i);if(!u)return r}var s=Yi.findPtNotNode(i,n,e);if(null!==s){var a=ft.isPointInRing(s,l);return a?s:null}return c.shouldNeverReachHere("points in shell and hole appear to be equal"),null},checkNoSelfIntersectingRings:function(n){for(var t=n.getEdgeIterator();t.hasNext();){var e=t.next();if(this.checkNoSelfIntersectingRing(e.getEdgeIntersectionList()),null!==this.validErr)return null}},checkConnectedInteriors:function(n){var t=new ki(n);t.isInteriorsConnected()||(this.validErr=new Vi(Vi.DISCONNECTED_INTERIOR,t.getCoordinate()))},checkNoSelfIntersectingRing:function(n){for(var t=new an,e=!0,l=n.iterator();l.hasNext();){var i=l.next();if(e)e=!1;else{if(t.contains(i.coord))return this.validErr=new Vi(Vi.RING_SELF_INTERSECTION,i.coord),null;t.add(i.coord)}}},checkHolesInShell:function(n,t){for(var e=n.getExteriorRing(),l=new Ml(e),i=0;i<n.getNumInteriorRing();i++){var r=n.getInteriorRingN(i),u=Yi.findPtNotNode(r.getCoordinates(),e,t);if(null===u)return null;var s=!l.isInside(u);if(s)return this.validErr=new Vi(Vi.HOLE_OUTSIDE_SHELL,u),null}},checkTooFewPoints:function(n){if(n.hasTooFewPoints())return this.validErr=new Vi(Vi.TOO_FEW_POINTS,n.getInvalidPoint()),null},getValidationError:function(){return this.checkValid(this.parentGeometry),this.validErr},checkValid:function(){if(arguments[0]instanceof Sn){var n=arguments[0];this.checkInvalidCoordinates(n.getCoordinates())}else if(arguments[0]instanceof Ln){var t=arguments[0];this.checkInvalidCoordinates(t.getCoordinates())}else if(arguments[0]instanceof Rn){var e=arguments[0];if(this.checkInvalidCoordinates(e.getCoordinates()),null!==this.validErr)return null;if(this.checkClosedRing(e),null!==this.validErr)return null;var l=new $e(0,e);if(this.checkTooFewPoints(l),null!==this.validErr)return null;var i=new at;l.computeSelfNodes(i,!0,!0),this.checkNoSelfIntersectingRings(l)}else if(arguments[0]instanceof Cn){var r=arguments[0];if(this.checkInvalidCoordinates(r.getCoordinates()),null!==this.validErr)return null;var l=new $e(0,r);this.checkTooFewPoints(l)}else if(arguments[0]instanceof Pn){var u=arguments[0];if(this.checkInvalidCoordinates(u),null!==this.validErr)return null;if(this.checkClosedRings(u),null!==this.validErr)return null;var l=new $e(0,u);if(this.checkTooFewPoints(l),null!==this.validErr)return null;if(this.checkConsistentArea(l),null!==this.validErr)return null;if(!this.isSelfTouchingRingFormingHoleValid&&(this.checkNoSelfIntersectingRings(l),null!==this.validErr))return null;if(this.checkHolesInShell(u,l),null!==this.validErr)return null;if(this.checkHolesNotNested(u,l),null!==this.validErr)return null;this.checkConnectedInteriors(l)}else if(arguments[0]instanceof Tn){for(var s=arguments[0],a=0;a<s.getNumGeometries();a++){var o=s.getGeometryN(a);if(this.checkInvalidCoordinates(o),null!==this.validErr)return null;if(this.checkClosedRings(o),null!==this.validErr)return null}var l=new $e(0,s);if(this.checkTooFewPoints(l),null!==this.validErr)return null;if(this.checkConsistentArea(l),null!==this.validErr)return null;if(!this.isSelfTouchingRingFormingHoleValid&&(this.checkNoSelfIntersectingRings(l),null!==this.validErr))return null;for(var a=0;a<s.getNumGeometries();a++){var o=s.getGeometryN(a);if(this.checkHolesInShell(o,l),null!==this.validErr)return null}for(var a=0;a<s.getNumGeometries();a++){var o=s.getGeometryN(a);if(this.checkHolesNotNested(o,l),null!==this.validErr)return null}if(this.checkShellsNotNested(s,l),null!==this.validErr)return null;this.checkConnectedInteriors(l)}else if(arguments[0]instanceof dn)for(var h=arguments[0],a=0;a<h.getNumGeometries();a++){var f=h.getGeometryN(a);if(this.checkValid(f),null!==this.validErr)return null}else if(arguments[0]instanceof G){var c=arguments[0];if(this.validErr=null,c.isEmpty())return null;if(c instanceof Sn)this.checkValid(c);else if(c instanceof Ln)this.checkValid(c);else if(c instanceof Rn)this.checkValid(c);else if(c instanceof Cn)this.checkValid(c);else if(c instanceof Pn)this.checkValid(c);else if(c instanceof Tn)this.checkValid(c);else{if(!(c instanceof dn))throw new UnsupportedOperationException(c.getClass().getName());this.checkValid(c)}}},setSelfTouchingRingFormingHoleValid:function(n){this.isSelfTouchingRingFormingHoleValid=n},checkShellNotNested:function(n,t,e){var l=n.getCoordinates(),i=t.getExteriorRing(),r=i.getCoordinates(),u=Yi.findPtNotNode(l,i,e);if(null===u)return null;var s=ft.isPointInRing(u,r);if(!s)return null;if(t.getNumInteriorRing()<=0)return this.validErr=new Vi(Vi.NESTED_SHELLS,u),null;for(var a=null,o=0;o<t.getNumInteriorRing();o++){var h=t.getInteriorRingN(o);if(a=this.checkShellInsideHole(n,h,e),null===a)return null}this.validErr=new Vi(Vi.NESTED_SHELLS,a)},checkClosedRings:function(n){if(this.checkClosedRing(n.getExteriorRing()),null!==this.validErr)return null;for(var t=0;t<n.getNumInteriorRing();t++)if(this.checkClosedRing(n.getInteriorRingN(t)),null!==this.validErr)return null},checkClosedRing:function(n){if(!n.isClosed()){var t=null;n.getNumPoints()>=1&&(t=n.getCoordinateN(0)),this.validErr=new Vi(Vi.RING_NOT_CLOSED,t)}},checkShellsNotNested:function(n,t){for(var e=0;e<n.getNumGeometries();e++)for(var l=n.getGeometryN(e),i=l.getExteriorRing(),r=0;r<n.getNumGeometries();r++)if(e!==r){var u=n.getGeometryN(r);if(this.checkShellNotNested(i,u,t),null!==this.validErr)return null}},interfaces_:function(){return[]},getClass:function(){return Yi}}),Yi.findPtNotNode=function(n,t,e){for(var l=e.findEdge(t),i=l.getEdgeIntersectionList(),r=0;r<n.length;r++){var u=n[r];if(!i.isIntersection(u))return u}return null},Yi.isValid=function(){if(arguments[0]instanceof G){var n=arguments[0],t=new Yi(n);return t.isValid()}if(arguments[0]instanceof d){var e=arguments[0];return!i.isNaN(e.x)&&(!i.isInfinite(e.x)&&(!i.isNaN(e.y)&&!i.isInfinite(e.y)))}},t(Xi.prototype,{isIncluded:function(){return this._isIncluded},getCoordinates:function(){if(null===this.ringPts){for(var n=new M,t=this.deList.iterator();t.hasNext();){var e=t.next(),l=e.getEdge();Xi.addEdge(l.getLine().getCoordinates(),e.getEdgeDirection(),n)}this.ringPts=n.toCoordinateArray()}return this.ringPts},isIncludedSet:function(){return this._isIncludedSet},isValid:function(){return this.getCoordinates(),!(this.ringPts.length<=3)&&(this.getRing(),Yi.isValid(this.ring))},build:function(n){var t=n;do{this.add(t),t.setRing(this),t=t.getNext(),c.isTrue(null!==t,"found null DE in ring"),c.isTrue(t===n||!t.isInRing(),"found DE already in ring")}while(t!==n)},isOuterHole:function(){return!!this._isHole&&!this.hasShell()},getPolygon:function(){var n=null;if(null!==this.holes){n=new Array(this.holes.size()).fill(null);for(var t=0;t<this.holes.size();t++)n[t]=this.holes.get(t)}var e=this.factory.createPolygon(this.ring,n);return e},isHole:function(){return this._isHole},isProcessed:function(){return this._isProcessed},addHole:function(){if(arguments[0]instanceof Rn){var n=arguments[0];null===this.holes&&(this.holes=new _),this.holes.add(n)}else if(arguments[0]instanceof Xi){var t=arguments[0];t.setShell(this);var e=t.getRing();null===this.holes&&(this.holes=new _),this.holes.add(e)}},setIncluded:function(n){this._isIncluded=n,this._isIncludedSet=!0},getOuterHole:function(){if(this.isHole())return null;for(var n=0;n<this.deList.size();n++){var t=this.deList.get(n),e=t.getSym().getRing();if(e.isOuterHole())return e}return null},computeHole:function(){var n=this.getRing();this._isHole=ft.isCCW(n.getCoordinates())},hasShell:function(){return null!==this.shell},isOuterShell:function(){return null!==this.getOuterHole()},getLineString:function(){return this.getCoordinates(),this.factory.createLineString(this.ringPts)},toString:function(){return ut.toLineString(new Bn(this.getCoordinates()))},getShell:function(){return this.isHole()?this.shell:this},add:function(n){this.deList.add(n)},getRing:function(){if(null!==this.ring)return this.ring;this.getCoordinates(),this.ringPts.length<3&&k.out.println(this.ringPts);try{this.ring=this.factory.createLinearRing(this.ringPts)}catch(n){if(!(n instanceof b))throw n;k.out.println(this.ringPts)}finally{}return this.ring},updateIncluded:function(){if(this.isHole())return null;for(var n=0;n<this.deList.size();n++){var t=this.deList.get(n),e=t.getSym().getRing().getShell();if(null!==e&&e.isIncludedSet())return this.setIncluded(!e.isIncluded()),null}},setShell:function(n){this.shell=n},setProcessed:function(n){this._isProcessed=n},interfaces_:function(){return[]},getClass:function(){return Xi}}),Xi.findDirEdgesInRing=function(n){var t=n,e=new _;do{e.add(t),t=t.getNext(),c.isTrue(null!==t,"found null DE in ring"),c.isTrue(t===n||!t.isInRing(),"found DE already in ring")}while(t!==n);return e},Xi.addEdge=function(n,t,e){if(t)for(var l=0;l<n.length;l++)e.add(n[l],!1);else for(var l=n.length-1;l>=0;l--)e.add(n[l],!1)},Xi.findEdgeRingContaining=function(n,t){for(var e=n.getRing(),l=e.getEnvelopeInternal(),i=e.getCoordinateN(0),r=null,u=null,s=t.iterator();s.hasNext();){var a=s.next(),o=a.getRing(),h=o.getEnvelopeInternal();if(!h.equals(l)&&h.contains(l)){i=X.ptNotInList(e.getCoordinates(),o.getCoordinates());var f=!1;ft.isPointInRing(i,o.getCoordinates())&&(f=!0),f&&(null===r||u.contains(h))&&(r=a,u=r.getRing().getEnvelopeInternal())}}return r},t(Hi.prototype,{compare:function(n,t){var e=n,l=t;return e.getRing().getEnvelope().compareTo(l.getRing().getEnvelope())},interfaces_:function(){return[s]},getClass:function(){return Hi}}),Xi.EnvelopeComparator=Hi,h(Wi,Li),t(Wi.prototype,{findEdgeRing:function(n){var t=new Xi(this.factory);return t.build(n),t},computeDepthParity:function(){if(0===arguments.length)for(;;){var n=null;if(null===n)return null;this.computeDepthParity(n)}else if(1===arguments.length){arguments[0]}},computeNextCWEdges:function(){for(var n=this.nodeIterator();n.hasNext();){var t=n.next();Wi.computeNextCWEdges(t)}},addEdge:function(n){if(n.isEmpty())return null;var t=X.removeRepeatedPoints(n.getCoordinates());if(t.length<2)return null;var e=t[0],l=t[t.length-1],i=this.getNode(e),r=this.getNode(l),u=new Oi(i,r,t[1],!0),s=new Oi(r,i,t[t.length-2],!1),a=new Ai(n);a.setDirectedEdges(u,s),this.add(a)},deleteCutEdges:function(){this.computeNextCWEdges(),Wi.findLabeledEdgeRings(this.dirEdges);for(var n=new _,t=this.dirEdges.iterator();t.hasNext();){var e=t.next();if(!e.isMarked()){var l=e.getSym();if(e.getLabel()===l.getLabel()){e.setMarked(!0),l.setMarked(!0);var i=e.getEdge();n.add(i.getLine())}}}return n},getEdgeRings:function(){this.computeNextCWEdges(),Wi.label(this.dirEdges,-1);var n=Wi.findLabeledEdgeRings(this.dirEdges);this.convertMaximalToMinimalEdgeRings(n);for(var t=new _,e=this.dirEdges.iterator();e.hasNext();){var l=e.next();if(!l.isMarked()&&!l.isInRing()){var i=this.findEdgeRing(l);t.add(i)}}return t},getNode:function(n){var t=this.findNode(n);return null===t&&(t=new Si(n),this.add(t)),t},convertMaximalToMinimalEdgeRings:function(n){for(var t=n.iterator();t.hasNext();){var e=t.next(),l=e.getLabel(),i=Wi.findIntersectionNodes(e,l);if(null!==i)for(var r=i.iterator();r.hasNext();){var u=r.next();Wi.computeNextCCWEdges(u,l)}}},deleteDangles:function(){for(var n=this.findNodesOfDegree(1),t=new Q,e=new vt,l=n.iterator();l.hasNext();)e.push(l.next());for(;!e.isEmpty();){var i=e.pop();Wi.deleteAllEdges(i);for(var r=i.getOutEdges().getEdges(),l=r.iterator();l.hasNext();){var u=l.next();u.setMarked(!0);var s=u.getSym();null!==s&&s.setMarked(!0);var a=u.getEdge();t.add(a.getLine());var o=u.getToNode();1===Wi.getDegreeNonDeleted(o)&&e.push(o)}}return t},interfaces_:function(){return[]},getClass:function(){return Wi}}),Wi.findLabeledEdgeRings=function(n){for(var t=new _,e=1,l=n.iterator();l.hasNext();){var i=l.next();if(!(i.isMarked()||i.getLabel()>=0)){t.add(i);var r=Xi.findDirEdgesInRing(i);Wi.label(r,e),e++}}return t},Wi.getDegreeNonDeleted=function(n){for(var t=n.getOutEdges().getEdges(),e=0,l=t.iterator();l.hasNext();){var i=l.next();i.isMarked()||e++}return e},Wi.deleteAllEdges=function(n){for(var t=n.getOutEdges().getEdges(),e=t.iterator();e.hasNext();){var l=e.next();l.setMarked(!0);var i=l.getSym();null!==i&&i.setMarked(!0)}},Wi.label=function(n,t){for(var e=n.iterator();e.hasNext();){var l=e.next();l.setLabel(t)}},Wi.computeNextCWEdges=function(n){for(var t=n.getOutEdges(),e=null,l=null,i=t.getEdges().iterator();i.hasNext();){var r=i.next();if(!r.isMarked()){if(null===e&&(e=r),null!==l){var u=l.getSym();u.setNext(r)}l=r}}if(null!==l){var u=l.getSym();u.setNext(e)}},Wi.computeNextCCWEdges=function(n,t){for(var e=n.getOutEdges(),l=null,i=null,r=e.getEdges(),u=r.size()-1;u>=0;u--){var s=r.get(u),a=s.getSym(),o=null;s.getLabel()===t&&(o=s);var h=null;a.getLabel()===t&&(h=a),null===o&&null===h||(null!==h&&(i=h),null!==o&&(null!==i&&(i.setNext(o),i=null),null===l&&(l=o)))}null!==i&&(c.isTrue(null!==l),i.setNext(l))},Wi.getDegree=function(n,t){for(var e=n.getOutEdges().getEdges(),l=0,i=e.iterator();i.hasNext();){var r=i.next();r.getLabel()===t&&l++}return l},Wi.findIntersectionNodes=function(n,t){var e=n,l=null;do{var i=e.getFromNode();Wi.getDegree(i,t)>1&&(null===l&&(l=new _),l.add(i)),e=e.getNext(),c.isTrue(null!==e,"found null DE in ring"),c.isTrue(e===n||!e.isInRing(),"found DE already in ring")}while(e!==n);return l},t(Zi.prototype,{getGeometry:function(){return null===this.geomFactory&&(this.geomFactory=new it),this.polygonize(),this.extractOnlyPolygonal?this.geomFactory.buildGeometry(this.polyList):this.geomFactory.createGeometryCollection(it.toGeometryArray(this.polyList))},getInvalidRingLines:function(){return this.polygonize(),this.invalidRingLines},findValidRings:function(n,t,e){for(var l=n.iterator();l.hasNext();){var i=l.next();i.isValid()?t.add(i):e.add(i.getLineString())}},polygonize:function(){if(null!==this.polyList)return null;if(this.polyList=new _,null===this.graph)return null;this.dangles=this.graph.deleteDangles(),this.cutEdges=this.graph.deleteCutEdges();var n=this.graph.getEdgeRings(),t=new _;this.invalidRingLines=new _,this.isCheckingRingsValid?this.findValidRings(n,t,this.invalidRingLines):t=n,this.findShellsAndHoles(t),Zi.assignHolesToShells(this.holeList,this.shellList),fu.sort(this.shellList,new Xi.EnvelopeComparator);var e=!0;this.extractOnlyPolygonal&&(Zi.findDisjointShells(this.shellList),e=!1),this.polyList=Zi.extractPolygons(this.shellList,e)},getDangles:function(){return this.polygonize(),this.dangles},getCutEdges:function(){return this.polygonize(),this.cutEdges},getPolygons:function(){return this.polygonize(),this.polyList},add:function(){if(S(arguments[0],v))for(var n=arguments[0],t=n.iterator();t.hasNext();){var e=t.next();this.add(e)}else if(arguments[0]instanceof Cn){var l=arguments[0];this.geomFactory=l.getFactory(),null===this.graph&&(this.graph=new Wi(this.geomFactory)),this.graph.addEdge(l)}else if(arguments[0]instanceof G){var i=arguments[0];i.apply(this.lineStringAdder)}},setCheckRingsValid:function(n){this.isCheckingRingsValid=n},findShellsAndHoles:function(n){this.holeList=new _,this.shellList=new _;for(var t=n.iterator();t.hasNext();){var e=t.next();e.computeHole(),e.isHole()?this.holeList.add(e):this.shellList.add(e)}},interfaces_:function(){return[]},getClass:function(){return Zi}}),Zi.findOuterShells=function(n){for(var t=n.iterator();t.hasNext();){var e=t.next(),l=e.getOuterHole();null===l||l.isProcessed()||(e.setIncluded(!0),l.setProcessed(!0))}},Zi.extractPolygons=function(n,t){for(var e=new _,l=n.iterator();l.hasNext();){var i=l.next();(t||i.isIncluded())&&e.add(i.getPolygon())}return e},Zi.assignHolesToShells=function(n,t){for(var e=n.iterator();e.hasNext();){var l=e.next();Zi.assignHoleToShell(l,t)}},Zi.assignHoleToShell=function(n,t){var e=Xi.findEdgeRingContaining(n,t);null!==e&&e.addHole(n)},Zi.findDisjointShells=function(n){Zi.findOuterShells(n);var t=null;do{t=!1;for(var e=n.iterator();e.hasNext();){var l=e.next();l.isIncludedSet()||(l.updateIncluded(),l.isIncludedSet()||(t=!0))}}while(t)},t(Ji.prototype,{filter:function(n){n instanceof Cn&&this.p.add(n)},interfaces_:function(){return[B]},getClass:function(){return Ji}}),Zi.LineStringAdder=Ji;var Nu=Object.freeze({Polygonizer:Zi});t(Ki.prototype,{insertEdgeEnds:function(n){for(var t=n.iterator();t.hasNext();){var e=t.next();this.nodes.add(e)}},computeProperIntersectionIM:function(n,t){var e=this.arg[0].getGeometry().getDimension(),l=this.arg[1].getGeometry().getDimension(),i=n.hasProperIntersection(),r=n.hasProperInteriorIntersection();2===e&&2===l?i&&t.setAtLeast("212101212"):2===e&&1===l?(i&&t.setAtLeast("FFF0FFFF2"),r&&t.setAtLeast("1FFFFF1FF")):1===e&&2===l?(i&&t.setAtLeast("F0FFFFFF2"),r&&t.setAtLeast("1F1FFFFFF")):1===e&&1===l&&r&&t.setAtLeast("0FFFFFFFF")},labelIsolatedEdges:function(n,t){for(var e=this.arg[n].getEdgeIterator();e.hasNext();){var l=e.next();l.isIsolated()&&(this.labelIsolatedEdge(l,t,this.arg[t].getGeometry()),this.isolatedEdges.add(l))}},labelIsolatedEdge:function(n,t,e){if(e.getDimension()>0){var l=this.ptLocator.locate(n.getCoordinate(),e);n.getLabel().setAllLocations(t,l)}else n.getLabel().setAllLocations(t,I.EXTERIOR)},computeIM:function(){var n=new dt;if(n.set(I.EXTERIOR,I.EXTERIOR,2),!this.arg[0].getGeometry().getEnvelopeInternal().intersects(this.arg[1].getGeometry().getEnvelopeInternal()))return this.computeDisjointIM(n),n;this.arg[0].computeSelfNodes(this.li,!1),this.arg[1].computeSelfNodes(this.li,!1);var t=this.arg[0].computeEdgeIntersections(this.arg[1],this.li,!1);this.computeIntersectionNodes(0),this.computeIntersectionNodes(1),this.copyNodesAndLabels(0),this.copyNodesAndLabels(1),this.labelIsolatedNodes(),this.computeProperIntersectionIM(t,n);var e=new Di,l=e.computeEdgeEnds(this.arg[0].getEdgeIterator());this.insertEdgeEnds(l);var i=e.computeEdgeEnds(this.arg[1].getEdgeIterator());return this.insertEdgeEnds(i),this.labelNodeEdges(),this.labelIsolatedEdges(0,1),this.labelIsolatedEdges(1,0),this.updateIM(n),n},labelNodeEdges:function(){for(var n=this.nodes.iterator();n.hasNext();){var t=n.next();t.getEdges().computeLabelling(this.arg)}},copyNodesAndLabels:function(n){for(var t=this.arg[n].getNodeIterator();t.hasNext();){var e=t.next(),l=this.nodes.addNode(e.getCoordinate());l.setLabel(n,e.getLabel().getLocation(n))}},labelIntersectionNodes:function(n){for(var t=this.arg[n].getEdgeIterator();t.hasNext();)for(var e=t.next(),l=e.getLabel().getLocation(n),i=e.getEdgeIntersectionList().iterator();i.hasNext();){var r=i.next(),u=this.nodes.find(r.coord);u.getLabel().isNull(n)&&(l===I.BOUNDARY?u.setLabelBoundary(n):u.setLabel(n,I.INTERIOR))}},labelIsolatedNode:function(n,t){var e=this.ptLocator.locate(n.getCoordinate(),this.arg[t].getGeometry());n.getLabel().setAllLocations(t,e)},computeIntersectionNodes:function(n){for(var t=this.arg[n].getEdgeIterator();t.hasNext();)for(var e=t.next(),l=e.getLabel().getLocation(n),i=e.getEdgeIntersectionList().iterator();i.hasNext();){var r=i.next(),u=this.nodes.addNode(r.coord);l===I.BOUNDARY?u.setLabelBoundary(n):u.getLabel().isNull(n)&&u.setLabel(n,I.INTERIOR)}},labelIsolatedNodes:function(){for(var n=this.nodes.iterator();n.hasNext();){var t=n.next(),e=t.getLabel();c.isTrue(e.getGeometryCount()>0,"node with empty label found"),t.isIsolated()&&(e.isNull(0)?this.labelIsolatedNode(t,0):this.labelIsolatedNode(t,1))}},updateIM:function(n){for(var t=this.isolatedEdges.iterator();t.hasNext();){var e=t.next();e.updateIM(n)}for(var l=this.nodes.iterator();l.hasNext();){var i=l.next();i.updateIM(n),i.updateIMFromEdges(n)}},computeDisjointIM:function(n){var t=this.arg[0].getGeometry();t.isEmpty()||(n.set(I.INTERIOR,I.EXTERIOR,t.getDimension()),n.set(I.BOUNDARY,I.EXTERIOR,t.getBoundaryDimension()));var e=this.arg[1].getGeometry();e.isEmpty()||(n.set(I.EXTERIOR,I.INTERIOR,e.getDimension()),n.set(I.EXTERIOR,I.BOUNDARY,e.getBoundaryDimension()))},interfaces_:function(){return[]},getClass:function(){return Ki}}),t(Qi.prototype,{isContainedInBoundary:function(n){if(n instanceof Pn)return!1;if(n instanceof Sn)return this.isPointContainedInBoundary(n);if(n instanceof Cn)return this.isLineStringContainedInBoundary(n);for(var t=0;t<n.getNumGeometries();t++){var e=n.getGeometryN(t);if(!this.isContainedInBoundary(e))return!1}return!0},isLineSegmentContainedInBoundary:function(n,t){if(n.equals(t))return this.isPointContainedInBoundary(n);if(n.x===t.x){if(n.x===this.rectEnv.getMinX()||n.x===this.rectEnv.getMaxX())return!0}else if(n.y===t.y&&(n.y===this.rectEnv.getMinY()||n.y===this.rectEnv.getMaxY()))return!0;return!1},isLineStringContainedInBoundary:function(n){for(var t=n.getCoordinateSequence(),e=new d,l=new d,i=0;i<t.size()-1;i++)if(t.getCoordinate(i,e),t.getCoordinate(i+1,l),!this.isLineSegmentContainedInBoundary(e,l))return!1;return!0},isPointContainedInBoundary:function(){if(arguments[0]instanceof Sn){var n=arguments[0];return this.isPointContainedInBoundary(n.getCoordinate())}if(arguments[0]instanceof d){var t=arguments[0];return t.x===this.rectEnv.getMinX()||t.x===this.rectEnv.getMaxX()||t.y===this.rectEnv.getMinY()||t.y===this.rectEnv.getMaxY()}},contains:function(n){return!!this.rectEnv.contains(n.getEnvelopeInternal())&&!this.isContainedInBoundary(n)},interfaces_:function(){return[]},getClass:function(){return Qi}}),Qi.contains=function(n,t){var e=new Qi(n);return e.contains(t)},t($i.prototype,{intersects:function(n,t){var e=new E(n,t);if(!this.rectEnv.intersects(e))return!1;if(this.rectEnv.intersects(n))return!0;if(this.rectEnv.intersects(t))return!0;if(n.compareTo(t)>0){var l=n;n=t,t=l}var i=!1;return t.y>n.y&&(i=!0),i?this.li.computeIntersection(n,t,this.diagDown0,this.diagDown1):this.li.computeIntersection(n,t,this.diagUp0,this.diagUp1),!!this.li.hasIntersection()},interfaces_:function(){return[]},getClass:function(){return $i}}),t(nr.prototype,{applyTo:function(n){for(var t=0;t<n.getNumGeometries()&&!this._isDone;t++){var e=n.getGeometryN(t);if(e instanceof dn)this.applyTo(e);else if(this.visit(e),this.isDone())return this._isDone=!0,null}},interfaces_:function(){return[]},getClass:function(){return nr}}),t(tr.prototype,{intersects:function(n){if(!this.rectEnv.intersects(n.getEnvelopeInternal()))return!1;var t=new er(this.rectEnv);if(t.applyTo(n),t.intersects())return!0;var e=new lr(this.rectangle);if(e.applyTo(n),e.containsPoint())return!0;var l=new ir(this.rectangle);return l.applyTo(n),!!l.intersects()},interfaces_:function(){return[]},getClass:function(){return tr}}),tr.intersects=function(n,t){var e=new tr(n);return e.intersects(t)},h(er,nr),t(er.prototype,{isDone:function(){return this._intersects===!0},visit:function(n){var t=n.getEnvelopeInternal();return this.rectEnv.intersects(t)?this.rectEnv.contains(t)?(this._intersects=!0,null):t.getMinX()>=this.rectEnv.getMinX()&&t.getMaxX()<=this.rectEnv.getMaxX()?(this._intersects=!0,null):t.getMinY()>=this.rectEnv.getMinY()&&t.getMaxY()<=this.rectEnv.getMaxY()?(this._intersects=!0,null):void 0:null},intersects:function(){return this._intersects},interfaces_:function(){return[]},getClass:function(){return er}}),h(lr,nr),t(lr.prototype,{isDone:function(){return this._containsPoint===!0},
visit:function(n){if(!(n instanceof Pn))return null;var t=n.getEnvelopeInternal();if(!this.rectEnv.intersects(t))return null;for(var e=new d,l=0;l<4;l++)if(this.rectSeq.getCoordinate(l,e),t.contains(e)&&Ne.containsPointInPolygon(e,n))return this._containsPoint=!0,null},containsPoint:function(){return this._containsPoint},interfaces_:function(){return[]},getClass:function(){return lr}}),h(ir,nr),t(ir.prototype,{intersects:function(){return this.hasIntersection},isDone:function(){return this.hasIntersection===!0},visit:function(n){var t=n.getEnvelopeInternal();if(!this.rectEnv.intersects(t))return null;var e=je.getLines(n);this.checkIntersectionWithLineStrings(e)},checkIntersectionWithLineStrings:function(n){for(var t=n.iterator();t.hasNext();){var e=t.next();if(this.checkIntersectionWithSegments(e),this.hasIntersection)return null}},checkIntersectionWithSegments:function(n){for(var t=n.getCoordinateSequence(),e=1;e<t.size();e++)if(t.getCoordinate(e-1,this.p0),t.getCoordinate(e,this.p1),this.rectIntersector.intersects(this.p0,this.p1))return this.hasIntersection=!0,null},interfaces_:function(){return[]},getClass:function(){return ir}}),h(rr,nl),t(rr.prototype,{getIntersectionMatrix:function(){return this._relate.computeIM()},interfaces_:function(){return[]},getClass:function(){return rr}}),rr.covers=function(n,t){return!!n.getEnvelopeInternal().covers(t.getEnvelopeInternal())&&(!!n.isRectangle()||rr.relate(n,t).isCovers())},rr.intersects=function(n,t){return!!n.getEnvelopeInternal().intersects(t.getEnvelopeInternal())&&(n.isRectangle()?tr.intersects(n,t):t.isRectangle()?tr.intersects(t,n):rr.relate(n,t).isIntersects())},rr.touches=function(n,t){return!!n.getEnvelopeInternal().intersects(t.getEnvelopeInternal())&&rr.relate(n,t).isTouches(n.getDimension(),t.getDimension())},rr.within=function(n,t){return t.contains(n)},rr.coveredBy=function(n,t){return rr.covers(t,n)},rr.relate=function(){if(2===arguments.length){var n=arguments[0],t=arguments[1],e=new rr(n,t),l=e.getIntersectionMatrix();return l}if(3===arguments.length){if("string"==typeof arguments[2]&&arguments[0]instanceof G&&arguments[1]instanceof G){var i=arguments[0],r=arguments[1],u=arguments[2];return rr.relateWithCheck(i,r).matches(u)}if(S(arguments[2],q)&&arguments[0]instanceof G&&arguments[1]instanceof G){var s=arguments[0],a=arguments[1],o=arguments[2],e=new rr(s,a,o),l=e.getIntersectionMatrix();return l}}},rr.overlaps=function(n,t){return!!n.getEnvelopeInternal().intersects(t.getEnvelopeInternal())&&rr.relate(n,t).isOverlaps(n.getDimension(),t.getDimension())},rr.disjoint=function(n,t){return!n.intersects(t)},rr.relateWithCheck=function(n,t){return n.checkNotGeometryCollection(n),n.checkNotGeometryCollection(t),rr.relate(n,t)},rr.crosses=function(n,t){return!!n.getEnvelopeInternal().intersects(t.getEnvelopeInternal())&&rr.relate(n,t).isCrosses(n.getDimension(),t.getDimension())},rr.contains=function(n,t){return!!n.getEnvelopeInternal().contains(t.getEnvelopeInternal())&&(n.isRectangle()?Qi.contains(n,t):rr.relate(n,t).isContains())};var Pu=Object.freeze({RelateOp:rr});t(ur.prototype,{extractElements:function(n,t){if(null===n)return null;for(var e=0;e<n.getNumGeometries();e++){var l=n.getGeometryN(e);this.skipEmpty&&l.isEmpty()||t.add(l)}},combine:function(){for(var n=new _,t=this.inputGeoms.iterator();t.hasNext();){var e=t.next();this.extractElements(e,n)}return 0===n.size()?null!==this.geomFactory?this.geomFactory.createGeometryCollection(null):null:this.geomFactory.buildGeometry(n)},interfaces_:function(){return[]},getClass:function(){return ur}}),ur.combine=function(){if(1===arguments.length){var n=arguments[0],t=new ur(n);return t.combine()}if(2===arguments.length){var e=arguments[0],l=arguments[1],t=new ur(ur.createList(e,l));return t.combine()}if(3===arguments.length){var i=arguments[0],r=arguments[1],u=arguments[2],t=new ur(ur.createList(i,r,u));return t.combine()}},ur.extractFactory=function(n){return n.isEmpty()?null:n.iterator().next().getFactory()},ur.createList=function(){if(2===arguments.length){var n=arguments[0],t=arguments[1],e=new _;return e.add(n),e.add(t),e}if(3===arguments.length){var l=arguments[0],i=arguments[1],r=arguments[2],e=new _;return e.add(l),e.add(i),e.add(r),e}},t(sr.prototype,{union:function(){for(var n=new Pt,t=new an,e=0;e<this.pointGeom.getNumGeometries();e++){var l=this.pointGeom.getGeometryN(e),i=l.getCoordinate(),r=n.locate(i,this.otherGeom);r===I.EXTERIOR&&t.add(i)}if(0===t.size())return this.otherGeom;var u=null,s=X.toCoordinateArray(t);return u=1===s.length?this.geomFact.createPoint(s[0]):this.geomFact.createMultiPointFromCoords(s),ur.combine(u,this.otherGeom)},interfaces_:function(){return[]},getClass:function(){return sr}}),sr.union=function(n,t){var e=new sr(n,t);return e.union()},t(ar.prototype,{filter:function(n){this.sortIndex!==-1&&n.getSortIndex()!==this.sortIndex||this.comps.add(n)},interfaces_:function(){return[fn]},getClass:function(){return ar}}),ar.extract=function(){if(2===arguments.length){var n=arguments[0],t=arguments[1];return ar.extract(n,t,new _)}if(3===arguments.length){var e=arguments[0],l=arguments[1],i=arguments[2];return e.getSortIndex()===l?i.add(e):e instanceof dn&&e.apply(new ar(l,i)),i}},t(or.prototype,{reduceToGeometries:function(n){for(var t=new _,e=n.iterator();e.hasNext();){var l=e.next(),i=null;S(l,y)?i=this.unionTree(l):l instanceof G&&(i=l),t.add(i)}return t},extractByEnvelope:function(n,t,e){for(var l=new _,i=0;i<t.getNumGeometries();i++){var r=t.getGeometryN(i);r.getEnvelopeInternal().intersects(n)?l.add(r):e.add(r)}return this.geomFactory.buildGeometry(l)},unionOptimized:function(n,t){var e=n.getEnvelopeInternal(),l=t.getEnvelopeInternal();if(!e.intersects(l)){var i=ur.combine(n,t);return i}if(n.getNumGeometries()<=1&&t.getNumGeometries()<=1)return this.unionActual(n,t);var r=e.intersection(l);return this.unionUsingEnvelopeIntersection(n,t,r)},union:function(){if(null===this.inputPolys)throw new IllegalStateException("union() method cannot be called twice");if(this.inputPolys.isEmpty())return null;this.geomFactory=this.inputPolys.iterator().next().getFactory();for(var n=new Ut(or.STRTREE_NODE_CAPACITY),t=this.inputPolys.iterator();t.hasNext();){var e=t.next();n.insert(e.getEnvelopeInternal(),e)}this.inputPolys=null;var l=n.itemsTree(),i=this.unionTree(l);return i},binaryUnion:function(){if(1===arguments.length){var n=arguments[0];return this.binaryUnion(n,0,n.size())}if(3===arguments.length){var t=arguments[0],e=arguments[1],l=arguments[2];if(l-e<=1){var i=or.getGeometry(t,e);return this.unionSafe(i,null)}if(l-e===2)return this.unionSafe(or.getGeometry(t,e),or.getGeometry(t,e+1));var r=Math.trunc((l+e)/2),i=this.binaryUnion(t,e,r),u=this.binaryUnion(t,r,l);return this.unionSafe(i,u)}},repeatedUnion:function(n){for(var t=null,e=n.iterator();e.hasNext();){var l=e.next();t=null===t?l.copy():t.union(l)}return t},unionSafe:function(n,t){return null===n&&null===t?null:null===n?t.copy():null===t?n.copy():this.unionOptimized(n,t)},unionActual:function(n,t){return or.restrictToPolygons(n.union(t))},unionTree:function(n){var t=this.reduceToGeometries(n),e=this.binaryUnion(t);return e},unionUsingEnvelopeIntersection:function(n,t,e){var l=new _,i=this.extractByEnvelope(e,n,l),r=this.extractByEnvelope(e,t,l),u=this.unionActual(i,r);l.add(u);var s=ur.combine(l);return s},bufferUnion:function(){if(1===arguments.length){var n=arguments[0],t=n.get(0).getFactory(),e=t.buildGeometry(n),l=e.buffer(0);return l}if(2===arguments.length){var i=arguments[0],r=arguments[1],t=i.getFactory(),e=t.createGeometryCollection([i,r]),l=e.buffer(0);return l}},interfaces_:function(){return[]},getClass:function(){return or}}),or.restrictToPolygons=function(n){if(S(n,Nn))return n;var t=vi.getPolygons(n);return 1===t.size()?t.get(0):n.getFactory().createMultiPolygon(it.toPolygonArray(t))},or.getGeometry=function(n,t){return t>=n.size()?null:n.get(t)},or.union=function(n){var t=new or(n);return t.union()},or.STRTREE_NODE_CAPACITY=4,t(hr.prototype,{unionNoOpt:function(n){var t=this.geomFact.createPoint();return rl.overlayOp(n,t,ll.UNION)},unionWithNull:function(n,t){return null===n&&null===t?null:null===t?n:null===n?t:n.union(t)},extract:function(){if(S(arguments[0],v))for(var n=arguments[0],t=n.iterator();t.hasNext();){var e=t.next();this.extract(e)}else if(arguments[0]instanceof G){var l=arguments[0];null===this.geomFact&&(this.geomFact=l.getFactory()),ar.extract(l,G.SORTINDEX_POLYGON,this.polygons),ar.extract(l,G.SORTINDEX_LINESTRING,this.lines),ar.extract(l,G.SORTINDEX_POINT,this.points)}},union:function n(){if(null===this.geomFact)return null;var t=null;if(this.points.size()>0){var e=this.geomFact.buildGeometry(this.points);t=this.unionNoOpt(e)}var l=null;if(this.lines.size()>0){var i=this.geomFact.buildGeometry(this.lines);l=this.unionNoOpt(i)}var r=null;this.polygons.size()>0&&(r=or.union(this.polygons));var u=this.unionWithNull(l,r),n=null;return n=null===t?u:null===u?t:sr.union(t,u),null===n?this.geomFact.createGeometryCollection():n},interfaces_:function(){return[]},getClass:function(){return hr}}),hr.union=function(){if(1===arguments.length){if(S(arguments[0],v)){var n=arguments[0],t=new hr(n);return t.union()}if(arguments[0]instanceof G){var e=arguments[0],t=new hr(e);return t.union()}}else if(2===arguments.length){var l=arguments[0],i=arguments[1],t=new hr(l,i);return t.union()}};var Lu=Object.freeze({UnaryUnionOp:hr}),Ru=Object.freeze({IsValidOp:Yi,ConsistentAreaTester:ji}),Tu=Object.freeze({BoundaryOp:pn,IsSimpleOp:Wl,buffer:bu,distance:Cu,linemerge:Iu,overlay:Su,polygonize:Nu,relate:Pu,union:Lu,valid:Ru});h(fr,On.CoordinateOperation),t(fr.prototype,{editCoordinates:function(n,t){if(0===n.length)return null;for(var e=new Array(n.length).fill(null),l=0;l<n.length;l++){var i=new d(n[l]);this.targetPM.makePrecise(i),e[l]=i}var r=new M(e,!1),u=r.toCoordinateArray(),s=0;t instanceof Cn&&(s=2),t instanceof Rn&&(s=4);var a=e;return this.removeCollapsed&&(a=null),u.length<s?a:u},interfaces_:function(){return[]},getClass:function(){return fr}}),t(cr.prototype,{fixPolygonalTopology:function(n){var t=n;this.changePrecisionModel||(t=this.changePM(n,this.targetPM));var e=t.buffer(0),l=e;return this.changePrecisionModel||(l=this.changePM(e,n.getPrecisionModel())),l},reducePointwise:function(n){var t=null;if(this.changePrecisionModel){var e=this.createFactory(n.getFactory(),this.targetPM);t=new On(e)}else t=new On;var l=this.removeCollapsed;n.getDimension()>=2&&(l=!0);var i=t.edit(n,new fr(this.targetPM,l));return i},changePM:function(n,t){var e=this.createEditor(n.getFactory(),t);return e.edit(n,new On.NoOpGeometryOperation)},setRemoveCollapsedComponents:function(n){this.removeCollapsed=n},createFactory:function(n,t){var e=new it(t,n.getSRID(),n.getCoordinateSequenceFactory());return e},setChangePrecisionModel:function(n){this.changePrecisionModel=n},reduce:function(n){var t=this.reducePointwise(n);return this.isPointwise?t:S(t,Nn)?t.isValid()?t:this.fixPolygonalTopology(t):t},setPointwise:function(n){this.isPointwise=n},createEditor:function(n,t){if(n.getPrecisionModel()===t)return new On;var e=this.createFactory(n,t),l=new On(e);return l},interfaces_:function(){return[]},getClass:function(){return cr}}),cr.reduce=function(n,t){var e=new cr(t);return e.reduce(n)},cr.reducePointwise=function(n,t){var e=new cr(t);return e.setPointwise(!0),e.reduce(n)};var Ou=Object.freeze({GeometryPrecisionReducer:cr});t(dr.prototype,{simplifySection:function(n,t){if(n+1===t)return null;this.seg.p0=this.pts[n],this.seg.p1=this.pts[t];for(var e=-1,l=n,i=n+1;i<t;i++){var r=this.seg.distance(this.pts[i]);r>e&&(e=r,l=i)}if(e<=this.distanceTolerance)for(var i=n+1;i<t;i++)this.usePt[i]=!1;else this.simplifySection(n,l),this.simplifySection(l,t)},setDistanceTolerance:function(n){this.distanceTolerance=n},simplify:function(){this.usePt=new Array(this.pts.length).fill(null);for(var n=0;n<this.pts.length;n++)this.usePt[n]=!0;this.simplifySection(0,this.pts.length-1);for(var t=new M,n=0;n<this.pts.length;n++)this.usePt[n]&&t.add(new d(this.pts[n]));return t.toCoordinateArray()},interfaces_:function(){return[]},getClass:function(){return dr}}),dr.simplify=function(n,t){var e=new dr(n);return e.setDistanceTolerance(t),e.simplify()},t(gr.prototype,{setEnsureValid:function(n){this.isEnsureValidTopology=n},getResultGeometry:function(){return this.inputGeom.isEmpty()?this.inputGeom.copy():new pr(this.isEnsureValidTopology,this.distanceTolerance).transform(this.inputGeom)},setDistanceTolerance:function(n){if(n<0)throw new l("Tolerance must be non-negative");this.distanceTolerance=n},interfaces_:function(){return[]},getClass:function(){return gr}}),gr.simplify=function(n,t){var e=new gr(n);return e.setDistanceTolerance(t),e.getResultGeometry()},h(pr,wt),t(pr.prototype,{transformPolygon:function(n,t){if(n.isEmpty())return null;var e=wt.prototype.transformPolygon.call(this,n,t);return t instanceof Tn?e:this.createValidArea(e)},createValidArea:function(n){return this.isEnsureValidTopology?n.buffer(0):n},transformCoordinates:function(n,t){var e=n.toCoordinateArray(),l=null;return l=0===e.length?new Array(0).fill(null):dr.simplify(e,this.distanceTolerance),this.factory.getCoordinateSequenceFactory().create(l)},transformMultiPolygon:function(n,t){var e=wt.prototype.transformMultiPolygon.call(this,n,t);return this.createValidArea(e)},transformLinearRing:function(n,t){var e=t instanceof Pn,l=wt.prototype.transformLinearRing.call(this,n,t);return!e||l instanceof Rn?l:null},interfaces_:function(){return[]},getClass:function(){return pr}}),gr.DPTransformer=pr,h(vr,ct),t(vr.prototype,{getIndex:function(){return this.index},getParent:function(){return this.parent},interfaces_:function(){return[]},getClass:function(){return vr}}),t(mr.prototype,{addToResult:function(n){this.resultSegs.add(n)},asLineString:function(){return this.parentLine.getFactory().createLineString(mr.extractCoordinates(this.resultSegs))},getResultSize:function(){var n=this.resultSegs.size();return 0===n?0:n+1},getParent:function(){return this.parentLine},getSegment:function(n){return this.segs[n]},getParentCoordinates:function(){return this.parentLine.getCoordinates()},getMinimumSize:function(){return this.minimumSize},asLinearRing:function(){return this.parentLine.getFactory().createLinearRing(mr.extractCoordinates(this.resultSegs))},getSegments:function(){return this.segs},init:function(){var n=this.parentLine.getCoordinates();this.segs=new Array(n.length-1).fill(null);for(var t=0;t<n.length-1;t++){var e=new vr(n[t],n[t+1],this.parentLine,t);this.segs[t]=e}},getResultCoordinates:function(){return mr.extractCoordinates(this.resultSegs)},interfaces_:function(){return[]},getClass:function(){return mr}}),mr.extractCoordinates=function(n){for(var t=new Array(n.size()+1).fill(null),e=null,l=0;l<n.size();l++)e=n.get(l),t[l]=e.p0;return t[t.length-1]=e.p1,t},t(yr.prototype,{remove:function(n){this.index.remove(new E(n.p0,n.p1),n)},add:function(){if(arguments[0]instanceof mr)for(var n=arguments[0],t=n.getSegments(),e=0;e<t.length;e++){var l=t[e];this.add(l)}else if(arguments[0]instanceof ct){var i=arguments[0];this.index.insert(new E(i.p0,i.p1),i)}},query:function(n){var t=new E(n.p0,n.p1),e=new xr(n);this.index.query(t,e);var l=e.getItems();return l},interfaces_:function(){return[]},getClass:function(){return yr}}),t(xr.prototype,{visitItem:function(n){var t=n;E.intersects(t.p0,t.p1,this.querySeg.p0,this.querySeg.p1)&&this.items.add(n)},getItems:function(){return this.items},interfaces_:function(){return[Dt]},getClass:function(){return xr}}),t(wr.prototype,{flatten:function(n,t){var e=this.linePts[n],l=this.linePts[t],i=new ct(e,l);return this.remove(this.line,n,t),this.outputIndex.add(i),i},hasBadIntersection:function(n,t,e){return!!this.hasBadOutputIntersection(e)||!!this.hasBadInputIntersection(n,t,e)},setDistanceTolerance:function(n){this.distanceTolerance=n},simplifySection:function(n,t,e){e+=1;var l=new Array(2).fill(null);if(n+1===t){var i=this.line.getSegment(n);return this.line.addToResult(i),null}var r=!0;if(this.line.getResultSize()<this.line.getMinimumSize()){var u=e+1;u<this.line.getMinimumSize()&&(r=!1)}var s=new Array(1).fill(null),a=this.findFurthestPoint(this.linePts,n,t,s);s[0]>this.distanceTolerance&&(r=!1);var o=new ct;if(o.p0=this.linePts[n],o.p1=this.linePts[t],l[0]=n,l[1]=t,this.hasBadIntersection(this.line,l,o)&&(r=!1),r){var i=this.flatten(n,t);return this.line.addToResult(i),null}this.simplifySection(n,a,e),this.simplifySection(a,t,e)},hasBadOutputIntersection:function(n){for(var t=this.outputIndex.query(n),e=t.iterator();e.hasNext();){var l=e.next();if(this.hasInteriorIntersection(l,n))return!0}return!1},findFurthestPoint:function(n,t,e,l){var i=new ct;i.p0=n[t],i.p1=n[e];for(var r=-1,u=t,s=t+1;s<e;s++){var a=n[s],o=i.distance(a);o>r&&(r=o,u=s)}return l[0]=r,u},simplify:function(n){this.line=n,this.linePts=n.getParentCoordinates(),this.simplifySection(0,this.linePts.length-1,0)},remove:function(n,t,e){for(var l=t;l<e;l++){var i=n.getSegment(l);this.inputIndex.remove(i)}},hasInteriorIntersection:function(n,t){return this.li.computeIntersection(n.p0,n.p1,t.p0,t.p1),this.li.isInteriorIntersection()},hasBadInputIntersection:function(n,t,e){for(var l=this.inputIndex.query(e),i=l.iterator();i.hasNext();){var r=i.next();if(this.hasInteriorIntersection(r,e)){if(wr.isInLineSection(n,t,r))continue;return!0}}return!1},interfaces_:function(){return[]},getClass:function(){return wr}}),wr.isInLineSection=function(n,t,e){if(e.getParent()!==n.getParent())return!1;var l=e.getIndex();return l>=t[0]&&l<t[1]},t(_r.prototype,{setDistanceTolerance:function(n){this.distanceTolerance=n},simplify:function(n){for(var t=n.iterator();t.hasNext();)this.inputIndex.add(t.next());for(var t=n.iterator();t.hasNext();){var e=new wr(this.inputIndex,this.outputIndex);e.setDistanceTolerance(this.distanceTolerance),e.simplify(t.next())}},interfaces_:function(){return[]},getClass:function(){return _r}}),t(Mr.prototype,{getResultGeometry:function(){if(this.inputGeom.isEmpty())return this.inputGeom.copy();this.linestringMap=new tt,this.inputGeom.apply(new br(this)),this.lineSimplifier.simplify(this.linestringMap.values());var n=new Er(this.linestringMap).transform(this.inputGeom);return n},setDistanceTolerance:function(n){if(n<0)throw new l("Tolerance must be non-negative");this.lineSimplifier.setDistanceTolerance(n)},interfaces_:function(){return[]},getClass:function(){return Mr}}),Mr.simplify=function(n,t){var e=new Mr(n);return e.setDistanceTolerance(t),e.getResultGeometry()},h(Er,wt),t(Er.prototype,{transformCoordinates:function(n,t){if(0===n.size())return null;if(t instanceof Cn){var e=this.linestringMap.get(t);return this.createCoordinateSequence(e.getResultCoordinates())}return wt.prototype.transformCoordinates.call(this,n,t)},interfaces_:function(){return[]},getClass:function(){return Er}}),t(br.prototype,{filter:function(n){if(n instanceof Cn){var t=n;if(t.isEmpty())return null;var e=t.isClosed()?4:2,l=new mr(t,e);this.tps.linestringMap.put(t,l)}},interfaces_:function(){return[B]},getClass:function(){return br}}),Mr.LineStringTransformer=Er,Mr.LineStringMapBuilderFilter=br;var Au=Object.freeze({DouglasPeuckerSimplifier:gr,TopologyPreservingSimplifier:Mr});t(Cr.prototype,{splitAt:function(){if(1===arguments.length){var n=arguments[0],t=this.minimumLen/this.segLen;if(n.distance(this.seg.p0)<this.minimumLen)return this.splitPt=this.seg.pointAlong(t),null;if(n.distance(this.seg.p1)<this.minimumLen)return this.splitPt=Cr.pointAlongReverse(this.seg,t),null;this.splitPt=n}else if(2===arguments.length){var e=arguments[0],l=arguments[1],i=this.getConstrainedLength(e),r=i/this.segLen;l.equals2D(this.seg.p0)?this.splitPt=this.seg.pointAlong(r):this.splitPt=Cr.pointAlongReverse(this.seg,r)}},setMinimumLength:function(n){this.minimumLen=n},getConstrainedLength:function(n){return n<this.minimumLen?this.minimumLen:n},getSplitPoint:function(){return this.splitPt},interfaces_:function(){return[]},getClass:function(){return Cr}}),Cr.pointAlongReverse=function(n,t){var e=new d;return e.x=n.p1.x-t*(n.p1.x-n.p0.x),e.y=n.p1.y-t*(n.p1.y-n.p0.y),e},t(Ir.prototype,{findSplitPoint:function(n,t){},interfaces_:function(){return[]},getClass:function(){return Ir}}),t(Sr.prototype,{findSplitPoint:function(n,t){var e=n.getLineSegment(),l=e.getLength(),i=l/2,r=new Cr(e),u=Sr.projectedSplitPoint(n,t),s=2*u.distance(t)*.8,a=s;return a>i&&(a=i),r.setMinimumLength(a),r.splitAt(u),r.getSplitPoint()},interfaces_:function(){return[Ir]},getClass:function(){return Sr}}),Sr.projectedSplitPoint=function(n,t){var e=n.getLineSegment(),l=e.project(t);return l},t(Nr.prototype,{interfaces_:function(){return[]},getClass:function(){return Nr}}),Nr.triArea=function(n,t,e){return(t.x-n.x)*(e.y-n.y)-(t.y-n.y)*(e.x-n.x)},Nr.isInCircleDDNormalized=function(n,t,e,l){var i=T.valueOf(n.x).selfSubtract(l.x),r=T.valueOf(n.y).selfSubtract(l.y),u=T.valueOf(t.x).selfSubtract(l.x),s=T.valueOf(t.y).selfSubtract(l.y),a=T.valueOf(e.x).selfSubtract(l.x),o=T.valueOf(e.y).selfSubtract(l.y),h=i.multiply(s).selfSubtract(u.multiply(r)),f=u.multiply(o).selfSubtract(a.multiply(s)),c=a.multiply(r).selfSubtract(i.multiply(o)),d=i.multiply(i).selfAdd(r.multiply(r)),g=u.multiply(u).selfAdd(s.multiply(s)),p=a.multiply(a).selfAdd(o.multiply(o)),v=d.selfMultiply(f).selfAdd(g.selfMultiply(c)).selfAdd(p.selfMultiply(h)),m=v.doubleValue()>0;return m},Nr.checkRobustInCircle=function(n,t,e,l){var i=Nr.isInCircleNonRobust(n,t,e,l),r=Nr.isInCircleDDSlow(n,t,e,l),u=Nr.isInCircleCC(n,t,e,l),s=Cl.circumcentre(n,t,e);k.out.println("p radius diff a = "+Math.abs(l.distance(s)-n.distance(s))/n.distance(s)),i===r&&i===u||(k.out.println("inCircle robustness failure (double result = "+i+", DD result = "+r+", CC result = "+u+")"),k.out.println(ut.toLineString(new Bn([n,t,e,l]))),k.out.println("Circumcentre = "+ut.toPoint(s)+" radius = "+n.distance(s)),k.out.println("p radius diff a = "+Math.abs(l.distance(s)/n.distance(s)-1)),k.out.println("p radius diff b = "+Math.abs(l.distance(s)/t.distance(s)-1)),k.out.println("p radius diff c = "+Math.abs(l.distance(s)/e.distance(s)-1)),k.out.println())},Nr.isInCircleDDFast=function(n,t,e,l){var i=T.sqr(n.x).selfAdd(T.sqr(n.y)).selfMultiply(Nr.triAreaDDFast(t,e,l)),r=T.sqr(t.x).selfAdd(T.sqr(t.y)).selfMultiply(Nr.triAreaDDFast(n,e,l)),u=T.sqr(e.x).selfAdd(T.sqr(e.y)).selfMultiply(Nr.triAreaDDFast(n,t,l)),s=T.sqr(l.x).selfAdd(T.sqr(l.y)).selfMultiply(Nr.triAreaDDFast(n,t,e)),a=i.selfSubtract(r).selfAdd(u).selfSubtract(s),o=a.doubleValue()>0;return o},Nr.isInCircleCC=function(n,t,e,l){var i=Cl.circumcentre(n,t,e),r=n.distance(i),u=l.distance(i)-r;return u<=0},Nr.isInCircleNormalized=function(n,t,e,l){var i=n.x-l.x,r=n.y-l.y,u=t.x-l.x,s=t.y-l.y,a=e.x-l.x,o=e.y-l.y,h=i*s-u*r,f=u*o-a*s,c=a*r-i*o,d=i*i+r*r,g=u*u+s*s,p=a*a+o*o,v=d*f+g*c+p*h;return v>0},Nr.isInCircleDDSlow=function(n,t,e,l){var i=T.valueOf(l.x),r=T.valueOf(l.y),u=T.valueOf(n.x),s=T.valueOf(n.y),a=T.valueOf(t.x),o=T.valueOf(t.y),h=T.valueOf(e.x),f=T.valueOf(e.y),c=u.multiply(u).add(s.multiply(s)).multiply(Nr.triAreaDDSlow(a,o,h,f,i,r)),d=a.multiply(a).add(o.multiply(o)).multiply(Nr.triAreaDDSlow(u,s,h,f,i,r)),g=h.multiply(h).add(f.multiply(f)).multiply(Nr.triAreaDDSlow(u,s,a,o,i,r)),p=i.multiply(i).add(r.multiply(r)).multiply(Nr.triAreaDDSlow(u,s,a,o,h,f)),v=c.subtract(d).add(g).subtract(p),m=v.doubleValue()>0;return m},Nr.isInCircleNonRobust=function(n,t,e,l){var i=(n.x*n.x+n.y*n.y)*Nr.triArea(t,e,l)-(t.x*t.x+t.y*t.y)*Nr.triArea(n,e,l)+(e.x*e.x+e.y*e.y)*Nr.triArea(n,t,l)-(l.x*l.x+l.y*l.y)*Nr.triArea(n,t,e)>0;return i},Nr.isInCircleRobust=function(n,t,e,l){return Nr.isInCircleNormalized(n,t,e,l)},Nr.triAreaDDSlow=function(n,t,e,l,i,r){return e.subtract(n).multiply(r.subtract(t)).subtract(l.subtract(t).multiply(i.subtract(n)))},Nr.triAreaDDFast=function(n,t,e){var l=T.valueOf(t.x).selfSubtract(n.x).selfMultiply(T.valueOf(e.y).selfSubtract(n.y)),i=T.valueOf(t.y).selfSubtract(n.y).selfMultiply(T.valueOf(e.x).selfSubtract(n.x));return l.selfSubtract(i)},t(Pr.prototype,{circleCenter:function(n,t){var e=new Pr(this.getX(),this.getY()),l=this.bisector(e,n),i=this.bisector(n,t),r=new D(l,i),u=null;try{u=new Pr(r.getX(),r.getY())}catch(l){if(!(l instanceof C))throw l;k.err.println("a: "+e+"  b: "+n+"  c: "+t),k.err.println(l)}finally{}return u},dot:function(n){return this.p.x*n.getX()+this.p.y*n.getY()},magn:function(){return Math.sqrt(this.p.x*this.p.x+this.p.y*this.p.y)},getZ:function(){return this.p.z},bisector:function(n,t){var e=t.getX()-n.getX(),l=t.getY()-n.getY(),i=new D(n.getX()+e/2,n.getY()+l/2,1),r=new D(n.getX()-l+e/2,n.getY()+e+l/2,1);return new D(i,r)},equals:function(){if(1===arguments.length){var n=arguments[0];return this.p.x===n.getX()&&this.p.y===n.getY()}if(2===arguments.length){var t=arguments[0],e=arguments[1];return this.p.distance(t.getCoordinate())<e}},getCoordinate:function(){return this.p},isInCircle:function(n,t,e){return Nr.isInCircleRobust(n.p,t.p,e.p,this.p)},interpolateZValue:function(n,t,e){var l=n.getX(),i=n.getY(),r=t.getX()-l,u=e.getX()-l,s=t.getY()-i,a=e.getY()-i,o=r*a-u*s,h=this.getX()-l,f=this.getY()-i,c=(a*h-u*f)/o,d=(-s*h+r*f)/o,g=n.getZ()+c*(t.getZ()-n.getZ())+d*(e.getZ()-n.getZ());return g},midPoint:function(n){var t=(this.p.x+n.getX())/2,e=(this.p.y+n.getY())/2,l=(this.p.z+n.getZ())/2;return new Pr(t,e,l)},rightOf:function(n){return this.isCCW(n.dest(),n.orig())},isCCW:function(n,t){return(n.p.x-this.p.x)*(t.p.y-this.p.y)-(n.p.y-this.p.y)*(t.p.x-this.p.x)>0},getX:function(){return this.p.x},crossProduct:function(n){return this.p.x*n.getY()-this.p.y*n.getX()},setZ:function(n){this.p.z=n},times:function(n){return new Pr(n*this.p.x,n*this.p.y)},cross:function(){return new Pr(this.p.y,-this.p.x)},leftOf:function(n){return this.isCCW(n.orig(),n.dest())},toString:function(){return"POINT ("+this.p.x+" "+this.p.y+")"},sub:function(n){return new Pr(this.p.x-n.getX(),this.p.y-n.getY())},getY:function(){return this.p.y},classify:function(n,t){var e=this,l=t.sub(n),i=e.sub(n),r=l.crossProduct(i);return r>0?Pr.LEFT:r<0?Pr.RIGHT:l.getX()*i.getX()<0||l.getY()*i.getY()<0?Pr.BEHIND:l.magn()<i.magn()?Pr.BEYOND:n.equals(e)?Pr.ORIGIN:t.equals(e)?Pr.DESTINATION:Pr.BETWEEN},sum:function(n){return new Pr(this.p.x+n.getX(),this.p.y+n.getY())},distance:function(n,t){return Math.sqrt(Math.pow(t.getX()-n.getX(),2)+Math.pow(t.getY()-n.getY(),2))},circumRadiusRatio:function(n,t){var e=this.circleCenter(n,t),l=this.distance(e,n),i=this.distance(this,n),r=this.distance(n,t);return r<i&&(i=r),r=this.distance(t,this),r<i&&(i=r),l/i},interfaces_:function(){return[]},getClass:function(){return Pr}}),Pr.interpolateZ=function(){if(3===arguments.length){var n=arguments[0],t=arguments[1],e=arguments[2],l=t.distance(e),i=n.distance(t),r=e.z-t.z,u=t.z+r*(i/l);return u}if(4===arguments.length){var s=arguments[0],a=arguments[1],o=arguments[2],h=arguments[3],f=a.x,c=a.y,d=o.x-f,g=h.x-f,p=o.y-c,v=h.y-c,m=d*v-g*p,y=s.x-f,x=s.y-c,w=(v*y-g*x)/m,_=(-p*y+d*x)/m,M=a.z+w*(o.z-a.z)+_*(h.z-a.z);return M}},Pr.LEFT=0,Pr.RIGHT=1,Pr.BEYOND=2,Pr.BEHIND=3,Pr.BETWEEN=4,Pr.ORIGIN=5,Pr.DESTINATION=6,h(Lr,Pr),t(Lr.prototype,{getConstraint:function(){return this.constraint},setOnConstraint:function(n){this._isOnConstraint=n},merge:function(n){n._isOnConstraint&&(this._isOnConstraint=!0,this.constraint=n.constraint)},isOnConstraint:function(){return this._isOnConstraint},setConstraint:function(n){this._isOnConstraint=!0,this.constraint=n},interfaces_:function(){return[]},getClass:function(){return Lr}}),t(Rr.prototype,{equalsNonOriented:function(n){return!!this.equalsOriented(n)||!!this.equalsOriented(n.sym())},toLineSegment:function(){return new ct(this.vertex.getCoordinate(),this.dest().getCoordinate())},dest:function(){return this.sym().orig()},oNext:function(){return this.next},equalsOriented:function(n){return!(!this.orig().getCoordinate().equals2D(n.orig().getCoordinate())||!this.dest().getCoordinate().equals2D(n.dest().getCoordinate()))},dNext:function(){return this.sym().oNext().sym()},lPrev:function(){return this.next.sym()},rPrev:function(){return this.sym().oNext()},rot:function(){return this._rot},oPrev:function(){return this._rot.next._rot},sym:function(){return this._rot._rot},setOrig:function(n){this.vertex=n},lNext:function(){return this.invRot().oNext().rot()},getLength:function(){return this.orig().getCoordinate().distance(this.dest().getCoordinate())},invRot:function(){return this._rot.sym()},setDest:function(n){this.sym().setOrig(n)},setData:function(n){this.data=n},getData:function(){return this.data},delete:function(){this._rot=null},orig:function(){return this.vertex},rNext:function(){return this._rot.next.invRot()},toString:function(){var n=this.vertex.getCoordinate(),t=this.dest().getCoordinate();return ut.toLineString(n,t)},isLive:function(){return null!==this._rot},getPrimary:function(){return this.orig().getCoordinate().compareTo(this.dest().getCoordinate())<=0?this:this.sym()},dPrev:function(){return this.invRot().oNext().invRot()},setNext:function(n){this.next=n},interfaces_:function(){return[]},getClass:function(){return Rr}}),Rr.makeEdge=function(n,t){var e=new Rr,l=new Rr,i=new Rr,r=new Rr;e._rot=l,l._rot=i,i._rot=r,r._rot=e,e.setNext(e),l.setNext(r),i.setNext(i),r.setNext(l);var u=e;return u.setOrig(n),u.setDest(t),u},Rr.swap=function(n){var t=n.oPrev(),e=n.sym().oPrev();Rr.splice(n,t),Rr.splice(n.sym(),e),Rr.splice(n,t.lNext()),Rr.splice(n.sym(),e.lNext()),n.setOrig(t.dest()),n.setDest(e.dest())},Rr.splice=function(n,t){var e=n.oNext().rot(),l=t.oNext().rot(),i=t.oNext(),r=n.oNext(),u=l.oNext(),s=e.oNext();n.setNext(i),t.setNext(r),e.setNext(u),l.setNext(s)},Rr.connect=function(n,t){var e=Rr.makeEdge(n.dest(),t.orig());return Rr.splice(e,n.lNext()),Rr.splice(e.sym(),t),e},t(Tr.prototype,{insertSite:function(n){var t=this.subdiv.locate(n);if(this.subdiv.isVertexOfEdge(t,n))return t;this.subdiv.isOnEdge(t,n.getCoordinate())&&(t=t.oPrev(),this.subdiv.delete(t.oNext()));var e=this.subdiv.makeEdge(t.orig(),n);Rr.splice(e,t);var l=e;do{e=this.subdiv.connect(t,e.sym()),t=e.oPrev()}while(t.lNext()!==l);for(;;){var i=t.oPrev();if(i.dest().rightOf(t)&&n.isInCircle(t.orig(),i.dest(),t.dest()))Rr.swap(t),t=t.oPrev();else{if(t.oNext()===l)return e;t=t.oNext().lPrev()}}},insertSites:function(n){for(var t=n.iterator();t.hasNext();){var e=t.next();this.insertSite(e)}},interfaces_:function(){return[]},getClass:function(){return Tr}}),t(Or.prototype,{locate:function(n){},interfaces_:function(){return[]},getClass:function(){return Or}}),t(Ar.prototype,{init:function(){this.lastEdge=this.findEdge()},locate:function(n){this.lastEdge.isLive()||this.init();var t=this.subdiv.locateFromEdge(n,this.lastEdge);return this.lastEdge=t,t},findEdge:function(){var n=this.subdiv.getEdges();return n.iterator().next()},interfaces_:function(){return[Or]},getClass:function(){return Ar}}),h(kr,o),t(kr.prototype,{getSegment:function(){return this.seg},interfaces_:function(){return[]},getClass:function(){return kr}}),kr.msgWithSpatial=function(n,t){return null!==t?n+" [ "+t+" ]":n},t(Dr.prototype,{visit:function(n){},interfaces_:function(){return[]},getClass:function(){return Dr}}),t(Fr.prototype,{getTriangleVertices:function(n){var t=new zr;return this.visitTriangles(t,n),t.getTriangleVertices()},isFrameVertex:function(n){return!!n.equals(this.frameVertex[0])||(!!n.equals(this.frameVertex[1])||!!n.equals(this.frameVertex[2]))},isVertexOfEdge:function(n,t){return!(!t.equals(n.orig(),this.tolerance)&&!t.equals(n.dest(),this.tolerance))},connect:function(n,t){var e=Rr.connect(n,t);return this.quadEdges.add(e),e},getVoronoiCellPolygon:function(n,t){var e=new _,l=n;do{var i=n.rot().orig().getCoordinate();e.add(i),n=n.oPrev()}while(n!==l);var r=new M;r.addAll(e,!1),r.closeRing(),r.size()<4&&(k.out.println(r),r.add(r.get(r.size()-1),!0));var u=r.toCoordinateArray(),s=t.createPolygon(t.createLinearRing(u),null),a=l.orig();return s.setUserData(a.getCoordinate()),s},setLocator:function(n){this.locator=n},
initSubdiv:function(){var n=this.makeEdge(this.frameVertex[0],this.frameVertex[1]),t=this.makeEdge(this.frameVertex[1],this.frameVertex[2]);Rr.splice(n.sym(),t);var e=this.makeEdge(this.frameVertex[2],this.frameVertex[0]);return Rr.splice(t.sym(),e),Rr.splice(e.sym(),n),n},isFrameBorderEdge:function(n){var t=new Array(3).fill(null);Fr.getTriangleEdges(n,t);var e=new Array(3).fill(null);Fr.getTriangleEdges(n.sym(),e);var l=n.lNext().dest();if(this.isFrameVertex(l))return!0;var i=n.sym().lNext().dest();return!!this.isFrameVertex(i)},makeEdge:function(n,t){var e=Rr.makeEdge(n,t);return this.quadEdges.add(e),e},visitTriangles:function(n,t){this.visitedKey++;var e=new vt;e.push(this.startingEdge);for(var l=new Q;!e.empty();){var i=e.pop();if(!l.contains(i)){var r=this.fetchTriangleToVisit(i,e,t,l);null!==r&&n.visit(r)}}},isFrameEdge:function(n){return!(!this.isFrameVertex(n.orig())&&!this.isFrameVertex(n.dest()))},isOnEdge:function(n,t){this.seg.setCoordinates(n.orig().getCoordinate(),n.dest().getCoordinate());var e=this.seg.distance(t);return e<this.edgeCoincidenceTolerance},getEnvelope:function(){return new E(this.frameEnv)},createFrame:function(n){var t=n.getWidth(),e=n.getHeight(),l=0;l=t>e?10*t:10*e,this.frameVertex[0]=new Pr((n.getMaxX()+n.getMinX())/2,n.getMaxY()+l),this.frameVertex[1]=new Pr(n.getMinX()-l,n.getMinY()-l),this.frameVertex[2]=new Pr(n.getMaxX()+l,n.getMinY()-l),this.frameEnv=new E(this.frameVertex[0].getCoordinate(),this.frameVertex[1].getCoordinate()),this.frameEnv.expandToInclude(this.frameVertex[2].getCoordinate())},getTriangleCoordinates:function(n){var t=new qr;return this.visitTriangles(t,n),t.getTriangles()},getVertices:function(n){for(var t=new Q,e=this.quadEdges.iterator();e.hasNext();){var l=e.next(),i=l.orig();!n&&this.isFrameVertex(i)||t.add(i);var r=l.dest();!n&&this.isFrameVertex(r)||t.add(r)}return t},fetchTriangleToVisit:function(n,t,e,l){var i=n,r=0,u=!1;do{this.triEdges[r]=i,this.isFrameEdge(i)&&(u=!0);var s=i.sym();l.contains(s)||t.push(s),l.add(i),r++,i=i.lNext()}while(i!==n);return u&&!e?null:this.triEdges},getEdges:function(){if(0===arguments.length)return this.quadEdges;if(1===arguments.length){for(var n=arguments[0],t=this.getPrimaryEdges(!1),e=new Array(t.size()).fill(null),l=0,i=t.iterator();i.hasNext();){var r=i.next();e[l++]=n.createLineString([r.orig().getCoordinate(),r.dest().getCoordinate()])}return n.createMultiLineString(e)}},getVertexUniqueEdges:function(n){for(var t=new _,e=new Q,l=this.quadEdges.iterator();l.hasNext();){var i=l.next(),r=i.orig();e.contains(r)||(e.add(r),!n&&this.isFrameVertex(r)||t.add(i));var u=i.sym(),s=u.orig();e.contains(s)||(e.add(s),!n&&this.isFrameVertex(s)||t.add(u))}return t},getTriangleEdges:function(n){var t=new Gr;return this.visitTriangles(t,n),t.getTriangleEdges()},getPrimaryEdges:function(n){this.visitedKey++;var t=new _,e=new vt;e.push(this.startingEdge);for(var l=new Q;!e.empty();){var i=e.pop();if(!l.contains(i)){var r=i.getPrimary();!n&&this.isFrameEdge(r)||t.add(r),e.push(i.oNext()),e.push(i.sym().oNext()),l.add(i),l.add(i.sym())}}return t},delete:function(n){Rr.splice(n,n.oPrev()),Rr.splice(n.sym(),n.sym().oPrev());var t=n.sym(),e=n.rot(),l=n.rot().sym();this.quadEdges.remove(n),this.quadEdges.remove(t),this.quadEdges.remove(e),this.quadEdges.remove(l),n.delete(),t.delete(),e.delete(),l.delete()},locateFromEdge:function(n,t){for(var e=0,l=this.quadEdges.size(),i=t;;){if(e++,e>l)throw new kr(i.toLineSegment());if(n.equals(i.orig())||n.equals(i.dest()))break;if(n.rightOf(i))i=i.sym();else if(n.rightOf(i.oNext())){if(n.rightOf(i.dPrev()))break;i=i.dPrev()}else i=i.oNext()}return i},getTolerance:function(){return this.tolerance},getVoronoiCellPolygons:function(n){this.visitTriangles(new Br,!0);for(var t=new _,e=this.getVertexUniqueEdges(!1),l=e.iterator();l.hasNext();){var i=l.next();t.add(this.getVoronoiCellPolygon(i,n))}return t},getVoronoiDiagram:function(n){var t=this.getVoronoiCellPolygons(n);return n.createGeometryCollection(it.toGeometryArray(t))},getTriangles:function(n){for(var t=this.getTriangleCoordinates(!1),e=new Array(t.size()).fill(null),l=0,i=t.iterator();i.hasNext();){var r=i.next();e[l++]=n.createPolygon(n.createLinearRing(r),null)}return n.createGeometryCollection(e)},insertSite:function(n){var t=this.locate(n);if(n.equals(t.orig(),this.tolerance)||n.equals(t.dest(),this.tolerance))return t;var e=this.makeEdge(t.orig(),n);Rr.splice(e,t);var l=e;do{e=this.connect(t,e.sym()),t=e.oPrev()}while(t.lNext()!==l);return l},locate:function(){if(1===arguments.length){if(arguments[0]instanceof Pr){var n=arguments[0];return this.locator.locate(n)}if(arguments[0]instanceof d){var t=arguments[0];return this.locator.locate(new Pr(t))}}else if(2===arguments.length){var e=arguments[0],l=arguments[1],i=this.locator.locate(new Pr(e));if(null===i)return null;var r=i;i.dest().getCoordinate().equals2D(e)&&(r=i.sym());var u=r;do{if(u.dest().getCoordinate().equals2D(l))return u;u=u.oNext()}while(u!==r);return null}},interfaces_:function(){return[]},getClass:function(){return Fr}}),Fr.getTriangleEdges=function(n,t){if(t[0]=n,t[1]=t[0].lNext(),t[2]=t[1].lNext(),t[2].lNext()!==t[0])throw new l("Edges do not form a triangle")},t(Br.prototype,{visit:function(n){for(var t=n[0].orig().getCoordinate(),e=n[1].orig().getCoordinate(),l=n[2].orig().getCoordinate(),i=Cl.circumcentre(t,e,l),r=new Pr(i),u=0;u<3;u++)n[u].rot().setOrig(r)},interfaces_:function(){return[Dr]},getClass:function(){return Br}}),t(Gr.prototype,{getTriangleEdges:function(){return this.triList},visit:function(n){this.triList.add(n.clone())},interfaces_:function(){return[Dr]},getClass:function(){return Gr}}),t(zr.prototype,{visit:function(n){this.triList.add([n[0].orig(),n[1].orig(),n[2].orig()])},getTriangleVertices:function(){return this.triList},interfaces_:function(){return[Dr]},getClass:function(){return zr}}),t(qr.prototype,{checkTriangleSize:function(n){var t="";n.length>=2?t=ut.toLineString(n[0],n[1]):n.length>=1&&(t=ut.toPoint(n[0]))},visit:function(n){this.coordList.clear();for(var t=0;t<3;t++){var e=n[t].orig();this.coordList.add(e.getCoordinate())}if(this.coordList.size()>0){this.coordList.closeRing();var l=this.coordList.toCoordinateArray();if(4!==l.length)return null;this.triCoords.add(l)}},getTriangles:function(){return this.triCoords},interfaces_:function(){return[Dr]},getClass:function(){return qr}}),Fr.TriangleCircumcentreVisitor=Br,Fr.TriangleEdgesListVisitor=Gr,Fr.TriangleVertexListVisitor=zr,Fr.TriangleCoordinatesVisitor=qr,Fr.EDGE_COINCIDENCE_TOL_FACTOR=1e3,t(jr.prototype,{getLineSegment:function(){return this.ls},getEndZ:function(){var n=this.ls.getCoordinate(1);return n.z},getStartZ:function(){var n=this.ls.getCoordinate(0);return n.z},intersection:function(n){return this.ls.intersection(n.getLineSegment())},getStart:function(){return this.ls.getCoordinate(0)},getEnd:function(){return this.ls.getCoordinate(1)},getEndY:function(){var n=this.ls.getCoordinate(1);return n.y},getStartX:function(){var n=this.ls.getCoordinate(0);return n.x},equalsTopo:function(n){return this.ls.equalsTopo(n.getLineSegment())},getStartY:function(){var n=this.ls.getCoordinate(0);return n.y},setData:function(n){this.data=n},getData:function(){return this.data},getEndX:function(){var n=this.ls.getCoordinate(1);return n.x},toString:function(){return this.ls.toString()},interfaces_:function(){return[]},getClass:function(){return jr}}),t(Ur.prototype,{visit:function(n){},interfaces_:function(){return[]},getClass:function(){return Ur}}),t(Vr.prototype,{isRepeated:function(){return this.count>1},getRight:function(){return this.right},getCoordinate:function(){return this.p},setLeft:function(n){this.left=n},getX:function(){return this.p.x},getData:function(){return this.data},getCount:function(){return this.count},getLeft:function(){return this.left},getY:function(){return this.p.y},increment:function(){this.count=this.count+1},setRight:function(n){this.right=n},interfaces_:function(){return[]},getClass:function(){return Vr}}),t(Yr.prototype,{insert:function(){if(1===arguments.length){var n=arguments[0];return this.insert(n,null)}if(2===arguments.length){var t=arguments[0],e=arguments[1];if(null===this.root)return this.root=new Vr(t,e),this.root;if(this.tolerance>0){var l=this.findBestMatchNode(t);if(null!==l)return l.increment(),l}return this.insertExact(t,e)}},query:function(){var n=arguments,t=this;if(1===arguments.length){var e=arguments[0],l=new _;return this.query(e,l),l}if(2===arguments.length)if(arguments[0]instanceof E&&S(arguments[1],y))!function(){var e=n[0],l=n[1];t.queryNode(t.root,e,!0,{interfaces_:function(){return[Ur]},visit:function(n){l.add(n)}})}();else if(arguments[0]instanceof E&&S(arguments[1],Ur)){var i=arguments[0],r=arguments[1];this.queryNode(this.root,i,!0,r)}},queryNode:function(n,t,e,l){if(null===n)return null;var i=null,r=null,u=null;e?(i=t.getMinX(),r=t.getMaxX(),u=n.getX()):(i=t.getMinY(),r=t.getMaxY(),u=n.getY());var s=i<u,a=u<=r;s&&this.queryNode(n.getLeft(),t,!e,l),t.contains(n.getCoordinate())&&l.visit(n),a&&this.queryNode(n.getRight(),t,!e,l)},findBestMatchNode:function(n){var t=new Xr(n,this.tolerance);return this.query(t.queryEnvelope(),t),t.getNode()},isEmpty:function(){return null===this.root},insertExact:function(n,t){for(var e=this.root,l=this.root,i=!0,r=!0;null!==e;){if(null!==e){var u=n.distance(e.getCoordinate())<=this.tolerance;if(u)return e.increment(),e}r=i?n.x<e.getX():n.y<e.getY(),l=e,e=r?e.getLeft():e.getRight(),i=!i}this.numberOfNodes=this.numberOfNodes+1;var s=new Vr(n,t);return r?l.setLeft(s):l.setRight(s),s},interfaces_:function(){return[]},getClass:function(){return Yr}}),Yr.toCoordinates=function(){if(1===arguments.length){var n=arguments[0];return Yr.toCoordinates(n,!1)}if(2===arguments.length){for(var t=arguments[0],e=arguments[1],l=new M,i=t.iterator();i.hasNext();)for(var r=i.next(),u=e?r.getCount():1,s=0;s<u;s++)l.add(r.getCoordinate(),!0);return l.toCoordinateArray()}},t(Xr.prototype,{visit:function(n){var t=this.p.distance(n.getCoordinate()),e=t<=this.tolerance;if(!e)return null;var l=!1;(null===this.matchNode||t<this.matchDist||null!==this.matchNode&&t===this.matchDist&&n.getCoordinate().compareTo(this.matchNode.getCoordinate())<1)&&(l=!0),l&&(this.matchNode=n,this.matchDist=t)},queryEnvelope:function(){var n=new E(this.p);return n.expandBy(this.tolerance),n},getNode:function(){return this.matchNode},interfaces_:function(){return[Ur]},getClass:function(){return Xr}}),Yr.BestMatchVisitor=Xr,t(Hr.prototype,{getInitialVertices:function(){return this.initialVertices},getKDT:function(){return this.kdt},enforceConstraints:function(){this.addConstraintVertices();var n=0,t=0;do{t=this.enforceGabriel(this.segments),n++}while(t>0&&n<Hr.MAX_SPLIT_ITER)},insertSites:function(n){for(var t=n.iterator();t.hasNext();){var e=t.next();this.insertSite(e)}},getVertexFactory:function(){return this.vertexFactory},getPointArray:function(){for(var n=new Array(this.initialVertices.size()+this.segVertices.size()).fill(null),t=0,e=this.initialVertices.iterator();e.hasNext();){var l=e.next();n[t++]=l.getCoordinate()}for(var i=this.segVertices.iterator();i.hasNext();){var l=i.next();n[t++]=l.getCoordinate()}return n},setConstraints:function(n,t){this.segments=n,this.segVertices=t},computeConvexHull:function(){var n=new it,t=this.getPointArray(),e=new yt(t,n);this.convexHull=e.getConvexHull()},addConstraintVertices:function(){this.computeConvexHull(),this.insertSites(this.segVertices)},findNonGabrielPoint:function(n){var t=n.getStart(),e=n.getEnd(),l=new d((t.x+e.x)/2,(t.y+e.y)/2),r=t.distance(l),u=new E(l);u.expandBy(r);for(var s=this.kdt.query(u),a=null,o=i.MAX_VALUE,h=s.iterator();h.hasNext();){var f=h.next(),c=f.getCoordinate();if(!c.equals2D(t)&&!c.equals2D(e)){var g=l.distance(c);if(g<r){var p=g;(null===a||p<o)&&(a=c,o=p)}}}return a},getConstraintSegments:function(){return this.segments},setSplitPointFinder:function(n){this.splitFinder=n},getConvexHull:function(){return this.convexHull},getTolerance:function(){return this.tolerance},enforceGabriel:function(n){for(var t=new _,e=0,l=new _,i=n.iterator();i.hasNext();){var r=i.next(),u=this.findNonGabrielPoint(r);if(null!==u){this.splitPt=this.splitFinder.findSplitPoint(r,u);var s=this.createVertex(this.splitPt,r),a=(this.insertSite(s),new jr(r.getStartX(),r.getStartY(),r.getStartZ(),s.getX(),s.getY(),s.getZ(),r.getData())),o=new jr(s.getX(),s.getY(),s.getZ(),r.getEndX(),r.getEndY(),r.getEndZ(),r.getData());t.add(a),t.add(o),l.add(r),e+=1}}return n.removeAll(l),n.addAll(t),e},createVertex:function(){if(1===arguments.length){var n=arguments[0],t=null;return t=null!==this.vertexFactory?this.vertexFactory.createVertex(n,null):new Lr(n)}if(2===arguments.length){var e=arguments[0],l=arguments[1],t=null;return t=null!==this.vertexFactory?this.vertexFactory.createVertex(e,l):new Lr(e),t.setOnConstraint(!0),t}},getSubdivision:function(){return this.subdiv},computeBoundingBox:function(){var n=Hr.computeVertexEnvelope(this.initialVertices),t=Hr.computeVertexEnvelope(this.segVertices),e=new E(n);e.expandToInclude(t);var l=.2*e.getWidth(),i=.2*e.getHeight(),r=Math.max(l,i);this.computeAreaEnv=new E(e),this.computeAreaEnv.expandBy(r)},setVertexFactory:function(n){this.vertexFactory=n},formInitialDelaunay:function(){this.computeBoundingBox(),this.subdiv=new Fr(this.computeAreaEnv,this.tolerance),this.subdiv.setLocator(new Ar(this.subdiv)),this.incDel=new Tr(this.subdiv),this.insertSites(this.initialVertices)},insertSite:function(){if(arguments[0]instanceof Lr){var n=arguments[0],t=this.kdt.insert(n.getCoordinate(),n);if(t.isRepeated()){var e=t.getData();return e.merge(n),e}return this.incDel.insertSite(n),n}if(arguments[0]instanceof d){var l=arguments[0];this.insertSite(this.createVertex(l))}},interfaces_:function(){return[]},getClass:function(){return Hr}}),Hr.computeVertexEnvelope=function(n){for(var t=new E,e=n.iterator();e.hasNext();){var l=e.next();t.expandToInclude(l.getCoordinate())}return t},Hr.MAX_SPLIT_ITER=99,t(Wr.prototype,{create:function(){if(null!==this.subdiv)return null;var n=Wr.envelope(this.siteCoords),t=Wr.toVertices(this.siteCoords);this.subdiv=new Fr(n,this.tolerance);var e=new Tr(this.subdiv);e.insertSites(t)},setTolerance:function(n){this.tolerance=n},setSites:function(){if(arguments[0]instanceof G){var n=arguments[0];this.siteCoords=Wr.extractUniqueCoordinates(n)}else if(S(arguments[0],v)){var t=arguments[0];this.siteCoords=Wr.unique(X.toCoordinateArray(t))}},getEdges:function(n){return this.create(),this.subdiv.getEdges(n)},getSubdivision:function(){return this.create(),this.subdiv},getTriangles:function(n){return this.create(),this.subdiv.getTriangles(n)},interfaces_:function(){return[]},getClass:function(){return Wr}}),Wr.extractUniqueCoordinates=function(n){if(null===n)return new M;var t=n.getCoordinates();return Wr.unique(t)},Wr.envelope=function(n){for(var t=new E,e=n.iterator();e.hasNext();){var l=e.next();t.expandToInclude(l)}return t},Wr.unique=function(n){var t=X.copyDeep(n);on.sort(t);var e=new M(t,!1);return e},Wr.toVertices=function(n){for(var t=new _,e=n.iterator();e.hasNext();){var l=e.next();t.add(new Pr(l))}return t},t(Zr.prototype,{createSiteVertices:function(n){for(var t=new _,e=n.iterator();e.hasNext();){var l=e.next();this.constraintVertexMap.containsKey(l)||t.add(new Lr(l))}return t},create:function(){if(null!==this.subdiv)return null;var n=Wr.envelope(this.siteCoords),t=new _;null!==this.constraintLines&&(n.expandToInclude(this.constraintLines.getEnvelopeInternal()),this.createVertices(this.constraintLines),t=Zr.createConstraintSegments(this.constraintLines));var e=this.createSiteVertices(this.siteCoords),l=new Hr(e,this.tolerance);l.setConstraints(t,new _(this.constraintVertexMap.values())),l.formInitialDelaunay(),l.enforceConstraints(),this.subdiv=l.getSubdivision()},setTolerance:function(n){this.tolerance=n},setConstraints:function(n){this.constraintLines=n},setSites:function(n){this.siteCoords=Wr.extractUniqueCoordinates(n)},getEdges:function(n){return this.create(),this.subdiv.getEdges(n)},getSubdivision:function(){return this.create(),this.subdiv},getTriangles:function(n){return this.create(),this.subdiv.getTriangles(n)},createVertices:function(n){for(var t=n.getCoordinates(),e=0;e<t.length;e++){var l=new Lr(t[e]);this.constraintVertexMap.put(t[e],l)}},interfaces_:function(){return[]},getClass:function(){return Zr}}),Zr.createConstraintSegments=function(){if(1===arguments.length){for(var n=arguments[0],t=je.getLines(n),e=new _,l=t.iterator();l.hasNext();){var i=l.next();Zr.createConstraintSegments(i,e)}return e}if(2===arguments.length)for(var r=arguments[0],u=arguments[1],s=r.getCoordinates(),l=1;l<s.length;l++)u.add(new jr(s[l-1],s[l]))},t(Jr.prototype,{create:function(){if(null!==this.subdiv)return null;var n=Wr.envelope(this.siteCoords);this.diagramEnv=n;var t=Math.max(this.diagramEnv.getWidth(),this.diagramEnv.getHeight());this.diagramEnv.expandBy(t),null!==this.clipEnv&&this.diagramEnv.expandToInclude(this.clipEnv);var e=Wr.toVertices(this.siteCoords);this.subdiv=new Fr(n,this.tolerance);var l=new Tr(this.subdiv);l.insertSites(e)},getDiagram:function(n){this.create();var t=this.subdiv.getVoronoiDiagram(n);return Jr.clipGeometryCollection(t,this.diagramEnv)},setTolerance:function(n){this.tolerance=n},setSites:function(){if(arguments[0]instanceof G){var n=arguments[0];this.siteCoords=Wr.extractUniqueCoordinates(n)}else if(S(arguments[0],v)){var t=arguments[0];this.siteCoords=Wr.unique(X.toCoordinateArray(t))}},setClipEnvelope:function(n){this.clipEnv=n},getSubdivision:function(){return this.create(),this.subdiv},interfaces_:function(){return[]},getClass:function(){return Jr}}),Jr.clipGeometryCollection=function(n,t){for(var e=n.getFactory().toGeometry(t),l=new _,i=0;i<n.getNumGeometries();i++){var r=n.getGeometryN(i),u=null;t.contains(r.getEnvelopeInternal())?u=r:t.intersects(r.getEnvelopeInternal())&&(u=e.intersection(r),u.setUserData(r.getUserData())),null===u||u.isEmpty()||l.add(u)}return n.getFactory().createGeometryCollection(it.toGeometryArray(l))};var ku=Object.freeze({Vertex:Pr}),Du=Object.freeze({ConformingDelaunayTriangulationBuilder:Zr,DelaunayTriangulationBuilder:Wr,VoronoiDiagramBuilder:Jr,quadedge:ku});t(Kr.prototype,{interfaces_:function(){return[]},getClass:function(){return Kr}}),Kr.union=function(n,t){if(n.isEmpty()||t.isEmpty()){if(n.isEmpty()&&t.isEmpty())return ll.createEmptyResult(ll.UNION,n,t,n.getFactory());if(n.isEmpty())return t.copy();if(t.isEmpty())return n.copy()}return n.checkNotGeometryCollection(n),n.checkNotGeometryCollection(t),rl.overlayOp(n,t,ll.UNION)},t(G.prototype,{equalsTopo:function(n){return!!this.getEnvelopeInternal().equals(n.getEnvelopeInternal())&&rr.relate(this,n).isEquals(this.getDimension(),n.getDimension())},union:function(){if(0===arguments.length)return hr.union(this);if(1===arguments.length){var n=arguments[0];return Kr.union(this,n)}},isValid:function(){return Yi.isValid(this)},intersection:function(n){if(this.isEmpty()||n.isEmpty())return ll.createEmptyResult(ll.INTERSECTION,this,n,this.factory);if(this.isGeometryCollection()){var t=n;return he.map(this,{interfaces_:function(){return[MapOp]},map:function(n){return n.intersection(t)}})}return this.checkNotGeometryCollection(this),this.checkNotGeometryCollection(n),rl.overlayOp(this,n,ll.INTERSECTION)},covers:function(n){return rr.covers(this,n)},coveredBy:function(n){return rr.coveredBy(this,n)},touches:function(n){return rr.touches(this,n)},intersects:function(n){return rr.intersects(this,n)},within:function(n){return rr.within(this,n)},overlaps:function(n){return rr.overlaps(this,n)},disjoint:function(n){return rr.disjoint(this,n)},crosses:function(n){return rr.crosses(this,n)},buffer:function(){if(1===arguments.length){var n=arguments[0];return pi.bufferOp(this,n)}if(2===arguments.length){var t=arguments[0],e=arguments[1];return pi.bufferOp(this,t,e)}if(3===arguments.length){var l=arguments[0],i=arguments[1],r=arguments[2];return pi.bufferOp(this,l,i,r)}},convexHull:function(){return new yt(this).getConvexHull()},relate:function(){for(var n=arguments.length,t=Array(n),e=0;e<n;e++)t[e]=arguments[e];return rr.relate.apply(rr,[this].concat(t))},getCentroid:function(){if(this.isEmpty())return this.factory.createPoint();var n=gt.getCentroid(this);return this.createPointFromInternalCoord(n,this)},getInteriorPoint:function(){if(this.isEmpty())return this.factory.createPoint();var n=null,t=this.getDimension();if(0===t){var e=new hl(this);n=e.getInteriorPoint()}else if(1===t){var e=new al(this);n=e.getInteriorPoint()}else{var e=new ul(this);n=e.getInteriorPoint()}return this.createPointFromInternalCoord(n,this)},symDifference:function(n){if(this.isEmpty()||n.isEmpty()){if(this.isEmpty()&&n.isEmpty())return ll.createEmptyResult(ll.SYMDIFFERENCE,this,n,this.factory);if(this.isEmpty())return n.copy();if(n.isEmpty())return this.copy()}return this.checkNotGeometryCollection(this),this.checkNotGeometryCollection(n),rl.overlayOp(this,n,ll.SYMDIFFERENCE)},createPointFromInternalCoord:function(n,t){return t.getPrecisionModel().makePrecise(n),t.getFactory().createPoint(n)},toText:function(){var n=new ut;return n.write(this)},toString:function(){this.toText()},contains:function(n){return rr.contains(this,n)},difference:function(n){return this.isEmpty()?ll.createEmptyResult(ll.DIFFERENCE,this,n,this.factory):n.isEmpty()?this.copy():(this.checkNotGeometryCollection(this),this.checkNotGeometryCollection(n),rl.overlayOp(this,n,ll.DIFFERENCE))},isSimple:function(){var n=new Wl(this);return n.isSimple()},isWithinDistance:function(n,t){var e=this.getEnvelopeInternal().distance(n.getEnvelopeInternal());return!(e>t)&&wi.isWithinDistance(this,n,t)},distance:function(n){return wi.distance(this,n)},isEquivalentClass:function(n){return this.getClass()===n.getClass()}});var Fu="1.3.0 (6e65adb)";n.version=Fu,n.algorithm=cu,n.densify=du,n.dissolve=gu,n.geom=hu,n.geomgraph=pu,n.index=yu,n.io=Mu,n.noding=Eu,n.operation=Tu,n.precision=Ou,n.simplify=Au,n.triangulate=Du,Object.defineProperty(n,"__esModule",{value:!0})})},{}],44:[function(n,t,e){"use strict";t.exports=l;l.polyline=l;l.polygon=i;function l(n,t,e){var l=n.length,i=u(n[0],t),s=[],a,o,h,f,c;if(!e)e=[];for(a=1;a<l;a++){o=n[a-1];h=n[a];f=c=u(h,t);while(true){if(!(i|f)){s.push(o);if(f!==c){s.push(h);if(a<l-1){e.push(s);s=[]}}else if(a===l-1){s.push(h)}break}else if(i&f){break}else if(i){o=r(o,h,i,t);i=u(o,t)}else{h=r(o,h,f,t);f=u(h,t)}}i=c}if(s.length)e.push(s);return e}function i(n,t){var e,l,i,s,a,o,h;for(l=1;l<=8;l*=2){e=[];i=n[n.length-1];s=!(u(i,t)&l);for(a=0;a<n.length;a++){o=n[a];h=!(u(o,t)&l);if(h!==s)e.push(r(i,o,l,t));if(h)e.push(o);i=o;s=h}n=e;if(!n.length)break}return e}function r(n,t,e,l){return e&8?[n[0]+(t[0]-n[0])*(l[3]-n[1])/(t[1]-n[1]),l[3]]:e&4?[n[0]+(t[0]-n[0])*(l[1]-n[1])/(t[1]-n[1]),l[1]]:e&2?[l[2],n[1]+(t[1]-n[1])*(l[2]-n[0])/(t[0]-n[0])]:e&1?[l[0],n[1]+(t[1]-n[1])*(l[0]-n[0])/(t[0]-n[0])]:null}function u(n,t){var e=0;if(n[0]<t[0])e|=1;else if(n[0]>t[2])e|=2;if(n[1]<t[1])e|=4;else if(n[1]>t[3])e|=8;return e}},{}],45:[function(n,t,e){"use strict";t.exports=i;var l=n("robust-orientation")[3];function i(n){var t=n.length;if(t<3){var e=new Array(t);for(var i=0;i<t;++i){e[i]=i}if(t===2&&n[0][0]===n[1][0]&&n[0][1]===n[1][1]){return[0]}return e}var r=new Array(t);for(var i=0;i<t;++i){r[i]=i}r.sort(function(t,e){var l=n[t][0]-n[e][0];if(l){return l}return n[t][1]-n[e][1]});var u=[r[0],r[1]];var s=[r[0],r[1]];for(var i=2;i<t;++i){var a=r[i];var o=n[a];var h=u.length;while(h>1&&l(n[u[h-2]],n[u[h-1]],o)<=0){h-=1;u.pop()}u.push(a);h=s.length;while(h>1&&l(n[s[h-2]],n[s[h-1]],o)>=0){h-=1;s.pop()}s.push(a)}var e=new Array(s.length+u.length-2);var f=0;for(var i=0,c=u.length;i<c;++i){e[f++]=u[i]}for(var d=s.length-2;d>0;--d){e[f++]=s[d]}return e}},{"robust-orientation":48}],46:[function(n,t,e){"use strict";t.exports=l;function l(n,t,e,u,s){e=e||0;u=u||n.length-1;s=s||r;while(u>e){if(u-e>600){var a=u-e+1;var o=t-e+1;var h=Math.log(a);var f=.5*Math.exp(2*h/3);var c=.5*Math.sqrt(h*f*(a-f)/a)*(o-a/2<0?-1:1);var d=Math.max(e,Math.floor(t-o*f/a+c));var g=Math.min(u,Math.floor(t+(a-o)*f/a+c));l(n,t,d,g,s)}var p=n[t];var v=e;var m=u;i(n,e,t);if(s(n[u],p)>0)i(n,e,u);while(v<m){i(n,v,m);v++;m--;while(s(n[v],p)<0)v++;while(s(n[m],p)>0)m--}if(s(n[e],p)===0)i(n,e,m);else{m++;i(n,m,u)}if(m<=t)e=m+1;if(t<=m)u=m-1}}function i(n,t,e){var l=n[t];n[t]=n[e];n[e]=l}function r(n,t){return n<t?-1:n>t?1:0}},{}],47:[function(n,t,e){"use strict";t.exports=i;var l=n("quickselect");function i(n,t){if(!(this instanceof i))return new i(n,t);this._maxEntries=Math.max(4,n||9);this._minEntries=Math.max(2,Math.ceil(this._maxEntries*.4));if(t){this._initFormat(t)}this.clear()}i.prototype={all:function(){return this._all(this.data,[])},search:function(n){var t=this.data,e=[],l=this.toBBox;if(!v(n,t))return e;var i=[],r,u,s,a;while(t){for(r=0,u=t.children.length;r<u;r++){s=t.children[r];a=t.leaf?l(s):s;if(v(n,a)){if(t.leaf)e.push(s);else if(p(n,a))this._all(s,e);else i.push(s)}}t=i.pop()}return e},collides:function(n){var t=this.data,e=this.toBBox;if(!v(n,t))return false;var l=[],i,r,u,s;while(t){for(i=0,r=t.children.length;i<r;i++){u=t.children[i];s=t.leaf?e(u):u;if(v(n,s)){if(t.leaf||p(n,s))return true;l.push(u)}}t=l.pop()}return false},load:function(n){if(!(n&&n.length))return this;if(n.length<this._minEntries){for(var t=0,e=n.length;t<e;t++){this.insert(n[t])}return this}var l=this._build(n.slice(),0,n.length-1,0);if(!this.data.children.length){this.data=l}else if(this.data.height===l.height){this._splitRoot(this.data,l)}else{if(this.data.height<l.height){var i=this.data;this.data=l;l=i}this._insert(l,this.data.height-l.height-1,true)}return this},insert:function(n){if(n)this._insert(n,this.data.height-1);return this},clear:function(){this.data=m([]);return this},remove:function(n,t){if(!n)return this;var e=this.data,l=this.toBBox(n),i=[],u=[],s,a,o,h;while(e||i.length){if(!e){e=i.pop();a=i[i.length-1];s=u.pop();h=true}if(e.leaf){o=r(n,e.children,t);if(o!==-1){e.children.splice(o,1);i.push(e);this._condense(i);return this}}if(!h&&!e.leaf&&p(e,l)){i.push(e);u.push(s);s=0;a=e;e=e.children[0]}else if(a){s++;e=a.children[s];h=false}else e=null}return this},toBBox:function(n){return n},compareMinX:o,compareMinY:h,toJSON:function(){return this.data},fromJSON:function(n){this.data=n;return this},_all:function(n,t){var e=[];while(n){if(n.leaf)t.push.apply(t,n.children);else e.push.apply(e,n.children);n=e.pop()}return t},_build:function(n,t,e,l){var i=e-t+1,r=this._maxEntries,s;if(i<=r){s=m(n.slice(t,e+1));u(s,this.toBBox);return s}if(!l){l=Math.ceil(Math.log(i)/Math.log(r));r=Math.ceil(i/Math.pow(r,l-1))}s=m([]);s.leaf=false;s.height=l;var a=Math.ceil(i/r),o=a*Math.ceil(Math.sqrt(r)),h,f,c,d;y(n,t,e,o,this.compareMinX);for(h=t;h<=e;h+=o){c=Math.min(h+o-1,e);y(n,h,c,a,this.compareMinY);for(f=h;f<=c;f+=a){d=Math.min(f+a-1,c);s.children.push(this._build(n,f,d,l-1))}}u(s,this.toBBox);return s},_chooseSubtree:function(n,t,e,l){var i,r,u,s,a,o,h,c;while(true){l.push(t);if(t.leaf||l.length-1===e)break;h=c=Infinity;for(i=0,r=t.children.length;i<r;i++){u=t.children[i];a=f(u);o=d(n,u)-a;if(o<c){c=o;h=a<h?a:h;s=u}else if(o===c){if(a<h){h=a;s=u}}}t=s||t.children[0]}return t},_insert:function(n,t,e){var l=this.toBBox,i=e?n:l(n),r=[];var u=this._chooseSubtree(i,this.data,t,r);u.children.push(n);a(u,i);while(t>=0){if(r[t].children.length>this._maxEntries){this._split(r,t);t--}else break}this._adjustParentBBoxes(i,r,t)},_split:function(n,t){var e=n[t],l=e.children.length,i=this._minEntries;this._chooseSplitAxis(e,i,l);var r=this._chooseSplitIndex(e,i,l);var s=m(e.children.splice(r,e.children.length-r));s.height=e.height;s.leaf=e.leaf;u(e,this.toBBox);u(s,this.toBBox);if(t)n[t-1].children.push(s);else this._splitRoot(e,s)},_splitRoot:function(n,t){this.data=m([n,t]);this.data.height=n.height+1;this.data.leaf=false;u(this.data,this.toBBox)},_chooseSplitIndex:function(n,t,e){var l,i,r,u,a,o,h,c;o=h=Infinity;for(l=t;l<=e-t;l++){i=s(n,0,l,this.toBBox);r=s(n,l,e,this.toBBox);u=g(i,r);a=f(i)+f(r);if(u<o){o=u;c=l;h=a<h?a:h}else if(u===o){if(a<h){h=a;c=l}}}return c},_chooseSplitAxis:function(n,t,e){var l=n.leaf?this.compareMinX:o,i=n.leaf?this.compareMinY:h,r=this._allDistMargin(n,t,e,l),u=this._allDistMargin(n,t,e,i);if(r<u)n.children.sort(l)},_allDistMargin:function(n,t,e,l){n.children.sort(l);var i=this.toBBox,r=s(n,0,t,i),u=s(n,e-t,e,i),o=c(r)+c(u),h,f;for(h=t;h<e-t;h++){f=n.children[h];a(r,n.leaf?i(f):f);o+=c(r)}for(h=e-t-1;h>=t;h--){f=n.children[h];a(u,n.leaf?i(f):f);o+=c(u)}return o},_adjustParentBBoxes:function(n,t,e){for(var l=e;l>=0;l--){a(t[l],n)}},_condense:function(n){for(var t=n.length-1,e;t>=0;t--){if(n[t].children.length===0){if(t>0){e=n[t-1].children;e.splice(e.indexOf(n[t]),1)}else this.clear()}else u(n[t],this.toBBox)}},_initFormat:function(n){var t=["return a"," - b",";"];this.compareMinX=new Function("a","b",t.join(n[0]));this.compareMinY=new Function("a","b",t.join(n[1]));this.toBBox=new Function("a","return {minX: a"+n[0]+", minY: a"+n[1]+", maxX: a"+n[2]+", maxY: a"+n[3]+"};")}};function r(n,t,e){if(!e)return t.indexOf(n);for(var l=0;l<t.length;l++){if(e(n,t[l]))return l}return-1}function u(n,t){s(n,0,n.children.length,t,n)}function s(n,t,e,l,i){if(!i)i=m(null);i.minX=Infinity;i.minY=Infinity;i.maxX=-Infinity;i.maxY=-Infinity;for(var r=t,u;r<e;r++){u=n.children[r];a(i,n.leaf?l(u):u)}return i}function a(n,t){n.minX=Math.min(n.minX,t.minX);n.minY=Math.min(n.minY,t.minY);n.maxX=Math.max(n.maxX,t.maxX);n.maxY=Math.max(n.maxY,t.maxY);return n}function o(n,t){return n.minX-t.minX}function h(n,t){return n.minY-t.minY}function f(n){return(n.maxX-n.minX)*(n.maxY-n.minY)}function c(n){return n.maxX-n.minX+(n.maxY-n.minY)}function d(n,t){return(Math.max(t.maxX,n.maxX)-Math.min(t.minX,n.minX))*(Math.max(t.maxY,n.maxY)-Math.min(t.minY,n.minY))}function g(n,t){var e=Math.max(n.minX,t.minX),l=Math.max(n.minY,t.minY),i=Math.min(n.maxX,t.maxX),r=Math.min(n.maxY,t.maxY);return Math.max(0,i-e)*Math.max(0,r-l)}function p(n,t){return n.minX<=t.minX&&n.minY<=t.minY&&t.maxX<=n.maxX&&t.maxY<=n.maxY}function v(n,t){return t.minX<=n.maxX&&t.minY<=n.maxY&&t.maxX>=n.minX&&t.maxY>=n.minY}function m(n){return{children:n,height:1,leaf:true,minX:Infinity,minY:Infinity,maxX:-Infinity,maxY:-Infinity}}function y(n,t,e,i,r){var u=[t,e],s;while(u.length){e=u.pop();t=u.pop();if(e-t<=i)continue;s=t+Math.ceil((e-t)/i/2)*i;l(n,s,t,e,r);u.push(t,s,s,e)}}},{quickselect:46}],48:[function(n,t,e){"use strict";var l=n("two-product");var i=n("robust-sum");var r=n("robust-scale");var u=n("robust-subtract");var s=5;var a=1.1102230246251565e-16;var o=(3+16*a)*a;var h=(7+56*a)*a;function f(n,t){var e=new Array(n.length-1);for(var l=1;l<n.length;++l){var i=e[l-1]=new Array(n.length-1);for(var r=0,u=0;r<n.length;++r){if(r===t){continue}i[u++]=n[l][r]}}return e}function c(n){var t=new Array(n);for(var e=0;e<n;++e){t[e]=new Array(n);for(var l=0;l<n;++l){t[e][l]=["m",l,"[",n-e-1,"]"].join("")}}return t}function d(n){if(n&1){return"-"}return""}function g(n){if(n.length===1){return n[0]}else if(n.length===2){return["sum(",n[0],",",n[1],")"].join("")}else{var t=n.length>>1;return["sum(",g(n.slice(0,t)),",",g(n.slice(t)),")"].join("")}}function p(n){if(n.length===2){return[["sum(prod(",n[0][0],",",n[1][1],"),prod(-",n[0][1],",",n[1][0],"))"].join("")]}else{var t=[];for(var e=0;e<n.length;++e){t.push(["scale(",g(p(f(n,e))),",",d(e),n[0][e],")"].join(""))}return t}}function v(n){var t=[];var e=[];var s=c(n);var a=[];for(var o=0;o<n;++o){if((o&1)===0){t.push.apply(t,p(f(s,o)))}else{e.push.apply(e,p(f(s,o)))}a.push("m"+o)}var h=g(t);var d=g(e);var v="orientation"+n+"Exact";var m=["function ",v,"(",a.join(),"){var p=",h,",n=",d,",d=sub(p,n);return d[d.length-1];};return ",v].join("");var y=new Function("sum","prod","scale","sub",m);return y(i,l,r,u)}var m=v(3);var y=v(4);var x=[function n(){return 0},function n(){return 0},function n(t,e){return e[0]-t[0]},function n(t,e,l){
var i=(t[1]-l[1])*(e[0]-l[0]);var r=(t[0]-l[0])*(e[1]-l[1]);var u=i-r;var s;if(i>0){if(r<=0){return u}else{s=i+r}}else if(i<0){if(r>=0){return u}else{s=-(i+r)}}else{return u}var a=o*s;if(u>=a||u<=-a){return u}return m(t,e,l)},function n(t,e,l,i){var r=t[0]-i[0];var u=e[0]-i[0];var s=l[0]-i[0];var a=t[1]-i[1];var o=e[1]-i[1];var f=l[1]-i[1];var c=t[2]-i[2];var d=e[2]-i[2];var g=l[2]-i[2];var p=u*f;var v=s*o;var m=s*a;var x=r*f;var w=r*o;var _=u*a;var M=c*(p-v)+d*(m-x)+g*(w-_);var E=(Math.abs(p)+Math.abs(v))*Math.abs(c)+(Math.abs(m)+Math.abs(x))*Math.abs(d)+(Math.abs(w)+Math.abs(_))*Math.abs(g);var b=h*E;if(M>b||-M>b){return M}return y(t,e,l,i)}];function w(n){var t=x[n.length];if(!t){t=x[n.length]=v(n.length)}return t.apply(undefined,n)}function _(){while(x.length<=s){x.push(v(x.length))}var n=[];var e=["slow"];for(var l=0;l<=s;++l){n.push("a"+l);e.push("o"+l)}var i=["function getOrientation(",n.join(),"){switch(arguments.length){case 0:case 1:return 0;"];for(var l=2;l<=s;++l){i.push("case ",l,":return o",l,"(",n.slice(0,l).join(),");")}i.push("}var s=new Array(arguments.length);for(var i=0;i<arguments.length;++i){s[i]=arguments[i]};return slow(s);}return getOrientation");e.push(i.join(""));var r=Function.apply(undefined,e);t.exports=r.apply(undefined,[w].concat(x));for(var l=0;l<=s;++l){t.exports[l]=x[l]}}_()},{"robust-scale":49,"robust-subtract":50,"robust-sum":51,"two-product":54}],49:[function(n,t,e){"use strict";var l=n("two-product");var i=n("two-sum");t.exports=r;function r(n,t){var e=n.length;if(e===1){var r=l(n[0],t);if(r[0]){return r}return[r[1]]}var u=new Array(2*e);var s=[.1,.1];var a=[.1,.1];var o=0;l(n[0],t,s);if(s[0]){u[o++]=s[0]}for(var h=1;h<e;++h){l(n[h],t,a);var f=s[1];i(f,a[0],s);if(s[0]){u[o++]=s[0]}var c=a[1];var d=s[1];var g=c+d;var p=g-c;var v=d-p;s[1]=g;if(v){u[o++]=v}}if(s[1]){u[o++]=s[1]}if(o===0){u[o++]=0}u.length=o;return u}},{"two-product":54,"two-sum":55}],50:[function(n,t,e){"use strict";t.exports=i;function l(n,t){var e=n+t;var l=e-n;var i=e-l;var r=t-l;var u=n-i;var s=u+r;if(s){return[s,e]}return[e]}function i(n,t){var e=n.length|0;var i=t.length|0;if(e===1&&i===1){return l(n[0],-t[0])}var r=e+i;var u=new Array(r);var s=0;var a=0;var o=0;var h=Math.abs;var f=n[a];var c=h(f);var d=-t[o];var g=h(d);var p,v;if(c<g){v=f;a+=1;if(a<e){f=n[a];c=h(f)}}else{v=d;o+=1;if(o<i){d=-t[o];g=h(d)}}if(a<e&&c<g||o>=i){p=f;a+=1;if(a<e){f=n[a];c=h(f)}}else{p=d;o+=1;if(o<i){d=-t[o];g=h(d)}}var m=p+v;var y=m-p;var x=v-y;var w=x;var _=m;var M,E,b,C,I;while(a<e&&o<i){if(c<g){p=f;a+=1;if(a<e){f=n[a];c=h(f)}}else{p=d;o+=1;if(o<i){d=-t[o];g=h(d)}}v=w;m=p+v;y=m-p;x=v-y;if(x){u[s++]=x}M=_+m;E=M-_;b=M-E;C=m-E;I=_-b;w=I+C;_=M}while(a<e){p=f;v=w;m=p+v;y=m-p;x=v-y;if(x){u[s++]=x}M=_+m;E=M-_;b=M-E;C=m-E;I=_-b;w=I+C;_=M;a+=1;if(a<e){f=n[a]}}while(o<i){p=d;v=w;m=p+v;y=m-p;x=v-y;if(x){u[s++]=x}M=_+m;E=M-_;b=M-E;C=m-E;I=_-b;w=I+C;_=M;o+=1;if(o<i){d=-t[o]}}if(w){u[s++]=w}if(_){u[s++]=_}if(!s){u[s++]=0}u.length=s;return u}},{}],51:[function(n,t,e){"use strict";t.exports=i;function l(n,t){var e=n+t;var l=e-n;var i=e-l;var r=t-l;var u=n-i;var s=u+r;if(s){return[s,e]}return[e]}function i(n,t){var e=n.length|0;var i=t.length|0;if(e===1&&i===1){return l(n[0],t[0])}var r=e+i;var u=new Array(r);var s=0;var a=0;var o=0;var h=Math.abs;var f=n[a];var c=h(f);var d=t[o];var g=h(d);var p,v;if(c<g){v=f;a+=1;if(a<e){f=n[a];c=h(f)}}else{v=d;o+=1;if(o<i){d=t[o];g=h(d)}}if(a<e&&c<g||o>=i){p=f;a+=1;if(a<e){f=n[a];c=h(f)}}else{p=d;o+=1;if(o<i){d=t[o];g=h(d)}}var m=p+v;var y=m-p;var x=v-y;var w=x;var _=m;var M,E,b,C,I;while(a<e&&o<i){if(c<g){p=f;a+=1;if(a<e){f=n[a];c=h(f)}}else{p=d;o+=1;if(o<i){d=t[o];g=h(d)}}v=w;m=p+v;y=m-p;x=v-y;if(x){u[s++]=x}M=_+m;E=M-_;b=M-E;C=m-E;I=_-b;w=I+C;_=M}while(a<e){p=f;v=w;m=p+v;y=m-p;x=v-y;if(x){u[s++]=x}M=_+m;E=M-_;b=M-E;C=m-E;I=_-b;w=I+C;_=M;a+=1;if(a<e){f=n[a]}}while(o<i){p=d;v=w;m=p+v;y=m-p;x=v-y;if(x){u[s++]=x}M=_+m;E=M-_;b=M-E;C=m-E;I=_-b;w=I+C;_=M;o+=1;if(o<i){d=t[o]}}if(w){u[s++]=w}if(_){u[s++]=_}if(!s){u[s++]=0}u.length=s;return u}},{}],52:[function(n,t,e){"use strict";"use restrict";var l=n("bit-twiddle"),i=n("union-find");function r(n){var t=0,e=Math.max;for(var l=0,i=n.length;l<i;++l){t=e(t,n[l].length)}return t-1}e.dimension=r;function u(n){var t=-1,e=Math.max;for(var l=0,i=n.length;l<i;++l){var r=n[l];for(var u=0,s=r.length;u<s;++u){t=e(t,r[u])}}return t+1}e.countVertices=u;function s(n){var t=new Array(n.length);for(var e=0,l=n.length;e<l;++e){t[e]=n[e].slice(0)}return t}e.cloneCells=s;function a(n,t){var e=n.length,l=n.length-t.length,i=Math.min;if(l){return l}switch(e){case 0:return 0;case 1:return n[0]-t[0];case 2:var r=n[0]+n[1]-t[0]-t[1];if(r){return r}return i(n[0],n[1])-i(t[0],t[1]);case 3:var u=n[0]+n[1],s=t[0]+t[1];r=u+n[2]-(s+t[2]);if(r){return r}var a=i(n[0],n[1]),o=i(t[0],t[1]),r=i(a,n[2])-i(o,t[2]);if(r){return r}return i(a+n[2],u)-i(o+t[2],s);default:var h=n.slice(0);h.sort();var f=t.slice(0);f.sort();for(var c=0;c<e;++c){l=h[c]-f[c];if(l){return l}}return 0}}e.compareCells=a;function o(n,t){return a(n[0],t[0])}function h(n,t){if(t){var e=n.length;var l=new Array(e);for(var i=0;i<e;++i){l[i]=[n[i],t[i]]}l.sort(o);for(var i=0;i<e;++i){n[i]=l[i][0];t[i]=l[i][1]}return n}else{n.sort(a);return n}}e.normalize=h;function f(n){if(n.length===0){return[]}var t=1,e=n.length;for(var l=1;l<e;++l){var i=n[l];if(a(i,n[l-1])){if(l===t){t++;continue}n[t++]=i}}n.length=t;return n}e.unique=f;function c(n,t){var e=0,l=n.length-1,i=-1;while(e<=l){var r=e+l>>1,u=a(n[r],t);if(u<=0){if(u===0){i=r}e=r+1}else if(u>0){l=r-1}}return i}e.findCell=c;function d(n,t){var e=new Array(n.length);for(var i=0,r=e.length;i<r;++i){e[i]=[]}var u=[];for(var i=0,s=t.length;i<s;++i){var o=t[i];var h=o.length;for(var f=1,d=1<<h;f<d;++f){u.length=l.popCount(f);var g=0;for(var p=0;p<h;++p){if(f&1<<p){u[g++]=o[p]}}var v=c(n,u);if(v<0){continue}while(true){e[v++].push(i);if(v>=n.length||a(n[v],u)!==0){break}}}}return e}e.incidence=d;function g(n,t){if(!t){return d(f(v(n,0)),n,0)}var e=new Array(t);for(var l=0;l<t;++l){e[l]=[]}for(var l=0,i=n.length;l<i;++l){var r=n[l];for(var u=0,s=r.length;u<s;++u){e[r[u]].push(l)}}return e}e.dual=g;function p(n){var t=[];for(var e=0,l=n.length;e<l;++e){var i=n[e],r=i.length|0;for(var u=1,s=1<<r;u<s;++u){var a=[];for(var o=0;o<r;++o){if(u>>>o&1){a.push(i[o])}}t.push(a)}}return h(t)}e.explode=p;function v(n,t){if(t<0){return[]}var e=[],i=(1<<t+1)-1;for(var r=0;r<n.length;++r){var u=n[r];for(var s=i;s<1<<u.length;s=l.nextCombination(s)){var a=new Array(t+1),o=0;for(var f=0;f<u.length;++f){if(s&1<<f){a[o++]=u[f]}}e.push(a)}}return h(e)}e.skeleton=v;function m(n){var t=[];for(var e=0,l=n.length;e<l;++e){var i=n[e];for(var r=0,u=i.length;r<u;++r){var s=new Array(i.length-1);for(var a=0,o=0;a<u;++a){if(a!==r){s[o++]=i[a]}}t.push(s)}}return h(t)}e.boundary=m;function y(n,t){var e=new i(t);for(var l=0;l<n.length;++l){var r=n[l];for(var u=0;u<r.length;++u){for(var s=u+1;s<r.length;++s){e.link(r[u],r[s])}}}var a=[],o=e.ranks;for(var l=0;l<o.length;++l){o[l]=-1}for(var l=0;l<n.length;++l){var h=e.find(n[l][0]);if(o[h]<0){o[h]=a.length;a.push([n[l].slice(0)])}else{a[o[h]].push(n[l].slice(0))}}return a}function x(n){var t=f(h(v(n,0))),e=new i(t.length);for(var l=0;l<n.length;++l){var r=n[l];for(var u=0;u<r.length;++u){var s=c(t,[r[u]]);for(var a=u+1;a<r.length;++a){e.link(s,c(t,[r[a]]))}}}var o=[],d=e.ranks;for(var l=0;l<d.length;++l){d[l]=-1}for(var l=0;l<n.length;++l){var g=e.find(c(t,[n[l][0]]));if(d[g]<0){d[g]=o.length;o.push([n[l].slice(0)])}else{o[d[g]].push(n[l].slice(0))}}return o}function w(n,t){if(t){return y(n,t)}return x(n)}e.connectedComponents=w},{"bit-twiddle":36,"union-find":56}],53:[function(t,e,l){(function(){"use strict";function t(n,t){var e=n.x-t.x,l=n.y-t.y;return e*e+l*l}function l(n,t,e){var l=t.x,i=t.y,r=e.x-l,u=e.y-i;if(r!==0||u!==0){var s=((n.x-l)*r+(n.y-i)*u)/(r*r+u*u);if(s>1){l=e.x;i=e.y}else if(s>0){l+=r*s;i+=u*s}}r=n.x-l;u=n.y-i;return r*r+u*u}function i(n,e){var l=n[0],i=[l],r;for(var u=1,s=n.length;u<s;u++){r=n[u];if(t(r,l)>e){i.push(r);l=r}}if(l!==r)i.push(r);return i}function r(n,t){var e=n.length,i=typeof Uint8Array!=="undefined"?Uint8Array:Array,r=new i(e),u=0,s=e-1,a=[],o=[],h,f,c,d;r[u]=r[s]=1;while(s){f=0;for(h=u+1;h<s;h++){c=l(n[h],n[u],n[s]);if(c>f){d=h;f=c}}if(f>t){r[d]=1;a.push(u,d,d,s)}s=a.pop();u=a.pop()}for(h=0;h<e;h++){if(r[h])o.push(n[h])}return o}function u(n,t,e){var l=t!==undefined?t*t:1;n=e?n:i(n,l);n=r(n,l);return n}if(typeof n==="function"&&n.amd)n(function(){return u});else if(typeof e!=="undefined")e.exports=u;else if(typeof self!=="undefined")self.simplify=u;else window.simplify=u})()},{}],54:[function(n,t,e){"use strict";t.exports=i;var l=+(Math.pow(2,27)+1);function i(n,t,e){var i=n*t;var r=l*n;var u=r-n;var s=r-u;var a=n-s;var o=l*t;var h=o-t;var f=o-h;var c=t-f;var d=i-s*f;var g=d-a*f;var p=g-s*c;var v=a*c-p;if(e){e[0]=v;e[1]=i;return e}return[v,i]}},{}],55:[function(n,t,e){"use strict";t.exports=l;function l(n,t,e){var l=n+t;var i=l-n;var r=l-i;var u=t-i;var s=n-r;if(e){e[0]=s+u;e[1]=l;return e}return[s+u,l]}},{}],56:[function(n,t,e){"use strict";"use restrict";t.exports=l;function l(n){this.roots=new Array(n);this.ranks=new Array(n);for(var t=0;t<n;++t){this.roots[t]=t;this.ranks[t]=0}}var i=l.prototype;Object.defineProperty(i,"length",{get:function(){return this.roots.length}});i.makeSet=function(){var n=this.roots.length;this.roots.push(n);this.ranks.push(0);return n};i.find=function(n){var t=n;var e=this.roots;while(e[n]!==n){n=e[n]}while(e[t]!==n){var l=e[t];e[t]=n;t=l}return n};i.link=function(n,t){var e=this.find(n),l=this.find(t);if(e===l){return}var i=this.ranks,r=this.roots,u=i[e],s=i[l];if(u<s){r[e]=l}else if(s<u){r[l]=e}else{r[l]=e;++i[e]}}},{}]},{},[1])(1)});(function(n){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=n()}else if(typeof define==="function"&&define.amd){define("ThirdParty/TURFjs/turf-plugin",[],n)}else{var t;if(typeof window!=="undefined"){t=window}else if(typeof global!=="undefined"){t=global}else if(typeof self!=="undefined"){t=self}else{t=this}t.turf=n()}})(function(){var n,t;var e,l,i;return function n(t,e,l){function i(u,s){if(!e[u]){if(!t[u]){var a=typeof require=="function"&&require;if(!s&&a)return a(u,!0);if(r)return r(u,!0);var o=new Error("Cannot find module '"+u+"'");throw o.code="MODULE_NOT_FOUND",o}var h=e[u]={exports:{}};t[u][0].call(h.exports,function(n){var e=t[u][1][n];return i(e?e:n)},h,h.exports,n,t,e,l)}return e[u].exports}var r=typeof require=="function"&&require;for(var u=0;u<l.length;u++)i(l[u]);return i}({1:[function(e,l,i){l.exports={lineIntersect:e("@turf/line-intersect"),bboxClip:e("@turf/bbox-clip"),polygonToLineString:e("@turf/polygon-to-linestring"),meta:n,invariant:t}},{"@turf/bbox-clip":2,"@turf/line-intersect":7,"@turf/polygon-to-linestring":17}],2:[function(n,e,l){var i=n("@turf/helpers");var r=n("lineclip");t=n("@turf/invariant");var u=n("@turf/invariant").getCoords;var s=i.lineString;var a=i.multiLineString;var o=i.polygon;var h=i.multiPolygon;e.exports=function(n,t){var e=c(n);var l=u(n);var i=n.properties;switch(e){case"LineString":case"MultiLineString":var d=[];if(e==="LineString")l=[l];l.forEach(function(n){r(n,t,d)});if(d.length===1)return s(d[0],i);return a(d,i);case"Polygon":return o(f(l,t),i);case"MultiPolygon":return h(l.map(function(n){return f(n,t)}),i);default:throw new Error("geometry "+e+" not supported")}};function f(n,t){var e=[];for(var l=0;l<n.length;l++){var i=r.polygon(n[l],t);if(i.length>0){if(i[0][0]!==i[i.length-1][0]||i[0][1]!==i[i.length-1][1]){i.push(i[0])}e.push(i)}}return e}function c(n){return n.geometry?n.geometry.type:n.type}},{"@turf/helpers":3,"@turf/invariant":4,lineclip:21}],3:[function(n,t,e){function l(n,t){if(!n)throw new Error("No geometry passed");return{type:"Feature",properties:t||{},geometry:n}}function i(n,t){if(!n)throw new Error("No coordinates passed");if(n.length===undefined)throw new Error("Coordinates must be an array");if(n.length<2)throw new Error("Coordinates must be at least 2 numbers long");if(typeof n[0]!=="number"||typeof n[1]!=="number")throw new Error("Coordinates must numbers");return l({type:"Point",coordinates:n},t)}function r(n,t){if(!n)throw new Error("No coordinates passed");for(var e=0;e<n.length;e++){var i=n[e];if(i.length<4){throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.")}for(var r=0;r<i[i.length-1].length;r++){if(i[i.length-1][r]!==i[0][r]){throw new Error("First and last Position are not equivalent.")}}}return l({type:"Polygon",coordinates:n},t)}function u(n,t){if(!n)throw new Error("No coordinates passed");return l({type:"LineString",coordinates:n},t)}function s(n){if(!n)throw new Error("No features passed");return{type:"FeatureCollection",features:n}}function a(n,t){if(!n)throw new Error("No coordinates passed");return l({type:"MultiLineString",coordinates:n},t)}function o(n,t){if(!n)throw new Error("No coordinates passed");return l({type:"MultiPoint",coordinates:n},t)}function h(n,t){if(!n)throw new Error("No coordinates passed");return l({type:"MultiPolygon",coordinates:n},t)}function f(n,t){if(!n)throw new Error("No geometries passed");return l({type:"GeometryCollection",geometries:n},t)}var c={miles:3960,nauticalmiles:3441.145,degrees:57.2957795,radians:1,inches:250905600,yards:6969600,meters:6373e3,metres:6373e3,kilometers:6373,kilometres:6373,feet:20908792.65};function d(n,t){var e=c[t||"kilometers"];if(e===undefined)throw new Error("Invalid unit");return n*e}function g(n,t){var e=c[t||"kilometers"];if(e===undefined)throw new Error("Invalid unit");return n/e}function p(n,t){var e=c[t||"kilometers"];if(e===undefined)throw new Error("Invalid unit");return n/e*57.2958}t.exports={feature:l,featureCollection:s,geometryCollection:f,point:i,multiPoint:o,lineString:u,multiLineString:a,polygon:r,multiPolygon:h,radiansToDistance:d,distanceToRadians:g,distanceToDegrees:p}},{}],4:[function(n,t,e){function l(n){if(!n)throw new Error("No obj passed");var t=i(n);if(t.length>1&&typeof t[0]==="number"&&typeof t[1]==="number"){return t}else{throw new Error("Coordinate is not a valid Point")}}function i(n){if(!n)throw new Error("No obj passed");var t;if(n.length){t=n}else if(n.coordinates){t=n.coordinates}else if(n.geometry&&n.geometry.coordinates){t=n.geometry.coordinates}if(t){r(t);return t}throw new Error("No valid coordinates")}function r(n){if(n.length>1&&typeof n[0]==="number"&&typeof n[1]==="number"){return true}if(Array.isArray(n[0])&&n[0].length){return r(n[0])}throw new Error("coordinates must only contain numbers")}function u(n,t,e){if(!t||!e)throw new Error("type and name required");if(!n||n.type!==t){throw new Error("Invalid input to "+e+": must be a "+t+", given "+n.type)}}function s(n,t,e){if(!n)throw new Error("No feature passed");if(!e)throw new Error(".featureOf() requires a name");if(!n||n.type!=="Feature"||!n.geometry){throw new Error("Invalid input to "+e+", Feature with geometry required")}if(!n.geometry||n.geometry.type!==t){throw new Error("Invalid input to "+e+": must be a "+t+", given "+n.geometry.type)}}function a(n,t,e){if(!n)throw new Error("No featureCollection passed");if(!e)throw new Error(".collectionOf() requires a name");if(!n||n.type!=="FeatureCollection"){throw new Error("Invalid input to "+e+", FeatureCollection required")}for(var l=0;l<n.features.length;l++){var i=n.features[l];if(!i||i.type!=="Feature"||!i.geometry){throw new Error("Invalid input to "+e+", Feature with geometry required")}if(!i.geometry||i.geometry.type!==t){throw new Error("Invalid input to "+e+": must be a "+t+", given "+i.geometry.type)}}}t.exports={geojsonType:u,collectionOf:a,featureOf:s,getCoord:l,getCoords:i,containsNumber:r}},{}],5:[function(t,e,l){n=t("@turf/meta");var i=t("@turf/meta").coordEach;e.exports=function(n){var t=[Infinity,Infinity,-Infinity,-Infinity];i(n,function(n){if(t[0]>n[0])t[0]=n[0];if(t[1]>n[1])t[1]=n[1];if(t[2]<n[0])t[2]=n[0];if(t[3]<n[1])t[3]=n[1]});return t}},{"@turf/meta":16}],6:[function(n,t,e){function l(n,t){if(!n)throw new Error("No geometry passed");return{type:"Feature",properties:t||{},geometry:n}}t.exports.feature=l;t.exports.point=function(n,t){if(!n)throw new Error("No coordinates passed");if(n.length===undefined)throw new Error("Coordinates must be an array");if(n.length<2)throw new Error("Coordinates must be at least 2 numbers long");if(typeof n[0]!=="number"||typeof n[1]!=="number")throw new Error("Coordinates must numbers");return l({type:"Point",coordinates:n},t)};t.exports.polygon=function(n,t){if(!n)throw new Error("No coordinates passed");for(var e=0;e<n.length;e++){var i=n[e];if(i.length<4){throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.")}for(var r=0;r<i[i.length-1].length;r++){if(i[i.length-1][r]!==i[0][r]){throw new Error("First and last Position are not equivalent.")}}}return l({type:"Polygon",coordinates:n},t)};t.exports.lineString=function(n,t){if(!n)throw new Error("No coordinates passed");return l({type:"LineString",coordinates:n},t)};t.exports.featureCollection=function(n){if(!n)throw new Error("No features passed");return{type:"FeatureCollection",features:n}};t.exports.multiLineString=function(n,t){if(!n)throw new Error("No coordinates passed");return l({type:"MultiLineString",coordinates:n},t)};t.exports.multiPoint=function(n,t){if(!n)throw new Error("No coordinates passed");return l({type:"MultiPoint",coordinates:n},t)};t.exports.multiPolygon=function(n,t){if(!n)throw new Error("No coordinates passed");return l({type:"MultiPolygon",coordinates:n},t)};t.exports.geometryCollection=function(n,t){if(!n)throw new Error("No geometries passed");return l({type:"GeometryCollection",geometries:n},t)};var i={miles:3960,nauticalmiles:3441.145,degrees:57.2957795,radians:1,inches:250905600,yards:6969600,meters:6373e3,metres:6373e3,kilometers:6373,kilometres:6373,feet:20908792.65};t.exports.radiansToDistance=function(n,t){var e=i[t||"kilometers"];if(e===undefined)throw new Error("Invalid unit");return n*e};t.exports.distanceToRadians=function(n,t){var e=i[t||"kilometers"];if(e===undefined)throw new Error("Invalid unit");return n/e};t.exports.distanceToDegrees=function(n,t){var e=i[t||"kilometers"];if(e===undefined)throw new Error("Invalid unit");return n/e*57.2958}},{}],7:[function(n,t,e){var l=n("@turf/helpers");var i=n("@turf/meta");var r=n("@turf/line-segment");var u=n("@turf/invariant").getCoords;var s=n("geojson-rbush");var a=l.point;var o=l.featureCollection;var h=i.featureEach;t.exports=function(n,t){var e=[];if(n.geometry.type==="LineString"&&t.geometry.type==="LineString"&&n.geometry.coordinates.length===2&&t.geometry.coordinates.length===2){var l=f(n,t);if(l)e.push(l);return o(e)}var i=s();i.load(r(t));h(r(n),function(n){h(i.search(n),function(t){var l=f(n,t);if(l)e.push(l)})});return o(e)};function f(n,t){var e=u(n);var l=u(t);if(e.length!==2){throw new Error("<intersects> line1 must only contain 2 coordinates")}if(l.length!==2){throw new Error("<intersects> line2 must only contain 2 coordinates")}var i=e[0][0];var r=e[0][1];var s=e[1][0];var o=e[1][1];var h=l[0][0];var f=l[0][1];var c=l[1][0];var d=l[1][1];var g=(d-f)*(s-i)-(c-h)*(o-r);var p=(c-h)*(r-f)-(d-f)*(i-h);var v=(s-i)*(r-f)-(o-r)*(i-h);if(g===0){if(p===0&&v===0){return null}return null}var m=p/g;var y=v/g;if(m>=0&&m<=1&&y>=0&&y<=1){var x=i+m*(s-i);var w=r+m*(o-r);return a([x,w])}return null}},{"@turf/helpers":8,"@turf/invariant":9,"@turf/line-segment":11,"@turf/meta":10,"geojson-rbush":20}],8:[function(n,t,e){arguments[4][3][0].apply(e,arguments)},{dup:3}],9:[function(n,t,e){arguments[4][4][0].apply(e,arguments)},{dup:4}],10:[function(n,t,e){function l(n,t,e){var i,r,u,s,a,o,h,f,c,d=0,g=0,p,v=n.type==="FeatureCollection",m=n.type==="Feature",y=v?n.features.length:1;for(i=0;i<y;i++){c=v?n.features[i].geometry:m?n.geometry:n;p=c.type==="GeometryCollection";h=p?c.geometries.length:1;for(s=0;s<h;s++){o=p?c.geometries[s]:c;f=o.coordinates;d=e&&(o.type==="Polygon"||o.type==="MultiPolygon")?1:0;if(o.type==="Point"){t(f,g);g++}else if(o.type==="LineString"||o.type==="MultiPoint"){for(r=0;r<f.length;r++){t(f[r],g);g++}}else if(o.type==="Polygon"||o.type==="MultiLineString"){for(r=0;r<f.length;r++)for(u=0;u<f[r].length-d;u++){t(f[r][u],g);g++}}else if(o.type==="MultiPolygon"){for(r=0;r<f.length;r++)for(u=0;u<f[r].length;u++)for(a=0;a<f[r][u].length-d;a++){t(f[r][u][a],g);g++}}else if(o.type==="GeometryCollection"){for(r=0;r<o.geometries.length;r++)l(o.geometries[r],t,e)}else{throw new Error("Unknown Geometry Type")}}}}function i(n,t,e,i){var r=e;l(n,function(n,l){if(l===0&&e===undefined){r=n}else{r=t(r,n,l)}},i);return r}function r(n,t){var e;switch(n.type){case"FeatureCollection":for(e=0;e<n.features.length;e++){t(n.features[e].properties,e)}break;case"Feature":t(n.properties,0);break}}function u(n,t,e){var l=e;r(n,function(n,i){if(i===0&&e===undefined){l=n}else{l=t(l,n,i)}});return l}function s(n,t){if(n.type==="Feature"){t(n,0)}else if(n.type==="FeatureCollection"){for(var e=0;e<n.features.length;e++){t(n.features[e],e)}}}function a(n,t,e){var l=e;s(n,function(n,i){if(i===0&&e===undefined){l=n}else{l=t(l,n,i)}});return l}function o(n){var t=[];l(n,function(n){t.push(n)});return t}function h(n,t){var e,l,i,r,u,s,a,o=0,h=n.type==="FeatureCollection",f=n.type==="Feature",c=h?n.features.length:1;for(e=0;e<c;e++){s=h?n.features[e].geometry:f?n.geometry:n;a=s.type==="GeometryCollection";u=a?s.geometries.length:1;for(i=0;i<u;i++){r=a?s.geometries[i]:s;if(r.type==="Point"||r.type==="LineString"||r.type==="MultiPoint"||r.type==="Polygon"||r.type==="MultiLineString"||r.type==="MultiPolygon"){t(r,o);o++}else if(r.type==="GeometryCollection"){for(l=0;l<r.geometries.length;l++){t(r.geometries[l],o);o++}}else{throw new Error("Unknown Geometry Type")}}}}function f(n,t,e){var l=e;h(n,function(n,i){if(i===0&&e===undefined){l=n}else{l=t(l,n,i)}});return l}t.exports={coordEach:l,coordReduce:i,propEach:r,propReduce:u,featureEach:s,featureReduce:a,coordAll:o,geomEach:h,geomReduce:f}},{}],11:[function(n,t,e){var l=n("@turf/flatten");var i=n("@turf/meta").featureEach;var r=n("@turf/helpers").lineString;var u=n("@turf/helpers").featureCollection;var s=n("@turf/invariant").getCoords;t.exports=function(n){var t=[];var e=0;i(n,function(n){i(l(n),function(n){var l=[];var i=n.geometry?n.geometry.type:n.type;switch(i){case"Polygon":l=s(n);break;case"LineString":l=[s(n)]}l.forEach(function(l){var i=a(l,n.properties);i.forEach(function(n){n.id=e;t.push(n);e++})})})});return u(t)};function a(n,t){var e=[];n.reduce(function(n,l){var i=r([n,l],t);i.bbox=o(n,l);e.push(i);return l});return e}function o(n,t){var e=n[0];var l=n[1];var i=t[0];var r=t[1];var u=e<i?e:i;var s=l<r?l:r;var a=e>i?e:i;var o=l>r?l:r;return[u,s,a,o]}},{"@turf/flatten":12,"@turf/helpers":13,"@turf/invariant":14,"@turf/meta":15}],12:[function(n,t,e){var l=n("@turf/meta").featureEach;var i=n("@turf/meta").geomEach;var r=n("@turf/invariant").getCoords;var u=n("@turf/helpers");var s=u.point;var a=u.lineString;var o=u.polygon;var h=u.featureCollection;function f(n){var t=n.geometry?n.geometry.type:n.type;switch(t){case"MultiPoint":return c(n);case"MultiPolygon":return g(n);case"MultiLineString":return d(n);case"FeatureCollection":return p(n);case"GeometryCollection":return v(n);case"Point":case"LineString":case"Polygon":return h([n])}}t.exports=f;function c(n){var t=[];r(n).forEach(function(e){t.push(s(e,n.properties))});return h(t)}function d(n){var t=[];r(n).forEach(function(e){t.push(a(e,n.properties))});return h(t)}function g(n){var t=[];r(n).forEach(function(e){t.push(o(e,n.properties))});return h(t)}function p(n){var t=[];l(n,function(n){switch(n.geometry.type){case"MultiPoint":case"MultiLineString":case"MultiPolygon":l(f(n),function(n){t.push(n)});break;default:t.push(n)}});return h(t)}function v(n){var t=[];i(n,function(n){switch(n.type){case"MultiPoint":case"MultiLineString":case"MultiPolygon":l(f(n),function(n){t.push(n)});break;default:var e={type:"Feature",properties:{},geometry:n};t.push(e)}});return h(t)}},{"@turf/helpers":13,"@turf/invariant":14,"@turf/meta":15}],13:[function(n,t,e){arguments[4][3][0].apply(e,arguments)},{dup:3}],14:[function(n,t,e){arguments[4][4][0].apply(e,arguments)},{dup:4}],15:[function(n,t,e){arguments[4][10][0].apply(e,arguments)},{dup:10}],16:[function(n,t,e){function l(n,t,e){var i,r,u,s,a,o,h,f,c,d=0,g=0,p,v=n.type==="FeatureCollection",m=n.type==="Feature",y=v?n.features.length:1;for(i=0;i<y;i++){c=v?n.features[i].geometry:m?n.geometry:n;p=c.type==="GeometryCollection";h=p?c.geometries.length:1;for(s=0;s<h;s++){o=p?c.geometries[s]:c;f=o.coordinates;d=e&&(o.type==="Polygon"||o.type==="MultiPolygon")?1:0;if(o.type==="Point"){t(f,g);g++}else if(o.type==="LineString"||o.type==="MultiPoint"){for(r=0;r<f.length;r++){t(f[r],g);g++}}else if(o.type==="Polygon"||o.type==="MultiLineString"){for(r=0;r<f.length;r++)for(u=0;u<f[r].length-d;u++){t(f[r][u],g);g++}}else if(o.type==="MultiPolygon"){for(r=0;r<f.length;r++)for(u=0;u<f[r].length;u++)for(a=0;a<f[r][u].length-d;a++){t(f[r][u][a],g);g++}}else if(o.type==="GeometryCollection"){for(r=0;r<o.geometries.length;r++)l(o.geometries[r],t,e)}else{throw new Error("Unknown Geometry Type")}}}}t.exports.coordEach=l;function i(n,t,e,i){var r=e;l(n,function(n,l){if(l===0&&e===undefined){r=n}else{r=t(r,n,l)}},i);return r}t.exports.coordReduce=i;function r(n,t){var e;switch(n.type){case"FeatureCollection":for(e=0;e<n.features.length;e++){t(n.features[e].properties,e)}break;case"Feature":t(n.properties,0);break}}t.exports.propEach=r;function u(n,t,e){var l=e;r(n,function(n,i){if(i===0&&e===undefined){l=n}else{l=t(l,n,i)}});return l}t.exports.propReduce=u;function s(n,t){if(n.type==="Feature"){t(n,0)}else if(n.type==="FeatureCollection"){for(var e=0;e<n.features.length;e++){t(n.features[e],e)}}}t.exports.featureEach=s;function a(n,t,e){var l=e;s(n,function(n,i){if(i===0&&e===undefined){l=n}else{l=t(l,n,i)}});return l}t.exports.featureReduce=a;function o(n){var t=[];l(n,function(n){t.push(n)});return t}t.exports.coordAll=o;function h(n,t){var e,l,i,r,u,s,a,o=0,h=n.type==="FeatureCollection",f=n.type==="Feature",c=h?n.features.length:1;for(e=0;e<c;e++){s=h?n.features[e].geometry:f?n.geometry:n;a=s.type==="GeometryCollection";u=a?s.geometries.length:1;for(i=0;i<u;i++){r=a?s.geometries[i]:s;if(r.type==="Point"||r.type==="LineString"||r.type==="MultiPoint"||r.type==="Polygon"||r.type==="MultiLineString"||r.type==="MultiPolygon"){t(r,o);o++}else if(r.type==="GeometryCollection"){for(l=0;l<r.geometries.length;l++){t(r.geometries[l],o);o++}}else{throw new Error("Unknown Geometry Type")}}}}t.exports.geomEach=h;function f(n,t,e){var l=e;h(n,function(n,i){if(i===0&&e===undefined){l=n}else{l=t(l,n,i)}});return l}t.exports.geomReduce=f},{}],17:[function(n,t,e){var l=n("@turf/invariant").getCoords;var i=n("@turf/helpers");var r=i.lineString;var u=i.multiLineString;var s=i.featureCollection;t.exports=function(n){var t=o(n);var e=l(n);var i=n.properties;if(!e.length)throw new Error("polygon must contain coordinates");switch(t){case"Polygon":return s([a(e,i)]);case"MultiPolygon":var r=[];e.forEach(function(n){r.push(a(n,i))});return s(r);default:throw new Error("geom "+t+" not supported")}};function a(n,t){if(n.length>1)return u(n,t);return r(n[0],t)}function o(n){return n.geometry?n.geometry.type:n.type}},{"@turf/helpers":18,"@turf/invariant":19}],18:[function(n,t,e){arguments[4][3][0].apply(e,arguments)},{dup:3}],19:[function(n,t,e){arguments[4][4][0].apply(e,arguments)},{dup:4}],20:[function(n,t,e){var l=n("@turf/bbox");var i=n("@turf/helpers").featureCollection;var r=n("@turf/meta").featureEach;var u=n("rbush");t.exports=function(n){var t=u(n);t.insert=function(n){n.bbox=n.bbox?n.bbox:l(n);return u.prototype.insert.call(this,n)};t.load=function(n){var t=[];r(n,function(n){n.bbox=n.bbox?n.bbox:l(n);t.push(n)});return u.prototype.load.call(this,t)};t.remove=function(n){return u.prototype.remove.call(this,n)};t.clear=function(){return u.prototype.clear.call(this)};t.search=function(n){var t=u.prototype.search.call(this,this.toBBox(n));return i(t)};t.collides=function(n){return u.prototype.collides.call(this,this.toBBox(n))};t.all=function(){var n=u.prototype.all.call(this);return i(n)};t.toJSON=function(){return u.prototype.toJSON.call(this)};t.fromJSON=function(n){return u.prototype.fromJSON.call(this,n)};t.toBBox=function(n){var t=n.bbox?n.bbox:l(n);return{minX:t[0],minY:t[1],maxX:t[2],maxY:t[3]}};return t}},{"@turf/bbox":5,"@turf/helpers":6,"@turf/meta":16,rbush:23}],21:[function(n,t,e){"use strict";t.exports=l;l.polyline=l;l.polygon=i;function l(n,t,e){var l=n.length,i=u(n[0],t),s=[],a,o,h,f,c;if(!e)e=[];for(a=1;a<l;a++){o=n[a-1];h=n[a];f=c=u(h,t);while(true){if(!(i|f)){s.push(o);if(f!==c){s.push(h);if(a<l-1){e.push(s);s=[]}}else if(a===l-1){s.push(h)}break}else if(i&f){break}else if(i){o=r(o,h,i,t);i=u(o,t)}else{h=r(o,h,f,t);f=u(h,t)}}i=c}if(s.length)e.push(s);return e}function i(n,t){var e,l,i,s,a,o,h;for(l=1;l<=8;l*=2){e=[];i=n[n.length-1];s=!(u(i,t)&l);for(a=0;a<n.length;a++){o=n[a];h=!(u(o,t)&l);if(h!==s)e.push(r(i,o,l,t));if(h)e.push(o);i=o;s=h}n=e;if(!n.length)break}return e}function r(n,t,e,l){return e&8?[n[0]+(t[0]-n[0])*(l[3]-n[1])/(t[1]-n[1]),l[3]]:e&4?[n[0]+(t[0]-n[0])*(l[1]-n[1])/(t[1]-n[1]),l[1]]:e&2?[l[2],n[1]+(t[1]-n[1])*(l[2]-n[0])/(t[0]-n[0])]:e&1?[l[0],n[1]+(t[1]-n[1])*(l[0]-n[0])/(t[0]-n[0])]:null}function u(n,t){var e=0;if(n[0]<t[0])e|=1;else if(n[0]>t[2])e|=2;if(n[1]<t[1])e|=4;else if(n[1]>t[3])e|=8;return e}},{}],22:[function(n,t,e){"use strict";t.exports=l;function l(n,t,e,u,s){e=e||0;u=u||n.length-1;s=s||r;while(u>e){if(u-e>600){var a=u-e+1;var o=t-e+1;var h=Math.log(a);var f=.5*Math.exp(2*h/3);var c=.5*Math.sqrt(h*f*(a-f)/a)*(o-a/2<0?-1:1);var d=Math.max(e,Math.floor(t-o*f/a+c));var g=Math.min(u,Math.floor(t+(a-o)*f/a+c));l(n,t,d,g,s)}var p=n[t];var v=e;var m=u;i(n,e,t);if(s(n[u],p)>0)i(n,e,u);while(v<m){i(n,v,m);v++;m--;while(s(n[v],p)<0)v++;while(s(n[m],p)>0)m--}if(s(n[e],p)===0)i(n,e,m);else{m++;i(n,m,u)}if(m<=t)e=m+1;if(t<=m)u=m-1}}function i(n,t,e){var l=n[t];n[t]=n[e];n[e]=l}function r(n,t){return n<t?-1:n>t?1:0}},{}],23:[function(n,t,e){"use strict";t.exports=i;var l=n("quickselect");function i(n,t){if(!(this instanceof i))return new i(n,t);this._maxEntries=Math.max(4,n||9);this._minEntries=Math.max(2,Math.ceil(this._maxEntries*.4));if(t){this._initFormat(t)}this.clear()}i.prototype={all:function(){return this._all(this.data,[])},search:function(n){var t=this.data,e=[],l=this.toBBox;if(!v(n,t))return e;var i=[],r,u,s,a;while(t){for(r=0,u=t.children.length;r<u;r++){s=t.children[r];a=t.leaf?l(s):s;if(v(n,a)){if(t.leaf)e.push(s);else if(p(n,a))this._all(s,e);else i.push(s)}}t=i.pop()}return e},collides:function(n){var t=this.data,e=this.toBBox;if(!v(n,t))return false;var l=[],i,r,u,s;while(t){for(i=0,r=t.children.length;i<r;i++){u=t.children[i];s=t.leaf?e(u):u;if(v(n,s)){if(t.leaf||p(n,s))return true;l.push(u)}}t=l.pop()}return false},load:function(n){if(!(n&&n.length))return this;if(n.length<this._minEntries){for(var t=0,e=n.length;t<e;t++){this.insert(n[t])}return this}var l=this._build(n.slice(),0,n.length-1,0);if(!this.data.children.length){this.data=l}else if(this.data.height===l.height){this._splitRoot(this.data,l)}else{if(this.data.height<l.height){var i=this.data;this.data=l;l=i}this._insert(l,this.data.height-l.height-1,true)}return this},insert:function(n){if(n)this._insert(n,this.data.height-1);return this},clear:function(){this.data=m([]);return this},remove:function(n,t){if(!n)return this;var e=this.data,l=this.toBBox(n),i=[],u=[],s,a,o,h;while(e||i.length){if(!e){e=i.pop();a=i[i.length-1];s=u.pop();h=true}if(e.leaf){o=r(n,e.children,t);if(o!==-1){e.children.splice(o,1);i.push(e);this._condense(i);return this}}if(!h&&!e.leaf&&p(e,l)){i.push(e);u.push(s);s=0;a=e;e=e.children[0]}else if(a){s++;e=a.children[s];h=false}else e=null}return this},toBBox:function(n){return n},compareMinX:o,compareMinY:h,toJSON:function(){return this.data},fromJSON:function(n){
this.data=n;return this},_all:function(n,t){var e=[];while(n){if(n.leaf)t.push.apply(t,n.children);else e.push.apply(e,n.children);n=e.pop()}return t},_build:function(n,t,e,l){var i=e-t+1,r=this._maxEntries,s;if(i<=r){s=m(n.slice(t,e+1));u(s,this.toBBox);return s}if(!l){l=Math.ceil(Math.log(i)/Math.log(r));r=Math.ceil(i/Math.pow(r,l-1))}s=m([]);s.leaf=false;s.height=l;var a=Math.ceil(i/r),o=a*Math.ceil(Math.sqrt(r)),h,f,c,d;y(n,t,e,o,this.compareMinX);for(h=t;h<=e;h+=o){c=Math.min(h+o-1,e);y(n,h,c,a,this.compareMinY);for(f=h;f<=c;f+=a){d=Math.min(f+a-1,c);s.children.push(this._build(n,f,d,l-1))}}u(s,this.toBBox);return s},_chooseSubtree:function(n,t,e,l){var i,r,u,s,a,o,h,c;while(true){l.push(t);if(t.leaf||l.length-1===e)break;h=c=Infinity;for(i=0,r=t.children.length;i<r;i++){u=t.children[i];a=f(u);o=d(n,u)-a;if(o<c){c=o;h=a<h?a:h;s=u}else if(o===c){if(a<h){h=a;s=u}}}t=s||t.children[0]}return t},_insert:function(n,t,e){var l=this.toBBox,i=e?n:l(n),r=[];var u=this._chooseSubtree(i,this.data,t,r);u.children.push(n);a(u,i);while(t>=0){if(r[t].children.length>this._maxEntries){this._split(r,t);t--}else break}this._adjustParentBBoxes(i,r,t)},_split:function(n,t){var e=n[t],l=e.children.length,i=this._minEntries;this._chooseSplitAxis(e,i,l);var r=this._chooseSplitIndex(e,i,l);var s=m(e.children.splice(r,e.children.length-r));s.height=e.height;s.leaf=e.leaf;u(e,this.toBBox);u(s,this.toBBox);if(t)n[t-1].children.push(s);else this._splitRoot(e,s)},_splitRoot:function(n,t){this.data=m([n,t]);this.data.height=n.height+1;this.data.leaf=false;u(this.data,this.toBBox)},_chooseSplitIndex:function(n,t,e){var l,i,r,u,a,o,h,c;o=h=Infinity;for(l=t;l<=e-t;l++){i=s(n,0,l,this.toBBox);r=s(n,l,e,this.toBBox);u=g(i,r);a=f(i)+f(r);if(u<o){o=u;c=l;h=a<h?a:h}else if(u===o){if(a<h){h=a;c=l}}}return c},_chooseSplitAxis:function(n,t,e){var l=n.leaf?this.compareMinX:o,i=n.leaf?this.compareMinY:h,r=this._allDistMargin(n,t,e,l),u=this._allDistMargin(n,t,e,i);if(r<u)n.children.sort(l)},_allDistMargin:function(n,t,e,l){n.children.sort(l);var i=this.toBBox,r=s(n,0,t,i),u=s(n,e-t,e,i),o=c(r)+c(u),h,f;for(h=t;h<e-t;h++){f=n.children[h];a(r,n.leaf?i(f):f);o+=c(r)}for(h=e-t-1;h>=t;h--){f=n.children[h];a(u,n.leaf?i(f):f);o+=c(u)}return o},_adjustParentBBoxes:function(n,t,e){for(var l=e;l>=0;l--){a(t[l],n)}},_condense:function(n){for(var t=n.length-1,e;t>=0;t--){if(n[t].children.length===0){if(t>0){e=n[t-1].children;e.splice(e.indexOf(n[t]),1)}else this.clear()}else u(n[t],this.toBBox)}},_initFormat:function(n){var t=["return a"," - b",";"];this.compareMinX=new Function("a","b",t.join(n[0]));this.compareMinY=new Function("a","b",t.join(n[1]));this.toBBox=new Function("a","return {minX: a"+n[0]+", minY: a"+n[1]+", maxX: a"+n[2]+", maxY: a"+n[3]+"};")}};function r(n,t,e){if(!e)return t.indexOf(n);for(var l=0;l<t.length;l++){if(e(n,t[l]))return l}return-1}function u(n,t){s(n,0,n.children.length,t,n)}function s(n,t,e,l,i){if(!i)i=m(null);i.minX=Infinity;i.minY=Infinity;i.maxX=-Infinity;i.maxY=-Infinity;for(var r=t,u;r<e;r++){u=n.children[r];a(i,n.leaf?l(u):u)}return i}function a(n,t){n.minX=Math.min(n.minX,t.minX);n.minY=Math.min(n.minY,t.minY);n.maxX=Math.max(n.maxX,t.maxX);n.maxY=Math.max(n.maxY,t.maxY);return n}function o(n,t){return n.minX-t.minX}function h(n,t){return n.minY-t.minY}function f(n){return(n.maxX-n.minX)*(n.maxY-n.minY)}function c(n){return n.maxX-n.minX+(n.maxY-n.minY)}function d(n,t){return(Math.max(t.maxX,n.maxX)-Math.min(t.minX,n.minX))*(Math.max(t.maxY,n.maxY)-Math.min(t.minY,n.minY))}function g(n,t){var e=Math.max(n.minX,t.minX),l=Math.max(n.minY,t.minY),i=Math.min(n.maxX,t.maxX),r=Math.min(n.maxY,t.maxY);return Math.max(0,i-e)*Math.max(0,r-l)}function p(n,t){return n.minX<=t.minX&&n.minY<=t.minY&&t.maxX<=n.maxX&&t.maxY<=n.maxY}function v(n,t){return t.minX<=n.maxX&&t.minY<=n.maxY&&t.maxX>=n.minX&&t.maxY>=n.minY}function m(n){return{children:n,height:1,leaf:true,minX:Infinity,minY:Infinity,maxX:-Infinity,maxY:-Infinity}}function y(n,t,e,i,r){var u=[t,e],s;while(u.length){e=u.pop();t=u.pop();if(e-t<=i)continue;s=t+Math.ceil((e-t)/i/2)*i;l(n,s,t,e,r);u.push(t,s,s,e)}}},{quickselect:22}]},{},[1])(1)});define("Util/turf",["ThirdParty/turf","ThirdParty/TURFjs/turf-plugin"],function(n,t){for(var e in t){if(!n[e]){n[e]=t[e]}}var l=n;l.earthRadius=6371008.8;l.factors={centimeters:l.earthRadius*100,centimetres:l.earthRadius*100,degrees:l.earthRadius/111325,feet:l.earthRadius*3.28084,inches:l.earthRadius*39.37,kilometers:l.earthRadius/1e3,kilometres:l.earthRadius/1e3,meters:l.earthRadius,metres:l.earthRadius,miles:l.earthRadius/1609.344,millimeters:l.earthRadius*1e3,millimetres:l.earthRadius*1e3,nauticalmiles:l.earthRadius/1852,radians:1,yards:l.earthRadius/1.0936};l.unitsFactors={centimeters:100,centimetres:100,degrees:1/111325,feet:3.28084,inches:39.37,kilometers:1/1e3,kilometres:1/1e3,meters:1,metres:1,miles:1/1609.344,millimeters:1e3,millimetres:1e3,nauticalmiles:1/1852,radians:1/l.earthRadius,yards:1/1.0936};l.areaFactors={acres:247105e-9,centimeters:1e4,centimetres:1e4,feet:10.763910417,inches:1550.003100006,kilometers:1e-6,kilometres:1e-6,meters:1,metres:1,miles:3.86e-7,millimeters:1e6,millimetres:1e6,yards:1.195990046};function i(n,t,e){if(e===void 0){e={}}var l={type:"Feature"};if(e.id===0||e.id){l.id=e.id}if(e.bbox){l.bbox=e.bbox}l.properties=t||{};l.geometry=n;return l}l.feature=i;function r(n,t,e){if(e===void 0){e={}}switch(n){case"Point":return u(t).geometry;case"LineString":return h(t).geometry;case"Polygon":return a(t).geometry;case"MultiPoint":return g(t).geometry;case"MultiLineString":return d(t).geometry;case"MultiPolygon":return p(t).geometry;default:throw new Error(n+" is invalid")}}l.geometry=r;function u(n,t,e){if(e===void 0){e={}}var l={type:"Point",coordinates:n};return i(l,t,e)}l.point=u;function s(n,t,e){if(e===void 0){e={}}return c(n.map(function(n){return u(n,t)}),e)}l.points=s;function a(n,t,e){if(e===void 0){e={}}for(var l=0,r=n;l<r.length;l++){var u=r[l];if(u.length<4){throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.")}for(var s=0;s<u[u.length-1].length;s++){if(u[u.length-1][s]!==u[0][s]){throw new Error("First and last Position are not equivalent.")}}}var a={type:"Polygon",coordinates:n};return i(a,t,e)}l.polygon=a;function o(n,t,e){if(e===void 0){e={}}return c(n.map(function(n){return a(n,t)}),e)}l.polygons=o;function h(n,t,e){if(e===void 0){e={}}if(n.length<2){throw new Error("coordinates must be an array of two or more positions")}var l={type:"LineString",coordinates:n};return i(l,t,e)}l.lineString=h;function f(n,t,e){if(e===void 0){e={}}return c(n.map(function(n){return h(n,t)}),e)}l.lineStrings=f;function c(n,t){if(t===void 0){t={}}var e={type:"FeatureCollection"};if(t.id){e.id=t.id}if(t.bbox){e.bbox=t.bbox}e.features=n;return e}l.featureCollection=c;function d(n,t,e){if(e===void 0){e={}}var l={type:"MultiLineString",coordinates:n};return i(l,t,e)}l.multiLineString=d;function g(n,t,e){if(e===void 0){e={}}var l={type:"MultiPoint",coordinates:n};return i(l,t,e)}l.multiPoint=g;function p(n,t,e){if(e===void 0){e={}}var l={type:"MultiPolygon",coordinates:n};return i(l,t,e)}l.multiPolygon=p;function v(n,t,e){if(e===void 0){e={}}var l={type:"GeometryCollection",geometries:n};return i(l,t,e)}l.geometryCollection=v;function m(n,t){if(t===void 0){t=0}if(t&&!(t>=0)){throw new Error("precision must be a positive number")}var e=Math.pow(10,t||0);return Math.round(n*e)/e}l.round=m;function y(n,t){if(t===void 0){t="kilometers"}var e=l.factors[t];if(!e){throw new Error(t+" units is invalid")}return n*e}l.radiansToLength=y;function x(n,t){if(t===void 0){t="kilometers"}var e=l.factors[t];if(!e){throw new Error(t+" units is invalid")}return n/e}l.lengthToRadians=x;function w(n,t){return M(x(n,t))}l.lengthToDegrees=w;function _(n){var t=n%360;if(t<0){t+=360}return t}l.bearingToAzimuth=_;function M(n){var t=n%(2*Math.PI);return t*180/Math.PI}l.radiansToDegrees=M;function E(n){var t=n%360;return t*Math.PI/180}l.degreesToRadians=E;function b(n,t,e){if(t===void 0){t="kilometers"}if(e===void 0){e="kilometers"}if(!(n>=0)){throw new Error("length must be a positive number")}return y(x(n,t),e)}l.convertLength=b;function C(n,t,e){if(t===void 0){t="meters"}if(e===void 0){e="kilometers"}if(!(n>=0)){throw new Error("area must be a positive number")}var i=l.areaFactors[t];if(!i){throw new Error("invalid original units")}var r=l.areaFactors[e];if(!r){throw new Error("invalid final units")}return n/i*r}l.convertArea=C;function I(n){return!isNaN(n)&&n!==null&&!Array.isArray(n)&&!/^\s*$/.test(n)}l.isNumber=I;function S(n){return!!n&&n.constructor===Object}l.isObject=S;function N(n){if(!n){throw new Error("bbox is required")}if(!Array.isArray(n)){throw new Error("bbox must be an Array")}if(n.length!==4&&n.length!==6){throw new Error("bbox must be an Array of 4 or 6 numbers")}n.forEach(function(n){if(!I(n)){throw new Error("bbox must only contain numbers")}})}l.validateBBox=N;function P(n){if(!n){throw new Error("id is required")}if(["string","number"].indexOf(typeof n)===-1){throw new Error("id must be a number or a string")}}l.validateId=P;function L(){throw new Error("method has been renamed to `radiansToDegrees`")}l.radians2degrees=L;function R(){throw new Error("method has been renamed to `degreesToRadians`")}l.degrees2radians=R;function T(){throw new Error("method has been renamed to `lengthToDegrees`")}l.distanceToDegrees=T;function O(){throw new Error("method has been renamed to `lengthToRadians`")}l.distanceToRadians=O;function A(){throw new Error("method has been renamed to `radiansToLength`")}l.radiansToDistance=A;function k(){throw new Error("method has been renamed to `bearingToAzimuth`")}l.bearingToAngle=k;function D(){throw new Error("method has been renamed to `convertLength`")}l.convertDistance=D;l.lineEquals=function(n,t){var e=n.length==t.length;if(e){for(var l=0;l<n.length;l++){if(n[l][0]!=t[l][0]||n[l][1]!=t[l][1]){e=false;break}}}return e};l.polygonEquals=function(t,e){var l=n.getCoords(t);var i=n.getCoords(e);var r=l.length==i.length;if(r){for(var u=0;u<l.length;u++){r=n.lineEquals(l[u],i[u]);if(!r){break}}}return r};l.removeDuplicate=function(t){var e=[];n.featureEach(t,function(t){if(t.geometry.type=="Polygon"){var l=false;for(var i=0;i<e.length;i++){if(n.polygonEquals(t,e[i])){l=true;break}}if(!l){e.push(t)}}else{e.push(t)}});e=n.featureCollection(e);return e};n.pointInPolygon=function(t,e){if(t.type=="Feature"){t=n.featureCollection([t])}if(e.type=="Feature"){e=n.featureCollection([e])}var l=n.within(t,e);if(l&&l.features.length){return true}return false};n.pointToPolygonDistance=function(t,e,l){var i=n.polygonToLine(e);if(i.type=="Feature"){if(i.geometry.type=="LineString"){return n.pointToLineDistance(t,i,l)}else{return n.pointToMultiLineDistance(t,i,l)}}else if(i.type=="FeatureCollection"){var r=Number.MAX_VALUE;var u=i;n.featureEach(u,function(e){if(e.geometry.type=="LineString"){r=Math.min(n.pointToLineDistance(t,i,l),r)}else{r=Math.min(n.pointToMultiLineDistance(t,i,l),r)}});if(r==Number.MAX_VALUE){return undefined}return r}};n.pointToMultiPolygonDistance=function(t,e,l){var i=n.getCoords(e);var r=null;var u=Number.MAX_VALUE;i.forEach(function(e){a=n.polygon(e);var i=n.pointToPolygonDistance(t,a,l);u=Math.min(i,u)});i=[];if(u==Number.MAX_VALUE){return undefined}return u};n.pointToMultiLineDistance=function(t,e,l){if(e.features)e=e.features[0];var i=n.getCoords(e);var r=null;var u=Number.MAX_VALUE;i.forEach(function(e){r=n.lineString(e);var i=n.pointToLineDistance(t,r,l);u=Math.min(i,u)});i=[];if(u==Number.MAX_VALUE){return undefined}return u};n.pointToFeatureDistance=function(t,e,l){var i=undefined;switch(e.geometry.type){case"Point":i=n.distance(t,e,l);break;case"MultiPoint":var r=n.getCoords(e);var u=[];r.forEach(function(t){u.push(n.point(t))});u=n.featureCollection(u);nearest=n.nearestPoint(t,u);u=[];i=nearest.properties.distanceToPoint;break;case"LineString":i=n.pointToLineDistance(t,e,l);break;case"MultiLineString":i=n.pointToMultiLineDistance(t,e,l);break;case"Polygon":i=n.pointToPolygonDistance(t,e,l);break;case"MultiPolygon":i=n.pointToMultiPolygonDistance(t,e,l);break}return i};function F(n){if(!n){throw new Error("coord is required")}if(!Array.isArray(n)){if(n.type==="Feature"&&n.geometry!==null&&n.geometry.type==="Point"){return n.geometry.coordinates}if(n.type==="Point"){return n.coordinates}}if(Array.isArray(n)&&n.length>=2&&!Array.isArray(n[0])&&!Array.isArray(n[1])){return n}throw new Error("coord must be GeoJSON Point or an Array of numbers")}l.getCoord=F;function B(n){if(n.type==="Feature"){return n.geometry}return n}l.getGeom=B;function G(t,e,l){if(l===void 0){l={}}if(!t){throw new Error("point is required")}if(!e){throw new Error("polygon is required")}var i=n.getCoord(t);var r=n.getGeom(e);var u=r.type;var s=e.bbox;var a=r.coordinates;if(s&&q(i,s)===false){return false}if(u==="Polygon"){a=[a]}var o=false;for(var h=0;h<a.length&&!o;h++){if(z(i,a[h][0],l.ignoreBoundary)){var f=false;var c=1;while(c<a[h].length&&!f){if(z(i,a[h][c],!l.ignoreBoundary)){f=true}c++}if(!f){o=true}}}return o}l.booleanPointInPolygon=G;function z(n,t,e){var l=false;if(t[0][0]===t[t.length-1][0]&&t[0][1]===t[t.length-1][1]){t=t.slice(0,t.length-1)}for(var i=0,r=t.length-1;i<t.length;r=i++){var u=t[i][0];var s=t[i][1];var a=t[r][0];var o=t[r][1];var h=n[1]*(u-a)+s*(a-n[0])+o*(n[0]-u)===0&&(u-n[0])*(a-n[0])<=0&&(s-n[1])*(o-n[1])<=0;if(h){return!e}var f=s>n[1]!==o>n[1]&&n[0]<(a-u)*(n[1]-s)/(o-s)+u;if(f){l=!l}}return l}function q(n,t){return t[0]<=n[0]&&t[1]<=n[1]&&t[2]>=n[0]&&t[3]>=n[1]}if(n.polygonToLineString){n.polygonToLine=n.polygonToLineString}var j=n.helpers;function U(t,e,l){if(l===void 0){l={}}var i=n.getCoord(t);var r=n.getCoord(e);var u=j.degreesToRadians(r[1]-i[1]);var s=j.degreesToRadians(r[0]-i[0]);var a=j.degreesToRadians(i[1]);var o=j.degreesToRadians(r[1]);var h=Math.pow(Math.sin(u/2),2)+Math.pow(Math.sin(s/2),2)*Math.cos(a)*Math.cos(o);return j.radiansToLength(2*Math.atan2(Math.sqrt(h),Math.sqrt(1-h)),l.units)}l.distance=U;function V(n,t,e){if(e===void 0){e={}}if(e.final===true){return Y(n,t)}var l=X.getCoord(n);var i=X.getCoord(t);var r=j.degreesToRadians(l[0]);var u=j.degreesToRadians(i[0]);var s=j.degreesToRadians(l[1]);var a=j.degreesToRadians(i[1]);var o=Math.sin(u-r)*Math.cos(a);var h=Math.cos(s)*Math.sin(a)-Math.sin(s)*Math.cos(a)*Math.cos(u-r);return j.radiansToDegrees(Math.atan2(o,h))}function Y(n,t){var e=V(t,n);e=(e+180)%360;return e}l.bearing=V;var X=n.invariant;var H=n.meta;var W=n.helpers;function Z(n,t){H.geomEach(n,function(n,e,l,i,r){var u=n===null?null:n.type;switch(u){case null:case"Point":case"LineString":case"Polygon":if(t(W.feature(n,l,{bbox:i,id:r}),e,0)===false)return false;return}var s;switch(u){case"MultiPoint":s="Point";break;case"MultiLineString":s="LineString";break;case"MultiPolygon":s="Polygon";break}for(var a=0;a<n.coordinates.length;a++){var o=n.coordinates[a];var h={type:s,coordinates:o};if(t(W.feature(h,l),e,a)===false)return false}})}n.meta.flattenEach=Z;function J(n,t,e){var l=e;Z(n,function(n,i,r){if(i===0&&r===0&&e===undefined)l=n;else l=t(l,n,i,r)});return l}n.meta.flattenReduce=J;function K(n,t){H.flattenEach(n,function(n,e,l){var i=0;if(!n.geometry)return;var r=n.geometry.type;if(r==="Point"||r==="MultiPoint")return;var u;var s=0;var a=0;var o=0;if(H.coordEach(n,function(r,h,f,c,d){if(u===undefined||e>s||c>a||d>o){u=r;s=e;a=c;o=d;i=0;return}var g=W.lineString([u,r],n.properties);if(t(g,e,l,d,i)===false)return false;i++;u=r})===false)return false})}n.meta.segmentEach=K;function Q(n,t,e){var l=e;var i=false;K(n,function(n,r,u,s,a){if(i===false&&e===undefined)l=n;else l=t(l,n,r,u,s,a);i=true});return l}n.meta.segmentReduce=Q;function $(n,t,e){if(t.type=="FeatureCollection"&&t.features){t=t.features[0]}if(e===void 0){e={}}if(!e.method){e.method="geodesic"}if(!e.units){e.units="kilometers"}if(!n){throw new Error("pt is required")}if(Array.isArray(n)){n=j.point(n)}else if(n.type==="Point"){n=j.feature(n)}else{X.featureOf(n,"Point","point")}if(!t){throw new Error("line is required")}if(Array.isArray(t)){t=j.lineString(t)}else if(t.type==="LineString"){t=j.feature(t)}else{X.featureOf(t,"LineString","line")}var l=Infinity;var i=n.geometry.coordinates;H.segmentEach(t,function(n){var t=n.geometry.coordinates[0];var r=n.geometry.coordinates[1];var u=nn(i,t,r,e);if(u<l){l=u}});return j.convertLength(l,"degrees",e.units)}function nn(n,t,e,l){var i=[e[0]-t[0],e[1]-t[1]];var r=[n[0]-t[0],n[1]-t[1]];var u=tn(r,i);if(u<=0){return en(n,t,{method:l.method,units:"degrees"})}var s=tn(i,i);if(s<=u){return en(n,e,{method:l.method,units:"degrees"})}var a=u/s;var o=[t[0]+a*i[0],t[1]+a*i[1]];return en(n,o,{method:l.method,units:"degrees"})}function tn(n,t){return n[0]*t[0]+n[1]*t[1]}function en(n,t,e){return e.method==="planar"?ln(n,t,e):un(n,t,e)}l.pointToLineDistance=$;function ln(n,t,e){if(e===void 0){e={}}var l;if(e.final){l=rn(X.getCoord(t),X.getCoord(n))}else{l=rn(X.getCoord(n),X.getCoord(t))}var i=l>180?-(360-l):l;return i}function rn(n,t){var e=j.degreesToRadians(n[1]);var l=j.degreesToRadians(t[1]);var i=j.degreesToRadians(t[0]-n[0]);if(i>Math.PI){i-=2*Math.PI}if(i<-Math.PI){i+=2*Math.PI}var r=Math.log(Math.tan(l/2+Math.PI/4)/Math.tan(e/2+Math.PI/4));var u=Math.atan2(i,r);return(j.radiansToDegrees(u)+360)%360}l.rhumbBearing=ln;function un(n,t,e){if(e===void 0){e={}}var l=X.getCoord(n);var i=X.getCoord(t);i[0]+=i[0]-l[0]>180?-360:l[0]-i[0]>180?360:0;var r=sn(l,i);var u=j.convertLength(r,"meters",e.units);return u}function sn(n,t,e){e=e===undefined?j.earthRadius:Number(e);var l=e;var i=n[1]*Math.PI/180;var r=t[1]*Math.PI/180;var u=r-i;var s=Math.abs(t[0]-n[0])*Math.PI/180;if(s>Math.PI){s-=2*Math.PI}var a=Math.log(Math.tan(r/2+Math.PI/4)/Math.tan(i/2+Math.PI/4));var o=Math.abs(a)>1e-11?u/a:Math.cos(i);var h=Math.sqrt(u*u+o*o*s*s);var f=h*l;return f}l.rhumbDistance=un;return n});(function(n){"use strict";if(typeof module!=="undefined"&&module.exports){module.exports=n}n["encoding-indexes"]={
big5:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,17392,19506,17923,17830,17784,160359,19831,17843,162993,19682,163013,15253,18230,18244,19527,19520,148159,144919,160594,159371,159954,19543,172881,18255,17882,19589,162924,19719,19108,18081,158499,29221,154196,137827,146950,147297,26189,22267,null,32149,22813,166841,15860,38708,162799,23515,138590,23204,13861,171696,23249,23479,23804,26478,34195,170309,29793,29853,14453,138579,145054,155681,16108,153822,15093,31484,40855,147809,166157,143850,133770,143966,17162,33924,40854,37935,18736,34323,22678,38730,37400,31184,31282,26208,27177,34973,29772,31685,26498,31276,21071,36934,13542,29636,155065,29894,40903,22451,18735,21580,16689,145038,22552,31346,162661,35727,18094,159368,16769,155033,31662,140476,40904,140481,140489,140492,40905,34052,144827,16564,40906,17633,175615,25281,28782,40907,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,12736,12737,12738,12739,12740,131340,12741,131281,131277,12742,12743,131275,139240,12744,131274,12745,12746,12747,12748,131342,12749,12750,256,193,461,192,274,201,282,200,332,211,465,210,null,7870,null,7872,202,257,225,462,224,593,275,233,283,232,299,237,464,236,333,243,466,242,363,250,468,249,470,472,474,476,252,null,7871,null,7873,234,609,9178,9179,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,172969,135493,null,25866,null,null,20029,28381,40270,37343,null,null,161589,25745,20250,20264,20392,20822,20852,20892,20964,21153,21160,21307,21326,21457,21464,22242,22768,22788,22791,22834,22836,23398,23454,23455,23706,24198,24635,25993,26622,26628,26725,27982,28860,30005,32420,32428,32442,32455,32463,32479,32518,32567,33402,33487,33647,35270,35774,35810,36710,36711,36718,29713,31996,32205,26950,31433,21031,null,null,null,null,37260,30904,37214,32956,null,36107,33014,133607,null,null,32927,40647,19661,40393,40460,19518,171510,159758,40458,172339,13761,null,28314,33342,29977,null,18705,39532,39567,40857,31111,164972,138698,132560,142054,20004,20097,20096,20103,20159,20203,20279,13388,20413,15944,20483,20616,13437,13459,13477,20870,22789,20955,20988,20997,20105,21113,21136,21287,13767,21417,13649,21424,13651,21442,21539,13677,13682,13953,21651,21667,21684,21689,21712,21743,21784,21795,21800,13720,21823,13733,13759,21975,13765,163204,21797,null,134210,134421,151851,21904,142534,14828,131905,36422,150968,169189,16467,164030,30586,142392,14900,18389,164189,158194,151018,25821,134524,135092,134357,135412,25741,36478,134806,134155,135012,142505,164438,148691,null,134470,170573,164073,18420,151207,142530,39602,14951,169460,16365,13574,152263,169940,161992,142660,40302,38933,null,17369,155813,25780,21731,142668,142282,135287,14843,135279,157402,157462,162208,25834,151634,134211,36456,139681,166732,132913,null,18443,131497,16378,22643,142733,null,148936,132348,155799,134988,134550,21881,16571,17338,null,19124,141926,135325,33194,39157,134556,25465,14846,141173,36288,22177,25724,15939,null,173569,134665,142031,142537,null,135368,145858,14738,14854,164507,13688,155209,139463,22098,134961,142514,169760,13500,27709,151099,null,null,161140,142987,139784,173659,167117,134778,134196,157724,32659,135375,141315,141625,13819,152035,134796,135053,134826,16275,134960,134471,135503,134732,null,134827,134057,134472,135360,135485,16377,140950,25650,135085,144372,161337,142286,134526,134527,142417,142421,14872,134808,135367,134958,173618,158544,167122,167321,167114,38314,21708,33476,21945,null,171715,39974,39606,161630,142830,28992,33133,33004,23580,157042,33076,14231,21343,164029,37302,134906,134671,134775,134907,13789,151019,13833,134358,22191,141237,135369,134672,134776,135288,135496,164359,136277,134777,151120,142756,23124,135197,135198,135413,135414,22428,134673,161428,164557,135093,134779,151934,14083,135094,135552,152280,172733,149978,137274,147831,164476,22681,21096,13850,153405,31666,23400,18432,19244,40743,18919,39967,39821,154484,143677,22011,13810,22153,20008,22786,138177,194680,38737,131206,20059,20155,13630,23587,24401,24516,14586,25164,25909,27514,27701,27706,28780,29227,20012,29357,149737,32594,31035,31993,32595,156266,13505,null,156491,32770,32896,157202,158033,21341,34916,35265,161970,35744,36125,38021,38264,38271,38376,167439,38886,39029,39118,39134,39267,17e4,40060,40479,40644,27503,63751,20023,131207,38429,25143,38050,null,20539,28158,171123,40870,15817,34959,147790,28791,23797,19232,152013,13657,154928,24866,166450,36775,37366,29073,26393,29626,144001,172295,15499,137600,19216,30948,29698,20910,165647,16393,27235,172730,16931,34319,133743,31274,170311,166634,38741,28749,21284,139390,37876,30425,166371,40871,30685,20131,20464,20668,20015,20247,40872,21556,32139,22674,22736,138678,24210,24217,24514,141074,25995,144377,26905,27203,146531,27903,null,29184,148741,29580,16091,150035,23317,29881,35715,154788,153237,31379,31724,31939,32364,33528,34199,40873,34960,40874,36537,40875,36815,34143,39392,37409,40876,167353,136255,16497,17058,23066,null,null,null,39016,26475,17014,22333,null,34262,149883,33471,160013,19585,159092,23931,158485,159678,40877,40878,23446,40879,26343,32347,28247,31178,15752,17603,143958,141206,17306,17718,null,23765,146202,35577,23672,15634,144721,23928,40882,29015,17752,147692,138787,19575,14712,13386,131492,158785,35532,20404,131641,22975,33132,38998,170234,24379,134047,null,139713,166253,16642,18107,168057,16135,40883,172469,16632,14294,18167,158790,16764,165554,160767,17773,14548,152730,17761,17691,19849,19579,19830,17898,16328,150287,13921,17630,17597,16877,23870,23880,23894,15868,14351,23972,23993,14368,14392,24130,24253,24357,24451,14600,14612,14655,14669,24791,24893,23781,14729,25015,25017,25039,14776,25132,25232,25317,25368,14840,22193,14851,25570,25595,25607,25690,14923,25792,23829,22049,40863,14999,25990,15037,26111,26195,15090,26258,15138,26390,15170,26532,26624,15192,26698,26756,15218,15217,15227,26889,26947,29276,26980,27039,27013,15292,27094,15325,27237,27252,27249,27266,15340,27289,15346,27307,27317,27348,27382,27521,27585,27626,27765,27818,15563,27906,27910,27942,28033,15599,28068,28081,28181,28184,28201,28294,166336,28347,28386,28378,40831,28392,28393,28452,28468,15686,147265,28545,28606,15722,15733,29111,23705,15754,28716,15761,28752,28756,28783,28799,28809,131877,17345,13809,134872,147159,22462,159443,28990,153568,13902,27042,166889,23412,31305,153825,169177,31333,31357,154028,31419,31408,31426,31427,29137,156813,16842,31450,31453,31466,16879,21682,154625,31499,31573,31529,152334,154878,31650,31599,33692,154548,158847,31696,33825,31634,31672,154912,15789,154725,33938,31738,31750,31797,154817,31812,31875,149634,31910,26237,148856,31945,31943,31974,31860,31987,31989,31950,32359,17693,159300,32093,159446,29837,32137,32171,28981,32179,32210,147543,155689,32228,15635,32245,137209,32229,164717,32285,155937,155994,32366,32402,17195,37996,32295,32576,32577,32583,31030,156368,39393,32663,156497,32675,136801,131176,17756,145254,17667,164666,32762,156809,32773,32776,32797,32808,32815,172167,158915,32827,32828,32865,141076,18825,157222,146915,157416,26405,32935,166472,33031,33050,22704,141046,27775,156824,151480,25831,136330,33304,137310,27219,150117,150165,17530,33321,133901,158290,146814,20473,136445,34018,33634,158474,149927,144688,137075,146936,33450,26907,194964,16859,34123,33488,33562,134678,137140,14017,143741,144730,33403,33506,33560,147083,159139,158469,158615,144846,15807,33565,21996,33669,17675,159141,33708,33729,33747,13438,159444,27223,34138,13462,159298,143087,33880,154596,33905,15827,17636,27303,33866,146613,31064,33960,158614,159351,159299,34014,33807,33681,17568,33939,34020,154769,16960,154816,17731,34100,23282,159385,17703,34163,17686,26559,34326,165413,165435,34241,159880,34306,136578,159949,194994,17770,34344,13896,137378,21495,160666,34430,34673,172280,34798,142375,34737,34778,34831,22113,34412,26710,17935,34885,34886,161248,146873,161252,34910,34972,18011,34996,34997,25537,35013,30583,161551,35207,35210,35238,35241,35239,35260,166437,35303,162084,162493,35484,30611,37374,35472,162393,31465,162618,147343,18195,162616,29052,35596,35615,152624,152933,35647,35660,35661,35497,150138,35728,35739,35503,136927,17941,34895,35995,163156,163215,195028,14117,163155,36054,163224,163261,36114,36099,137488,36059,28764,36113,150729,16080,36215,36265,163842,135188,149898,15228,164284,160012,31463,36525,36534,36547,37588,36633,36653,164709,164882,36773,37635,172703,133712,36787,18730,166366,165181,146875,24312,143970,36857,172052,165564,165121,140069,14720,159447,36919,165180,162494,36961,165228,165387,37032,165651,37060,165606,37038,37117,37223,15088,37289,37316,31916,166195,138889,37390,27807,37441,37474,153017,37561,166598,146587,166668,153051,134449,37676,37739,166625,166891,28815,23235,166626,166629,18789,37444,166892,166969,166911,37747,37979,36540,38277,38310,37926,38304,28662,17081,140922,165592,135804,146990,18911,27676,38523,38550,16748,38563,159445,25050,38582,30965,166624,38589,21452,18849,158904,131700,156688,168111,168165,150225,137493,144138,38705,34370,38710,18959,17725,17797,150249,28789,23361,38683,38748,168405,38743,23370,168427,38751,37925,20688,143543,143548,38793,38815,38833,38846,38848,38866,38880,152684,38894,29724,169011,38911,38901,168989,162170,19153,38964,38963,38987,39014,15118,160117,15697,132656,147804,153350,39114,39095,39112,39111,19199,159015,136915,21936,39137,39142,39148,37752,39225,150057,19314,170071,170245,39413,39436,39483,39440,39512,153381,14020,168113,170965,39648,39650,170757,39668,19470,39700,39725,165376,20532,39732,158120,14531,143485,39760,39744,171326,23109,137315,39822,148043,39938,39935,39948,171624,40404,171959,172434,172459,172257,172323,172511,40318,40323,172340,40462,26760,40388,139611,172435,172576,137531,172595,40249,172217,172724,40592,40597,40606,40610,19764,40618,40623,148324,40641,15200,14821,15645,20274,14270,166955,40706,40712,19350,37924,159138,40727,40726,40761,22175,22154,40773,39352,168075,38898,33919,40802,40809,31452,40846,29206,19390,149877,149947,29047,150008,148296,150097,29598,166874,137466,31135,166270,167478,37737,37875,166468,37612,37761,37835,166252,148665,29207,16107,30578,31299,28880,148595,148472,29054,137199,28835,137406,144793,16071,137349,152623,137208,14114,136955,137273,14049,137076,137425,155467,14115,136896,22363,150053,136190,135848,136134,136374,34051,145062,34051,33877,149908,160101,146993,152924,147195,159826,17652,145134,170397,159526,26617,14131,15381,15847,22636,137506,26640,16471,145215,147681,147595,147727,158753,21707,22174,157361,22162,135135,134056,134669,37830,166675,37788,20216,20779,14361,148534,20156,132197,131967,20299,20362,153169,23144,131499,132043,14745,131850,132116,13365,20265,131776,167603,131701,35546,131596,20120,20685,20749,20386,20227,150030,147082,20290,20526,20588,20609,20428,20453,20568,20732,20825,20827,20829,20830,28278,144789,147001,147135,28018,137348,147081,20904,20931,132576,17629,132259,132242,132241,36218,166556,132878,21081,21156,133235,21217,37742,18042,29068,148364,134176,149932,135396,27089,134685,29817,16094,29849,29716,29782,29592,19342,150204,147597,21456,13700,29199,147657,21940,131909,21709,134086,22301,37469,38644,37734,22493,22413,22399,13886,22731,23193,166470,136954,137071,136976,23084,22968,37519,23166,23247,23058,153926,137715,137313,148117,14069,27909,29763,23073,155267,23169,166871,132115,37856,29836,135939,28933,18802,37896,166395,37821,14240,23582,23710,24158,24136,137622,137596,146158,24269,23375,137475,137476,14081,137376,14045,136958,14035,33066,166471,138682,144498,166312,24332,24334,137511,137131,23147,137019,23364,34324,161277,34912,24702,141408,140843,24539,16056,140719,140734,168072,159603,25024,131134,131142,140827,24985,24984,24693,142491,142599,149204,168269,25713,149093,142186,14889,142114,144464,170218,142968,25399,173147,25782,25393,25553,149987,142695,25252,142497,25659,25963,26994,15348,143502,144045,149897,144043,21773,144096,137433,169023,26318,144009,143795,15072,16784,152964,166690,152975,136956,152923,152613,30958,143619,137258,143924,13412,143887,143746,148169,26254,159012,26219,19347,26160,161904,138731,26211,144082,144097,26142,153714,14545,145466,145340,15257,145314,144382,29904,15254,26511,149034,26806,26654,15300,27326,14435,145365,148615,27187,27218,27337,27397,137490,25873,26776,27212,15319,27258,27479,147392,146586,37792,37618,166890,166603,37513,163870,166364,37991,28069,28427,149996,28007,147327,15759,28164,147516,23101,28170,22599,27940,30786,28987,148250,148086,28913,29264,29319,29332,149391,149285,20857,150180,132587,29818,147192,144991,150090,149783,155617,16134,16049,150239,166947,147253,24743,16115,29900,29756,37767,29751,17567,159210,17745,30083,16227,150745,150790,16216,30037,30323,173510,15129,29800,166604,149931,149902,15099,15821,150094,16127,149957,149747,37370,22322,37698,166627,137316,20703,152097,152039,30584,143922,30478,30479,30587,149143,145281,14942,149744,29752,29851,16063,150202,150215,16584,150166,156078,37639,152961,30750,30861,30856,30930,29648,31065,161601,153315,16654,31131,33942,31141,27181,147194,31290,31220,16750,136934,16690,37429,31217,134476,149900,131737,146874,137070,13719,21867,13680,13994,131540,134157,31458,23129,141045,154287,154268,23053,131675,30960,23082,154566,31486,16889,31837,31853,16913,154547,155324,155302,31949,150009,137136,31886,31868,31918,27314,32220,32263,32211,32590,156257,155996,162632,32151,155266,17002,158581,133398,26582,131150,144847,22468,156690,156664,149858,32733,31527,133164,154345,154947,31500,155150,39398,34373,39523,27164,144447,14818,150007,157101,39455,157088,33920,160039,158929,17642,33079,17410,32966,33033,33090,157620,39107,158274,33378,33381,158289,33875,159143,34320,160283,23174,16767,137280,23339,137377,23268,137432,34464,195004,146831,34861,160802,23042,34926,20293,34951,35007,35046,35173,35149,153219,35156,161669,161668,166901,166873,166812,166393,16045,33955,18165,18127,14322,35389,35356,169032,24397,37419,148100,26068,28969,28868,137285,40301,35999,36073,163292,22938,30659,23024,17262,14036,36394,36519,150537,36656,36682,17140,27736,28603,140065,18587,28537,28299,137178,39913,14005,149807,37051,37015,21873,18694,37307,37892,166475,16482,166652,37927,166941,166971,34021,35371,38297,38311,38295,38294,167220,29765,16066,149759,150082,148458,16103,143909,38543,167655,167526,167525,16076,149997,150136,147438,29714,29803,16124,38721,168112,26695,18973,168083,153567,38749,37736,166281,166950,166703,156606,37562,23313,35689,18748,29689,147995,38811,38769,39224,134950,24001,166853,150194,38943,169178,37622,169431,37349,17600,166736,150119,166756,39132,166469,16128,37418,18725,33812,39227,39245,162566,15869,39323,19311,39338,39516,166757,153800,27279,39457,23294,39471,170225,19344,170312,39356,19389,19351,37757,22642,135938,22562,149944,136424,30788,141087,146872,26821,15741,37976,14631,24912,141185,141675,24839,40015,40019,40059,39989,39952,39807,39887,171565,39839,172533,172286,40225,19630,147716,40472,19632,40204,172468,172269,172275,170287,40357,33981,159250,159711,158594,34300,17715,159140,159364,159216,33824,34286,159232,145367,155748,31202,144796,144960,18733,149982,15714,37851,37566,37704,131775,30905,37495,37965,20452,13376,36964,152925,30781,30804,30902,30795,137047,143817,149825,13978,20338,28634,28633,28702,28702,21524,147893,22459,22771,22410,40214,22487,28980,13487,147884,29163,158784,151447,23336,137141,166473,24844,23246,23051,17084,148616,14124,19323,166396,37819,37816,137430,134941,33906,158912,136211,148218,142374,148417,22932,146871,157505,32168,155995,155812,149945,149899,166394,37605,29666,16105,29876,166755,137375,16097,150195,27352,29683,29691,16086,150078,150164,137177,150118,132007,136228,149989,29768,149782,28837,149878,37508,29670,37727,132350,37681,166606,166422,37766,166887,153045,18741,166530,29035,149827,134399,22180,132634,134123,134328,21762,31172,137210,32254,136898,150096,137298,17710,37889,14090,166592,149933,22960,137407,137347,160900,23201,14050,146779,14e3,37471,23161,166529,137314,37748,15565,133812,19094,14730,20724,15721,15692,136092,29045,17147,164376,28175,168164,17643,27991,163407,28775,27823,15574,147437,146989,28162,28428,15727,132085,30033,14012,13512,18048,16090,18545,22980,37486,18750,36673,166940,158656,22546,22472,14038,136274,28926,148322,150129,143331,135856,140221,26809,26983,136088,144613,162804,145119,166531,145366,144378,150687,27162,145069,158903,33854,17631,17614,159014,159057,158850,159710,28439,160009,33597,137018,33773,158848,159827,137179,22921,23170,137139,23137,23153,137477,147964,14125,23023,137020,14023,29070,37776,26266,148133,23150,23083,148115,27179,147193,161590,148571,148170,28957,148057,166369,20400,159016,23746,148686,163405,148413,27148,148054,135940,28838,28979,148457,15781,27871,194597,150095,32357,23019,23855,15859,24412,150109,137183,32164,33830,21637,146170,144128,131604,22398,133333,132633,16357,139166,172726,28675,168283,23920,29583,31955,166489,168992,20424,32743,29389,29456,162548,29496,29497,153334,29505,29512,16041,162584,36972,29173,149746,29665,33270,16074,30476,16081,27810,22269,29721,29726,29727,16098,16112,16116,16122,29907,16142,16211,30018,30061,30066,30093,16252,30152,30172,16320,30285,16343,30324,16348,30330,151388,29064,22051,35200,22633,16413,30531,16441,26465,16453,13787,30616,16490,16495,23646,30654,30667,22770,30744,28857,30748,16552,30777,30791,30801,30822,33864,152885,31027,26627,31026,16643,16649,31121,31129,36795,31238,36796,16743,31377,16818,31420,33401,16836,31439,31451,16847,20001,31586,31596,31611,31762,31771,16992,17018,31867,31900,17036,31928,17044,31981,36755,28864,134351,32207,32212,32208,32253,32686,32692,29343,17303,32800,32805,31545,32814,32817,32852,15820,22452,28832,32951,33001,17389,33036,29482,33038,33042,30048,33044,17409,15161,33110,33113,33114,17427,22586,33148,33156,17445,33171,17453,33189,22511,33217,33252,33364,17551,33446,33398,33482,33496,33535,17584,33623,38505,27018,33797,28917,33892,24803,33928,17668,33982,34017,34040,34064,34104,34130,17723,34159,34160,34272,17783,34418,34450,34482,34543,38469,34699,17926,17943,34990,35071,35108,35143,35217,162151,35369,35384,35476,35508,35921,36052,36082,36124,18328,22623,36291,18413,20206,36410,21976,22356,36465,22005,36528,18487,36558,36578,36580,36589,36594,36791,36801,36810,36812,36915,39364,18605,39136,37395,18718,37416,37464,37483,37553,37550,37567,37603,37611,37619,37620,37629,37699,37764,37805,18757,18769,40639,37911,21249,37917,37933,37950,18794,37972,38009,38189,38306,18855,38388,38451,18917,26528,18980,38720,18997,38834,38850,22100,19172,24808,39097,19225,39153,22596,39182,39193,20916,39196,39223,39234,39261,39266,19312,39365,19357,39484,39695,31363,39785,39809,39901,39921,39924,19565,39968,14191,138178,40265,39994,40702,22096,40339,40381,40384,40444,38134,36790,40571,40620,40625,40637,40646,38108,40674,40689,40696,31432,40772,131220,131767,132e3,26906,38083,22956,132311,22592,38081,14265,132565,132629,132726,136890,22359,29043,133826,133837,134079,21610,194619,134091,21662,134139,134203,134227,134245,134268,24807,134285,22138,134325,134365,134381,134511,134578,134600,26965,39983,34725,134660,134670,134871,135056,134957,134771,23584,135100,24075,135260,135247,135286,26398,135291,135304,135318,13895,135359,135379,135471,135483,21348,33965,135907,136053,135990,35713,136567,136729,137155,137159,20088,28859,137261,137578,137773,137797,138282,138352,138412,138952,25283,138965,139029,29080,26709,139333,27113,14024,139900,140247,140282,141098,141425,141647,33533,141671,141715,142037,35237,142056,36768,142094,38840,142143,38983,39613,142412,null,142472,142519,154600,142600,142610,142775,142741,142914,143220,143308,143411,143462,144159,144350,24497,26184,26303,162425,144743,144883,29185,149946,30679,144922,145174,32391,131910,22709,26382,26904,146087,161367,155618,146961,147129,161278,139418,18640,19128,147737,166554,148206,148237,147515,148276,148374,150085,132554,20946,132625,22943,138920,15294,146687,148484,148694,22408,149108,14747,149295,165352,170441,14178,139715,35678,166734,39382,149522,149755,150037,29193,150208,134264,22885,151205,151430,132985,36570,151596,21135,22335,29041,152217,152601,147274,150183,21948,152646,152686,158546,37332,13427,152895,161330,152926,18200,152930,152934,153543,149823,153693,20582,13563,144332,24798,153859,18300,166216,154286,154505,154630,138640,22433,29009,28598,155906,162834,36950,156082,151450,35682,156674,156746,23899,158711,36662,156804,137500,35562,150006,156808,147439,156946,19392,157119,157365,141083,37989,153569,24981,23079,194765,20411,22201,148769,157436,20074,149812,38486,28047,158909,13848,35191,157593,157806,156689,157790,29151,157895,31554,168128,133649,157990,37124,158009,31301,40432,158202,39462,158253,13919,156777,131105,31107,158260,158555,23852,144665,33743,158621,18128,158884,30011,34917,159150,22710,14108,140685,159819,160205,15444,160384,160389,37505,139642,160395,37680,160486,149968,27705,38047,160848,134904,34855,35061,141606,164979,137137,28344,150058,137248,14756,14009,23568,31203,17727,26294,171181,170148,35139,161740,161880,22230,16607,136714,14753,145199,164072,136133,29101,33638,162269,168360,23143,19639,159919,166315,162301,162314,162571,163174,147834,31555,31102,163849,28597,172767,27139,164632,21410,159239,37823,26678,38749,164207,163875,158133,136173,143919,163912,23941,166960,163971,22293,38947,166217,23979,149896,26046,27093,21458,150181,147329,15377,26422,163984,164084,164142,139169,164175,164233,164271,164378,164614,164655,164746,13770,164968,165546,18682,25574,166230,30728,37461,166328,17394,166375,17375,166376,166726,166868,23032,166921,36619,167877,168172,31569,168208,168252,15863,168286,150218,36816,29327,22155,169191,169449,169392,169400,169778,170193,170313,170346,170435,170536,170766,171354,171419,32415,171768,171811,19620,38215,172691,29090,172799,19857,36882,173515,19868,134300,36798,21953,36794,140464,36793,150163,17673,32383,28502,27313,20202,13540,166700,161949,14138,36480,137205,163876,166764,166809,162366,157359,15851,161365,146615,153141,153942,20122,155265,156248,22207,134765,36366,23405,147080,150686,25566,25296,137206,137339,25904,22061,154698,21530,152337,15814,171416,19581,22050,22046,32585,155352,22901,146752,34672,19996,135146,134473,145082,33047,40286,36120,30267,40005,30286,30649,37701,21554,33096,33527,22053,33074,33816,32957,21994,31074,22083,21526,134813,13774,22021,22001,26353,164578,13869,30004,22e3,21946,21655,21874,134209,134294,24272,151880,134774,142434,134818,40619,32090,21982,135285,25245,38765,21652,36045,29174,37238,25596,25529,25598,21865,142147,40050,143027,20890,13535,134567,20903,21581,21790,21779,30310,36397,157834,30129,32950,34820,34694,35015,33206,33820,135361,17644,29444,149254,23440,33547,157843,22139,141044,163119,147875,163187,159440,160438,37232,135641,37384,146684,173737,134828,134905,29286,138402,18254,151490,163833,135147,16634,40029,25887,142752,18675,149472,171388,135148,134666,24674,161187,135149,null,155720,135559,29091,32398,40272,19994,19972,13687,23309,27826,21351,13996,14812,21373,13989,149016,22682,150382,33325,21579,22442,154261,133497,null,14930,140389,29556,171692,19721,39917,146686,171824,19547,151465,169374,171998,33884,146870,160434,157619,145184,25390,32037,147191,146988,14890,36872,21196,15988,13946,17897,132238,30272,23280,134838,30842,163630,22695,16575,22140,39819,23924,30292,173108,40581,19681,30201,14331,24857,143578,148466,null,22109,135849,22439,149859,171526,21044,159918,13741,27722,40316,31830,39737,22494,137068,23635,25811,169168,156469,160100,34477,134440,159010,150242,134513,null,20990,139023,23950,38659,138705,40577,36940,31519,39682,23761,31651,25192,25397,39679,31695,39722,31870,39726,31810,31878,39957,31740,39689,40727,39963,149822,40794,21875,23491,20477,40600,20466,21088,15878,21201,22375,20566,22967,24082,38856,40363,36700,21609,38836,39232,38842,21292,24880,26924,21466,39946,40194,19515,38465,27008,20646,30022,137069,39386,21107,null,37209,38529,37212,null,37201,167575,25471,159011,27338,22033,37262,30074,25221,132092,29519,31856,154657,146685,null,149785,30422,39837,20010,134356,33726,34882,null,23626,27072,20717,22394,21023,24053,20174,27697,131570,20281,21660,21722,21146,36226,13822,24332,13811,null,27474,37244,40869,39831,38958,39092,39610,40616,40580,29050,31508,null,27642,34840,32632,null,22048,173642,36471,40787,null,36308,36431,40476,36353,25218,164733,36392,36469,31443,150135,31294,30936,27882,35431,30215,166490,40742,27854,34774,30147,172722,30803,194624,36108,29410,29553,35629,29442,29937,36075,150203,34351,24506,34976,17591,null,137275,159237,null,35454,140571,null,24829,30311,39639,40260,37742,39823,34805,null,34831,36087,29484,38689,39856,13782,29362,19463,31825,39242,155993,24921,19460,40598,24957,null,22367,24943,25254,25145,25294,14940,25058,21418,144373,25444,26626,13778,23895,166850,36826,167481,null,20697,138566,30982,21298,38456,134971,16485,null,30718,null,31938,155418,31962,31277,32870,32867,32077,29957,29938,35220,33306,26380,32866,160902,32859,29936,33027,30500,35209,157644,30035,159441,34729,34766,33224,34700,35401,36013,35651,30507,29944,34010,13877,27058,36262,null,35241,29800,28089,34753,147473,29927,15835,29046,24740,24988,15569,29026,24695,null,32625,166701,29264,24809,19326,21024,15384,146631,155351,161366,152881,137540,135934,170243,159196,159917,23745,156077,166415,145015,131310,157766,151310,17762,23327,156492,40784,40614,156267,12288,65292,12289,12290,65294,8231,65307,65306,65311,65281,65072,8230,8229,65104,65105,65106,183,65108,65109,65110,65111,65372,8211,65073,8212,65075,9588,65076,65103,65288,65289,65077,65078,65371,65373,65079,65080,12308,12309,65081,65082,12304,12305,65083,65084,12298,12299,65085,65086,12296,12297,65087,65088,12300,12301,65089,65090,12302,12303,65091,65092,65113,65114,65115,65116,65117,65118,8216,8217,8220,8221,12317,12318,8245,8242,65283,65286,65290,8251,167,12291,9675,9679,9651,9650,9678,9734,9733,9671,9670,9633,9632,9661,9660,12963,8453,175,65507,65343,717,65097,65098,65101,65102,65099,65100,65119,65120,65121,65291,65293,215,247,177,8730,65308,65310,65309,8806,8807,8800,8734,8786,8801,65122,65123,65124,65125,65126,65374,8745,8746,8869,8736,8735,8895,13266,13265,8747,8750,8757,8756,9792,9794,8853,8857,8593,8595,8592,8594,8598,8599,8601,8600,8741,8739,65295,65340,8725,65128,65284,65509,12306,65504,65505,65285,65312,8451,8457,65129,65130,65131,13269,13212,13213,13214,13262,13217,13198,13199,13252,176,20825,20827,20830,20829,20833,20835,21991,29929,31950,9601,9602,9603,9604,9605,9606,9607,9608,9615,9614,9613,9612,9611,9610,9609,9532,9524,9516,9508,9500,9620,9472,9474,9621,9484,9488,9492,9496,9581,9582,9584,9583,9552,9566,9578,9569,9698,9699,9701,9700,9585,9586,9587,65296,65297,65298,65299,65300,65301,65302,65303,65304,65305,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,12321,12322,12323,12324,12325,12326,12327,12328,12329,21313,21316,21317,65313,65314,65315,65316,65317,65318,65319,65320,65321,65322,65323,65324,65325,65326,65327,65328,65329,65330,65331,65332,65333,65334,65335,65336,65337,65338,65345,65346,65347,65348,65349,65350,65351,65352,65353,65354,65355,65356,65357,65358,65359,65360,65361,65362,65363,65364,65365,65366,65367,65368,65369,65370,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,963,964,965,966,967,968,969,12549,12550,12551,12552,12553,12554,12555,12556,12557,12558,12559,12560,12561,12562,12563,12564,12565,12566,12567,12568,12569,12570,12571,12572,12573,12574,12575,12576,12577,12578,12579,12580,12581,12582,12583,12584,12585,729,713,714,711,715,9216,9217,9218,9219,9220,9221,9222,9223,9224,9225,9226,9227,9228,9229,9230,9231,9232,9233,9234,9235,9236,9237,9238,9239,9240,9241,9242,9243,9244,9245,9246,9247,9249,8364,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,19968,20057,19969,19971,20035,20061,20102,20108,20154,20799,20837,20843,20960,20992,20993,21147,21269,21313,21340,21448,19977,19979,19976,19978,20011,20024,20961,20037,20040,20063,20062,20110,20129,20800,20995,21242,21315,21449,21475,22303,22763,22805,22823,22899,23376,23377,23379,23544,23567,23586,23608,23665,24029,24037,24049,24050,24051,24062,24178,24318,24331,24339,25165,19985,19984,19981,20013,20016,20025,20043,23609,20104,20113,20117,20114,20116,20130,20161,20160,20163,20166,20167,20173,20170,20171,20164,20803,20801,20839,20845,20846,20844,20887,20982,20998,20999,21e3,21243,21246,21247,21270,21305,21320,21319,21317,21342,21380,21451,21450,21453,22764,22825,22827,22826,22829,23380,23569,23588,23610,23663,24052,24187,24319,24340,24341,24515,25096,25142,25163,25166,25903,25991,26007,26020,26041,26085,26352,26376,26408,27424,27490,27513,27595,27604,27611,27663,27700,28779,29226,29238,29243,29255,29273,29275,29356,29579,19993,19990,19989,19988,19992,20027,20045,20047,20046,20197,20184,20180,20181,20182,20183,20195,20196,20185,20190,20805,20804,20873,20874,20908,20985,20986,20984,21002,21152,21151,21253,21254,21271,21277,20191,21322,21321,21345,21344,21359,21358,21435,21487,21476,21491,21484,21486,21481,21480,21500,21496,21493,21483,21478,21482,21490,21489,21488,21477,21485,21499,22235,22234,22806,22830,22833,22900,22902,23381,23427,23612,24040,24039,24038,24066,24067,24179,24188,24321,24344,24343,24517,25098,25171,25172,25170,25169,26021,26086,26414,26412,26410,26411,26413,27491,27597,27665,27664,27704,27713,27712,27710,29359,29572,29577,29916,29926,29976,29983,29992,29993,3e4,30001,30002,30003,30091,30333,30382,30399,30446,30683,30690,30707,31034,31166,31348,31435,19998,19999,20050,20051,20073,20121,20132,20134,20133,20223,20233,20249,20234,20245,20237,20240,20241,20239,20210,20214,20219,20208,20211,20221,20225,20235,20809,20807,20806,20808,20840,20849,20877,20912,21015,21009,21010,21006,21014,21155,21256,21281,21280,21360,21361,21513,21519,21516,21514,21520,21505,21515,21508,21521,21517,21512,21507,21518,21510,21522,22240,22238,22237,22323,22320,22312,22317,22316,22319,22313,22809,22810,22839,22840,22916,22904,22915,22909,22905,22914,22913,23383,23384,23431,23432,23429,23433,23546,23574,23673,24030,24070,24182,24180,24335,24347,24537,24534,25102,25100,25101,25104,25187,25179,25176,25910,26089,26088,26092,26093,26354,26355,26377,26429,26420,26417,26421,27425,27492,27515,27670,27741,27735,27737,27743,27744,27728,27733,27745,27739,27725,27726,28784,29279,29277,30334,31481,31859,31992,32566,32650,32701,32769,32771,32780,32786,32819,32895,32905,32907,32908,33251,33258,33267,33276,33292,33307,33311,33390,33394,33406,34411,34880,34892,34915,35199,38433,20018,20136,20301,20303,20295,20311,20318,20276,20315,20309,20272,20304,20305,20285,20282,20280,20291,20308,20284,20294,20323,20316,20320,20271,20302,20278,20313,20317,20296,20314,20812,20811,20813,20853,20918,20919,21029,21028,21033,21034,21032,21163,21161,21162,21164,21283,21363,21365,21533,21549,21534,21566,21542,21582,21543,21574,21571,21555,21576,21570,21531,21545,21578,21561,21563,21560,21550,21557,21558,21536,21564,21568,21553,21547,21535,21548,22250,22256,22244,22251,22346,22353,22336,22349,22343,22350,22334,22352,22351,22331,22767,22846,22941,22930,22952,22942,22947,22937,22934,22925,22948,22931,22922,22949,23389,23388,23386,23387,23436,23435,23439,23596,23616,23617,23615,23614,23696,23697,23700,23692,24043,24076,24207,24199,24202,24311,24324,24351,24420,24418,24439,24441,24536,24524,24535,24525,24561,24555,24568,24554,25106,25105,25220,25239,25238,25216,25206,25225,25197,25226,25212,25214,25209,25203,25234,25199,25240,25198,25237,25235,25233,25222,25913,25915,25912,26097,26356,26463,26446,26447,26448,26449,26460,26454,26462,26441,26438,26464,26451,26455,27493,27599,27714,27742,27801,27777,27784,27785,27781,27803,27754,27770,27792,27760,27788,27752,27798,27794,27773,27779,27762,27774,27764,27782,27766,27789,27796,27800,27778,28790,28796,28797,28792,29282,29281,29280,29380,29378,29590,29996,29995,30007,30008,30338,30447,30691,31169,31168,31167,31350,31995,32597,32918,32915,32925,32920,32923,32922,32946,33391,33426,33419,33421,35211,35282,35328,35895,35910,35925,35997,36196,36208,36275,36523,36554,36763,36784,36802,36806,36805,36804,24033,37009,37026,37034,37030,37027,37193,37318,37324,38450,38446,38449,38442,38444,20006,20054,20083,20107,20123,20126,20139,20140,20335,20381,20365,20339,20351,20332,20379,20363,20358,20355,20336,20341,20360,20329,20347,20374,20350,20367,20369,20346,20820,20818,20821,20841,20855,20854,20856,20925,20989,21051,21048,21047,21050,21040,21038,21046,21057,21182,21179,21330,21332,21331,21329,21350,21367,21368,21369,21462,21460,21463,21619,21621,21654,21624,21653,21632,21627,21623,21636,21650,21638,21628,21648,21617,21622,21644,21658,21602,21608,21643,21629,21646,22266,22403,22391,22378,22377,22369,22374,22372,22396,22812,22857,22855,22856,22852,22868,22974,22971,22996,22969,22958,22993,22982,22992,22989,22987,22995,22986,22959,22963,22994,22981,23391,23396,23395,23447,23450,23448,23452,23449,23451,23578,23624,23621,23622,23735,23713,23736,23721,23723,23729,23731,24088,24090,24086,24085,24091,24081,24184,24218,24215,24220,24213,24214,24310,24358,24359,24361,24448,24449,24447,24444,24541,24544,24573,24565,24575,24591,24596,24623,24629,24598,24618,24597,24609,24615,24617,24619,24603,25110,25109,25151,25150,25152,25215,25289,25292,25284,25279,25282,25273,25298,25307,25259,25299,25300,25291,25288,25256,25277,25276,25296,25305,25287,25293,25269,25306,25265,25304,25302,25303,25286,25260,25294,25918,26023,26044,26106,26132,26131,26124,26118,26114,26126,26112,26127,26133,26122,26119,26381,26379,26477,26507,26517,26481,26524,26483,26487,26503,26525,26519,26479,26480,26495,26505,26494,26512,26485,26522,26515,26492,26474,26482,27427,27494,27495,27519,27667,27675,27875,27880,27891,27825,27852,27877,27827,27837,27838,27836,27874,27819,27861,27859,27832,27844,27833,27841,27822,27863,27845,27889,27839,27835,27873,27867,27850,27820,27887,27868,27862,27872,28821,28814,28818,28810,28825,29228,29229,29240,29256,29287,29289,29376,29390,29401,29399,29392,29609,29608,29599,29611,29605,30013,30109,30105,30106,30340,30402,30450,30452,30693,30717,31038,31040,31041,31177,31176,31354,31353,31482,31998,32596,32652,32651,32773,32954,32933,32930,32945,32929,32939,32937,32948,32938,32943,33253,33278,33293,33459,33437,33433,33453,33469,33439,33465,33457,33452,33445,33455,33464,33443,33456,33470,33463,34382,34417,21021,34920,36555,36814,36820,36817,37045,37048,37041,37046,37319,37329,38263,38272,38428,38464,38463,38459,38468,38466,38585,38632,38738,38750,20127,20141,20142,20449,20405,20399,20415,20448,20433,20431,20445,20419,20406,20440,20447,20426,20439,20398,20432,20420,20418,20442,20430,20446,20407,20823,20882,20881,20896,21070,21059,21066,21069,21068,21067,21063,21191,21193,21187,21185,21261,21335,21371,21402,21467,21676,21696,21672,21710,21705,21688,21670,21683,21703,21698,21693,21674,21697,21700,21704,21679,21675,21681,21691,21673,21671,21695,22271,22402,22411,22432,22435,22434,22478,22446,22419,22869,22865,22863,22862,22864,23004,23e3,23039,23011,23016,23043,23013,23018,23002,23014,23041,23035,23401,23459,23462,23460,23458,23461,23553,23630,23631,23629,23627,23769,23762,24055,24093,24101,24095,24189,24224,24230,24314,24328,24365,24421,24456,24453,24458,24459,24455,24460,24457,24594,24605,24608,24613,24590,24616,24653,24688,24680,24674,24646,24643,24684,24683,24682,24676,25153,25308,25366,25353,25340,25325,25345,25326,25341,25351,25329,25335,25327,25324,25342,25332,25361,25346,25919,25925,26027,26045,26082,26149,26157,26144,26151,26159,26143,26152,26161,26148,26359,26623,26579,26609,26580,26576,26604,26550,26543,26613,26601,26607,26564,26577,26548,26586,26597,26552,26575,26590,26611,26544,26585,26594,26589,26578,27498,27523,27526,27573,27602,27607,27679,27849,27915,27954,27946,27969,27941,27916,27953,27934,27927,27963,27965,27966,27958,27931,27893,27961,27943,27960,27945,27950,27957,27918,27947,28843,28858,28851,28844,28847,28845,28856,28846,28836,29232,29298,29295,29300,29417,29408,29409,29623,29642,29627,29618,29645,29632,29619,29978,29997,30031,30028,30030,30027,30123,30116,30117,30114,30115,30328,30342,30343,30344,30408,30406,30403,30405,30465,30457,30456,30473,30475,30462,30460,30471,30684,30722,30740,30732,30733,31046,31049,31048,31047,31161,31162,31185,31186,31179,31359,31361,31487,31485,31869,32002,32005,32e3,32009,32007,32004,32006,32568,32654,32703,32772,32784,32781,32785,32822,32982,32997,32986,32963,32964,32972,32993,32987,32974,32990,32996,32989,33268,33314,33511,33539,33541,33507,33499,33510,33540,33509,33538,33545,33490,33495,33521,33537,33500,33492,33489,33502,33491,33503,33519,33542,34384,34425,34427,34426,34893,34923,35201,35284,35336,35330,35331,35998,36e3,36212,36211,36276,36557,36556,36848,36838,36834,36842,36837,36845,36843,36836,36840,37066,37070,37057,37059,37195,37194,37325,38274,38480,38475,38476,38477,38754,38761,38859,38893,38899,38913,39080,39131,39135,39318,39321,20056,20147,20492,20493,20515,20463,20518,20517,20472,20521,20502,20486,20540,20511,20506,20498,20497,20474,20480,20500,20520,20465,20513,20491,20505,20504,20467,20462,20525,20522,20478,20523,20489,20860,20900,20901,20898,20941,20940,20934,20939,21078,21084,21076,21083,21085,21290,21375,21407,21405,21471,21736,21776,21761,21815,21756,21733,21746,21766,21754,21780,21737,21741,21729,21769,21742,21738,21734,21799,21767,21757,21775,22275,22276,22466,22484,22475,22467,22537,22799,22871,22872,22874,23057,23064,23068,23071,23067,23059,23020,23072,23075,23081,23077,23052,23049,23403,23640,23472,23475,23478,23476,23470,23477,23481,23480,23556,23633,23637,23632,23789,23805,23803,23786,23784,23792,23798,23809,23796,24046,24109,24107,24235,24237,24231,24369,24466,24465,24464,24665,24675,24677,24656,24661,24685,24681,24687,24708,24735,24730,24717,24724,24716,24709,24726,25159,25331,25352,25343,25422,25406,25391,25429,25410,25414,25423,25417,25402,25424,25405,25386,25387,25384,25421,25420,25928,25929,26009,26049,26053,26178,26185,26191,26179,26194,26188,26181,26177,26360,26388,26389,26391,26657,26680,26696,26694,26707,26681,26690,26708,26665,26803,26647,26700,26705,26685,26612,26704,26688,26684,26691,26666,26693,26643,26648,26689,27530,27529,27575,27683,27687,27688,27686,27684,27888,28010,28053,28040,28039,28006,28024,28023,27993,28051,28012,28041,28014,27994,28020,28009,28044,28042,28025,28037,28005,28052,28874,28888,28900,28889,28872,28879,29241,29305,29436,29433,29437,29432,29431,29574,29677,29705,29678,29664,29674,29662,30036,30045,30044,30042,30041,30142,30149,30151,30130,30131,30141,30140,30137,30146,30136,30347,30384,30410,30413,30414,30505,30495,30496,30504,30697,30768,30759,30776,30749,30772,30775,30757,30765,30752,30751,30770,31061,31056,31072,31071,31062,31070,31069,31063,31066,31204,31203,31207,31199,31206,31209,31192,31364,31368,31449,31494,31505,31881,32033,32023,32011,32010,32032,32034,32020,32016,32021,32026,32028,32013,32025,32027,32570,32607,32660,32709,32705,32774,32792,32789,32793,32791,32829,32831,33009,33026,33008,33029,33005,33012,33030,33016,33011,33032,33021,33034,33020,33007,33261,33260,33280,33296,33322,33323,33320,33324,33467,33579,33618,33620,33610,33592,33616,33609,33589,33588,33615,33586,33593,33590,33559,33600,33585,33576,33603,34388,34442,34474,34451,34468,34473,34444,34467,34460,34928,34935,34945,34946,34941,34937,35352,35344,35342,35340,35349,35338,35351,35347,35350,35343,35345,35912,35962,35961,36001,36002,36215,36524,36562,36564,36559,36785,36865,36870,36855,36864,36858,36852,36867,36861,36869,36856,37013,37089,37085,37090,37202,37197,37196,37336,37341,37335,37340,37337,38275,38498,38499,38497,38491,38493,38500,38488,38494,38587,39138,39340,39592,39640,39717,39730,39740,20094,20602,20605,20572,20551,20547,20556,20570,20553,20581,20598,20558,20565,20597,20596,20599,20559,20495,20591,20589,20828,20885,20976,21098,21103,21202,21209,21208,21205,21264,21263,21273,21311,21312,21310,21443,26364,21830,21866,21862,21828,21854,21857,21827,21834,21809,21846,21839,21845,21807,21860,21816,21806,21852,21804,21859,21811,21825,21847,22280,22283,22281,22495,22533,22538,22534,22496,22500,22522,22530,22581,22519,22521,22816,22882,23094,23105,23113,23142,23146,23104,23100,23138,23130,23110,23114,23408,23495,23493,23492,23490,23487,23494,23561,23560,23559,23648,23644,23645,23815,23814,23822,23835,23830,23842,23825,23849,23828,23833,23844,23847,23831,24034,24120,24118,24115,24119,24247,24248,24246,24245,24254,24373,24375,24407,24428,24425,24427,24471,24473,24478,24472,24481,24480,24476,24703,24739,24713,24736,24744,24779,24756,24806,24765,24773,24763,24757,24796,24764,24792,24789,24774,24799,24760,24794,24775,25114,25115,25160,25504,25511,25458,25494,25506,25509,25463,25447,25496,25514,25457,25513,25481,25475,25499,25451,25512,25476,25480,25497,25505,25516,25490,25487,25472,25467,25449,25448,25466,25949,25942,25937,25945,25943,21855,25935,25944,25941,25940,26012,26011,26028,26063,26059,26060,26062,26205,26202,26212,26216,26214,26206,26361,21207,26395,26753,26799,26786,26771,26805,26751,26742,26801,26791,26775,26800,26755,26820,26797,26758,26757,26772,26781,26792,26783,26785,26754,27442,27578,27627,27628,27691,28046,28092,28147,28121,28082,28129,28108,28132,28155,28154,28165,28103,28107,28079,28113,28078,28126,28153,28088,28151,28149,28101,28114,28186,28085,28122,28139,28120,28138,28145,28142,28136,28102,28100,28074,28140,28095,28134,28921,28937,28938,28925,28911,29245,29309,29313,29468,29467,29462,29459,29465,29575,29701,29706,29699,29702,29694,29709,29920,29942,29943,29980,29986,30053,30054,30050,30064,30095,30164,30165,30133,30154,30157,30350,30420,30418,30427,30519,30526,30524,30518,30520,30522,30827,30787,30798,31077,31080,31085,31227,31378,31381,31520,31528,31515,31532,31526,31513,31518,31534,31890,31895,31893,32070,32067,32113,32046,32057,32060,32064,32048,32051,32068,32047,32066,32050,32049,32573,32670,32666,32716,32718,32722,32796,32842,32838,33071,33046,33059,33067,33065,33072,33060,33282,33333,33335,33334,33337,33678,33694,33688,33656,33698,33686,33725,33707,33682,33674,33683,33673,33696,33655,33659,33660,33670,33703,34389,24426,34503,34496,34486,34500,34485,34502,34507,34481,34479,34505,34899,34974,34952,34987,34962,34966,34957,34955,35219,35215,35370,35357,35363,35365,35377,35373,35359,35355,35362,35913,35930,36009,36012,36011,36008,36010,36007,36199,36198,36286,36282,36571,36575,36889,36877,36890,36887,36899,36895,36893,36880,36885,36894,36896,36879,36898,36886,36891,36884,37096,37101,37117,37207,37326,37365,37350,37347,37351,37357,37353,38281,38506,38517,38515,38520,38512,38516,38518,38519,38508,38592,38634,38633,31456,31455,38914,38915,39770,40165,40565,40575,40613,40635,20642,20621,20613,20633,20625,20608,20630,20632,20634,26368,20977,21106,21108,21109,21097,21214,21213,21211,21338,21413,21883,21888,21927,21884,21898,21917,21912,21890,21916,21930,21908,21895,21899,21891,21939,21934,21919,21822,21938,21914,21947,21932,21937,21886,21897,21931,21913,22285,22575,22570,22580,22564,22576,22577,22561,22557,22560,22777,22778,22880,23159,23194,23167,23186,23195,23207,23411,23409,23506,23500,23507,23504,23562,23563,23601,23884,23888,23860,23879,24061,24133,24125,24128,24131,24190,24266,24257,24258,24260,24380,24429,24489,24490,24488,24785,24801,24754,24758,24800,24860,24867,24826,24853,24816,24827,24820,24936,24817,24846,24822,24841,24832,24850,25119,25161,25507,25484,25551,25536,25577,25545,25542,25549,25554,25571,25552,25569,25558,25581,25582,25462,25588,25578,25563,25682,25562,25593,25950,25958,25954,25955,26001,26e3,26031,26222,26224,26228,26230,26223,26257,26234,26238,26231,26366,26367,26399,26397,26874,26837,26848,26840,26839,26885,26847,26869,26862,26855,26873,26834,26866,26851,26827,26829,26893,26898,26894,26825,26842,26990,26875,27454,27450,27453,27544,27542,27580,27631,27694,27695,27692,28207,28216,28244,28193,28210,28263,28234,28192,28197,28195,28187,28251,28248,28196,28246,28270,28205,28198,28271,28212,28237,28218,28204,28227,28189,28222,28363,28297,28185,28238,28259,28228,28274,28265,28255,28953,28954,28966,28976,28961,28982,29038,28956,29260,29316,29312,29494,29477,29492,29481,29754,29738,29747,29730,29733,29749,29750,29748,29743,29723,29734,29736,29989,29990,30059,30058,30178,30171,30179,30169,30168,30174,30176,30331,30332,30358,30355,30388,30428,30543,30701,30813,30828,30831,31245,31240,31243,31237,31232,31384,31383,31382,31461,31459,31561,31574,31558,31568,31570,31572,31565,31563,31567,31569,31903,31909,32094,32080,32104,32085,32043,32110,32114,32097,32102,32098,32112,32115,21892,32724,32725,32779,32850,32901,33109,33108,33099,33105,33102,33081,33094,33086,33100,33107,33140,33298,33308,33769,33795,33784,33805,33760,33733,33803,33729,33775,33777,33780,33879,33802,33776,33804,33740,33789,33778,33738,33848,33806,33796,33756,33799,33748,33759,34395,34527,34521,34541,34516,34523,34532,34512,34526,34903,35009,35010,34993,35203,35222,35387,35424,35413,35422,35388,35393,35412,35419,35408,35398,35380,35386,35382,35414,35937,35970,36015,36028,36019,36029,36033,36027,36032,36020,36023,36022,36031,36024,36234,36229,36225,36302,36317,36299,36314,36305,36300,36315,36294,36603,36600,36604,36764,36910,36917,36913,36920,36914,36918,37122,37109,37129,37118,37219,37221,37327,37396,37397,37411,37385,37406,37389,37392,37383,37393,38292,38287,38283,38289,38291,38290,38286,38538,38542,38539,38525,38533,38534,38541,38514,38532,38593,38597,38596,38598,38599,38639,38642,38860,38917,38918,38920,39143,39146,39151,39145,39154,39149,39342,39341,40643,40653,40657,20098,20653,20661,20658,20659,20677,20670,20652,20663,20667,20655,20679,21119,21111,21117,21215,21222,21220,21218,21219,21295,21983,21992,21971,21990,21966,21980,21959,21969,21987,21988,21999,21978,21985,21957,21958,21989,21961,22290,22291,22622,22609,22616,22615,22618,22612,22635,22604,22637,22602,22626,22610,22603,22887,23233,23241,23244,23230,23229,23228,23219,23234,23218,23913,23919,24140,24185,24265,24264,24338,24409,24492,24494,24858,24847,24904,24863,24819,24859,24825,24833,24840,24910,24908,24900,24909,24894,24884,24871,24845,24838,24887,25121,25122,25619,25662,25630,25642,25645,25661,25644,25615,25628,25620,25613,25654,25622,25623,25606,25964,26015,26032,26263,26249,26247,26248,26262,26244,26264,26253,26371,27028,26989,26970,26999,26976,26964,26997,26928,27010,26954,26984,26987,26974,26963,27001,27014,26973,26979,26971,27463,27506,27584,27583,27603,27645,28322,28335,28371,28342,28354,28304,28317,28359,28357,28325,28312,28348,28346,28331,28369,28310,28316,28356,28372,28330,28327,28340,29006,29017,29033,29028,29001,29031,29020,29036,29030,29004,29029,29022,28998,29032,29014,29242,29266,29495,29509,29503,29502,29807,29786,29781,29791,29790,29761,29759,29785,29787,29788,30070,30072,30208,30192,30209,30194,30193,30202,30207,30196,30195,30430,30431,30555,30571,30566,30558,30563,30585,30570,30572,30556,30565,30568,30562,30702,30862,30896,30871,30872,30860,30857,30844,30865,30867,30847,31098,31103,31105,33836,31165,31260,31258,31264,31252,31263,31262,31391,31392,31607,31680,31584,31598,31591,31921,31923,31925,32147,32121,32145,32129,32143,32091,32622,32617,32618,32626,32681,32680,32676,32854,32856,32902,32900,33137,33136,33144,33125,33134,33139,33131,33145,33146,33126,33285,33351,33922,33911,33853,33841,33909,33894,33899,33865,33900,33883,33852,33845,33889,33891,33897,33901,33862,34398,34396,34399,34553,34579,34568,34567,34560,34558,34555,34562,34563,34566,34570,34905,35039,35028,35033,35036,35032,35037,35041,35018,35029,35026,35228,35299,35435,35442,35443,35430,35433,35440,35463,35452,35427,35488,35441,35461,35437,35426,35438,35436,35449,35451,35390,35432,35938,35978,35977,36042,36039,36040,36036,36018,36035,36034,36037,36321,36319,36328,36335,36339,36346,36330,36324,36326,36530,36611,36617,36606,36618,36767,36786,36939,36938,36947,36930,36948,36924,36949,36944,36935,36943,36942,36941,36945,36926,36929,37138,37143,37228,37226,37225,37321,37431,37463,37432,37437,37440,37438,37467,37451,37476,37457,37428,37449,37453,37445,37433,37439,37466,38296,38552,38548,38549,38605,38603,38601,38602,38647,38651,38649,38646,38742,38772,38774,38928,38929,38931,38922,38930,38924,39164,39156,39165,39166,39347,39345,39348,39649,40169,40578,40718,40723,40736,20711,20718,20709,20694,20717,20698,20693,20687,20689,20721,20686,20713,20834,20979,21123,21122,21297,21421,22014,22016,22043,22039,22013,22036,22022,22025,22029,22030,22007,22038,22047,22024,22032,22006,22296,22294,22645,22654,22659,22675,22666,22649,22661,22653,22781,22821,22818,22820,22890,22889,23265,23270,23273,23255,23254,23256,23267,23413,23518,23527,23521,23525,23526,23528,23522,23524,23519,23565,23650,23940,23943,24155,24163,24149,24151,24148,24275,24278,24330,24390,24432,24505,24903,24895,24907,24951,24930,24931,24927,24922,24920,24949,25130,25735,25688,25684,25764,25720,25695,25722,25681,25703,25652,25709,25723,25970,26017,26071,26070,26274,26280,26269,27036,27048,27029,27073,27054,27091,27083,27035,27063,27067,27051,27060,27088,27085,27053,27084,27046,27075,27043,27465,27468,27699,28467,28436,28414,28435,28404,28457,28478,28448,28460,28431,28418,28450,28415,28399,28422,28465,28472,28466,28451,28437,28459,28463,28552,28458,28396,28417,28402,28364,28407,29076,29081,29053,29066,29060,29074,29246,29330,29334,29508,29520,29796,29795,29802,29808,29805,29956,30097,30247,30221,30219,30217,30227,30433,30435,30596,30589,30591,30561,30913,30879,30887,30899,30889,30883,31118,31119,31117,31278,31281,31402,31401,31469,31471,31649,31637,31627,31605,31639,31645,31636,31631,31672,31623,31620,31929,31933,31934,32187,32176,32156,32189,32190,32160,32202,32180,32178,32177,32186,32162,32191,32181,32184,32173,32210,32199,32172,32624,32736,32737,32735,32862,32858,32903,33104,33152,33167,33160,33162,33151,33154,33255,33274,33287,33300,33310,33355,33993,33983,33990,33988,33945,33950,33970,33948,33995,33976,33984,34003,33936,33980,34001,33994,34623,34588,34619,34594,34597,34612,34584,34645,34615,34601,35059,35074,35060,35065,35064,35069,35048,35098,35055,35494,35468,35486,35491,35469,35489,35475,35492,35498,35493,35496,35480,35473,35482,35495,35946,35981,35980,36051,36049,36050,36203,36249,36245,36348,36628,36626,36629,36627,36771,36960,36952,36956,36963,36953,36958,36962,36957,36955,37145,37144,37150,37237,37240,37239,37236,37496,37504,37509,37528,37526,37499,37523,37532,37544,37500,37521,38305,38312,38313,38307,38309,38308,38553,38556,38555,38604,38610,38656,38780,38789,38902,38935,38936,39087,39089,39171,39173,39180,39177,39361,39599,39600,39654,39745,39746,40180,40182,40179,40636,40763,40778,20740,20736,20731,20725,20729,20738,20744,20745,20741,20956,21127,21128,21129,21133,21130,21232,21426,22062,22075,22073,22066,22079,22068,22057,22099,22094,22103,22132,22070,22063,22064,22656,22687,22686,22707,22684,22702,22697,22694,22893,23305,23291,23307,23285,23308,23304,23534,23532,23529,23531,23652,23653,23965,23956,24162,24159,24161,24290,24282,24287,24285,24291,24288,24392,24433,24503,24501,24950,24935,24942,24925,24917,24962,24956,24944,24939,24958,24999,24976,25003,24974,25004,24986,24996,24980,25006,25134,25705,25711,25721,25758,25778,25736,25744,25776,25765,25747,25749,25769,25746,25774,25773,25771,25754,25772,25753,25762,25779,25973,25975,25976,26286,26283,26292,26289,27171,27167,27112,27137,27166,27161,27133,27169,27155,27146,27123,27138,27141,27117,27153,27472,27470,27556,27589,27590,28479,28540,28548,28497,28518,28500,28550,28525,28507,28536,28526,28558,28538,28528,28516,28567,28504,28373,28527,28512,28511,29087,29100,29105,29096,29270,29339,29518,29527,29801,29835,29827,29822,29824,30079,30240,30249,30239,30244,30246,30241,30242,30362,30394,30436,30606,30599,30604,30609,30603,30923,30917,30906,30922,30910,30933,30908,30928,31295,31292,31296,31293,31287,31291,31407,31406,31661,31665,31684,31668,31686,31687,31681,31648,31692,31946,32224,32244,32239,32251,32216,32236,32221,32232,32227,32218,32222,32233,32158,32217,32242,32249,32629,32631,32687,32745,32806,33179,33180,33181,33184,33178,33176,34071,34109,34074,34030,34092,34093,34067,34065,34083,34081,34068,34028,34085,34047,34054,34690,34676,34678,34656,34662,34680,34664,34649,34647,34636,34643,34907,34909,35088,35079,35090,35091,35093,35082,35516,35538,35527,35524,35477,35531,35576,35506,35529,35522,35519,35504,35542,35533,35510,35513,35547,35916,35918,35948,36064,36062,36070,36068,36076,36077,36066,36067,36060,36074,36065,36205,36255,36259,36395,36368,36381,36386,36367,36393,36383,36385,36382,36538,36637,36635,36639,36649,36646,36650,36636,36638,36645,36969,36974,36968,36973,36983,37168,37165,37159,37169,37255,37257,37259,37251,37573,37563,37559,37610,37548,37604,37569,37555,37564,37586,37575,37616,37554,38317,38321,38660,38662,38663,38665,38752,38797,38795,38799,38945,38955,38940,39091,39178,39187,39186,39192,39389,39376,39391,39387,39377,39381,39378,39385,39607,39662,39663,39719,39749,39748,39799,39791,40198,40201,40195,40617,40638,40654,22696,40786,20754,20760,20756,20752,20757,20864,20906,20957,21137,21139,21235,22105,22123,22137,22121,22116,22136,22122,22120,22117,22129,22127,22124,22114,22134,22721,22718,22727,22725,22894,23325,23348,23416,23536,23566,24394,25010,24977,25001,24970,25037,25014,25022,25034,25032,25136,25797,25793,25803,25787,25788,25818,25796,25799,25794,25805,25791,25810,25812,25790,25972,26310,26313,26297,26308,26311,26296,27197,27192,27194,27225,27243,27224,27193,27204,27234,27233,27211,27207,27189,27231,27208,27481,27511,27653,28610,28593,28577,28611,28580,28609,28583,28595,28608,28601,28598,28582,28576,28596,29118,29129,29136,29138,29128,29141,29113,29134,29145,29148,29123,29124,29544,29852,29859,29848,29855,29854,29922,29964,29965,30260,30264,30266,30439,30437,30624,30622,30623,30629,30952,30938,30956,30951,31142,31309,31310,31302,31308,31307,31418,31705,31761,31689,31716,31707,31713,31721,31718,31957,31958,32266,32273,32264,32283,32291,32286,32285,32265,32272,32633,32690,32752,32753,32750,32808,33203,33193,33192,33275,33288,33368,33369,34122,34137,34120,34152,34153,34115,34121,34157,34154,34142,34691,34719,34718,34722,34701,34913,35114,35122,35109,35115,35105,35242,35238,35558,35578,35563,35569,35584,35548,35559,35566,35582,35585,35586,35575,35565,35571,35574,35580,35947,35949,35987,36084,36420,36401,36404,36418,36409,36405,36667,36655,36664,36659,36776,36774,36981,36980,36984,36978,36988,36986,37172,37266,37664,37686,37624,37683,37679,37666,37628,37675,37636,37658,37648,37670,37665,37653,37678,37657,38331,38567,38568,38570,38613,38670,38673,38678,38669,38675,38671,38747,38748,38758,38808,38960,38968,38971,38967,38957,38969,38948,39184,39208,39198,39195,39201,39194,39405,39394,39409,39608,39612,39675,39661,39720,39825,40213,40227,40230,40232,40210,40219,40664,40660,40845,40860,20778,20767,20769,20786,21237,22158,22144,22160,22149,22151,22159,22741,22739,22737,22734,23344,23338,23332,23418,23607,23656,23996,23994,23997,23992,24171,24396,24509,25033,25026,25031,25062,25035,25138,25140,25806,25802,25816,25824,25840,25830,25836,25841,25826,25837,25986,25987,26329,26326,27264,27284,27268,27298,27292,27355,27299,27262,27287,27280,27296,27484,27566,27610,27656,28632,28657,28639,28640,28635,28644,28651,28655,28544,28652,28641,28649,28629,28654,28656,29159,29151,29166,29158,29157,29165,29164,29172,29152,29237,29254,29552,29554,29865,29872,29862,29864,30278,30274,30284,30442,30643,30634,30640,30636,30631,30637,30703,30967,30970,30964,30959,30977,31143,31146,31319,31423,31751,31757,31742,31735,31756,31712,31968,31964,31966,31970,31967,31961,31965,32302,32318,32326,32311,32306,32323,32299,32317,32305,32325,32321,32308,32313,32328,32309,32319,32303,32580,32755,32764,32881,32882,32880,32879,32883,33222,33219,33210,33218,33216,33215,33213,33225,33214,33256,33289,33393,34218,34180,34174,34204,34193,34196,34223,34203,34183,34216,34186,34407,34752,34769,34739,34770,34758,34731,34747,34746,34760,34763,35131,35126,35140,35128,35133,35244,35598,35607,35609,35611,35594,35616,35613,35588,35600,35905,35903,35955,36090,36093,36092,36088,36091,36264,36425,36427,36424,36426,36676,36670,36674,36677,36671,36991,36989,36996,36993,36994,36992,37177,37283,37278,37276,37709,37762,37672,37749,37706,37733,37707,37656,37758,37740,37723,37744,37722,37716,38346,38347,38348,38344,38342,38577,38584,38614,38684,38686,38816,38867,38982,39094,39221,39425,39423,39854,39851,39850,39853,40251,40255,40587,40655,40670,40668,40669,40667,40766,40779,21474,22165,22190,22745,22744,23352,24413,25059,25139,25844,25842,25854,25862,25850,25851,25847,26039,26332,26406,27315,27308,27331,27323,27320,27330,27310,27311,27487,27512,27567,28681,28683,28670,28678,28666,28689,28687,29179,29180,29182,29176,29559,29557,29863,29887,29973,30294,30296,30290,30653,30655,30651,30652,30990,31150,31329,31330,31328,31428,31429,31787,31783,31786,31774,31779,31777,31975,32340,32341,32350,32346,32353,32338,32345,32584,32761,32763,32887,32886,33229,33231,33290,34255,34217,34253,34256,34249,34224,34234,34233,34214,34799,34796,34802,34784,35206,35250,35316,35624,35641,35628,35627,35920,36101,36441,36451,36454,36452,36447,36437,36544,36681,36685,36999,36995,37e3,37291,37292,37328,37780,37770,37782,37794,37811,37806,37804,37808,37784,37786,37783,38356,38358,38352,38357,38626,38620,38617,38619,38622,38692,38819,38822,38829,38905,38989,38991,38988,38990,38995,39098,39230,39231,39229,39214,39333,39438,39617,39683,39686,39759,39758,39757,39882,39881,39933,39880,39872,40273,40285,40288,40672,40725,40748,20787,22181,22750,22751,22754,23541,40848,24300,25074,25079,25078,25077,25856,25871,26336,26333,27365,27357,27354,27347,28699,28703,28712,28698,28701,28693,28696,29190,29197,29272,29346,29560,29562,29885,29898,29923,30087,30086,30303,30305,30663,31001,31153,31339,31337,31806,31807,31800,31805,31799,31808,32363,32365,32377,32361,32362,32645,32371,32694,32697,32696,33240,34281,34269,34282,34261,34276,34277,34295,34811,34821,34829,34809,34814,35168,35167,35158,35166,35649,35676,35672,35657,35674,35662,35663,35654,35673,36104,36106,36476,36466,36487,36470,36460,36474,36468,36692,36686,36781,37002,37003,37297,37294,37857,37841,37855,37827,37832,37852,37853,37846,37858,37837,37848,37860,37847,37864,38364,38580,38627,38698,38695,38753,38876,38907,39006,39e3,39003,39100,39237,39241,39446,39449,39693,39912,39911,39894,39899,40329,40289,40306,40298,40300,40594,40599,40595,40628,21240,22184,22199,22198,22196,22204,22756,23360,23363,23421,23542,24009,25080,25082,25880,25876,25881,26342,26407,27372,28734,28720,28722,29200,29563,29903,30306,30309,31014,31018,31020,31019,31431,31478,31820,31811,31821,31983,31984,36782,32381,32380,32386,32588,32768,33242,33382,34299,34297,34321,34298,34310,34315,34311,34314,34836,34837,35172,35258,35320,35696,35692,35686,35695,35679,35691,36111,36109,36489,36481,36485,36482,37300,37323,37912,37891,37885,38369,38704,39108,39250,39249,39336,39467,39472,39479,39477,39955,39949,40569,40629,40680,40751,40799,40803,40801,20791,20792,22209,22208,22210,22804,23660,24013,25084,25086,25885,25884,26005,26345,27387,27396,27386,27570,28748,29211,29351,29910,29908,30313,30675,31824,32399,32396,32700,34327,34349,34330,34851,34850,34849,34847,35178,35180,35261,35700,35703,35709,36115,36490,36493,36491,36703,36783,37306,37934,37939,37941,37946,37944,37938,37931,38370,38712,38713,38706,38911,39015,39013,39255,39493,39491,39488,39486,39631,39764,39761,39981,39973,40367,40372,40386,40376,40605,40687,40729,40796,40806,40807,20796,20795,22216,22218,22217,23423,24020,24018,24398,25087,25892,27402,27489,28753,28760,29568,29924,30090,30318,30316,31155,31840,31839,32894,32893,33247,35186,35183,35324,35712,36118,36119,36497,36499,36705,37192,37956,37969,37970,38717,38718,38851,38849,39019,39253,39509,39501,39634,39706,40009,39985,39998,39995,40403,40407,40756,40812,40810,40852,22220,24022,25088,25891,25899,25898,26348,27408,29914,31434,31844,31843,31845,32403,32406,32404,33250,34360,34367,34865,35722,37008,37007,37987,37984,37988,38760,39023,39260,39514,39515,39511,39635,39636,39633,40020,40023,40022,40421,40607,40692,22225,22761,25900,28766,30321,30322,30679,32592,32648,34870,34873,34914,35731,35730,35734,33399,36123,37312,37994,38722,38728,38724,38854,39024,39519,39714,39768,40031,40441,40442,40572,40573,40711,40823,40818,24307,27414,28771,31852,31854,34875,35264,36513,37313,38002,38e3,39025,39262,39638,39715,40652,28772,30682,35738,38007,38857,39522,39525,32412,35740,36522,37317,38013,38014,38012,40055,40056,40695,35924,38015,40474,29224,39530,39729,40475,40478,31858,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,9332,9333,9334,9335,9336,9337,9338,9339,9340,9341,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,20022,20031,20101,20128,20866,20886,20907,21241,21304,21353,21430,22794,23424,24027,12083,24191,24308,24400,24417,25908,26080,30098,30326,36789,38582,168,710,12541,12542,12445,12446,12291,20189,12293,12294,12295,12540,65339,65341,10045,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12367,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12427,12428,12429,12430,12431,12432,12433,12434,12435,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502,12503,12504,12505,12506,12507,12508,12509,12510,12511,12512,12513,12514,12515,12516,12517,12518,12519,12520,12521,12522,12523,12524,12525,12526,12527,12528,12529,12530,12531,12532,12533,12534,1040,1041,1042,1043,1044,1045,1025,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1105,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,8679,8632,8633,12751,131276,20058,131210,20994,17553,40880,20872,40881,161287,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,65506,65508,65287,65282,12849,8470,8481,12443,12444,11904,11908,11910,11911,11912,11914,11916,11917,11925,11932,11933,11941,11943,11946,11948,11950,11958,11964,11966,11974,11978,11980,11981,11983,11990,11991,11998,12003,null,null,null,643,592,603,596,629,339,248,331,650,618,20034,20060,20981,21274,21378,19975,19980,20039,20109,22231,64012,23662,24435,19983,20871,19982,20014,20115,20162,20169,20168,20888,21244,21356,21433,22304,22787,22828,23568,24063,26081,27571,27596,27668,29247,20017,20028,20200,20188,20201,20193,20189,20186,21004,21276,21324,22306,22307,22807,22831,23425,23428,23570,23611,23668,23667,24068,24192,24194,24521,25097,25168,27669,27702,27715,27711,27707,29358,29360,29578,31160,32906,38430,20238,20248,20268,20213,20244,20209,20224,20215,20232,20253,20226,20229,20258,20243,20228,20212,20242,20913,21011,21001,21008,21158,21282,21279,21325,21386,21511,22241,22239,22318,22314,22324,22844,22912,22908,22917,22907,22910,22903,22911,23382,23573,23589,23676,23674,23675,23678,24031,24181,24196,24322,24346,24436,24533,24532,24527,25180,25182,25188,25185,25190,25186,25177,25184,25178,25189,26095,26094,26430,26425,26424,26427,26426,26431,26428,26419,27672,27718,27730,27740,27727,27722,27732,27723,27724,28785,29278,29364,29365,29582,29994,30335,31349,32593,33400,33404,33408,33405,33407,34381,35198,37017,37015,37016,37019,37012,38434,38436,38432,38435,20310,20283,20322,20297,20307,20324,20286,20327,20306,20319,20289,20312,20269,20275,20287,20321,20879,20921,21020,21022,21025,21165,21166,21257,21347,21362,21390,21391,21552,21559,21546,21588,21573,21529,21532,21541,21528,21565,21583,21569,21544,21540,21575,22254,22247,22245,22337,22341,22348,22345,22347,22354,22790,22848,22950,22936,22944,22935,22926,22946,22928,22927,22951,22945,23438,23442,23592,23594,23693,23695,23688,23691,23689,23698,23690,23686,23699,23701,24032,24074,24078,24203,24201,24204,24200,24205,24325,24349,24440,24438,24530,24529,24528,24557,24552,24558,24563,24545,24548,24547,24570,24559,24567,24571,24576,24564,25146,25219,25228,25230,25231,25236,25223,25201,25211,25210,25200,25217,25224,25207,25213,25202,25204,25911,26096,26100,26099,26098,26101,26437,26439,26457,26453,26444,26440,26461,26445,26458,26443,27600,27673,27674,27768,27751,27755,27780,27787,27791,27761,27759,27753,27802,27757,27783,27797,27804,27750,27763,27749,27771,27790,28788,28794,29283,29375,29373,29379,29382,29377,29370,29381,29589,29591,29587,29588,29586,30010,30009,30100,30101,30337,31037,32820,32917,32921,32912,32914,32924,33424,33423,33413,33422,33425,33427,33418,33411,33412,35960,36809,36799,37023,37025,37029,37022,37031,37024,38448,38440,38447,38445,20019,20376,20348,20357,20349,20352,20359,20342,20340,20361,20356,20343,20300,20375,20330,20378,20345,20353,20344,20368,20380,20372,20382,20370,20354,20373,20331,20334,20894,20924,20926,21045,21042,21043,21062,21041,21180,21258,21259,21308,21394,21396,21639,21631,21633,21649,21634,21640,21611,21626,21630,21605,21612,21620,21606,21645,21615,21601,21600,21656,21603,21607,21604,22263,22265,22383,22386,22381,22379,22385,22384,22390,22400,22389,22395,22387,22388,22370,22376,22397,22796,22853,22965,22970,22991,22990,22962,22988,22977,22966,22972,22979,22998,22961,22973,22976,22984,22964,22983,23394,23397,23443,23445,23620,23623,23726,23716,23712,23733,23727,23720,23724,23711,23715,23725,23714,23722,23719,23709,23717,23734,23728,23718,24087,24084,24089,24360,24354,24355,24356,24404,24450,24446,24445,24542,24549,24621,24614,24601,24626,24587,24628,24586,24599,24627,24602,24606,24620,24610,24589,24592,24622,24595,24593,24588,24585,24604,25108,25149,25261,25268,25297,25278,25258,25270,25290,25262,25267,25263,25275,25257,25264,25272,25917,26024,26043,26121,26108,26116,26130,26120,26107,26115,26123,26125,26117,26109,26129,26128,26358,26378,26501,26476,26510,26514,26486,26491,26520,26502,26500,26484,26509,26508,26490,26527,26513,26521,26499,26493,26497,26488,26489,26516,27429,27520,27518,27614,27677,27795,27884,27883,27886,27865,27830,27860,27821,27879,27831,27856,27842,27834,27843,27846,27885,27890,27858,27869,27828,27786,27805,27776,27870,27840,27952,27853,27847,27824,27897,27855,27881,27857,28820,28824,28805,28819,28806,28804,28817,28822,28802,28826,28803,29290,29398,29387,29400,29385,29404,29394,29396,29402,29388,29393,29604,29601,29613,29606,29602,29600,29612,29597,29917,29928,30015,30016,30014,30092,30104,30383,30451,30449,30448,30453,30712,30716,30713,30715,30714,30711,31042,31039,31173,31352,31355,31483,31861,31997,32821,32911,32942,32931,32952,32949,32941,33312,33440,33472,33451,33434,33432,33435,33461,33447,33454,33468,33438,33466,33460,33448,33441,33449,33474,33444,33475,33462,33442,34416,34415,34413,34414,35926,36818,36811,36819,36813,36822,36821,36823,37042,37044,37039,37043,37040,38457,38461,38460,38458,38467,20429,20421,20435,20402,20425,20427,20417,20436,20444,20441,20411,20403,20443,20423,20438,20410,20416,20409,20460,21060,21065,21184,21186,21309,21372,21399,21398,21401,21400,21690,21665,21677,21669,21711,21699,33549,21687,21678,21718,21686,21701,21702,21664,21616,21692,21666,21694,21618,21726,21680,22453,22430,22431,22436,22412,22423,22429,22427,22420,22424,22415,22425,22437,22426,22421,22772,22797,22867,23009,23006,23022,23040,23025,23005,23034,23037,23036,23030,23012,23026,23031,23003,23017,23027,23029,23008,23038,23028,23021,23464,23628,23760,23768,23756,23767,23755,23771,23774,23770,23753,23751,23754,23766,23763,23764,23759,23752,23750,23758,23775,23800,24057,24097,24098,24099,24096,24100,24240,24228,24226,24219,24227,24229,24327,24366,24406,24454,24631,24633,24660,24690,24670,24645,24659,24647,24649,24667,24652,24640,24642,24671,24612,24644,24664,24678,24686,25154,25155,25295,25357,25355,25333,25358,25347,25323,25337,25359,25356,25336,25334,25344,25363,25364,25338,25365,25339,25328,25921,25923,26026,26047,26166,26145,26162,26165,26140,26150,26146,26163,26155,26170,26141,26164,26169,26158,26383,26384,26561,26610,26568,26554,26588,26555,26616,26584,26560,26551,26565,26603,26596,26591,26549,26573,26547,26615,26614,26606,26595,26562,26553,26574,26599,26608,26546,26620,26566,26605,26572,26542,26598,26587,26618,26569,26570,26563,26602,26571,27432,27522,27524,27574,27606,27608,27616,27680,27681,27944,27956,27949,27935,27964,27967,27922,27914,27866,27955,27908,27929,27962,27930,27921,27904,27933,27970,27905,27928,27959,27907,27919,27968,27911,27936,27948,27912,27938,27913,27920,28855,28831,28862,28849,28848,28833,28852,28853,28841,29249,29257,29258,29292,29296,29299,29294,29386,29412,29416,29419,29407,29418,29414,29411,29573,29644,29634,29640,29637,29625,29622,29621,29620,29675,29631,29639,29630,29635,29638,29624,29643,29932,29934,29998,30023,30024,30119,30122,30329,30404,30472,30467,30468,30469,30474,30455,30459,30458,30695,30696,30726,30737,30738,30725,30736,30735,30734,30729,30723,30739,31050,31052,31051,31045,31044,31189,31181,31183,31190,31182,31360,31358,31441,31488,31489,31866,31864,31865,31871,31872,31873,32003,32008,32001,32600,32657,32653,32702,32775,32782,32783,32788,32823,32984,32967,32992,32977,32968,32962,32976,32965,32995,32985,32988,32970,32981,32969,32975,32983,32998,32973,33279,33313,33428,33497,33534,33529,33543,33512,33536,33493,33594,33515,33494,33524,33516,33505,33522,33525,33548,33531,33526,33520,33514,33508,33504,33530,33523,33517,34423,34420,34428,34419,34881,34894,34919,34922,34921,35283,35332,35335,36210,36835,36833,36846,36832,37105,37053,37055,37077,37061,37054,37063,37067,37064,37332,37331,38484,38479,38481,38483,38474,38478,20510,20485,20487,20499,20514,20528,20507,20469,20468,20531,20535,20524,20470,20471,20503,20508,20512,20519,20533,20527,20529,20494,20826,20884,20883,20938,20932,20933,20936,20942,21089,21082,21074,21086,21087,21077,21090,21197,21262,21406,21798,21730,21783,21778,21735,21747,21732,21786,21759,21764,21768,21739,21777,21765,21745,21770,21755,21751,21752,21728,21774,21763,21771,22273,22274,22476,22578,22485,22482,22458,22470,22461,22460,22456,22454,22463,22471,22480,22457,22465,22798,22858,23065,23062,23085,23086,23061,23055,23063,23050,23070,23091,23404,23463,23469,23468,23555,23638,23636,23788,23807,23790,23793,23799,23808,23801,24105,24104,24232,24238,24234,24236,24371,24368,24423,24669,24666,24679,24641,24738,24712,24704,24722,24705,24733,24707,24725,24731,24727,24711,24732,24718,25113,25158,25330,25360,25430,25388,25412,25413,25398,25411,25572,25401,25419,25418,25404,25385,25409,25396,25432,25428,25433,25389,25415,25395,25434,25425,25400,25431,25408,25416,25930,25926,26054,26051,26052,26050,26186,26207,26183,26193,26386,26387,26655,26650,26697,26674,26675,26683,26699,26703,26646,26673,26652,26677,26667,26669,26671,26702,26692,26676,26653,26642,26644,26662,26664,26670,26701,26682,26661,26656,27436,27439,27437,27441,27444,27501,32898,27528,27622,27620,27624,27619,27618,27623,27685,28026,28003,28004,28022,27917,28001,28050,27992,28002,28013,28015,28049,28045,28143,28031,28038,27998,28007,28e3,28055,28016,28028,27999,28034,28056,27951,28008,28043,28030,28032,28036,27926,28035,28027,28029,28021,28048,28892,28883,28881,28893,28875,32569,28898,28887,28882,28894,28896,28884,28877,28869,28870,28871,28890,28878,28897,29250,29304,29303,29302,29440,29434,29428,29438,29430,29427,29435,29441,29651,29657,29669,29654,29628,29671,29667,29673,29660,29650,29659,29652,29661,29658,29655,29656,29672,29918,29919,29940,29941,29985,30043,30047,30128,30145,30139,30148,30144,30143,30134,30138,30346,30409,30493,30491,30480,30483,30482,30499,30481,30485,30489,30490,30498,30503,30755,30764,30754,30773,30767,30760,30766,30763,30753,30761,30771,30762,30769,31060,31067,31055,31068,31059,31058,31057,31211,31212,31200,31214,31213,31210,31196,31198,31197,31366,31369,31365,31371,31372,31370,31367,31448,31504,31492,31507,31493,31503,31496,31498,31502,31497,31506,31876,31889,31882,31884,31880,31885,31877,32030,32029,32017,32014,32024,32022,32019,32031,32018,32015,32012,32604,32609,32606,32608,32605,32603,32662,32658,32707,32706,32704,32790,32830,32825,33018,33010,33017,33013,33025,33019,33024,33281,33327,33317,33587,33581,33604,33561,33617,33573,33622,33599,33601,33574,33564,33570,33602,33614,33563,33578,33544,33596,33613,33558,33572,33568,33591,33583,33577,33607,33605,33612,33619,33566,33580,33611,33575,33608,34387,34386,34466,34472,34454,34445,34449,34462,34439,34455,34438,34443,34458,34437,34469,34457,34465,34471,34453,34456,34446,34461,34448,34452,34883,34884,34925,34933,34934,34930,34944,34929,34943,34927,34947,34942,34932,34940,35346,35911,35927,35963,36004,36003,36214,36216,36277,36279,36278,36561,36563,36862,36853,36866,36863,36859,36868,36860,36854,37078,37088,37081,37082,37091,37087,37093,37080,37083,37079,37084,37092,37200,37198,37199,37333,37346,37338,38492,38495,38588,39139,39647,39727,20095,20592,20586,20577,20574,20576,20563,20555,20573,20594,20552,20557,20545,20571,20554,20578,20501,20549,20575,20585,20587,20579,20580,20550,20544,20590,20595,20567,20561,20944,21099,21101,21100,21102,21206,21203,21293,21404,21877,21878,21820,21837,21840,21812,21802,21841,21858,21814,21813,21808,21842,21829,21772,21810,21861,21838,21817,21832,21805,21819,21824,21835,22282,22279,22523,22548,22498,22518,22492,22516,22528,22509,22525,22536,22520,22539,22515,22479,22535,22510,22499,22514,22501,22508,22497,22542,22524,22544,22503,22529,22540,22513,22505,22512,22541,22532,22876,23136,23128,23125,23143,23134,23096,23093,23149,23120,23135,23141,23148,23123,23140,23127,23107,23133,23122,23108,23131,23112,23182,23102,23117,23097,23116,23152,23145,23111,23121,23126,23106,23132,23410,23406,23489,23488,23641,23838,23819,23837,23834,23840,23820,23848,23821,23846,23845,23823,23856,23826,23843,23839,23854,24126,24116,24241,24244,24249,24242,24243,24374,24376,24475,24470,24479,24714,24720,24710,24766,24752,24762,24787,24788,24783,24804,24793,24797,24776,24753,24795,24759,24778,24767,24771,24781,24768,25394,25445,25482,25474,25469,25533,25502,25517,25501,25495,25515,25486,25455,25479,25488,25454,25519,25461,25500,25453,25518,25468,25508,25403,25503,25464,25477,25473,25489,25485,25456,25939,26061,26213,26209,26203,26201,26204,26210,26392,26745,26759,26768,26780,26733,26734,26798,26795,26966,26735,26787,26796,26793,26741,26740,26802,26767,26743,26770,26748,26731,26738,26794,26752,26737,26750,26779,26774,26763,26784,26761,26788,26744,26747,26769,26764,26762,26749,27446,27443,27447,27448,27537,27535,27533,27534,27532,27690,28096,28075,28084,28083,28276,28076,28137,28130,28087,28150,28116,28160,28104,28128,28127,28118,28094,28133,28124,28125,28123,28148,28106,28093,28141,28144,28090,28117,28098,28111,28105,28112,28146,28115,28157,28119,28109,28131,28091,28922,28941,28919,28951,28916,28940,28912,28932,28915,28944,28924,28927,28934,28947,28928,28920,28918,28939,28930,28942,29310,29307,29308,29311,29469,29463,29447,29457,29464,29450,29448,29439,29455,29470,29576,29686,29688,29685,29700,29697,29693,29703,29696,29690,29692,29695,29708,29707,29684,29704,30052,30051,30158,30162,30159,30155,30156,30161,30160,30351,30345,30419,30521,30511,30509,30513,30514,30516,30515,30525,30501,30523,30517,30792,30802,30793,30797,30794,30796,30758,30789,30800,31076,31079,31081,31082,31075,31083,31073,31163,31226,31224,31222,31223,31375,31380,31376,31541,31559,31540,31525,31536,31522,31524,31539,31512,31530,31517,31537,31531,31533,31535,31538,31544,31514,31523,31892,31896,31894,31907,32053,32061,32056,32054,32058,32069,32044,32041,32065,32071,32062,32063,32074,32059,32040,32611,32661,32668,32669,32667,32714,32715,32717,32720,32721,32711,32719,32713,32799,32798,32795,32839,32835,32840,33048,33061,33049,33051,33069,33055,33068,33054,33057,33045,33063,33053,33058,33297,33336,33331,33338,33332,33330,33396,33680,33699,33704,33677,33658,33651,33700,33652,33679,33665,33685,33689,33653,33684,33705,33661,33667,33676,33693,33691,33706,33675,33662,33701,33711,33672,33687,33712,33663,33702,33671,33710,33654,33690,34393,34390,34495,34487,34498,34497,34501,34490,34480,34504,34489,34483,34488,34508,34484,34491,34492,34499,34493,34494,34898,34953,34965,34984,34978,34986,34970,34961,34977,34975,34968,34983,34969,34971,34967,34980,34988,34956,34963,34958,35202,35286,35289,35285,35376,35367,35372,35358,35897,35899,35932,35933,35965,36005,36221,36219,36217,36284,36290,36281,36287,36289,36568,36574,36573,36572,36567,36576,36577,36900,36875,36881,36892,36876,36897,37103,37098,37104,37108,37106,37107,37076,37099,37100,37097,37206,37208,37210,37203,37205,37356,37364,37361,37363,37368,37348,37369,37354,37355,37367,37352,37358,38266,38278,38280,38524,38509,38507,38513,38511,38591,38762,38916,39141,39319,20635,20629,20628,20638,20619,20643,20611,20620,20622,20637,20584,20636,20626,20610,20615,20831,20948,21266,21265,21412,21415,21905,21928,21925,21933,21879,22085,21922,21907,21896,21903,21941,21889,21923,21906,21924,21885,21900,21926,21887,21909,21921,21902,22284,22569,22583,22553,22558,22567,22563,22568,22517,22600,22565,22556,22555,22579,22591,22582,22574,22585,22584,22573,22572,22587,22881,23215,23188,23199,23162,23202,23198,23160,23206,23164,23205,23212,23189,23214,23095,23172,23178,23191,23171,23179,23209,23163,23165,23180,23196,23183,23187,23197,23530,23501,23499,23508,23505,23498,23502,23564,23600,23863,23875,23915,23873,23883,23871,23861,23889,23886,23893,23859,23866,23890,23869,23857,23897,23874,23865,23881,23864,23868,23858,23862,23872,23877,24132,24129,24408,24486,24485,24491,24777,24761,24780,24802,24782,24772,24852,24818,24842,24854,24837,24821,24851,24824,24828,24830,24769,24835,24856,24861,24848,24831,24836,24843,25162,25492,25521,25520,25550,25573,25576,25583,25539,25757,25587,25546,25568,25590,25557,25586,25589,25697,25567,25534,25565,25564,25540,25560,25555,25538,25543,25548,25547,25544,25584,25559,25561,25906,25959,25962,25956,25948,25960,25957,25996,26013,26014,26030,26064,26066,26236,26220,26235,26240,26225,26233,26218,26226,26369,26892,26835,26884,26844,26922,26860,26858,26865,26895,26838,26871,26859,26852,26870,26899,26896,26867,26849,26887,26828,26888,26992,26804,26897,26863,26822,26900,26872,26832,26877,26876,26856,26891,26890,26903,26830,26824,26845,26846,26854,26868,26833,26886,26836,26857,26901,26917,26823,27449,27451,27455,27452,27540,27543,27545,27541,27581,27632,27634,27635,27696,28156,28230,28231,28191,28233,28296,28220,28221,28229,28258,28203,28223,28225,28253,28275,28188,28211,28235,28224,28241,28219,28163,28206,28254,28264,28252,28257,28209,28200,28256,28273,28267,28217,28194,28208,28243,28261,28199,28280,28260,28279,28245,28281,28242,28262,28213,28214,28250,28960,28958,28975,28923,28974,28977,28963,28965,28962,28978,28959,28968,28986,28955,29259,29274,29320,29321,29318,29317,29323,29458,29451,29488,29474,29489,29491,29479,29490,29485,29478,29475,29493,29452,29742,29740,29744,29739,29718,29722,29729,29741,29745,29732,29731,29725,29737,29728,29746,29947,29999,30063,30060,30183,30170,30177,30182,30173,30175,30180,30167,30357,30354,30426,30534,30535,30532,30541,30533,30538,30542,30539,30540,30686,30700,30816,30820,30821,30812,30829,30833,30826,30830,30832,30825,30824,30814,30818,31092,31091,31090,31088,31234,31242,31235,31244,31236,31385,31462,31460,31562,31547,31556,31560,31564,31566,31552,31576,31557,31906,31902,31912,31905,32088,32111,32099,32083,32086,32103,32106,32079,32109,32092,32107,32082,32084,32105,32081,32095,32078,32574,32575,32613,32614,32674,32672,32673,32727,32849,32847,32848,33022,32980,33091,33098,33106,33103,33095,33085,33101,33082,33254,33262,33271,33272,33273,33284,33340,33341,33343,33397,33595,33743,33785,33827,33728,33768,33810,33767,33764,33788,33782,33808,33734,33736,33771,33763,33727,33793,33757,33765,33752,33791,33761,33739,33742,33750,33781,33737,33801,33807,33758,33809,33798,33730,33779,33749,33786,33735,33745,33770,33811,33731,33772,33774,33732,33787,33751,33762,33819,33755,33790,34520,34530,34534,34515,34531,34522,34538,34525,34539,34524,34540,34537,34519,34536,34513,34888,34902,34901,35002,35031,35001,35e3,35008,35006,34998,35004,34999,35005,34994,35073,35017,35221,35224,35223,35293,35290,35291,35406,35405,35385,35417,35392,35415,35416,35396,35397,35410,35400,35409,35402,35404,35407,35935,35969,35968,36026,36030,36016,36025,36021,36228,36224,36233,36312,36307,36301,36295,36310,36316,36303,36309,36313,36296,36311,36293,36591,36599,36602,36601,36582,36590,36581,36597,36583,36584,36598,36587,36593,36588,36596,36585,36909,36916,36911,37126,37164,37124,37119,37116,37128,37113,37115,37121,37120,37127,37125,37123,37217,37220,37215,37218,37216,37377,37386,37413,37379,37402,37414,37391,37388,37376,37394,37375,37373,37382,37380,37415,37378,37404,37412,37401,37399,37381,37398,38267,38285,38284,38288,38535,38526,38536,38537,38531,38528,38594,38600,38595,38641,38640,38764,38768,38766,38919,39081,39147,40166,40697,20099,20100,20150,20669,20671,20678,20654,20676,20682,20660,20680,20674,20656,20673,20666,20657,20683,20681,20662,20664,20951,21114,21112,21115,21116,21955,21979,21964,21968,21963,21962,21981,21952,21972,21956,21993,21951,21970,21901,21967,21973,21986,21974,21960,22002,21965,21977,21954,22292,22611,22632,22628,22607,22605,22601,22639,22613,22606,22621,22617,22629,22619,22589,22627,22641,22780,23239,23236,23243,23226,23224,23217,23221,23216,23231,23240,23227,23238,23223,23232,23242,23220,23222,23245,23225,23184,23510,23512,23513,23583,23603,23921,23907,23882,23909,23922,23916,23902,23912,23911,23906,24048,24143,24142,24138,24141,24139,24261,24268,24262,24267,24263,24384,24495,24493,24823,24905,24906,24875,24901,24886,24882,24878,24902,24879,24911,24873,24896,25120,37224,25123,25125,25124,25541,25585,25579,25616,25618,25609,25632,25636,25651,25667,25631,25621,25624,25657,25655,25634,25635,25612,25638,25648,25640,25665,25653,25647,25610,25626,25664,25637,25639,25611,25575,25627,25646,25633,25614,25967,26002,26067,26246,26252,26261,26256,26251,26250,26265,26260,26232,26400,26982,26975,26936,26958,26978,26993,26943,26949,26986,26937,26946,26967,26969,27002,26952,26953,26933,26988,26931,26941,26981,26864,27e3,26932,26985,26944,26991,26948,26998,26968,26945,26996,26956,26939,26955,26935,26972,26959,26961,26930,26962,26927,27003,26940,27462,27461,27459,27458,27464,27457,27547,64013,27643,27644,27641,27639,27640,28315,28374,28360,28303,28352,28319,28307,28308,28320,28337,28345,28358,28370,28349,28353,28318,28361,28343,28336,28365,28326,28367,28338,28350,28355,28380,28376,28313,28306,28302,28301,28324,28321,28351,28339,28368,28362,28311,28334,28323,28999,29012,29010,29027,29024,28993,29021,29026,29042,29048,29034,29025,28994,29016,28995,29003,29040,29023,29008,29011,28996,29005,29018,29263,29325,29324,29329,29328,29326,29500,29506,29499,29498,29504,29514,29513,29764,29770,29771,29778,29777,29783,29760,29775,29776,29774,29762,29766,29773,29780,29921,29951,29950,29949,29981,30073,30071,27011,30191,30223,30211,30199,30206,30204,30201,30200,30224,30203,30198,30189,30197,30205,30361,30389,30429,30549,30559,30560,30546,30550,30554,30569,30567,30548,30553,30573,30688,30855,30874,30868,30863,30852,30869,30853,30854,30881,30851,30841,30873,30848,30870,30843,31100,31106,31101,31097,31249,31256,31257,31250,31255,31253,31266,31251,31259,31248,31395,31394,31390,31467,31590,31588,31597,31604,31593,31602,31589,31603,31601,31600,31585,31608,31606,31587,31922,31924,31919,32136,32134,32128,32141,32127,32133,32122,32142,32123,32131,32124,32140,32148,32132,32125,32146,32621,32619,32615,32616,32620,32678,32677,32679,32731,32732,32801,33124,33120,33143,33116,33129,33115,33122,33138,26401,33118,33142,33127,33135,33092,33121,33309,33353,33348,33344,33346,33349,34033,33855,33878,33910,33913,33935,33933,33893,33873,33856,33926,33895,33840,33869,33917,33882,33881,33908,33907,33885,34055,33886,33847,33850,33844,33914,33859,33912,33842,33861,33833,33753,33867,33839,33858,33837,33887,33904,33849,33870,33868,33874,33903,33989,33934,33851,33863,33846,33843,33896,33918,33860,33835,33888,33876,33902,33872,34571,34564,34551,34572,34554,34518,34549,34637,34552,34574,34569,34561,34550,34573,34565,35030,35019,35021,35022,35038,35035,35034,35020,35024,35205,35227,35295,35301,35300,35297,35296,35298,35292,35302,35446,35462,35455,35425,35391,35447,35458,35460,35445,35459,35457,35444,35450,35900,35915,35914,35941,35940,35942,35974,35972,35973,36044,36200,36201,36241,36236,36238,36239,36237,36243,36244,36240,36242,36336,36320,36332,36337,36334,36304,36329,36323,36322,36327,36338,36331,36340,36614,36607,36609,36608,36613,36615,36616,36610,36619,36946,36927,36932,36937,36925,37136,37133,37135,37137,37142,37140,37131,37134,37230,37231,37448,37458,37424,37434,37478,37427,37477,37470,37507,37422,37450,37446,37485,37484,37455,37472,37479,37487,37430,37473,37488,37425,37460,37475,37456,37490,37454,37459,37452,37462,37426,38303,38300,38302,38299,38546,38547,38545,38551,38606,38650,38653,38648,38645,38771,38775,38776,38770,38927,38925,38926,39084,39158,39161,39343,39346,39344,39349,39597,39595,39771,40170,40173,40167,40576,40701,20710,20692,20695,20712,20723,20699,20714,20701,20708,20691,20716,20720,20719,20707,20704,20952,21120,21121,21225,21227,21296,21420,22055,22037,22028,22034,22012,22031,22044,22017,22035,22018,22010,22045,22020,22015,22009,22665,22652,22672,22680,22662,22657,22655,22644,22667,22650,22663,22673,22670,22646,22658,22664,22651,22676,22671,22782,22891,23260,23278,23269,23253,23274,23258,23277,23275,23283,23266,23264,23259,23276,23262,23261,23257,23272,23263,23415,23520,23523,23651,23938,23936,23933,23942,23930,23937,23927,23946,23945,23944,23934,23932,23949,23929,23935,24152,24153,24147,24280,24273,24279,24270,24284,24277,24281,24274,24276,24388,24387,24431,24502,24876,24872,24897,24926,24945,24947,24914,24915,24946,24940,24960,24948,24916,24954,24923,24933,24891,24938,24929,24918,25129,25127,25131,25643,25677,25691,25693,25716,25718,25714,25715,25725,25717,25702,25766,25678,25730,25694,25692,25675,25683,25696,25680,25727,25663,25708,25707,25689,25701,25719,25971,26016,26273,26272,26271,26373,26372,26402,27057,27062,27081,27040,27086,27030,27056,27052,27068,27025,27033,27022,27047,27021,27049,27070,27055,27071,27076,27069,27044,27092,27065,27082,27034,27087,27059,27027,27050,27041,27038,27097,27031,27024,27074,27061,27045,27078,27466,27469,27467,27550,27551,27552,27587,27588,27646,28366,28405,28401,28419,28453,28408,28471,28411,28462,28425,28494,28441,28442,28455,28440,28475,28434,28397,28426,28470,28531,28409,28398,28461,28480,28464,28476,28469,28395,28423,28430,28483,28421,28413,28406,28473,28444,28412,28474,28447,28429,28446,28424,28449,29063,29072,29065,29056,29061,29058,29071,29051,29062,29057,29079,29252,29267,29335,29333,29331,29507,29517,29521,29516,29794,29811,29809,29813,29810,29799,29806,29952,29954,29955,30077,30096,30230,30216,30220,30229,30225,30218,30228,30392,30593,30588,30597,30594,30574,30592,30575,30590,30595,30898,30890,30900,30893,30888,30846,30891,30878,30885,30880,30892,30882,30884,31128,31114,31115,31126,31125,31124,31123,31127,31112,31122,31120,31275,31306,31280,31279,31272,31270,31400,31403,31404,31470,31624,31644,31626,31633,31632,31638,31629,31628,31643,31630,31621,31640,21124,31641,31652,31618,31931,31935,31932,31930,32167,32183,32194,32163,32170,32193,32192,32197,32157,32206,32196,32198,32203,32204,32175,32185,32150,32188,32159,32166,32174,32169,32161,32201,32627,32738,32739,32741,32734,32804,32861,32860,33161,33158,33155,33159,33165,33164,33163,33301,33943,33956,33953,33951,33978,33998,33986,33964,33966,33963,33977,33972,33985,33997,33962,33946,33969,34e3,33949,33959,33979,33954,33940,33991,33996,33947,33961,33967,33960,34006,33944,33974,33999,33952,34007,34004,34002,34011,33968,33937,34401,34611,34595,34600,34667,34624,34606,34590,34593,34585,34587,34627,34604,34625,34622,34630,34592,34610,34602,34605,34620,34578,34618,34609,34613,34626,34598,34599,34616,34596,34586,34608,34577,35063,35047,35057,35058,35066,35070,35054,35068,35062,35067,35056,35052,35051,35229,35233,35231,35230,35305,35307,35304,35499,35481,35467,35474,35471,35478,35901,35944,35945,36053,36047,36055,36246,36361,36354,36351,36365,36349,36362,36355,36359,36358,36357,36350,36352,36356,36624,36625,36622,36621,37155,37148,37152,37154,37151,37149,37146,37156,37153,37147,37242,37234,37241,37235,37541,37540,37494,37531,37498,37536,37524,37546,37517,37542,37530,37547,37497,37527,37503,37539,37614,37518,37506,37525,37538,37501,37512,37537,37514,37510,37516,37529,37543,37502,37511,37545,37533,37515,37421,38558,38561,38655,38744,38781,38778,38782,38787,38784,38786,38779,38788,38785,38783,38862,38861,38934,39085,39086,39170,39168,39175,39325,39324,39363,39353,39355,39354,39362,39357,39367,39601,39651,39655,39742,39743,39776,39777,39775,40177,40178,40181,40615,20735,20739,20784,20728,20742,20743,20726,20734,20747,20748,20733,20746,21131,21132,21233,21231,22088,22082,22092,22069,22081,22090,22089,22086,22104,22106,22080,22067,22077,22060,22078,22072,22058,22074,22298,22699,22685,22705,22688,22691,22703,22700,22693,22689,22783,23295,23284,23293,23287,23286,23299,23288,23298,23289,23297,23303,23301,23311,23655,23961,23959,23967,23954,23970,23955,23957,23968,23964,23969,23962,23966,24169,24157,24160,24156,32243,24283,24286,24289,24393,24498,24971,24963,24953,25009,25008,24994,24969,24987,24979,25007,25005,24991,24978,25002,24993,24973,24934,25011,25133,25710,25712,25750,25760,25733,25751,25756,25743,25739,25738,25740,25763,25759,25704,25777,25752,25974,25978,25977,25979,26034,26035,26293,26288,26281,26290,26295,26282,26287,27136,27142,27159,27109,27128,27157,27121,27108,27168,27135,27116,27106,27163,27165,27134,27175,27122,27118,27156,27127,27111,27200,27144,27110,27131,27149,27132,27115,27145,27140,27160,27173,27151,27126,27174,27143,27124,27158,27473,27557,27555,27554,27558,27649,27648,27647,27650,28481,28454,28542,28551,28614,28562,28557,28553,28556,28514,28495,28549,28506,28566,28534,28524,28546,28501,28530,28498,28496,28503,28564,28563,28509,28416,28513,28523,28541,28519,28560,28499,28555,28521,28543,28565,28515,28535,28522,28539,29106,29103,29083,29104,29088,29082,29097,29109,29085,29093,29086,29092,29089,29098,29084,29095,29107,29336,29338,29528,29522,29534,29535,29536,29533,29531,29537,29530,29529,29538,29831,29833,29834,29830,29825,29821,29829,29832,29820,29817,29960,29959,30078,30245,30238,30233,30237,30236,30243,30234,30248,30235,30364,30365,30366,30363,30605,30607,30601,30600,30925,30907,30927,30924,30929,30926,30932,30920,30915,30916,30921,31130,31137,31136,31132,31138,31131,27510,31289,31410,31412,31411,31671,31691,31678,31660,31694,31663,31673,31690,31669,31941,31944,31948,31947,32247,32219,32234,32231,32215,32225,32259,32250,32230,32246,32241,32240,32238,32223,32630,32684,32688,32685,32749,32747,32746,32748,32742,32744,32868,32871,33187,33183,33182,33173,33186,33177,33175,33302,33359,33363,33362,33360,33358,33361,34084,34107,34063,34048,34089,34062,34057,34061,34079,34058,34087,34076,34043,34091,34042,34056,34060,34036,34090,34034,34069,34039,34027,34035,34044,34066,34026,34025,34070,34046,34088,34077,34094,34050,34045,34078,34038,34097,34086,34023,34024,34032,34031,34041,34072,34080,34096,34059,34073,34095,34402,34646,34659,34660,34679,34785,34675,34648,34644,34651,34642,34657,34650,34641,34654,34669,34666,34640,34638,34655,34653,34671,34668,34682,34670,34652,34661,34639,34683,34677,34658,34663,34665,34906,35077,35084,35092,35083,35095,35096,35097,35078,35094,35089,35086,35081,35234,35236,35235,35309,35312,35308,35535,35526,35512,35539,35537,35540,35541,35515,35543,35518,35520,35525,35544,35523,35514,35517,35545,35902,35917,35983,36069,36063,36057,36072,36058,36061,36071,36256,36252,36257,36251,36384,36387,36389,36388,36398,36373,36379,36374,36369,36377,36390,36391,36372,36370,36376,36371,36380,36375,36378,36652,36644,36632,36634,36640,36643,36630,36631,36979,36976,36975,36967,36971,37167,37163,37161,37162,37170,37158,37166,37253,37254,37258,37249,37250,37252,37248,37584,37571,37572,37568,37593,37558,37583,37617,37599,37592,37609,37591,37597,37580,37615,37570,37608,37578,37576,37582,37606,37581,37589,37577,37600,37598,37607,37585,37587,37557,37601,37574,37556,38268,38316,38315,38318,38320,38564,38562,38611,38661,38664,38658,38746,38794,38798,38792,38864,38863,38942,38941,38950,38953,38952,38944,38939,38951,39090,39176,39162,39185,39188,39190,39191,39189,39388,39373,39375,39379,39380,39374,39369,39382,39384,39371,39383,39372,39603,39660,39659,39667,39666,39665,39750,39747,39783,39796,39793,39782,39798,39797,39792,39784,39780,39788,40188,40186,40189,40191,40183,40199,40192,40185,40187,40200,40197,40196,40579,40659,40719,40720,20764,20755,20759,20762,20753,20958,21300,21473,22128,22112,22126,22131,22118,22115,22125,22130,22110,22135,22300,22299,22728,22717,22729,22719,22714,22722,22716,22726,23319,23321,23323,23329,23316,23315,23312,23318,23336,23322,23328,23326,23535,23980,23985,23977,23975,23989,23984,23982,23978,23976,23986,23981,23983,23988,24167,24168,24166,24175,24297,24295,24294,24296,24293,24395,24508,24989,25e3,24982,25029,25012,25030,25025,25036,25018,25023,25016,24972,25815,25814,25808,25807,25801,25789,25737,25795,25819,25843,25817,25907,25983,25980,26018,26312,26302,26304,26314,26315,26319,26301,26299,26298,26316,26403,27188,27238,27209,27239,27186,27240,27198,27229,27245,27254,27227,27217,27176,27226,27195,27199,27201,27242,27236,27216,27215,27220,27247,27241,27232,27196,27230,27222,27221,27213,27214,27206,27477,27476,27478,27559,27562,27563,27592,27591,27652,27651,27654,28589,28619,28579,28615,28604,28622,28616,28510,28612,28605,28574,28618,28584,28676,28581,28590,28602,28588,28586,28623,28607,28600,28578,28617,28587,28621,28591,28594,28592,29125,29122,29119,29112,29142,29120,29121,29131,29140,29130,29127,29135,29117,29144,29116,29126,29146,29147,29341,29342,29545,29542,29543,29548,29541,29547,29546,29823,29850,29856,29844,29842,29845,29857,29963,30080,30255,30253,30257,30269,30259,30268,30261,30258,30256,30395,30438,30618,30621,30625,30620,30619,30626,30627,30613,30617,30615,30941,30953,30949,30954,30942,30947,30939,30945,30946,30957,30943,30944,31140,31300,31304,31303,31414,31416,31413,31409,31415,31710,31715,31719,31709,31701,31717,31706,31720,31737,31700,31722,31714,31708,31723,31704,31711,31954,31956,31959,31952,31953,32274,32289,32279,32268,32287,32288,32275,32270,32284,32277,32282,32290,32267,32271,32278,32269,32276,32293,32292,32579,32635,32636,32634,32689,32751,32810,32809,32876,33201,33190,33198,33209,33205,33195,33200,33196,33204,33202,33207,33191,33266,33365,33366,33367,34134,34117,34155,34125,34131,34145,34136,34112,34118,34148,34113,34146,34116,34129,34119,34147,34110,34139,34161,34126,34158,34165,34133,34151,34144,34188,34150,34141,34132,34149,34156,34403,34405,34404,34715,34703,34711,34707,34706,34696,34689,34710,34712,34681,34695,34723,34693,34704,34705,34717,34692,34708,34716,34714,34697,35102,35110,35120,35117,35118,35111,35121,35106,35113,35107,35119,35116,35103,35313,35552,35554,35570,35572,35573,35549,35604,35556,35551,35568,35528,35550,35553,35560,35583,35567,35579,35985,35986,35984,36085,36078,36081,36080,36083,36204,36206,36261,36263,36403,36414,36408,36416,36421,36406,36412,36413,36417,36400,36415,36541,36662,36654,36661,36658,36665,36663,36660,36982,36985,36987,36998,37114,37171,37173,37174,37267,37264,37265,37261,37263,37671,37662,37640,37663,37638,37647,37754,37688,37692,37659,37667,37650,37633,37702,37677,37646,37645,37579,37661,37626,37669,37651,37625,37623,37684,37634,37668,37631,37673,37689,37685,37674,37652,37644,37643,37630,37641,37632,37627,37654,38332,38349,38334,38329,38330,38326,38335,38325,38333,38569,38612,38667,38674,38672,38809,38807,38804,38896,38904,38965,38959,38962,39204,39199,39207,39209,39326,39406,39404,39397,39396,39408,39395,39402,39401,39399,39609,39615,39604,39611,39670,39674,39673,39671,39731,39808,39813,39815,39804,39806,39803,39810,39827,39826,39824,39802,39829,39805,39816,40229,40215,40224,40222,40212,40233,40221,40216,40226,40208,40217,40223,40584,40582,40583,40622,40621,40661,40662,40698,40722,40765,20774,20773,20770,20772,20768,20777,21236,22163,22156,22157,22150,22148,22147,22142,22146,22143,22145,22742,22740,22735,22738,23341,23333,23346,23331,23340,23335,23334,23343,23342,23419,23537,23538,23991,24172,24170,24510,24507,25027,25013,25020,25063,25056,25061,25060,25064,25054,25839,25833,25827,25835,25828,25832,25985,25984,26038,26074,26322,27277,27286,27265,27301,27273,27295,27291,27297,27294,27271,27283,27278,27285,27267,27304,27300,27281,27263,27302,27290,27269,27276,27282,27483,27565,27657,28620,28585,28660,28628,28643,28636,28653,28647,28646,28638,28658,28637,28642,28648,29153,29169,29160,29170,29156,29168,29154,29555,29550,29551,29847,29874,29867,29840,29866,29869,29873,29861,29871,29968,29969,29970,29967,30084,30275,30280,30281,30279,30372,30441,30645,30635,30642,30647,30646,30644,30641,30632,30704,30963,30973,30978,30971,30972,30962,30981,30969,30974,30980,31147,31144,31324,31323,31318,31320,31316,31322,31422,31424,31425,31749,31759,31730,31744,31743,31739,31758,31732,31755,31731,31746,31753,31747,31745,31736,31741,31750,31728,31729,31760,31754,31976,32301,32316,32322,32307,38984,32312,32298,32329,32320,32327,32297,32332,32304,32315,32310,32324,32314,32581,32639,32638,32637,32756,32754,32812,33211,33220,33228,33226,33221,33223,33212,33257,33371,33370,33372,34179,34176,34191,34215,34197,34208,34187,34211,34171,34212,34202,34206,34167,34172,34185,34209,34170,34168,34135,34190,34198,34182,34189,34201,34205,34177,34210,34178,34184,34181,34169,34166,34200,34192,34207,34408,34750,34730,34733,34757,34736,34732,34745,34741,34748,34734,34761,34755,34754,34764,34743,34735,34756,34762,34740,34742,34751,34744,34749,34782,34738,35125,35123,35132,35134,35137,35154,35127,35138,35245,35247,35246,35314,35315,35614,35608,35606,35601,35589,35595,35618,35599,35602,35605,35591,35597,35592,35590,35612,35603,35610,35919,35952,35954,35953,35951,35989,35988,36089,36207,36430,36429,36435,36432,36428,36423,36675,36672,36997,36990,37176,37274,37282,37275,37273,37279,37281,37277,37280,37793,37763,37807,37732,37718,37703,37756,37720,37724,37750,37705,37712,37713,37728,37741,37775,37708,37738,37753,37719,37717,37714,37711,37745,37751,37755,37729,37726,37731,37735,37760,37710,37721,38343,38336,38345,38339,38341,38327,38574,38576,38572,38688,38687,38680,38685,38681,38810,38817,38812,38814,38813,38869,38868,38897,38977,38980,38986,38985,38981,38979,39205,39211,39212,39210,39219,39218,39215,39213,39217,39216,39320,39331,39329,39426,39418,39412,39415,39417,39416,39414,39419,39421,39422,39420,39427,39614,39678,39677,39681,39676,39752,39834,39848,39838,39835,39846,39841,39845,39844,39814,39842,39840,39855,40243,40257,40295,40246,40238,40239,40241,40248,40240,40261,40258,40259,40254,40247,40256,40253,32757,40237,40586,40585,40589,40624,40648,40666,40699,40703,40740,40739,40738,40788,40864,20785,20781,20782,22168,22172,22167,22170,22173,22169,22896,23356,23657,23658,24e3,24173,24174,25048,25055,25069,25070,25073,25066,25072,25067,25046,25065,25855,25860,25853,25848,25857,25859,25852,26004,26075,26330,26331,26328,27333,27321,27325,27361,27334,27322,27318,27319,27335,27316,27309,27486,27593,27659,28679,28684,28685,28673,28677,28692,28686,28671,28672,28667,28710,28668,28663,28682,29185,29183,29177,29187,29181,29558,29880,29888,29877,29889,29886,29878,29883,29890,29972,29971,30300,30308,30297,30288,30291,30295,30298,30374,30397,30444,30658,30650,30975,30988,30995,30996,30985,30992,30994,30993,31149,31148,31327,31772,31785,31769,31776,31775,31789,31773,31782,31784,31778,31781,31792,32348,32336,32342,32355,32344,32354,32351,32337,32352,32343,32339,32693,32691,32759,32760,32885,33233,33234,33232,33375,33374,34228,34246,34240,34243,34242,34227,34229,34237,34247,34244,34239,34251,34254,34248,34245,34225,34230,34258,34340,34232,34231,34238,34409,34791,34790,34786,34779,34795,34794,34789,34783,34803,34788,34772,34780,34771,34797,34776,34787,34724,34775,34777,34817,34804,34792,34781,35155,35147,35151,35148,35142,35152,35153,35145,35626,35623,35619,35635,35632,35637,35655,35631,35644,35646,35633,35621,35639,35622,35638,35630,35620,35643,35645,35642,35906,35957,35993,35992,35991,36094,36100,36098,36096,36444,36450,36448,36439,36438,36446,36453,36455,36443,36442,36449,36445,36457,36436,36678,36679,36680,36683,37160,37178,37179,37182,37288,37285,37287,37295,37290,37813,37772,37778,37815,37787,37789,37769,37799,37774,37802,37790,37798,37781,37768,37785,37791,37773,37809,37777,37810,37796,37800,37812,37795,37797,38354,38355,38353,38579,38615,38618,24002,38623,38616,38621,38691,38690,38693,38828,38830,38824,38827,38820,38826,38818,38821,38871,38873,38870,38872,38906,38992,38993,38994,39096,39233,39228,39226,39439,39435,39433,39437,39428,39441,39434,39429,39431,39430,39616,39644,39688,39684,39685,39721,39733,39754,39756,39755,39879,39878,39875,39871,39873,39861,39864,39891,39862,39876,39865,39869,40284,40275,40271,40266,40283,40267,40281,40278,40268,40279,40274,40276,40287,40280,40282,40590,40588,40671,40705,40704,40726,40741,40747,40746,40745,40744,40780,40789,20788,20789,21142,21239,21428,22187,22189,22182,22183,22186,22188,22746,22749,22747,22802,23357,23358,23359,24003,24176,24511,25083,25863,25872,25869,25865,25868,25870,25988,26078,26077,26334,27367,27360,27340,27345,27353,27339,27359,27356,27344,27371,27343,27341,27358,27488,27568,27660,28697,28711,28704,28694,28715,28705,28706,28707,28713,28695,28708,28700,28714,29196,29194,29191,29186,29189,29349,29350,29348,29347,29345,29899,29893,29879,29891,29974,30304,30665,30666,30660,30705,31005,31003,31009,31004,30999,31006,31152,31335,31336,31795,31804,31801,31788,31803,31980,31978,32374,32373,32376,32368,32375,32367,32378,32370,32372,32360,32587,32586,32643,32646,32695,32765,32766,32888,33239,33237,33380,33377,33379,34283,34289,34285,34265,34273,34280,34266,34263,34284,34290,34296,34264,34271,34275,34268,34257,34288,34278,34287,34270,34274,34816,34810,34819,34806,34807,34825,34828,34827,34822,34812,34824,34815,34826,34818,35170,35162,35163,35159,35169,35164,35160,35165,35161,35208,35255,35254,35318,35664,35656,35658,35648,35667,35670,35668,35659,35669,35665,35650,35666,35671,35907,35959,35958,35994,36102,36103,36105,36268,36266,36269,36267,36461,36472,36467,36458,36463,36475,36546,36690,36689,36687,36688,36691,36788,37184,37183,37296,37293,37854,37831,37839,37826,37850,37840,37881,37868,37836,37849,37801,37862,37834,37844,37870,37859,37845,37828,37838,37824,37842,37863,38269,38362,38363,38625,38697,38699,38700,38696,38694,38835,38839,38838,38877,38878,38879,39004,39001,39005,38999,39103,39101,39099,39102,39240,39239,39235,39334,39335,39450,39445,39461,39453,39460,39451,39458,39456,39463,39459,39454,39452,39444,39618,39691,39690,39694,39692,39735,39914,39915,39904,39902,39908,39910,39906,39920,39892,39895,39916,39900,39897,39909,39893,39905,39898,40311,40321,40330,40324,40328,40305,40320,40312,40326,40331,40332,40317,40299,40308,40309,40304,40297,40325,40307,40315,40322,40303,40313,40319,40327,40296,40596,40593,40640,40700,40749,40768,40769,40781,40790,40791,40792,21303,22194,22197,22195,22755,23365,24006,24007,24302,24303,24512,24513,25081,25879,25878,25877,25875,26079,26344,26339,26340,27379,27376,27370,27368,27385,27377,27374,27375,28732,28725,28719,28727,28724,28721,28738,28728,28735,28730,28729,28736,28731,28723,28737,29203,29204,29352,29565,29564,29882,30379,30378,30398,30445,30668,30670,30671,30669,30706,31013,31011,31015,31016,31012,31017,31154,31342,31340,31341,31479,31817,31816,31818,31815,31813,31982,32379,32382,32385,32384,32698,32767,32889,33243,33241,33291,33384,33385,34338,34303,34305,34302,34331,34304,34294,34308,34313,34309,34316,34301,34841,34832,34833,34839,34835,34838,35171,35174,35257,35319,35680,35690,35677,35688,35683,35685,35687,35693,36270,36486,36488,36484,36697,36694,36695,36693,36696,36698,37005,37187,37185,37303,37301,37298,37299,37899,37907,37883,37920,37903,37908,37886,37909,37904,37928,37913,37901,37877,37888,37879,37895,37902,37910,37906,37882,37897,37880,37898,37887,37884,37900,37878,37905,37894,38366,38368,38367,38702,38703,38841,38843,38909,38910,39008,39010,39011,39007,39105,39106,39248,39246,39257,39244,39243,39251,39474,39476,39473,39468,39466,39478,39465,39470,39480,39469,39623,39626,39622,39696,39698,39697,39947,39944,39927,39941,39954,39928,4e4,39943,39950,39942,39959,39956,39945,40351,40345,40356,40349,40338,40344,40336,40347,40352,40340,40348,40362,40343,40353,40346,40354,40360,40350,40355,40383,40361,40342,40358,40359,40601,40603,40602,40677,40676,40679,40678,40752,40750,40795,40800,40798,40797,40793,40849,20794,20793,21144,21143,22211,22205,22206,23368,23367,24011,24015,24305,25085,25883,27394,27388,27395,27384,27392,28739,28740,28746,28744,28745,28741,28742,29213,29210,29209,29566,29975,30314,30672,31021,31025,31023,31828,31827,31986,32394,32391,32392,32395,32390,32397,32589,32699,32816,33245,34328,34346,34342,34335,34339,34332,34329,34343,34350,34337,34336,34345,34334,34341,34857,34845,34843,34848,34852,34844,34859,34890,35181,35177,35182,35179,35322,35705,35704,35653,35706,35707,36112,36116,36271,36494,36492,36702,36699,36701,37190,37188,37189,37305,37951,37947,37942,37929,37949,37948,37936,37945,37930,37943,37932,37952,37937,38373,38372,38371,38709,38714,38847,38881,39012,39113,39110,39104,39256,39254,39481,39485,39494,39492,39490,39489,39482,39487,39629,39701,39703,39704,39702,39738,39762,39979,39965,39964,39980,39971,39976,39977,39972,39969,40375,40374,40380,40385,40391,40394,40399,40382,40389,40387,40379,40373,40398,40377,40378,40364,40392,40369,40365,40396,40371,40397,40370,40570,40604,40683,40686,40685,40731,40728,40730,40753,40782,40805,40804,40850,20153,22214,22213,22219,22897,23371,23372,24021,24017,24306,25889,25888,25894,25890,27403,27400,27401,27661,28757,28758,28759,28754,29214,29215,29353,29567,29912,29909,29913,29911,30317,30381,31029,31156,31344,31345,31831,31836,31833,31835,31834,31988,31985,32401,32591,32647,33246,33387,34356,34357,34355,34348,34354,34358,34860,34856,34854,34858,34853,35185,35263,35262,35323,35710,35716,35714,35718,35717,35711,36117,36501,36500,36506,36498,36496,36502,36503,36704,36706,37191,37964,37968,37962,37963,37967,37959,37957,37960,37961,37958,38719,38883,39018,39017,39115,39252,39259,39502,39507,39508,39500,39503,39496,39498,39497,39506,39504,39632,39705,39723,39739,39766,39765,40006,40008,39999,40004,39993,39987,40001,39996,39991,39988,39986,39997,39990,40411,40402,40414,40410,40395,40400,40412,40401,40415,40425,40409,40408,40406,40437,40405,40413,40630,40688,40757,40755,40754,40770,40811,40853,40866,20797,21145,22760,22759,22898,23373,24024,34863,24399,25089,25091,25092,25897,25893,26006,26347,27409,27410,27407,27594,28763,28762,29218,29570,29569,29571,30320,30676,31847,31846,32405,33388,34362,34368,34361,34364,34353,34363,34366,34864,34866,34862,34867,35190,35188,35187,35326,35724,35726,35723,35720,35909,36121,36504,36708,36707,37308,37986,37973,37981,37975,37982,38852,38853,38912,39510,39513,39710,39711,39712,40018,40024,40016,40010,40013,40011,40021,40025,40012,40014,40443,40439,40431,40419,40427,40440,40420,40438,40417,40430,40422,40434,40432,40418,40428,40436,40435,40424,40429,40642,40656,40690,40691,40710,40732,40760,40759,40758,40771,40783,40817,40816,40814,40815,22227,22221,23374,23661,25901,26349,26350,27411,28767,28769,28765,28768,29219,29915,29925,30677,31032,31159,31158,31850,32407,32649,33389,34371,34872,34871,34869,34891,35732,35733,36510,36511,36512,36509,37310,37309,37314,37995,37992,37993,38629,38726,38723,38727,38855,38885,39518,39637,39769,40035,40039,40038,40034,40030,40032,40450,40446,40455,40451,40454,40453,40448,40449,40457,40447,40445,40452,40608,40734,40774,40820,40821,40822,22228,25902,26040,27416,27417,27415,27418,28770,29222,29354,30680,30681,31033,31849,31851,31990,32410,32408,32411,32409,33248,33249,34374,34375,34376,35193,35194,35196,35195,35327,35736,35737,36517,36516,36515,37998,37997,37999,38001,38003,38729,39026,39263,40040,40046,40045,40459,40461,40464,40463,40466,40465,40609,40693,40713,40775,40824,40827,40826,40825,22302,28774,31855,34876,36274,36518,37315,38004,38008,38006,38005,39520,40052,40051,40049,40053,40468,40467,40694,40714,40868,28776,28773,31991,34410,34878,34877,34879,35742,35996,36521,36553,38731,39027,39028,39116,39265,39339,39524,39526,39527,39716,40469,40471,40776,25095,27422,29223,34380,36520,38018,38016,38017,39529,39528,39726,40473,29225,34379,35743,38019,40057,40631,30325,39531,40058,40477,28777,28778,40612,40830,40777,40856,30849,37561,35023,22715,24658,31911,23290,9556,9574,9559,9568,9580,9571,9562,9577,9565,9554,9572,9557,9566,9578,9569,9560,9575,9563,9555,9573,9558,9567,9579,9570,9561,9576,9564,9553,9552,9581,9582,9584,9583,65517,132423,37595,132575,147397,34124,17077,29679,20917,13897,149826,166372,37700,137691,33518,146632,30780,26436,25311,149811,166314,131744,158643,135941,20395,140525,20488,159017,162436,144896,150193,140563,20521,131966,24484,131968,131911,28379,132127,20605,20737,13434,20750,39020,14147,33814,149924,132231,20832,144308,20842,134143,139516,131813,140592,132494,143923,137603,23426,34685,132531,146585,20914,20920,40244,20937,20943,20945,15580,20947,150182,20915,20962,21314,20973,33741,26942,145197,24443,21003,21030,21052,21173,21079,21140,21177,21189,31765,34114,21216,34317,158483,21253,166622,21833,28377,147328,133460,147436,21299,21316,134114,27851,136998,26651,29653,24650,16042,14540,136936,29149,17570,21357,21364,165547,21374,21375,136598,136723,30694,21395,166555,21408,21419,21422,29607,153458,16217,29596,21441,21445,27721,20041,22526,21465,15019,134031,21472,147435,142755,21494,134263,21523,28793,21803,26199,27995,21613,158547,134516,21853,21647,21668,18342,136973,134877,15796,134477,166332,140952,21831,19693,21551,29719,21894,21929,22021,137431,147514,17746,148533,26291,135348,22071,26317,144010,26276,26285,22093,22095,30961,22257,38791,21502,22272,22255,22253,166758,13859,135759,22342,147877,27758,28811,22338,14001,158846,22502,136214,22531,136276,148323,22566,150517,22620,22698,13665,22752,22748,135740,22779,23551,22339,172368,148088,37843,13729,22815,26790,14019,28249,136766,23076,21843,136850,34053,22985,134478,158849,159018,137180,23001,137211,137138,159142,28017,137256,136917,23033,159301,23211,23139,14054,149929,23159,14088,23190,29797,23251,159649,140628,15749,137489,14130,136888,24195,21200,23414,25992,23420,162318,16388,18525,131588,23509,24928,137780,154060,132517,23539,23453,19728,23557,138052,23571,29646,23572,138405,158504,23625,18653,23685,23785,23791,23947,138745,138807,23824,23832,23878,138916,23738,24023,33532,14381,149761,139337,139635,33415,14390,15298,24110,27274,24181,24186,148668,134355,21414,20151,24272,21416,137073,24073,24308,164994,24313,24315,14496,24316,26686,37915,24333,131521,194708,15070,18606,135994,24378,157832,140240,24408,140401,24419,38845,159342,24434,37696,166454,24487,23990,15711,152144,139114,159992,140904,37334,131742,166441,24625,26245,137335,14691,15815,13881,22416,141236,31089,15936,24734,24740,24755,149890,149903,162387,29860,20705,23200,24932,33828,24898,194726,159442,24961,20980,132694,24967,23466,147383,141407,25043,166813,170333,25040,14642,141696,141505,24611,24924,25886,25483,131352,25285,137072,25301,142861,25452,149983,14871,25656,25592,136078,137212,25744,28554,142902,38932,147596,153373,25825,25829,38011,14950,25658,14935,25933,28438,150056,150051,25989,25965,25951,143486,26037,149824,19255,26065,16600,137257,26080,26083,24543,144384,26136,143863,143864,26180,143780,143781,26187,134773,26215,152038,26227,26228,138813,143921,165364,143816,152339,30661,141559,39332,26370,148380,150049,15147,27130,145346,26462,26471,26466,147917,168173,26583,17641,26658,28240,37436,26625,144358,159136,26717,144495,27105,27147,166623,26995,26819,144845,26881,26880,15666,14849,144956,15232,26540,26977,166474,17148,26934,27032,15265,132041,33635,20624,27129,144985,139562,27205,145155,27293,15347,26545,27336,168348,15373,27421,133411,24798,27445,27508,141261,28341,146139,132021,137560,14144,21537,146266,27617,147196,27612,27703,140427,149745,158545,27738,33318,27769,146876,17605,146877,147876,149772,149760,146633,14053,15595,134450,39811,143865,140433,32655,26679,159013,159137,159211,28054,27996,28284,28420,149887,147589,159346,34099,159604,20935,27804,28189,33838,166689,28207,146991,29779,147330,31180,28239,23185,143435,28664,14093,28573,146992,28410,136343,147517,17749,37872,28484,28508,15694,28532,168304,15675,28575,147780,28627,147601,147797,147513,147440,147380,147775,20959,147798,147799,147776,156125,28747,28798,28839,28801,28876,28885,28886,28895,16644,15848,29108,29078,148087,28971,28997,23176,29002,29038,23708,148325,29007,37730,148161,28972,148570,150055,150050,29114,166888,28861,29198,37954,29205,22801,37955,29220,37697,153093,29230,29248,149876,26813,29269,29271,15957,143428,26637,28477,29314,29482,29483,149539,165931,18669,165892,29480,29486,29647,29610,134202,158254,29641,29769,147938,136935,150052,26147,14021,149943,149901,150011,29687,29717,26883,150054,29753,132547,16087,29788,141485,29792,167602,29767,29668,29814,33721,29804,14128,29812,37873,27180,29826,18771,150156,147807,150137,166799,23366,166915,137374,29896,137608,29966,29929,29982,167641,137803,23511,167596,37765,30029,30026,30055,30062,151426,16132,150803,30094,29789,30110,30132,30210,30252,30289,30287,30319,30326,156661,30352,33263,14328,157969,157966,30369,30373,30391,30412,159647,33890,151709,151933,138780,30494,30502,30528,25775,152096,30552,144044,30639,166244,166248,136897,30708,30729,136054,150034,26826,30895,30919,30931,38565,31022,153056,30935,31028,30897,161292,36792,34948,166699,155779,140828,31110,35072,26882,31104,153687,31133,162617,31036,31145,28202,160038,16040,31174,168205,31188],
"euc-kr":[44034,44035,44037,44038,44043,44044,44045,44046,44047,44056,44062,44063,44065,44066,44067,44069,44070,44071,44072,44073,44074,44075,44078,44082,44083,44084,null,null,null,null,null,null,44085,44086,44087,44090,44091,44093,44094,44095,44097,44098,44099,44100,44101,44102,44103,44104,44105,44106,44108,44110,44111,44112,44113,44114,44115,44117,null,null,null,null,null,null,44118,44119,44121,44122,44123,44125,44126,44127,44128,44129,44130,44131,44132,44133,44134,44135,44136,44137,44138,44139,44140,44141,44142,44143,44146,44147,44149,44150,44153,44155,44156,44157,44158,44159,44162,44167,44168,44173,44174,44175,44177,44178,44179,44181,44182,44183,44184,44185,44186,44187,44190,44194,44195,44196,44197,44198,44199,44203,44205,44206,44209,44210,44211,44212,44213,44214,44215,44218,44222,44223,44224,44226,44227,44229,44230,44231,44233,44234,44235,44237,44238,44239,44240,44241,44242,44243,44244,44246,44248,44249,44250,44251,44252,44253,44254,44255,44258,44259,44261,44262,44265,44267,44269,44270,44274,44276,44279,44280,44281,44282,44283,44286,44287,44289,44290,44291,44293,44295,44296,44297,44298,44299,44302,44304,44306,44307,44308,44309,44310,44311,44313,44314,44315,44317,44318,44319,44321,44322,44323,44324,44325,44326,44327,44328,44330,44331,44334,44335,44336,44337,44338,44339,null,null,null,null,null,null,44342,44343,44345,44346,44347,44349,44350,44351,44352,44353,44354,44355,44358,44360,44362,44363,44364,44365,44366,44367,44369,44370,44371,44373,44374,44375,null,null,null,null,null,null,44377,44378,44379,44380,44381,44382,44383,44384,44386,44388,44389,44390,44391,44392,44393,44394,44395,44398,44399,44401,44402,44407,44408,44409,44410,44414,44416,44419,44420,44421,44422,44423,44426,44427,44429,44430,44431,44433,44434,44435,44436,44437,44438,44439,44440,44441,44442,44443,44446,44447,44448,44449,44450,44451,44453,44454,44455,44456,44457,44458,44459,44460,44461,44462,44463,44464,44465,44466,44467,44468,44469,44470,44472,44473,44474,44475,44476,44477,44478,44479,44482,44483,44485,44486,44487,44489,44490,44491,44492,44493,44494,44495,44498,44500,44501,44502,44503,44504,44505,44506,44507,44509,44510,44511,44513,44514,44515,44517,44518,44519,44520,44521,44522,44523,44524,44525,44526,44527,44528,44529,44530,44531,44532,44533,44534,44535,44538,44539,44541,44542,44546,44547,44548,44549,44550,44551,44554,44556,44558,44559,44560,44561,44562,44563,44565,44566,44567,44568,44569,44570,44571,44572,null,null,null,null,null,null,44573,44574,44575,44576,44577,44578,44579,44580,44581,44582,44583,44584,44585,44586,44587,44588,44589,44590,44591,44594,44595,44597,44598,44601,44603,44604,null,null,null,null,null,null,44605,44606,44607,44610,44612,44615,44616,44617,44619,44623,44625,44626,44627,44629,44631,44632,44633,44634,44635,44638,44642,44643,44644,44646,44647,44650,44651,44653,44654,44655,44657,44658,44659,44660,44661,44662,44663,44666,44670,44671,44672,44673,44674,44675,44678,44679,44680,44681,44682,44683,44685,44686,44687,44688,44689,44690,44691,44692,44693,44694,44695,44696,44697,44698,44699,44700,44701,44702,44703,44704,44705,44706,44707,44708,44709,44710,44711,44712,44713,44714,44715,44716,44717,44718,44719,44720,44721,44722,44723,44724,44725,44726,44727,44728,44729,44730,44731,44735,44737,44738,44739,44741,44742,44743,44744,44745,44746,44747,44750,44754,44755,44756,44757,44758,44759,44762,44763,44765,44766,44767,44768,44769,44770,44771,44772,44773,44774,44775,44777,44778,44780,44782,44783,44784,44785,44786,44787,44789,44790,44791,44793,44794,44795,44797,44798,44799,44800,44801,44802,44803,44804,44805,null,null,null,null,null,null,44806,44809,44810,44811,44812,44814,44815,44817,44818,44819,44820,44821,44822,44823,44824,44825,44826,44827,44828,44829,44830,44831,44832,44833,44834,44835,null,null,null,null,null,null,44836,44837,44838,44839,44840,44841,44842,44843,44846,44847,44849,44851,44853,44854,44855,44856,44857,44858,44859,44862,44864,44868,44869,44870,44871,44874,44875,44876,44877,44878,44879,44881,44882,44883,44884,44885,44886,44887,44888,44889,44890,44891,44894,44895,44896,44897,44898,44899,44902,44903,44904,44905,44906,44907,44908,44909,44910,44911,44912,44913,44914,44915,44916,44917,44918,44919,44920,44922,44923,44924,44925,44926,44927,44929,44930,44931,44933,44934,44935,44937,44938,44939,44940,44941,44942,44943,44946,44947,44948,44950,44951,44952,44953,44954,44955,44957,44958,44959,44960,44961,44962,44963,44964,44965,44966,44967,44968,44969,44970,44971,44972,44973,44974,44975,44976,44977,44978,44979,44980,44981,44982,44983,44986,44987,44989,44990,44991,44993,44994,44995,44996,44997,44998,45002,45004,45007,45008,45009,45010,45011,45013,45014,45015,45016,45017,45018,45019,45021,45022,45023,45024,45025,null,null,null,null,null,null,45026,45027,45028,45029,45030,45031,45034,45035,45036,45037,45038,45039,45042,45043,45045,45046,45047,45049,45050,45051,45052,45053,45054,45055,45058,45059,null,null,null,null,null,null,45061,45062,45063,45064,45065,45066,45067,45069,45070,45071,45073,45074,45075,45077,45078,45079,45080,45081,45082,45083,45086,45087,45088,45089,45090,45091,45092,45093,45094,45095,45097,45098,45099,45100,45101,45102,45103,45104,45105,45106,45107,45108,45109,45110,45111,45112,45113,45114,45115,45116,45117,45118,45119,45120,45121,45122,45123,45126,45127,45129,45131,45133,45135,45136,45137,45138,45142,45144,45146,45147,45148,45150,45151,45152,45153,45154,45155,45156,45157,45158,45159,45160,45161,45162,45163,45164,45165,45166,45167,45168,45169,45170,45171,45172,45173,45174,45175,45176,45177,45178,45179,45182,45183,45185,45186,45187,45189,45190,45191,45192,45193,45194,45195,45198,45200,45202,45203,45204,45205,45206,45207,45211,45213,45214,45219,45220,45221,45222,45223,45226,45232,45234,45238,45239,45241,45242,45243,45245,45246,45247,45248,45249,45250,45251,45254,45258,45259,45260,45261,45262,45263,45266,null,null,null,null,null,null,45267,45269,45270,45271,45273,45274,45275,45276,45277,45278,45279,45281,45282,45283,45284,45286,45287,45288,45289,45290,45291,45292,45293,45294,45295,45296,null,null,null,null,null,null,45297,45298,45299,45300,45301,45302,45303,45304,45305,45306,45307,45308,45309,45310,45311,45312,45313,45314,45315,45316,45317,45318,45319,45322,45325,45326,45327,45329,45332,45333,45334,45335,45338,45342,45343,45344,45345,45346,45350,45351,45353,45354,45355,45357,45358,45359,45360,45361,45362,45363,45366,45370,45371,45372,45373,45374,45375,45378,45379,45381,45382,45383,45385,45386,45387,45388,45389,45390,45391,45394,45395,45398,45399,45401,45402,45403,45405,45406,45407,45409,45410,45411,45412,45413,45414,45415,45416,45417,45418,45419,45420,45421,45422,45423,45424,45425,45426,45427,45428,45429,45430,45431,45434,45435,45437,45438,45439,45441,45443,45444,45445,45446,45447,45450,45452,45454,45455,45456,45457,45461,45462,45463,45465,45466,45467,45469,45470,45471,45472,45473,45474,45475,45476,45477,45478,45479,45481,45482,45483,45484,45485,45486,45487,45488,45489,45490,45491,45492,45493,45494,45495,45496,null,null,null,null,null,null,45497,45498,45499,45500,45501,45502,45503,45504,45505,45506,45507,45508,45509,45510,45511,45512,45513,45514,45515,45517,45518,45519,45521,45522,45523,45525,null,null,null,null,null,null,45526,45527,45528,45529,45530,45531,45534,45536,45537,45538,45539,45540,45541,45542,45543,45546,45547,45549,45550,45551,45553,45554,45555,45556,45557,45558,45559,45560,45562,45564,45566,45567,45568,45569,45570,45571,45574,45575,45577,45578,45581,45582,45583,45584,45585,45586,45587,45590,45592,45594,45595,45596,45597,45598,45599,45601,45602,45603,45604,45605,45606,45607,45608,45609,45610,45611,45612,45613,45614,45615,45616,45617,45618,45619,45621,45622,45623,45624,45625,45626,45627,45629,45630,45631,45632,45633,45634,45635,45636,45637,45638,45639,45640,45641,45642,45643,45644,45645,45646,45647,45648,45649,45650,45651,45652,45653,45654,45655,45657,45658,45659,45661,45662,45663,45665,45666,45667,45668,45669,45670,45671,45674,45675,45676,45677,45678,45679,45680,45681,45682,45683,45686,45687,45688,45689,45690,45691,45693,45694,45695,45696,45697,45698,45699,45702,45703,45704,45706,45707,45708,45709,45710,null,null,null,null,null,null,45711,45714,45715,45717,45718,45719,45723,45724,45725,45726,45727,45730,45732,45735,45736,45737,45739,45741,45742,45743,45745,45746,45747,45749,45750,45751,null,null,null,null,null,null,45752,45753,45754,45755,45756,45757,45758,45759,45760,45761,45762,45763,45764,45765,45766,45767,45770,45771,45773,45774,45775,45777,45779,45780,45781,45782,45783,45786,45788,45790,45791,45792,45793,45795,45799,45801,45802,45808,45809,45810,45814,45820,45821,45822,45826,45827,45829,45830,45831,45833,45834,45835,45836,45837,45838,45839,45842,45846,45847,45848,45849,45850,45851,45853,45854,45855,45856,45857,45858,45859,45860,45861,45862,45863,45864,45865,45866,45867,45868,45869,45870,45871,45872,45873,45874,45875,45876,45877,45878,45879,45880,45881,45882,45883,45884,45885,45886,45887,45888,45889,45890,45891,45892,45893,45894,45895,45896,45897,45898,45899,45900,45901,45902,45903,45904,45905,45906,45907,45911,45913,45914,45917,45920,45921,45922,45923,45926,45928,45930,45932,45933,45935,45938,45939,45941,45942,45943,45945,45946,45947,45948,45949,45950,45951,45954,45958,45959,45960,45961,45962,45963,45965,null,null,null,null,null,null,45966,45967,45969,45970,45971,45973,45974,45975,45976,45977,45978,45979,45980,45981,45982,45983,45986,45987,45988,45989,45990,45991,45993,45994,45995,45997,null,null,null,null,null,null,45998,45999,46e3,46001,46002,46003,46004,46005,46006,46007,46008,46009,46010,46011,46012,46013,46014,46015,46016,46017,46018,46019,46022,46023,46025,46026,46029,46031,46033,46034,46035,46038,46040,46042,46044,46046,46047,46049,46050,46051,46053,46054,46055,46057,46058,46059,46060,46061,46062,46063,46064,46065,46066,46067,46068,46069,46070,46071,46072,46073,46074,46075,46077,46078,46079,46080,46081,46082,46083,46084,46085,46086,46087,46088,46089,46090,46091,46092,46093,46094,46095,46097,46098,46099,46100,46101,46102,46103,46105,46106,46107,46109,46110,46111,46113,46114,46115,46116,46117,46118,46119,46122,46124,46125,46126,46127,46128,46129,46130,46131,46133,46134,46135,46136,46137,46138,46139,46140,46141,46142,46143,46144,46145,46146,46147,46148,46149,46150,46151,46152,46153,46154,46155,46156,46157,46158,46159,46162,46163,46165,46166,46167,46169,46170,46171,46172,46173,46174,46175,46178,46180,46182,null,null,null,null,null,null,46183,46184,46185,46186,46187,46189,46190,46191,46192,46193,46194,46195,46196,46197,46198,46199,46200,46201,46202,46203,46204,46205,46206,46207,46209,46210,null,null,null,null,null,null,46211,46212,46213,46214,46215,46217,46218,46219,46220,46221,46222,46223,46224,46225,46226,46227,46228,46229,46230,46231,46232,46233,46234,46235,46236,46238,46239,46240,46241,46242,46243,46245,46246,46247,46249,46250,46251,46253,46254,46255,46256,46257,46258,46259,46260,46262,46264,46266,46267,46268,46269,46270,46271,46273,46274,46275,46277,46278,46279,46281,46282,46283,46284,46285,46286,46287,46289,46290,46291,46292,46294,46295,46296,46297,46298,46299,46302,46303,46305,46306,46309,46311,46312,46313,46314,46315,46318,46320,46322,46323,46324,46325,46326,46327,46329,46330,46331,46332,46333,46334,46335,46336,46337,46338,46339,46340,46341,46342,46343,46344,46345,46346,46347,46348,46349,46350,46351,46352,46353,46354,46355,46358,46359,46361,46362,46365,46366,46367,46368,46369,46370,46371,46374,46379,46380,46381,46382,46383,46386,46387,46389,46390,46391,46393,46394,46395,46396,46397,46398,46399,46402,46406,null,null,null,null,null,null,46407,46408,46409,46410,46414,46415,46417,46418,46419,46421,46422,46423,46424,46425,46426,46427,46430,46434,46435,46436,46437,46438,46439,46440,46441,46442,null,null,null,null,null,null,46443,46444,46445,46446,46447,46448,46449,46450,46451,46452,46453,46454,46455,46456,46457,46458,46459,46460,46461,46462,46463,46464,46465,46466,46467,46468,46469,46470,46471,46472,46473,46474,46475,46476,46477,46478,46479,46480,46481,46482,46483,46484,46485,46486,46487,46488,46489,46490,46491,46492,46493,46494,46495,46498,46499,46501,46502,46503,46505,46508,46509,46510,46511,46514,46518,46519,46520,46521,46522,46526,46527,46529,46530,46531,46533,46534,46535,46536,46537,46538,46539,46542,46546,46547,46548,46549,46550,46551,46553,46554,46555,46556,46557,46558,46559,46560,46561,46562,46563,46564,46565,46566,46567,46568,46569,46570,46571,46573,46574,46575,46576,46577,46578,46579,46580,46581,46582,46583,46584,46585,46586,46587,46588,46589,46590,46591,46592,46593,46594,46595,46596,46597,46598,46599,46600,46601,46602,46603,46604,46605,46606,46607,46610,46611,46613,46614,46615,46617,46618,46619,46620,46621,null,null,null,null,null,null,46622,46623,46624,46625,46626,46627,46628,46630,46631,46632,46633,46634,46635,46637,46638,46639,46640,46641,46642,46643,46645,46646,46647,46648,46649,46650,null,null,null,null,null,null,46651,46652,46653,46654,46655,46656,46657,46658,46659,46660,46661,46662,46663,46665,46666,46667,46668,46669,46670,46671,46672,46673,46674,46675,46676,46677,46678,46679,46680,46681,46682,46683,46684,46685,46686,46687,46688,46689,46690,46691,46693,46694,46695,46697,46698,46699,46700,46701,46702,46703,46704,46705,46706,46707,46708,46709,46710,46711,46712,46713,46714,46715,46716,46717,46718,46719,46720,46721,46722,46723,46724,46725,46726,46727,46728,46729,46730,46731,46732,46733,46734,46735,46736,46737,46738,46739,46740,46741,46742,46743,46744,46745,46746,46747,46750,46751,46753,46754,46755,46757,46758,46759,46760,46761,46762,46765,46766,46767,46768,46770,46771,46772,46773,46774,46775,46776,46777,46778,46779,46780,46781,46782,46783,46784,46785,46786,46787,46788,46789,46790,46791,46792,46793,46794,46795,46796,46797,46798,46799,46800,46801,46802,46803,46805,46806,46807,46808,46809,46810,46811,46812,46813,null,null,null,null,null,null,46814,46815,46816,46817,46818,46819,46820,46821,46822,46823,46824,46825,46826,46827,46828,46829,46830,46831,46833,46834,46835,46837,46838,46839,46841,46842,null,null,null,null,null,null,46843,46844,46845,46846,46847,46850,46851,46852,46854,46855,46856,46857,46858,46859,46860,46861,46862,46863,46864,46865,46866,46867,46868,46869,46870,46871,46872,46873,46874,46875,46876,46877,46878,46879,46880,46881,46882,46883,46884,46885,46886,46887,46890,46891,46893,46894,46897,46898,46899,46900,46901,46902,46903,46906,46908,46909,46910,46911,46912,46913,46914,46915,46917,46918,46919,46921,46922,46923,46925,46926,46927,46928,46929,46930,46931,46934,46935,46936,46937,46938,46939,46940,46941,46942,46943,46945,46946,46947,46949,46950,46951,46953,46954,46955,46956,46957,46958,46959,46962,46964,46966,46967,46968,46969,46970,46971,46974,46975,46977,46978,46979,46981,46982,46983,46984,46985,46986,46987,46990,46995,46996,46997,47002,47003,47005,47006,47007,47009,47010,47011,47012,47013,47014,47015,47018,47022,47023,47024,47025,47026,47027,47030,47031,47033,47034,47035,47036,47037,47038,47039,47040,47041,null,null,null,null,null,null,47042,47043,47044,47045,47046,47048,47050,47051,47052,47053,47054,47055,47056,47057,47058,47059,47060,47061,47062,47063,47064,47065,47066,47067,47068,47069,null,null,null,null,null,null,47070,47071,47072,47073,47074,47075,47076,47077,47078,47079,47080,47081,47082,47083,47086,47087,47089,47090,47091,47093,47094,47095,47096,47097,47098,47099,47102,47106,47107,47108,47109,47110,47114,47115,47117,47118,47119,47121,47122,47123,47124,47125,47126,47127,47130,47132,47134,47135,47136,47137,47138,47139,47142,47143,47145,47146,47147,47149,47150,47151,47152,47153,47154,47155,47158,47162,47163,47164,47165,47166,47167,47169,47170,47171,47173,47174,47175,47176,47177,47178,47179,47180,47181,47182,47183,47184,47186,47188,47189,47190,47191,47192,47193,47194,47195,47198,47199,47201,47202,47203,47205,47206,47207,47208,47209,47210,47211,47214,47216,47218,47219,47220,47221,47222,47223,47225,47226,47227,47229,47230,47231,47232,47233,47234,47235,47236,47237,47238,47239,47240,47241,47242,47243,47244,47246,47247,47248,47249,47250,47251,47252,47253,47254,47255,47256,47257,47258,47259,47260,47261,47262,47263,null,null,null,null,null,null,47264,47265,47266,47267,47268,47269,47270,47271,47273,47274,47275,47276,47277,47278,47279,47281,47282,47283,47285,47286,47287,47289,47290,47291,47292,47293,null,null,null,null,null,null,47294,47295,47298,47300,47302,47303,47304,47305,47306,47307,47309,47310,47311,47313,47314,47315,47317,47318,47319,47320,47321,47322,47323,47324,47326,47328,47330,47331,47332,47333,47334,47335,47338,47339,47341,47342,47343,47345,47346,47347,47348,47349,47350,47351,47354,47356,47358,47359,47360,47361,47362,47363,47365,47366,47367,47368,47369,47370,47371,47372,47373,47374,47375,47376,47377,47378,47379,47380,47381,47382,47383,47385,47386,47387,47388,47389,47390,47391,47393,47394,47395,47396,47397,47398,47399,47400,47401,47402,47403,47404,47405,47406,47407,47408,47409,47410,47411,47412,47413,47414,47415,47416,47417,47418,47419,47422,47423,47425,47426,47427,47429,47430,47431,47432,47433,47434,47435,47437,47438,47440,47442,47443,47444,47445,47446,47447,47450,47451,47453,47454,47455,47457,47458,47459,47460,47461,47462,47463,47466,47468,47470,47471,47472,47473,47474,47475,47478,47479,47481,47482,47483,47485,null,null,null,null,null,null,47486,47487,47488,47489,47490,47491,47494,47496,47499,47500,47503,47504,47505,47506,47507,47508,47509,47510,47511,47512,47513,47514,47515,47516,47517,47518,null,null,null,null,null,null,47519,47520,47521,47522,47523,47524,47525,47526,47527,47528,47529,47530,47531,47534,47535,47537,47538,47539,47541,47542,47543,47544,47545,47546,47547,47550,47552,47554,47555,47556,47557,47558,47559,47562,47563,47565,47571,47572,47573,47574,47575,47578,47580,47583,47584,47586,47590,47591,47593,47594,47595,47597,47598,47599,47600,47601,47602,47603,47606,47611,47612,47613,47614,47615,47618,47619,47620,47621,47622,47623,47625,47626,47627,47628,47629,47630,47631,47632,47633,47634,47635,47636,47638,47639,47640,47641,47642,47643,47644,47645,47646,47647,47648,47649,47650,47651,47652,47653,47654,47655,47656,47657,47658,47659,47660,47661,47662,47663,47664,47665,47666,47667,47668,47669,47670,47671,47674,47675,47677,47678,47679,47681,47683,47684,47685,47686,47687,47690,47692,47695,47696,47697,47698,47702,47703,47705,47706,47707,47709,47710,47711,47712,47713,47714,47715,47718,47722,47723,47724,47725,47726,47727,null,null,null,null,null,null,47730,47731,47733,47734,47735,47737,47738,47739,47740,47741,47742,47743,47744,47745,47746,47750,47752,47753,47754,47755,47757,47758,47759,47760,47761,47762,null,null,null,null,null,null,47763,47764,47765,47766,47767,47768,47769,47770,47771,47772,47773,47774,47775,47776,47777,47778,47779,47780,47781,47782,47783,47786,47789,47790,47791,47793,47795,47796,47797,47798,47799,47802,47804,47806,47807,47808,47809,47810,47811,47813,47814,47815,47817,47818,47819,47820,47821,47822,47823,47824,47825,47826,47827,47828,47829,47830,47831,47834,47835,47836,47837,47838,47839,47840,47841,47842,47843,47844,47845,47846,47847,47848,47849,47850,47851,47852,47853,47854,47855,47856,47857,47858,47859,47860,47861,47862,47863,47864,47865,47866,47867,47869,47870,47871,47873,47874,47875,47877,47878,47879,47880,47881,47882,47883,47884,47886,47888,47890,47891,47892,47893,47894,47895,47897,47898,47899,47901,47902,47903,47905,47906,47907,47908,47909,47910,47911,47912,47914,47916,47917,47918,47919,47920,47921,47922,47923,47927,47929,47930,47935,47936,47937,47938,47939,47942,47944,47946,47947,47948,47950,47953,47954,null,null,null,null,null,null,47955,47957,47958,47959,47961,47962,47963,47964,47965,47966,47967,47968,47970,47972,47973,47974,47975,47976,47977,47978,47979,47981,47982,47983,47984,47985,null,null,null,null,null,null,47986,47987,47988,47989,47990,47991,47992,47993,47994,47995,47996,47997,47998,47999,48e3,48001,48002,48003,48004,48005,48006,48007,48009,48010,48011,48013,48014,48015,48017,48018,48019,48020,48021,48022,48023,48024,48025,48026,48027,48028,48029,48030,48031,48032,48033,48034,48035,48037,48038,48039,48041,48042,48043,48045,48046,48047,48048,48049,48050,48051,48053,48054,48056,48057,48058,48059,48060,48061,48062,48063,48065,48066,48067,48069,48070,48071,48073,48074,48075,48076,48077,48078,48079,48081,48082,48084,48085,48086,48087,48088,48089,48090,48091,48092,48093,48094,48095,48096,48097,48098,48099,48100,48101,48102,48103,48104,48105,48106,48107,48108,48109,48110,48111,48112,48113,48114,48115,48116,48117,48118,48119,48122,48123,48125,48126,48129,48131,48132,48133,48134,48135,48138,48142,48144,48146,48147,48153,48154,48160,48161,48162,48163,48166,48168,48170,48171,48172,48174,48175,48178,48179,48181,null,null,null,null,null,null,48182,48183,48185,48186,48187,48188,48189,48190,48191,48194,48198,48199,48200,48202,48203,48206,48207,48209,48210,48211,48212,48213,48214,48215,48216,48217,null,null,null,null,null,null,48218,48219,48220,48222,48223,48224,48225,48226,48227,48228,48229,48230,48231,48232,48233,48234,48235,48236,48237,48238,48239,48240,48241,48242,48243,48244,48245,48246,48247,48248,48249,48250,48251,48252,48253,48254,48255,48256,48257,48258,48259,48262,48263,48265,48266,48269,48271,48272,48273,48274,48275,48278,48280,48283,48284,48285,48286,48287,48290,48291,48293,48294,48297,48298,48299,48300,48301,48302,48303,48306,48310,48311,48312,48313,48314,48315,48318,48319,48321,48322,48323,48325,48326,48327,48328,48329,48330,48331,48332,48334,48338,48339,48340,48342,48343,48345,48346,48347,48349,48350,48351,48352,48353,48354,48355,48356,48357,48358,48359,48360,48361,48362,48363,48364,48365,48366,48367,48368,48369,48370,48371,48375,48377,48378,48379,48381,48382,48383,48384,48385,48386,48387,48390,48392,48394,48395,48396,48397,48398,48399,48401,48402,48403,48405,48406,48407,48408,48409,48410,48411,48412,48413,null,null,null,null,null,null,48414,48415,48416,48417,48418,48419,48421,48422,48423,48424,48425,48426,48427,48429,48430,48431,48432,48433,48434,48435,48436,48437,48438,48439,48440,48441,null,null,null,null,null,null,48442,48443,48444,48445,48446,48447,48449,48450,48451,48452,48453,48454,48455,48458,48459,48461,48462,48463,48465,48466,48467,48468,48469,48470,48471,48474,48475,48476,48477,48478,48479,48480,48481,48482,48483,48485,48486,48487,48489,48490,48491,48492,48493,48494,48495,48496,48497,48498,48499,48500,48501,48502,48503,48504,48505,48506,48507,48508,48509,48510,48511,48514,48515,48517,48518,48523,48524,48525,48526,48527,48530,48532,48534,48535,48536,48539,48541,48542,48543,48544,48545,48546,48547,48549,48550,48551,48552,48553,48554,48555,48556,48557,48558,48559,48561,48562,48563,48564,48565,48566,48567,48569,48570,48571,48572,48573,48574,48575,48576,48577,48578,48579,48580,48581,48582,48583,48584,48585,48586,48587,48588,48589,48590,48591,48592,48593,48594,48595,48598,48599,48601,48602,48603,48605,48606,48607,48608,48609,48610,48611,48612,48613,48614,48615,48616,48618,48619,48620,48621,48622,48623,48625,null,null,null,null,null,null,48626,48627,48629,48630,48631,48633,48634,48635,48636,48637,48638,48639,48641,48642,48644,48646,48647,48648,48649,48650,48651,48654,48655,48657,48658,48659,null,null,null,null,null,null,48661,48662,48663,48664,48665,48666,48667,48670,48672,48673,48674,48675,48676,48677,48678,48679,48680,48681,48682,48683,48684,48685,48686,48687,48688,48689,48690,48691,48692,48693,48694,48695,48696,48697,48698,48699,48700,48701,48702,48703,48704,48705,48706,48707,48710,48711,48713,48714,48715,48717,48719,48720,48721,48722,48723,48726,48728,48732,48733,48734,48735,48738,48739,48741,48742,48743,48745,48747,48748,48749,48750,48751,48754,48758,48759,48760,48761,48762,48766,48767,48769,48770,48771,48773,48774,48775,48776,48777,48778,48779,48782,48786,48787,48788,48789,48790,48791,48794,48795,48796,48797,48798,48799,48800,48801,48802,48803,48804,48805,48806,48807,48809,48810,48811,48812,48813,48814,48815,48816,48817,48818,48819,48820,48821,48822,48823,48824,48825,48826,48827,48828,48829,48830,48831,48832,48833,48834,48835,48836,48837,48838,48839,48840,48841,48842,48843,48844,48845,48846,48847,48850,48851,null,null,null,null,null,null,48853,48854,48857,48858,48859,48860,48861,48862,48863,48865,48866,48870,48871,48872,48873,48874,48875,48877,48878,48879,48880,48881,48882,48883,48884,48885,null,null,null,null,null,null,48886,48887,48888,48889,48890,48891,48892,48893,48894,48895,48896,48898,48899,48900,48901,48902,48903,48906,48907,48908,48909,48910,48911,48912,48913,48914,48915,48916,48917,48918,48919,48922,48926,48927,48928,48929,48930,48931,48932,48933,48934,48935,48936,48937,48938,48939,48940,48941,48942,48943,48944,48945,48946,48947,48948,48949,48950,48951,48952,48953,48954,48955,48956,48957,48958,48959,48962,48963,48965,48966,48967,48969,48970,48971,48972,48973,48974,48975,48978,48979,48980,48982,48983,48984,48985,48986,48987,48988,48989,48990,48991,48992,48993,48994,48995,48996,48997,48998,48999,49e3,49001,49002,49003,49004,49005,49006,49007,49008,49009,49010,49011,49012,49013,49014,49015,49016,49017,49018,49019,49020,49021,49022,49023,49024,49025,49026,49027,49028,49029,49030,49031,49032,49033,49034,49035,49036,49037,49038,49039,49040,49041,49042,49043,49045,49046,49047,49048,49049,49050,49051,49052,49053,null,null,null,null,null,null,49054,49055,49056,49057,49058,49059,49060,49061,49062,49063,49064,49065,49066,49067,49068,49069,49070,49071,49073,49074,49075,49076,49077,49078,49079,49080,null,null,null,null,null,null,49081,49082,49083,49084,49085,49086,49087,49088,49089,49090,49091,49092,49094,49095,49096,49097,49098,49099,49102,49103,49105,49106,49107,49109,49110,49111,49112,49113,49114,49115,49117,49118,49120,49122,49123,49124,49125,49126,49127,49128,49129,49130,49131,49132,49133,49134,49135,49136,49137,49138,49139,49140,49141,49142,49143,49144,49145,49146,49147,49148,49149,49150,49151,49152,49153,49154,49155,49156,49157,49158,49159,49160,49161,49162,49163,49164,49165,49166,49167,49168,49169,49170,49171,49172,49173,49174,49175,49176,49177,49178,49179,49180,49181,49182,49183,49184,49185,49186,49187,49188,49189,49190,49191,49192,49193,49194,49195,49196,49197,49198,49199,49200,49201,49202,49203,49204,49205,49206,49207,49208,49209,49210,49211,49213,49214,49215,49216,49217,49218,49219,49220,49221,49222,49223,49224,49225,49226,49227,49228,49229,49230,49231,49232,49234,49235,49236,49237,49238,49239,49241,49242,49243,null,null,null,null,null,null,49245,49246,49247,49249,49250,49251,49252,49253,49254,49255,49258,49259,49260,49261,49262,49263,49264,49265,49266,49267,49268,49269,49270,49271,49272,49273,null,null,null,null,null,null,49274,49275,49276,49277,49278,49279,49280,49281,49282,49283,49284,49285,49286,49287,49288,49289,49290,49291,49292,49293,49294,49295,49298,49299,49301,49302,49303,49305,49306,49307,49308,49309,49310,49311,49314,49316,49318,49319,49320,49321,49322,49323,49326,49329,49330,49335,49336,49337,49338,49339,49342,49346,49347,49348,49350,49351,49354,49355,49357,49358,49359,49361,49362,49363,49364,49365,49366,49367,49370,49374,49375,49376,49377,49378,49379,49382,49383,49385,49386,49387,49389,49390,49391,49392,49393,49394,49395,49398,49400,49402,49403,49404,49405,49406,49407,49409,49410,49411,49413,49414,49415,49417,49418,49419,49420,49421,49422,49423,49425,49426,49427,49428,49430,49431,49432,49433,49434,49435,49441,49442,49445,49448,49449,49450,49451,49454,49458,49459,49460,49461,49463,49466,49467,49469,49470,49471,49473,49474,49475,49476,49477,49478,49479,49482,49486,49487,49488,49489,49490,49491,49494,49495,null,null,null,null,null,null,49497,49498,49499,49501,49502,49503,49504,49505,49506,49507,49510,49514,49515,49516,49517,49518,49519,49521,49522,49523,49525,49526,49527,49529,49530,49531,null,null,null,null,null,null,49532,49533,49534,49535,49536,49537,49538,49539,49540,49542,49543,49544,49545,49546,49547,49551,49553,49554,49555,49557,49559,49560,49561,49562,49563,49566,49568,49570,49571,49572,49574,49575,49578,49579,49581,49582,49583,49585,49586,49587,49588,49589,49590,49591,49592,49593,49594,49595,49596,49598,49599,49600,49601,49602,49603,49605,49606,49607,49609,49610,49611,49613,49614,49615,49616,49617,49618,49619,49621,49622,49625,49626,49627,49628,49629,49630,49631,49633,49634,49635,49637,49638,49639,49641,49642,49643,49644,49645,49646,49647,49650,49652,49653,49654,49655,49656,49657,49658,49659,49662,49663,49665,49666,49667,49669,49670,49671,49672,49673,49674,49675,49678,49680,49682,49683,49684,49685,49686,49687,49690,49691,49693,49694,49697,49698,49699,49700,49701,49702,49703,49706,49708,49710,49712,49715,49717,49718,49719,49720,49721,49722,49723,49724,49725,49726,49727,49728,49729,49730,49731,49732,49733,null,null,null,null,null,null,49734,49735,49737,49738,49739,49740,49741,49742,49743,49746,49747,49749,49750,49751,49753,49754,49755,49756,49757,49758,49759,49761,49762,49763,49764,49766,null,null,null,null,null,null,49767,49768,49769,49770,49771,49774,49775,49777,49778,49779,49781,49782,49783,49784,49785,49786,49787,49790,49792,49794,49795,49796,49797,49798,49799,49802,49803,49804,49805,49806,49807,49809,49810,49811,49812,49813,49814,49815,49817,49818,49820,49822,49823,49824,49825,49826,49827,49830,49831,49833,49834,49835,49838,49839,49840,49841,49842,49843,49846,49848,49850,49851,49852,49853,49854,49855,49856,49857,49858,49859,49860,49861,49862,49863,49864,49865,49866,49867,49868,49869,49870,49871,49872,49873,49874,49875,49876,49877,49878,49879,49880,49881,49882,49883,49886,49887,49889,49890,49893,49894,49895,49896,49897,49898,49902,49904,49906,49907,49908,49909,49911,49914,49917,49918,49919,49921,49922,49923,49924,49925,49926,49927,49930,49931,49934,49935,49936,49937,49938,49942,49943,49945,49946,49947,49949,49950,49951,49952,49953,49954,49955,49958,49959,49962,49963,49964,49965,49966,49967,49968,49969,49970,null,null,null,null,null,null,49971,49972,49973,49974,49975,49976,49977,49978,49979,49980,49981,49982,49983,49984,49985,49986,49987,49988,49990,49991,49992,49993,49994,49995,49996,49997,null,null,null,null,null,null,49998,49999,5e4,50001,50002,50003,50004,50005,50006,50007,50008,50009,50010,50011,50012,50013,50014,50015,50016,50017,50018,50019,50020,50021,50022,50023,50026,50027,50029,50030,50031,50033,50035,50036,50037,50038,50039,50042,50043,50046,50047,50048,50049,50050,50051,50053,50054,50055,50057,50058,50059,50061,50062,50063,50064,50065,50066,50067,50068,50069,50070,50071,50072,50073,50074,50075,50076,50077,50078,50079,50080,50081,50082,50083,50084,50085,50086,50087,50088,50089,50090,50091,50092,50093,50094,50095,50096,50097,50098,50099,50100,50101,50102,50103,50104,50105,50106,50107,50108,50109,50110,50111,50113,50114,50115,50116,50117,50118,50119,50120,50121,50122,50123,50124,50125,50126,50127,50128,50129,50130,50131,50132,50133,50134,50135,50138,50139,50141,50142,50145,50147,50148,50149,50150,50151,50154,50155,50156,50158,50159,50160,50161,50162,50163,50166,50167,50169,50170,50171,50172,50173,50174,null,null,null,null,null,null,50175,50176,50177,50178,50179,50180,50181,50182,50183,50185,50186,50187,50188,50189,50190,50191,50193,50194,50195,50196,50197,50198,50199,50200,50201,50202,null,null,null,null,null,null,50203,50204,50205,50206,50207,50208,50209,50210,50211,50213,50214,50215,50216,50217,50218,50219,50221,50222,50223,50225,50226,50227,50229,50230,50231,50232,50233,50234,50235,50238,50239,50240,50241,50242,50243,50244,50245,50246,50247,50249,50250,50251,50252,50253,50254,50255,50256,50257,50258,50259,50260,50261,50262,50263,50264,50265,50266,50267,50268,50269,50270,50271,50272,50273,50274,50275,50278,50279,50281,50282,50283,50285,50286,50287,50288,50289,50290,50291,50294,50295,50296,50298,50299,50300,50301,50302,50303,50305,50306,50307,50308,50309,50310,50311,50312,50313,50314,50315,50316,50317,50318,50319,50320,50321,50322,50323,50325,50326,50327,50328,50329,50330,50331,50333,50334,50335,50336,50337,50338,50339,50340,50341,50342,50343,50344,50345,50346,50347,50348,50349,50350,50351,50352,50353,50354,50355,50356,50357,50358,50359,50361,50362,50363,50365,50366,50367,50368,50369,50370,50371,50372,50373,null,null,null,null,null,null,50374,50375,50376,50377,50378,50379,50380,50381,50382,50383,50384,50385,50386,50387,50388,50389,50390,50391,50392,50393,50394,50395,50396,50397,50398,50399,null,null,null,null,null,null,50400,50401,50402,50403,50404,50405,50406,50407,50408,50410,50411,50412,50413,50414,50415,50418,50419,50421,50422,50423,50425,50427,50428,50429,50430,50434,50435,50436,50437,50438,50439,50440,50441,50442,50443,50445,50446,50447,50449,50450,50451,50453,50454,50455,50456,50457,50458,50459,50461,50462,50463,50464,50465,50466,50467,50468,50469,50470,50471,50474,50475,50477,50478,50479,50481,50482,50483,50484,50485,50486,50487,50490,50492,50494,50495,50496,50497,50498,50499,50502,50503,50507,50511,50512,50513,50514,50518,50522,50523,50524,50527,50530,50531,50533,50534,50535,50537,50538,50539,50540,50541,50542,50543,50546,50550,50551,50552,50553,50554,50555,50558,50559,50561,50562,50563,50565,50566,50568,50569,50570,50571,50574,50576,50578,50579,50580,50582,50585,50586,50587,50589,50590,50591,50593,50594,50595,50596,50597,50598,50599,50600,50602,50603,50604,50605,50606,50607,50608,50609,50610,50611,50614,null,null,null,null,null,null,50615,50618,50623,50624,50625,50626,50627,50635,50637,50639,50642,50643,50645,50646,50647,50649,50650,50651,50652,50653,50654,50655,50658,50660,50662,50663,null,null,null,null,null,null,50664,50665,50666,50667,50671,50673,50674,50675,50677,50680,50681,50682,50683,50690,50691,50692,50697,50698,50699,50701,50702,50703,50705,50706,50707,50708,50709,50710,50711,50714,50717,50718,50719,50720,50721,50722,50723,50726,50727,50729,50730,50731,50735,50737,50738,50742,50744,50746,50748,50749,50750,50751,50754,50755,50757,50758,50759,50761,50762,50763,50764,50765,50766,50767,50770,50774,50775,50776,50777,50778,50779,50782,50783,50785,50786,50787,50788,50789,50790,50791,50792,50793,50794,50795,50797,50798,50800,50802,50803,50804,50805,50806,50807,50810,50811,50813,50814,50815,50817,50818,50819,50820,50821,50822,50823,50826,50828,50830,50831,50832,50833,50834,50835,50838,50839,50841,50842,50843,50845,50846,50847,50848,50849,50850,50851,50854,50856,50858,50859,50860,50861,50862,50863,50866,50867,50869,50870,50871,50875,50876,50877,50878,50879,50882,50884,50886,50887,50888,50889,50890,50891,50894,null,null,null,null,null,null,50895,50897,50898,50899,50901,50902,50903,50904,50905,50906,50907,50910,50911,50914,50915,50916,50917,50918,50919,50922,50923,50925,50926,50927,50929,50930,null,null,null,null,null,null,50931,50932,50933,50934,50935,50938,50939,50940,50942,50943,50944,50945,50946,50947,50950,50951,50953,50954,50955,50957,50958,50959,50960,50961,50962,50963,50966,50968,50970,50971,50972,50973,50974,50975,50978,50979,50981,50982,50983,50985,50986,50987,50988,50989,50990,50991,50994,50996,50998,51e3,51001,51002,51003,51006,51007,51009,51010,51011,51013,51014,51015,51016,51017,51019,51022,51024,51033,51034,51035,51037,51038,51039,51041,51042,51043,51044,51045,51046,51047,51049,51050,51052,51053,51054,51055,51056,51057,51058,51059,51062,51063,51065,51066,51067,51071,51072,51073,51074,51078,51083,51084,51085,51087,51090,51091,51093,51097,51099,51100,51101,51102,51103,51106,51111,51112,51113,51114,51115,51118,51119,51121,51122,51123,51125,51126,51127,51128,51129,51130,51131,51134,51138,51139,51140,51141,51142,51143,51146,51147,51149,51151,51153,51154,51155,51156,51157,51158,51159,51161,51162,51163,51164,null,null,null,null,null,null,51166,51167,51168,51169,51170,51171,51173,51174,51175,51177,51178,51179,51181,51182,51183,51184,51185,51186,51187,51188,51189,51190,51191,51192,51193,51194,null,null,null,null,null,null,51195,51196,51197,51198,51199,51202,51203,51205,51206,51207,51209,51211,51212,51213,51214,51215,51218,51220,51223,51224,51225,51226,51227,51230,51231,51233,51234,51235,51237,51238,51239,51240,51241,51242,51243,51246,51248,51250,51251,51252,51253,51254,51255,51257,51258,51259,51261,51262,51263,51265,51266,51267,51268,51269,51270,51271,51274,51275,51278,51279,51280,51281,51282,51283,51285,51286,51287,51288,51289,51290,51291,51292,51293,51294,51295,51296,51297,51298,51299,51300,51301,51302,51303,51304,51305,51306,51307,51308,51309,51310,51311,51314,51315,51317,51318,51319,51321,51323,51324,51325,51326,51327,51330,51332,51336,51337,51338,51342,51343,51344,51345,51346,51347,51349,51350,51351,51352,51353,51354,51355,51356,51358,51360,51362,51363,51364,51365,51366,51367,51369,51370,51371,51372,51373,51374,51375,51376,51377,51378,51379,51380,51381,51382,51383,51384,51385,51386,51387,51390,51391,51392,51393,null,null,null,null,null,null,51394,51395,51397,51398,51399,51401,51402,51403,51405,51406,51407,51408,51409,51410,51411,51414,51416,51418,51419,51420,51421,51422,51423,51426,51427,51429,null,null,null,null,null,null,51430,51431,51432,51433,51434,51435,51436,51437,51438,51439,51440,51441,51442,51443,51444,51446,51447,51448,51449,51450,51451,51454,51455,51457,51458,51459,51463,51464,51465,51466,51467,51470,12288,12289,12290,183,8229,8230,168,12291,173,8213,8741,65340,8764,8216,8217,8220,8221,12308,12309,12296,12297,12298,12299,12300,12301,12302,12303,12304,12305,177,215,247,8800,8804,8805,8734,8756,176,8242,8243,8451,8491,65504,65505,65509,9794,9792,8736,8869,8978,8706,8711,8801,8786,167,8251,9734,9733,9675,9679,9678,9671,9670,9633,9632,9651,9650,9661,9660,8594,8592,8593,8595,8596,12307,8810,8811,8730,8765,8733,8757,8747,8748,8712,8715,8838,8839,8834,8835,8746,8745,8743,8744,65506,51472,51474,51475,51476,51477,51478,51479,51481,51482,51483,51484,51485,51486,51487,51488,51489,51490,51491,51492,51493,51494,51495,51496,51497,51498,51499,null,null,null,null,null,null,51501,51502,51503,51504,51505,51506,51507,51509,51510,51511,51512,51513,51514,51515,51516,51517,51518,51519,51520,51521,51522,51523,51524,51525,51526,51527,null,null,null,null,null,null,51528,51529,51530,51531,51532,51533,51534,51535,51538,51539,51541,51542,51543,51545,51546,51547,51548,51549,51550,51551,51554,51556,51557,51558,51559,51560,51561,51562,51563,51565,51566,51567,8658,8660,8704,8707,180,65374,711,728,733,730,729,184,731,161,191,720,8750,8721,8719,164,8457,8240,9665,9664,9655,9654,9828,9824,9825,9829,9831,9827,8857,9672,9635,9680,9681,9618,9636,9637,9640,9639,9638,9641,9832,9743,9742,9756,9758,182,8224,8225,8597,8599,8601,8598,8600,9837,9833,9834,9836,12927,12828,8470,13255,8482,13250,13272,8481,8364,174,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,51569,51570,51571,51573,51574,51575,51576,51577,51578,51579,51581,51582,51583,51584,51585,51586,51587,51588,51589,51590,51591,51594,51595,51597,51598,51599,null,null,null,null,null,null,51601,51602,51603,51604,51605,51606,51607,51610,51612,51614,51615,51616,51617,51618,51619,51620,51621,51622,51623,51624,51625,51626,51627,51628,51629,51630,null,null,null,null,null,null,51631,51632,51633,51634,51635,51636,51637,51638,51639,51640,51641,51642,51643,51644,51645,51646,51647,51650,51651,51653,51654,51657,51659,51660,51661,51662,51663,51666,51668,51671,51672,51675,65281,65282,65283,65284,65285,65286,65287,65288,65289,65290,65291,65292,65293,65294,65295,65296,65297,65298,65299,65300,65301,65302,65303,65304,65305,65306,65307,65308,65309,65310,65311,65312,65313,65314,65315,65316,65317,65318,65319,65320,65321,65322,65323,65324,65325,65326,65327,65328,65329,65330,65331,65332,65333,65334,65335,65336,65337,65338,65339,65510,65341,65342,65343,65344,65345,65346,65347,65348,65349,65350,65351,65352,65353,65354,65355,65356,65357,65358,65359,65360,65361,65362,65363,65364,65365,65366,65367,65368,65369,65370,65371,65372,65373,65507,51678,51679,51681,51683,51685,51686,51688,51689,51690,51691,51694,51698,51699,51700,51701,51702,51703,51706,51707,51709,51710,51711,51713,51714,51715,51716,null,null,null,null,null,null,51717,51718,51719,51722,51726,51727,51728,51729,51730,51731,51733,51734,51735,51737,51738,51739,51740,51741,51742,51743,51744,51745,51746,51747,51748,51749,null,null,null,null,null,null,51750,51751,51752,51754,51755,51756,51757,51758,51759,51760,51761,51762,51763,51764,51765,51766,51767,51768,51769,51770,51771,51772,51773,51774,51775,51776,51777,51778,51779,51780,51781,51782,12593,12594,12595,12596,12597,12598,12599,12600,12601,12602,12603,12604,12605,12606,12607,12608,12609,12610,12611,12612,12613,12614,12615,12616,12617,12618,12619,12620,12621,12622,12623,12624,12625,12626,12627,12628,12629,12630,12631,12632,12633,12634,12635,12636,12637,12638,12639,12640,12641,12642,12643,12644,12645,12646,12647,12648,12649,12650,12651,12652,12653,12654,12655,12656,12657,12658,12659,12660,12661,12662,12663,12664,12665,12666,12667,12668,12669,12670,12671,12672,12673,12674,12675,12676,12677,12678,12679,12680,12681,12682,12683,12684,12685,12686,51783,51784,51785,51786,51787,51790,51791,51793,51794,51795,51797,51798,51799,51800,51801,51802,51803,51806,51810,51811,51812,51813,51814,51815,51817,51818,null,null,null,null,null,null,51819,51820,51821,51822,51823,51824,51825,51826,51827,51828,51829,51830,51831,51832,51833,51834,51835,51836,51838,51839,51840,51841,51842,51843,51845,51846,null,null,null,null,null,null,51847,51848,51849,51850,51851,51852,51853,51854,51855,51856,51857,51858,51859,51860,51861,51862,51863,51865,51866,51867,51868,51869,51870,51871,51872,51873,51874,51875,51876,51877,51878,51879,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,null,null,null,null,null,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,null,null,null,null,null,null,null,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,null,null,null,null,null,null,null,null,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,963,964,965,966,967,968,969,null,null,null,null,null,null,51880,51881,51882,51883,51884,51885,51886,51887,51888,51889,51890,51891,51892,51893,51894,51895,51896,51897,51898,51899,51902,51903,51905,51906,51907,51909,null,null,null,null,null,null,51910,51911,51912,51913,51914,51915,51918,51920,51922,51924,51925,51926,51927,51930,51931,51932,51933,51934,51935,51937,51938,51939,51940,51941,51942,51943,null,null,null,null,null,null,51944,51945,51946,51947,51949,51950,51951,51952,51953,51954,51955,51957,51958,51959,51960,51961,51962,51963,51964,51965,51966,51967,51968,51969,51970,51971,51972,51973,51974,51975,51977,51978,9472,9474,9484,9488,9496,9492,9500,9516,9508,9524,9532,9473,9475,9487,9491,9499,9495,9507,9523,9515,9531,9547,9504,9519,9512,9527,9535,9501,9520,9509,9528,9538,9490,9489,9498,9497,9494,9493,9486,9485,9502,9503,9505,9506,9510,9511,9513,9514,9517,9518,9521,9522,9525,9526,9529,9530,9533,9534,9536,9537,9539,9540,9541,9542,9543,9544,9545,9546,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,51979,51980,51981,51982,51983,51985,51986,51987,51989,51990,51991,51993,51994,51995,51996,51997,51998,51999,52002,52003,52004,52005,52006,52007,52008,52009,null,null,null,null,null,null,52010,52011,52012,52013,52014,52015,52016,52017,52018,52019,52020,52021,52022,52023,52024,52025,52026,52027,52028,52029,52030,52031,52032,52034,52035,52036,null,null,null,null,null,null,52037,52038,52039,52042,52043,52045,52046,52047,52049,52050,52051,52052,52053,52054,52055,52058,52059,52060,52062,52063,52064,52065,52066,52067,52069,52070,52071,52072,52073,52074,52075,52076,13205,13206,13207,8467,13208,13252,13219,13220,13221,13222,13209,13210,13211,13212,13213,13214,13215,13216,13217,13218,13258,13197,13198,13199,13263,13192,13193,13256,13223,13224,13232,13233,13234,13235,13236,13237,13238,13239,13240,13241,13184,13185,13186,13187,13188,13242,13243,13244,13245,13246,13247,13200,13201,13202,13203,13204,8486,13248,13249,13194,13195,13196,13270,13253,13229,13230,13231,13275,13225,13226,13227,13228,13277,13264,13267,13251,13257,13276,13254,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52077,52078,52079,52080,52081,52082,52083,52084,52085,52086,52087,52090,52091,52092,52093,52094,52095,52096,52097,52098,52099,52100,52101,52102,52103,52104,null,null,null,null,null,null,52105,52106,52107,52108,52109,52110,52111,52112,52113,52114,52115,52116,52117,52118,52119,52120,52121,52122,52123,52125,52126,52127,52128,52129,52130,52131,null,null,null,null,null,null,52132,52133,52134,52135,52136,52137,52138,52139,52140,52141,52142,52143,52144,52145,52146,52147,52148,52149,52150,52151,52153,52154,52155,52156,52157,52158,52159,52160,52161,52162,52163,52164,198,208,170,294,null,306,null,319,321,216,338,186,222,358,330,null,12896,12897,12898,12899,12900,12901,12902,12903,12904,12905,12906,12907,12908,12909,12910,12911,12912,12913,12914,12915,12916,12917,12918,12919,12920,12921,12922,12923,9424,9425,9426,9427,9428,9429,9430,9431,9432,9433,9434,9435,9436,9437,9438,9439,9440,9441,9442,9443,9444,9445,9446,9447,9448,9449,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,9322,9323,9324,9325,9326,189,8531,8532,188,190,8539,8540,8541,8542,52165,52166,52167,52168,52169,52170,52171,52172,52173,52174,52175,52176,52177,52178,52179,52181,52182,52183,52184,52185,52186,52187,52188,52189,52190,52191,null,null,null,null,null,null,52192,52193,52194,52195,52197,52198,52200,52202,52203,52204,52205,52206,52207,52208,52209,52210,52211,52212,52213,52214,52215,52216,52217,52218,52219,52220,null,null,null,null,null,null,52221,52222,52223,52224,52225,52226,52227,52228,52229,52230,52231,52232,52233,52234,52235,52238,52239,52241,52242,52243,52245,52246,52247,52248,52249,52250,52251,52254,52255,52256,52259,52260,230,273,240,295,305,307,312,320,322,248,339,223,254,359,331,329,12800,12801,12802,12803,12804,12805,12806,12807,12808,12809,12810,12811,12812,12813,12814,12815,12816,12817,12818,12819,12820,12821,12822,12823,12824,12825,12826,12827,9372,9373,9374,9375,9376,9377,9378,9379,9380,9381,9382,9383,9384,9385,9386,9387,9388,9389,9390,9391,9392,9393,9394,9395,9396,9397,9332,9333,9334,9335,9336,9337,9338,9339,9340,9341,9342,9343,9344,9345,9346,185,178,179,8308,8319,8321,8322,8323,8324,52261,52262,52266,52267,52269,52271,52273,52274,52275,52276,52277,52278,52279,52282,52287,52288,52289,52290,52291,52294,52295,52297,52298,52299,52301,52302,null,null,null,null,null,null,52303,52304,52305,52306,52307,52310,52314,52315,52316,52317,52318,52319,52321,52322,52323,52325,52327,52329,52330,52331,52332,52333,52334,52335,52337,52338,null,null,null,null,null,null,52339,52340,52342,52343,52344,52345,52346,52347,52348,52349,52350,52351,52352,52353,52354,52355,52356,52357,52358,52359,52360,52361,52362,52363,52364,52365,52366,52367,52368,52369,52370,52371,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12367,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12427,12428,12429,12430,12431,12432,12433,12434,12435,null,null,null,null,null,null,null,null,null,null,null,52372,52373,52374,52375,52378,52379,52381,52382,52383,52385,52386,52387,52388,52389,52390,52391,52394,52398,52399,52400,52401,52402,52403,52406,52407,52409,null,null,null,null,null,null,52410,52411,52413,52414,52415,52416,52417,52418,52419,52422,52424,52426,52427,52428,52429,52430,52431,52433,52434,52435,52437,52438,52439,52440,52441,52442,null,null,null,null,null,null,52443,52444,52445,52446,52447,52448,52449,52450,52451,52453,52454,52455,52456,52457,52458,52459,52461,52462,52463,52465,52466,52467,52468,52469,52470,52471,52472,52473,52474,52475,52476,52477,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502,12503,12504,12505,12506,12507,12508,12509,12510,12511,12512,12513,12514,12515,12516,12517,12518,12519,12520,12521,12522,12523,12524,12525,12526,12527,12528,12529,12530,12531,12532,12533,12534,null,null,null,null,null,null,null,null,52478,52479,52480,52482,52483,52484,52485,52486,52487,52490,52491,52493,52494,52495,52497,52498,52499,52500,52501,52502,52503,52506,52508,52510,52511,52512,null,null,null,null,null,null,52513,52514,52515,52517,52518,52519,52521,52522,52523,52525,52526,52527,52528,52529,52530,52531,52532,52533,52534,52535,52536,52538,52539,52540,52541,52542,null,null,null,null,null,null,52543,52544,52545,52546,52547,52548,52549,52550,52551,52552,52553,52554,52555,52556,52557,52558,52559,52560,52561,52562,52563,52564,52565,52566,52567,52568,52569,52570,52571,52573,52574,52575,1040,1041,1042,1043,1044,1045,1025,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1072,1073,1074,1075,1076,1077,1105,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,null,null,null,null,null,null,null,null,null,null,null,null,null,52577,52578,52579,52581,52582,52583,52584,52585,52586,52587,52590,52592,52594,52595,52596,52597,52598,52599,52601,52602,52603,52604,52605,52606,52607,52608,null,null,null,null,null,null,52609,52610,52611,52612,52613,52614,52615,52617,52618,52619,52620,52621,52622,52623,52624,52625,52626,52627,52630,52631,52633,52634,52635,52637,52638,52639,null,null,null,null,null,null,52640,52641,52642,52643,52646,52648,52650,52651,52652,52653,52654,52655,52657,52658,52659,52660,52661,52662,52663,52664,52665,52666,52667,52668,52669,52670,52671,52672,52673,52674,52675,52677,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52678,52679,52680,52681,52682,52683,52685,52686,52687,52689,52690,52691,52692,52693,52694,52695,52696,52697,52698,52699,52700,52701,52702,52703,52704,52705,null,null,null,null,null,null,52706,52707,52708,52709,52710,52711,52713,52714,52715,52717,52718,52719,52721,52722,52723,52724,52725,52726,52727,52730,52732,52734,52735,52736,52737,52738,null,null,null,null,null,null,52739,52741,52742,52743,52745,52746,52747,52749,52750,52751,52752,52753,52754,52755,52757,52758,52759,52760,52762,52763,52764,52765,52766,52767,52770,52771,52773,52774,52775,52777,52778,52779,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52780,52781,52782,52783,52786,52788,52790,52791,52792,52793,52794,52795,52796,52797,52798,52799,52800,52801,52802,52803,52804,52805,52806,52807,52808,52809,null,null,null,null,null,null,52810,52811,52812,52813,52814,52815,52816,52817,52818,52819,52820,52821,52822,52823,52826,52827,52829,52830,52834,52835,52836,52837,52838,52839,52842,52844,null,null,null,null,null,null,52846,52847,52848,52849,52850,52851,52854,52855,52857,52858,52859,52861,52862,52863,52864,52865,52866,52867,52870,52872,52874,52875,52876,52877,52878,52879,52882,52883,52885,52886,52887,52889,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52890,52891,52892,52893,52894,52895,52898,52902,52903,52904,52905,52906,52907,52910,52911,52912,52913,52914,52915,52916,52917,52918,52919,52920,52921,52922,null,null,null,null,null,null,52923,52924,52925,52926,52927,52928,52930,52931,52932,52933,52934,52935,52936,52937,52938,52939,52940,52941,52942,52943,52944,52945,52946,52947,52948,52949,null,null,null,null,null,null,52950,52951,52952,52953,52954,52955,52956,52957,52958,52959,52960,52961,52962,52963,52966,52967,52969,52970,52973,52974,52975,52976,52977,52978,52979,52982,52986,52987,52988,52989,52990,52991,44032,44033,44036,44039,44040,44041,44042,44048,44049,44050,44051,44052,44053,44054,44055,44057,44058,44059,44060,44061,44064,44068,44076,44077,44079,44080,44081,44088,44089,44092,44096,44107,44109,44116,44120,44124,44144,44145,44148,44151,44152,44154,44160,44161,44163,44164,44165,44166,44169,44170,44171,44172,44176,44180,44188,44189,44191,44192,44193,44200,44201,44202,44204,44207,44208,44216,44217,44219,44220,44221,44225,44228,44232,44236,44245,44247,44256,44257,44260,44263,44264,44266,44268,44271,44272,44273,44275,44277,44278,44284,44285,44288,44292,44294,52994,52995,52997,52998,52999,53001,53002,53003,53004,53005,53006,53007,53010,53012,53014,53015,53016,53017,53018,53019,53021,53022,53023,53025,53026,53027,null,null,null,null,null,null,53029,53030,53031,53032,53033,53034,53035,53038,53042,53043,53044,53045,53046,53047,53049,53050,53051,53052,53053,53054,53055,53056,53057,53058,53059,53060,null,null,null,null,null,null,53061,53062,53063,53064,53065,53066,53067,53068,53069,53070,53071,53072,53073,53074,53075,53078,53079,53081,53082,53083,53085,53086,53087,53088,53089,53090,53091,53094,53096,53098,53099,53100,44300,44301,44303,44305,44312,44316,44320,44329,44332,44333,44340,44341,44344,44348,44356,44357,44359,44361,44368,44372,44376,44385,44387,44396,44397,44400,44403,44404,44405,44406,44411,44412,44413,44415,44417,44418,44424,44425,44428,44432,44444,44445,44452,44471,44480,44481,44484,44488,44496,44497,44499,44508,44512,44516,44536,44537,44540,44543,44544,44545,44552,44553,44555,44557,44564,44592,44593,44596,44599,44600,44602,44608,44609,44611,44613,44614,44618,44620,44621,44622,44624,44628,44630,44636,44637,44639,44640,44641,44645,44648,44649,44652,44656,44664,53101,53102,53103,53106,53107,53109,53110,53111,53113,53114,53115,53116,53117,53118,53119,53121,53122,53123,53124,53126,53127,53128,53129,53130,53131,53133,null,null,null,null,null,null,53134,53135,53136,53137,53138,53139,53140,53141,53142,53143,53144,53145,53146,53147,53148,53149,53150,53151,53152,53154,53155,53156,53157,53158,53159,53161,null,null,null,null,null,null,53162,53163,53164,53165,53166,53167,53169,53170,53171,53172,53173,53174,53175,53176,53177,53178,53179,53180,53181,53182,53183,53184,53185,53186,53187,53189,53190,53191,53192,53193,53194,53195,44665,44667,44668,44669,44676,44677,44684,44732,44733,44734,44736,44740,44748,44749,44751,44752,44753,44760,44761,44764,44776,44779,44781,44788,44792,44796,44807,44808,44813,44816,44844,44845,44848,44850,44852,44860,44861,44863,44865,44866,44867,44872,44873,44880,44892,44893,44900,44901,44921,44928,44932,44936,44944,44945,44949,44956,44984,44985,44988,44992,44999,45e3,45001,45003,45005,45006,45012,45020,45032,45033,45040,45041,45044,45048,45056,45057,45060,45068,45072,45076,45084,45085,45096,45124,45125,45128,45130,45132,45134,45139,45140,45141,45143,45145,53196,53197,53198,53199,53200,53201,53202,53203,53204,53205,53206,53207,53208,53209,53210,53211,53212,53213,53214,53215,53218,53219,53221,53222,53223,53225,null,null,null,null,null,null,53226,53227,53228,53229,53230,53231,53234,53236,53238,53239,53240,53241,53242,53243,53245,53246,53247,53249,53250,53251,53253,53254,53255,53256,53257,53258,null,null,null,null,null,null,53259,53260,53261,53262,53263,53264,53266,53267,53268,53269,53270,53271,53273,53274,53275,53276,53277,53278,53279,53280,53281,53282,53283,53284,53285,53286,53287,53288,53289,53290,53291,53292,45149,45180,45181,45184,45188,45196,45197,45199,45201,45208,45209,45210,45212,45215,45216,45217,45218,45224,45225,45227,45228,45229,45230,45231,45233,45235,45236,45237,45240,45244,45252,45253,45255,45256,45257,45264,45265,45268,45272,45280,45285,45320,45321,45323,45324,45328,45330,45331,45336,45337,45339,45340,45341,45347,45348,45349,45352,45356,45364,45365,45367,45368,45369,45376,45377,45380,45384,45392,45393,45396,45397,45400,45404,45408,45432,45433,45436,45440,45442,45448,45449,45451,45453,45458,45459,45460,45464,45468,45480,45516,45520,45524,45532,45533,53294,53295,53296,53297,53298,53299,53302,53303,53305,53306,53307,53309,53310,53311,53312,53313,53314,53315,53318,53320,53322,53323,53324,53325,53326,53327,null,null,null,null,null,null,53329,53330,53331,53333,53334,53335,53337,53338,53339,53340,53341,53342,53343,53345,53346,53347,53348,53349,53350,53351,53352,53353,53354,53355,53358,53359,null,null,null,null,null,null,53361,53362,53363,53365,53366,53367,53368,53369,53370,53371,53374,53375,53376,53378,53379,53380,53381,53382,53383,53384,53385,53386,53387,53388,53389,53390,53391,53392,53393,53394,53395,53396,45535,45544,45545,45548,45552,45561,45563,45565,45572,45573,45576,45579,45580,45588,45589,45591,45593,45600,45620,45628,45656,45660,45664,45672,45673,45684,45685,45692,45700,45701,45705,45712,45713,45716,45720,45721,45722,45728,45729,45731,45733,45734,45738,45740,45744,45748,45768,45769,45772,45776,45778,45784,45785,45787,45789,45794,45796,45797,45798,45800,45803,45804,45805,45806,45807,45811,45812,45813,45815,45816,45817,45818,45819,45823,45824,45825,45828,45832,45840,45841,45843,45844,45845,45852,45908,45909,45910,45912,45915,45916,45918,45919,45924,45925,53397,53398,53399,53400,53401,53402,53403,53404,53405,53406,53407,53408,53409,53410,53411,53414,53415,53417,53418,53419,53421,53422,53423,53424,53425,53426,null,null,null,null,null,null,53427,53430,53432,53434,53435,53436,53437,53438,53439,53442,53443,53445,53446,53447,53450,53451,53452,53453,53454,53455,53458,53462,53463,53464,53465,53466,null,null,null,null,null,null,53467,53470,53471,53473,53474,53475,53477,53478,53479,53480,53481,53482,53483,53486,53490,53491,53492,53493,53494,53495,53497,53498,53499,53500,53501,53502,53503,53504,53505,53506,53507,53508,45927,45929,45931,45934,45936,45937,45940,45944,45952,45953,45955,45956,45957,45964,45968,45972,45984,45985,45992,45996,46020,46021,46024,46027,46028,46030,46032,46036,46037,46039,46041,46043,46045,46048,46052,46056,46076,46096,46104,46108,46112,46120,46121,46123,46132,46160,46161,46164,46168,46176,46177,46179,46181,46188,46208,46216,46237,46244,46248,46252,46261,46263,46265,46272,46276,46280,46288,46293,46300,46301,46304,46307,46308,46310,46316,46317,46319,46321,46328,46356,46357,46360,46363,46364,46372,46373,46375,46376,46377,46378,46384,46385,46388,46392,53509,53510,53511,53512,53513,53514,53515,53516,53518,53519,53520,53521,53522,53523,53524,53525,53526,53527,53528,53529,53530,53531,53532,53533,53534,53535,null,null,null,null,null,null,53536,53537,53538,53539,53540,53541,53542,53543,53544,53545,53546,53547,53548,53549,53550,53551,53554,53555,53557,53558,53559,53561,53563,53564,53565,53566,null,null,null,null,null,null,53567,53570,53574,53575,53576,53577,53578,53579,53582,53583,53585,53586,53587,53589,53590,53591,53592,53593,53594,53595,53598,53600,53602,53603,53604,53605,53606,53607,53609,53610,53611,53613,46400,46401,46403,46404,46405,46411,46412,46413,46416,46420,46428,46429,46431,46432,46433,46496,46497,46500,46504,46506,46507,46512,46513,46515,46516,46517,46523,46524,46525,46528,46532,46540,46541,46543,46544,46545,46552,46572,46608,46609,46612,46616,46629,46636,46644,46664,46692,46696,46748,46749,46752,46756,46763,46764,46769,46804,46832,46836,46840,46848,46849,46853,46888,46889,46892,46895,46896,46904,46905,46907,46916,46920,46924,46932,46933,46944,46948,46952,46960,46961,46963,46965,46972,46973,46976,46980,46988,46989,46991,46992,46993,46994,46998,46999,53614,53615,53616,53617,53618,53619,53620,53621,53622,53623,53624,53625,53626,53627,53629,53630,53631,53632,53633,53634,53635,53637,53638,53639,53641,53642,null,null,null,null,null,null,53643,53644,53645,53646,53647,53648,53649,53650,53651,53652,53653,53654,53655,53656,53657,53658,53659,53660,53661,53662,53663,53666,53667,53669,53670,53671,null,null,null,null,null,null,53673,53674,53675,53676,53677,53678,53679,53682,53684,53686,53687,53688,53689,53691,53693,53694,53695,53697,53698,53699,53700,53701,53702,53703,53704,53705,53706,53707,53708,53709,53710,53711,47e3,47001,47004,47008,47016,47017,47019,47020,47021,47028,47029,47032,47047,47049,47084,47085,47088,47092,47100,47101,47103,47104,47105,47111,47112,47113,47116,47120,47128,47129,47131,47133,47140,47141,47144,47148,47156,47157,47159,47160,47161,47168,47172,47185,47187,47196,47197,47200,47204,47212,47213,47215,47217,47224,47228,47245,47272,47280,47284,47288,47296,47297,47299,47301,47308,47312,47316,47325,47327,47329,47336,47337,47340,47344,47352,47353,47355,47357,47364,47384,47392,47420,47421,47424,47428,47436,47439,47441,47448,47449,47452,47456,47464,47465,53712,53713,53714,53715,53716,53717,53718,53719,53721,53722,53723,53724,53725,53726,53727,53728,53729,53730,53731,53732,53733,53734,53735,53736,53737,53738,null,null,null,null,null,null,53739,53740,53741,53742,53743,53744,53745,53746,53747,53749,53750,53751,53753,53754,53755,53756,53757,53758,53759,53760,53761,53762,53763,53764,53765,53766,null,null,null,null,null,null,53768,53770,53771,53772,53773,53774,53775,53777,53778,53779,53780,53781,53782,53783,53784,53785,53786,53787,53788,53789,53790,53791,53792,53793,53794,53795,53796,53797,53798,53799,53800,53801,47467,47469,47476,47477,47480,47484,47492,47493,47495,47497,47498,47501,47502,47532,47533,47536,47540,47548,47549,47551,47553,47560,47561,47564,47566,47567,47568,47569,47570,47576,47577,47579,47581,47582,47585,47587,47588,47589,47592,47596,47604,47605,47607,47608,47609,47610,47616,47617,47624,47637,47672,47673,47676,47680,47682,47688,47689,47691,47693,47694,47699,47700,47701,47704,47708,47716,47717,47719,47720,47721,47728,47729,47732,47736,47747,47748,47749,47751,47756,47784,47785,47787,47788,47792,47794,47800,47801,47803,47805,47812,47816,47832,47833,47868,53802,53803,53806,53807,53809,53810,53811,53813,53814,53815,53816,53817,53818,53819,53822,53824,53826,53827,53828,53829,53830,53831,53833,53834,53835,53836,null,null,null,null,null,null,53837,53838,53839,53840,53841,53842,53843,53844,53845,53846,53847,53848,53849,53850,53851,53853,53854,53855,53856,53857,53858,53859,53861,53862,53863,53864,null,null,null,null,null,null,53865,53866,53867,53868,53869,53870,53871,53872,53873,53874,53875,53876,53877,53878,53879,53880,53881,53882,53883,53884,53885,53886,53887,53890,53891,53893,53894,53895,53897,53898,53899,53900,47872,47876,47885,47887,47889,47896,47900,47904,47913,47915,47924,47925,47926,47928,47931,47932,47933,47934,47940,47941,47943,47945,47949,47951,47952,47956,47960,47969,47971,47980,48008,48012,48016,48036,48040,48044,48052,48055,48064,48068,48072,48080,48083,48120,48121,48124,48127,48128,48130,48136,48137,48139,48140,48141,48143,48145,48148,48149,48150,48151,48152,48155,48156,48157,48158,48159,48164,48165,48167,48169,48173,48176,48177,48180,48184,48192,48193,48195,48196,48197,48201,48204,48205,48208,48221,48260,48261,48264,48267,48268,48270,48276,48277,48279,53901,53902,53903,53906,53907,53908,53910,53911,53912,53913,53914,53915,53917,53918,53919,53921,53922,53923,53925,53926,53927,53928,53929,53930,53931,53933,null,null,null,null,null,null,53934,53935,53936,53938,53939,53940,53941,53942,53943,53946,53947,53949,53950,53953,53955,53956,53957,53958,53959,53962,53964,53965,53966,53967,53968,53969,null,null,null,null,null,null,53970,53971,53973,53974,53975,53977,53978,53979,53981,53982,53983,53984,53985,53986,53987,53990,53991,53992,53993,53994,53995,53996,53997,53998,53999,54002,54003,54005,54006,54007,54009,54010,48281,48282,48288,48289,48292,48295,48296,48304,48305,48307,48308,48309,48316,48317,48320,48324,48333,48335,48336,48337,48341,48344,48348,48372,48373,48374,48376,48380,48388,48389,48391,48393,48400,48404,48420,48428,48448,48456,48457,48460,48464,48472,48473,48484,48488,48512,48513,48516,48519,48520,48521,48522,48528,48529,48531,48533,48537,48538,48540,48548,48560,48568,48596,48597,48600,48604,48617,48624,48628,48632,48640,48643,48645,48652,48653,48656,48660,48668,48669,48671,48708,48709,48712,48716,48718,48724,48725,48727,48729,48730,48731,48736,48737,48740,54011,54012,54013,54014,54015,54018,54020,54022,54023,54024,54025,54026,54027,54031,54033,54034,54035,54037,54039,54040,54041,54042,54043,54046,54050,54051,null,null,null,null,null,null,54052,54054,54055,54058,54059,54061,54062,54063,54065,54066,54067,54068,54069,54070,54071,54074,54078,54079,54080,54081,54082,54083,54086,54087,54088,54089,null,null,null,null,null,null,54090,54091,54092,54093,54094,54095,54096,54097,54098,54099,54100,54101,54102,54103,54104,54105,54106,54107,54108,54109,54110,54111,54112,54113,54114,54115,54116,54117,54118,54119,54120,54121,48744,48746,48752,48753,48755,48756,48757,48763,48764,48765,48768,48772,48780,48781,48783,48784,48785,48792,48793,48808,48848,48849,48852,48855,48856,48864,48867,48868,48869,48876,48897,48904,48905,48920,48921,48923,48924,48925,48960,48961,48964,48968,48976,48977,48981,49044,49072,49093,49100,49101,49104,49108,49116,49119,49121,49212,49233,49240,49244,49248,49256,49257,49296,49297,49300,49304,49312,49313,49315,49317,49324,49325,49327,49328,49331,49332,49333,49334,49340,49341,49343,49344,49345,49349,49352,49353,49356,49360,49368,49369,49371,49372,49373,49380,54122,54123,54124,54125,54126,54127,54128,54129,54130,54131,54132,54133,54134,54135,54136,54137,54138,54139,54142,54143,54145,54146,54147,54149,54150,54151,null,null,null,null,null,null,54152,54153,54154,54155,54158,54162,54163,54164,54165,54166,54167,54170,54171,54173,54174,54175,54177,54178,54179,54180,54181,54182,54183,54186,54188,54190,null,null,null,null,null,null,54191,54192,54193,54194,54195,54197,54198,54199,54201,54202,54203,54205,54206,54207,54208,54209,54210,54211,54214,54215,54218,54219,54220,54221,54222,54223,54225,54226,54227,54228,54229,54230,49381,49384,49388,49396,49397,49399,49401,49408,49412,49416,49424,49429,49436,49437,49438,49439,49440,49443,49444,49446,49447,49452,49453,49455,49456,49457,49462,49464,49465,49468,49472,49480,49481,49483,49484,49485,49492,49493,49496,49500,49508,49509,49511,49512,49513,49520,49524,49528,49541,49548,49549,49550,49552,49556,49558,49564,49565,49567,49569,49573,49576,49577,49580,49584,49597,49604,49608,49612,49620,49623,49624,49632,49636,49640,49648,49649,49651,49660,49661,49664,49668,49676,49677,49679,49681,49688,49689,49692,49695,49696,49704,49705,49707,49709,54231,54233,54234,54235,54236,54237,54238,54239,54240,54242,54244,54245,54246,54247,54248,54249,54250,54251,54254,54255,54257,54258,54259,54261,54262,54263,null,null,null,null,null,null,54264,54265,54266,54267,54270,54272,54274,54275,54276,54277,54278,54279,54281,54282,54283,54284,54285,54286,54287,54288,54289,54290,54291,54292,54293,54294,null,null,null,null,null,null,54295,54296,54297,54298,54299,54300,54302,54303,54304,54305,54306,54307,54308,54309,54310,54311,54312,54313,54314,54315,54316,54317,54318,54319,54320,54321,54322,54323,54324,54325,54326,54327,49711,49713,49714,49716,49736,49744,49745,49748,49752,49760,49765,49772,49773,49776,49780,49788,49789,49791,49793,49800,49801,49808,49816,49819,49821,49828,49829,49832,49836,49837,49844,49845,49847,49849,49884,49885,49888,49891,49892,49899,49900,49901,49903,49905,49910,49912,49913,49915,49916,49920,49928,49929,49932,49933,49939,49940,49941,49944,49948,49956,49957,49960,49961,49989,50024,50025,50028,50032,50034,50040,50041,50044,50045,50052,50056,50060,50112,50136,50137,50140,50143,50144,50146,50152,50153,50157,50164,50165,50168,50184,50192,50212,50220,50224,54328,54329,54330,54331,54332,54333,54334,54335,54337,54338,54339,54341,54342,54343,54344,54345,54346,54347,54348,54349,54350,54351,54352,54353,54354,54355,null,null,null,null,null,null,54356,54357,54358,54359,54360,54361,54362,54363,54365,54366,54367,54369,54370,54371,54373,54374,54375,54376,54377,54378,54379,54380,54382,54384,54385,54386,null,null,null,null,null,null,54387,54388,54389,54390,54391,54394,54395,54397,54398,54401,54403,54404,54405,54406,54407,54410,54412,54414,54415,54416,54417,54418,54419,54421,54422,54423,54424,54425,54426,54427,54428,54429,50228,50236,50237,50248,50276,50277,50280,50284,50292,50293,50297,50304,50324,50332,50360,50364,50409,50416,50417,50420,50424,50426,50431,50432,50433,50444,50448,50452,50460,50472,50473,50476,50480,50488,50489,50491,50493,50500,50501,50504,50505,50506,50508,50509,50510,50515,50516,50517,50519,50520,50521,50525,50526,50528,50529,50532,50536,50544,50545,50547,50548,50549,50556,50557,50560,50564,50567,50572,50573,50575,50577,50581,50583,50584,50588,50592,50601,50612,50613,50616,50617,50619,50620,50621,50622,50628,50629,50630,50631,50632,50633,50634,50636,50638,54430,54431,54432,54433,54434,54435,54436,54437,54438,54439,54440,54442,54443,54444,54445,54446,54447,54448,54449,54450,54451,54452,54453,54454,54455,54456,null,null,null,null,null,null,54457,54458,54459,54460,54461,54462,54463,54464,54465,54466,54467,54468,54469,54470,54471,54472,54473,54474,54475,54477,54478,54479,54481,54482,54483,54485,null,null,null,null,null,null,54486,54487,54488,54489,54490,54491,54493,54494,54496,54497,54498,54499,54500,54501,54502,54503,54505,54506,54507,54509,54510,54511,54513,54514,54515,54516,54517,54518,54519,54521,54522,54524,50640,50641,50644,50648,50656,50657,50659,50661,50668,50669,50670,50672,50676,50678,50679,50684,50685,50686,50687,50688,50689,50693,50694,50695,50696,50700,50704,50712,50713,50715,50716,50724,50725,50728,50732,50733,50734,50736,50739,50740,50741,50743,50745,50747,50752,50753,50756,50760,50768,50769,50771,50772,50773,50780,50781,50784,50796,50799,50801,50808,50809,50812,50816,50824,50825,50827,50829,50836,50837,50840,50844,50852,50853,50855,50857,50864,50865,50868,50872,50873,50874,50880,50881,50883,50885,50892,50893,50896,50900,50908,50909,50912,50913,50920,54526,54527,54528,54529,54530,54531,54533,54534,54535,54537,54538,54539,54541,54542,54543,54544,54545,54546,54547,54550,54552,54553,54554,54555,54556,54557,null,null,null,null,null,null,54558,54559,54560,54561,54562,54563,54564,54565,54566,54567,54568,54569,54570,54571,54572,54573,54574,54575,54576,54577,54578,54579,54580,54581,54582,54583,null,null,null,null,null,null,54584,54585,54586,54587,54590,54591,54593,54594,54595,54597,54598,54599,54600,54601,54602,54603,54606,54608,54610,54611,54612,54613,54614,54615,54618,54619,54621,54622,54623,54625,54626,54627,50921,50924,50928,50936,50937,50941,50948,50949,50952,50956,50964,50965,50967,50969,50976,50977,50980,50984,50992,50993,50995,50997,50999,51004,51005,51008,51012,51018,51020,51021,51023,51025,51026,51027,51028,51029,51030,51031,51032,51036,51040,51048,51051,51060,51061,51064,51068,51069,51070,51075,51076,51077,51079,51080,51081,51082,51086,51088,51089,51092,51094,51095,51096,51098,51104,51105,51107,51108,51109,51110,51116,51117,51120,51124,51132,51133,51135,51136,51137,51144,51145,51148,51150,51152,51160,51165,51172,51176,51180,51200,51201,51204,51208,51210,54628,54630,54631,54634,54636,54638,54639,54640,54641,54642,54643,54646,54647,54649,54650,54651,54653,54654,54655,54656,54657,54658,54659,54662,54666,54667,null,null,null,null,null,null,54668,54669,54670,54671,54673,54674,54675,54676,54677,54678,54679,54680,54681,54682,54683,54684,54685,54686,54687,54688,54689,54690,54691,54692,54694,54695,null,null,null,null,null,null,54696,54697,54698,54699,54700,54701,54702,54703,54704,54705,54706,54707,54708,54709,54710,54711,54712,54713,54714,54715,54716,54717,54718,54719,54720,54721,54722,54723,54724,54725,54726,54727,51216,51217,51219,51221,51222,51228,51229,51232,51236,51244,51245,51247,51249,51256,51260,51264,51272,51273,51276,51277,51284,51312,51313,51316,51320,51322,51328,51329,51331,51333,51334,51335,51339,51340,51341,51348,51357,51359,51361,51368,51388,51389,51396,51400,51404,51412,51413,51415,51417,51424,51425,51428,51445,51452,51453,51456,51460,51461,51462,51468,51469,51471,51473,51480,51500,51508,51536,51537,51540,51544,51552,51553,51555,51564,51568,51572,51580,51592,51593,51596,51600,51608,51609,51611,51613,51648,51649,51652,51655,51656,51658,51664,51665,51667,54730,54731,54733,54734,54735,54737,54739,54740,54741,54742,54743,54746,54748,54750,54751,54752,54753,54754,54755,54758,54759,54761,54762,54763,54765,54766,null,null,null,null,null,null,54767,54768,54769,54770,54771,54774,54776,54778,54779,54780,54781,54782,54783,54786,54787,54789,54790,54791,54793,54794,54795,54796,54797,54798,54799,54802,null,null,null,null,null,null,54806,54807,54808,54809,54810,54811,54813,54814,54815,54817,54818,54819,54821,54822,54823,54824,54825,54826,54827,54828,54830,54831,54832,54833,54834,54835,54836,54837,54838,54839,54842,54843,51669,51670,51673,51674,51676,51677,51680,51682,51684,51687,51692,51693,51695,51696,51697,51704,51705,51708,51712,51720,51721,51723,51724,51725,51732,51736,51753,51788,51789,51792,51796,51804,51805,51807,51808,51809,51816,51837,51844,51864,51900,51901,51904,51908,51916,51917,51919,51921,51923,51928,51929,51936,51948,51956,51976,51984,51988,51992,52e3,52001,52033,52040,52041,52044,52048,52056,52057,52061,52068,52088,52089,52124,52152,52180,52196,52199,52201,52236,52237,52240,52244,52252,52253,52257,52258,52263,52264,52265,52268,52270,52272,52280,52281,52283,54845,54846,54847,54849,54850,54851,54852,54854,54855,54858,54860,54862,54863,54864,54866,54867,54870,54871,54873,54874,54875,54877,54878,54879,54880,54881,null,null,null,null,null,null,54882,54883,54884,54885,54886,54888,54890,54891,54892,54893,54894,54895,54898,54899,54901,54902,54903,54904,54905,54906,54907,54908,54909,54910,54911,54912,null,null,null,null,null,null,54913,54914,54916,54918,54919,54920,54921,54922,54923,54926,54927,54929,54930,54931,54933,54934,54935,54936,54937,54938,54939,54940,54942,54944,54946,54947,54948,54949,54950,54951,54953,54954,52284,52285,52286,52292,52293,52296,52300,52308,52309,52311,52312,52313,52320,52324,52326,52328,52336,52341,52376,52377,52380,52384,52392,52393,52395,52396,52397,52404,52405,52408,52412,52420,52421,52423,52425,52432,52436,52452,52460,52464,52481,52488,52489,52492,52496,52504,52505,52507,52509,52516,52520,52524,52537,52572,52576,52580,52588,52589,52591,52593,52600,52616,52628,52629,52632,52636,52644,52645,52647,52649,52656,52676,52684,52688,52712,52716,52720,52728,52729,52731,52733,52740,52744,52748,52756,52761,52768,52769,52772,52776,52784,52785,52787,52789,54955,54957,54958,54959,54961,54962,54963,54964,54965,54966,54967,54968,54970,54972,54973,54974,54975,54976,54977,54978,54979,54982,54983,54985,54986,54987,null,null,null,null,null,null,54989,54990,54991,54992,54994,54995,54997,54998,55e3,55002,55003,55004,55005,55006,55007,55009,55010,55011,55013,55014,55015,55017,55018,55019,55020,55021,null,null,null,null,null,null,55022,55023,55025,55026,55027,55028,55030,55031,55032,55033,55034,55035,55038,55039,55041,55042,55043,55045,55046,55047,55048,55049,55050,55051,55052,55053,55054,55055,55056,55058,55059,55060,52824,52825,52828,52831,52832,52833,52840,52841,52843,52845,52852,52853,52856,52860,52868,52869,52871,52873,52880,52881,52884,52888,52896,52897,52899,52900,52901,52908,52909,52929,52964,52965,52968,52971,52972,52980,52981,52983,52984,52985,52992,52993,52996,53e3,53008,53009,53011,53013,53020,53024,53028,53036,53037,53039,53040,53041,53048,53076,53077,53080,53084,53092,53093,53095,53097,53104,53105,53108,53112,53120,53125,53132,53153,53160,53168,53188,53216,53217,53220,53224,53232,53233,53235,53237,53244,53248,53252,53265,53272,53293,53300,53301,53304,53308,55061,55062,55063,55066,55067,55069,55070,55071,55073,55074,55075,55076,55077,55078,55079,55082,55084,55086,55087,55088,55089,55090,55091,55094,55095,55097,null,null,null,null,null,null,55098,55099,55101,55102,55103,55104,55105,55106,55107,55109,55110,55112,55114,55115,55116,55117,55118,55119,55122,55123,55125,55130,55131,55132,55133,55134,null,null,null,null,null,null,55135,55138,55140,55142,55143,55144,55146,55147,55149,55150,55151,55153,55154,55155,55157,55158,55159,55160,55161,55162,55163,55166,55167,55168,55170,55171,55172,55173,55174,55175,55178,55179,53316,53317,53319,53321,53328,53332,53336,53344,53356,53357,53360,53364,53372,53373,53377,53412,53413,53416,53420,53428,53429,53431,53433,53440,53441,53444,53448,53449,53456,53457,53459,53460,53461,53468,53469,53472,53476,53484,53485,53487,53488,53489,53496,53517,53552,53553,53556,53560,53562,53568,53569,53571,53572,53573,53580,53581,53584,53588,53596,53597,53599,53601,53608,53612,53628,53636,53640,53664,53665,53668,53672,53680,53681,53683,53685,53690,53692,53696,53720,53748,53752,53767,53769,53776,53804,53805,53808,53812,53820,53821,53823,53825,53832,53852,55181,55182,55183,55185,55186,55187,55188,55189,55190,55191,55194,55196,55198,55199,55200,55201,55202,55203,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,53860,53888,53889,53892,53896,53904,53905,53909,53916,53920,53924,53932,53937,53944,53945,53948,53951,53952,53954,53960,53961,53963,53972,53976,53980,53988,53989,54e3,54001,54004,54008,54016,54017,54019,54021,54028,54029,54030,54032,54036,54038,54044,54045,54047,54048,54049,54053,54056,54057,54060,54064,54072,54073,54075,54076,54077,54084,54085,54140,54141,54144,54148,54156,54157,54159,54160,54161,54168,54169,54172,54176,54184,54185,54187,54189,54196,54200,54204,54212,54213,54216,54217,54224,54232,54241,54243,54252,54253,54256,54260,54268,54269,54271,54273,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,54280,54301,54336,54340,54364,54368,54372,54381,54383,54392,54393,54396,54399,54400,54402,54408,54409,54411,54413,54420,54441,54476,54480,54484,54492,54495,54504,54508,54512,54520,54523,54525,54532,54536,54540,54548,54549,54551,54588,54589,54592,54596,54604,54605,54607,54609,54616,54617,54620,54624,54629,54632,54633,54635,54637,54644,54645,54648,54652,54660,54661,54663,54664,54665,54672,54693,54728,54729,54732,54736,54738,54744,54745,54747,54749,54756,54757,54760,54764,54772,54773,54775,54777,54784,54785,54788,54792,54800,54801,54803,54804,54805,54812,54816,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,54820,54829,54840,54841,54844,54848,54853,54856,54857,54859,54861,54865,54868,54869,54872,54876,54887,54889,54896,54897,54900,54915,54917,54924,54925,54928,54932,54941,54943,54945,54952,54956,54960,54969,54971,54980,54981,54984,54988,54993,54996,54999,55001,55008,55012,55016,55024,55029,55036,55037,55040,55044,55057,55064,55065,55068,55072,55080,55081,55083,55085,55092,55093,55096,55100,55108,55111,55113,55120,55121,55124,55126,55127,55128,55129,55136,55137,55139,55141,55145,55148,55152,55156,55164,55165,55169,55176,55177,55180,55184,55192,55193,55195,55197,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,20285,20339,20551,20729,21152,21487,21621,21733,22025,23233,23478,26247,26550,26551,26607,27468,29634,30146,31292,33499,33540,34903,34952,35382,36040,36303,36603,36838,39381,21051,21364,21508,24682,24932,27580,29647,33050,35258,35282,38307,20355,21002,22718,22904,23014,24178,24185,25031,25536,26438,26604,26751,28567,30286,30475,30965,31240,31487,31777,32925,33390,33393,35563,38291,20075,21917,26359,28212,30883,31469,33883,35088,34638,38824,21208,22350,22570,23884,24863,25022,25121,25954,26577,27204,28187,29976,30131,30435,30640,32058,37039,37969,37970,40853,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21283,23724,30002,32987,37440,38296,21083,22536,23004,23713,23831,24247,24378,24394,24951,27743,30074,30086,31968,32115,32177,32652,33108,33313,34193,35137,35611,37628,38477,40007,20171,20215,20491,20977,22607,24887,24894,24936,25913,27114,28433,30117,30342,30422,31623,33445,33995,63744,37799,38283,21888,23458,22353,63745,31923,32697,37301,20520,21435,23621,24040,25298,25454,25818,25831,28192,28844,31067,36317,36382,63746,36989,37445,37624,20094,20214,20581,24062,24314,24838,26967,33137,34388,36423,37749,39467,20062,20625,26480,26688,20745,21133,21138,27298,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,30652,37392,40660,21163,24623,36850,20552,25001,25581,25802,26684,27268,28608,33160,35233,38548,22533,29309,29356,29956,32121,32365,32937,35211,35700,36963,40273,25225,27770,28500,32080,32570,35363,20860,24906,31645,35609,37463,37772,20140,20435,20510,20670,20742,21185,21197,21375,22384,22659,24218,24465,24950,25004,25806,25964,26223,26299,26356,26775,28039,28805,28913,29855,29861,29898,30169,30828,30956,31455,31478,32069,32147,32789,32831,33051,33686,35686,36629,36885,37857,38915,38968,39514,39912,20418,21843,22586,22865,23395,23622,24760,25106,26690,26800,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,26856,28330,30028,30328,30926,31293,31995,32363,32380,35336,35489,35903,38542,40388,21476,21481,21578,21617,22266,22993,23396,23611,24235,25335,25911,25925,25970,26272,26543,27073,27837,30204,30352,30590,31295,32660,32771,32929,33167,33510,33533,33776,34241,34865,34996,35493,63747,36764,37678,38599,39015,39640,40723,21741,26011,26354,26767,31296,35895,40288,22256,22372,23825,26118,26801,26829,28414,29736,34974,39908,27752,63748,39592,20379,20844,20849,21151,23380,24037,24656,24685,25329,25511,25915,29657,31354,34467,36002,38799,20018,23521,25096,26524,29916,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,31185,33747,35463,35506,36328,36942,37707,38982,24275,27112,34303,37101,63749,20896,23448,23532,24931,26874,27454,28748,29743,29912,31649,32592,33733,35264,36011,38364,39208,21038,24669,25324,36866,20362,20809,21281,22745,24291,26336,27960,28826,29378,29654,31568,33009,37979,21350,25499,32619,20054,20608,22602,22750,24618,24871,25296,27088,39745,23439,32024,32945,36703,20132,20689,21676,21932,23308,23968,24039,25898,25934,26657,27211,29409,30350,30703,32094,32761,33184,34126,34527,36611,36686,37066,39171,39509,39851,19992,20037,20061,20167,20465,20855,21246,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21312,21475,21477,21646,22036,22389,22434,23495,23943,24272,25084,25304,25937,26552,26601,27083,27472,27590,27628,27714,28317,28792,29399,29590,29699,30655,30697,31350,32127,32777,33276,33285,33290,33503,34914,35635,36092,36544,36881,37041,37476,37558,39378,39493,40169,40407,40860,22283,23616,33738,38816,38827,40628,21531,31384,32676,35033,36557,37089,22528,23624,25496,31391,23470,24339,31353,31406,33422,36524,20518,21048,21240,21367,22280,25331,25458,27402,28099,30519,21413,29527,34152,36470,38357,26426,27331,28528,35437,36556,39243,63750,26231,27512,36020,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,39740,63751,21483,22317,22862,25542,27131,29674,30789,31418,31429,31998,33909,35215,36211,36917,38312,21243,22343,30023,31584,33740,37406,63752,27224,20811,21067,21127,25119,26840,26997,38553,20677,21156,21220,25027,26020,26681,27135,29822,31563,33465,33771,35250,35641,36817,39241,63753,20170,22935,25810,26129,27278,29748,31105,31165,33449,34942,34943,35167,63754,37670,20235,21450,24613,25201,27762,32026,32102,20120,20834,30684,32943,20225,20238,20854,20864,21980,22120,22331,22522,22524,22804,22855,22931,23492,23696,23822,24049,24190,24524,25216,26071,26083,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,26398,26399,26462,26827,26820,27231,27450,27683,27773,27778,28103,29592,29734,29738,29826,29859,30072,30079,30849,30959,31041,31047,31048,31098,31637,32e3,32186,32648,32774,32813,32908,35352,35663,35912,36215,37665,37668,39138,39249,39438,39439,39525,40594,32202,20342,21513,25326,26708,37329,21931,20794,63755,63756,23068,25062,63757,25295,25343,63758,63759,63760,63761,63762,63763,37027,63764,63765,63766,63767,63768,35582,63769,63770,63771,63772,26262,63773,29014,63774,63775,38627,63776,25423,25466,21335,63777,26511,26976,28275,63778,30007,63779,63780,63781,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,32013,63782,63783,34930,22218,23064,63784,63785,63786,63787,63788,20035,63789,20839,22856,26608,32784,63790,22899,24180,25754,31178,24565,24684,25288,25467,23527,23511,21162,63791,22900,24361,24594,63792,63793,63794,29785,63795,63796,63797,63798,63799,63800,39377,63801,63802,63803,63804,63805,63806,63807,63808,63809,63810,63811,28611,63812,63813,33215,36786,24817,63814,63815,33126,63816,63817,23615,63818,63819,63820,63821,63822,63823,63824,63825,23273,35365,26491,32016,63826,63827,63828,63829,63830,63831,33021,63832,63833,23612,27877,21311,28346,22810,33590,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,20025,20150,20294,21934,22296,22727,24406,26039,26086,27264,27573,28237,30701,31471,31774,32222,34507,34962,37170,37723,25787,28606,29562,30136,36948,21846,22349,25018,25812,26311,28129,28251,28525,28601,30192,32835,33213,34113,35203,35527,35674,37663,27795,30035,31572,36367,36957,21776,22530,22616,24162,25095,25758,26848,30070,31958,34739,40680,20195,22408,22382,22823,23565,23729,24118,24453,25140,25825,29619,33274,34955,36024,38538,40667,23429,24503,24755,20498,20992,21040,22294,22581,22615,23566,23648,23798,23947,24230,24466,24764,25361,25481,25623,26691,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,26873,27330,28120,28193,28372,28644,29182,30428,30585,31153,31291,33796,35241,36077,36339,36424,36867,36884,36947,37117,37709,38518,38876,27602,28678,29272,29346,29544,30563,31167,31716,32411,35712,22697,24775,25958,26109,26302,27788,28958,29129,35930,38931,20077,31361,20189,20908,20941,21205,21516,24999,26481,26704,26847,27934,28540,30140,30643,31461,33012,33891,37509,20828,26007,26460,26515,30168,31431,33651,63834,35910,36887,38957,23663,33216,33434,36929,36975,37389,24471,23965,27225,29128,30331,31561,34276,35588,37159,39472,21895,25078,63835,30313,32645,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,34367,34746,35064,37007,63836,27931,28889,29662,32097,33853,63837,37226,39409,63838,20098,21365,27396,27410,28734,29211,34349,40478,21068,36771,23888,25829,25900,27414,28651,31811,32412,34253,35172,35261,25289,33240,34847,24266,26391,28010,29436,29701,29807,34690,37086,20358,23821,24480,33802,20919,25504,30053,20142,20486,20841,20937,26753,27153,31918,31921,31975,33391,35538,36635,37327,20406,20791,21237,21570,24300,24942,25150,26053,27354,28670,31018,34268,34851,38317,39522,39530,40599,40654,21147,26310,27511,28701,31019,36706,38722,24976,25088,25891,28451,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,29001,29833,32244,32879,34030,36646,36899,37706,20925,21015,21155,27916,28872,35010,24265,25986,27566,28610,31806,29557,20196,20278,22265,63839,23738,23994,24604,29618,31533,32666,32718,32838,36894,37428,38646,38728,38936,40801,20363,28583,31150,37300,38583,21214,63840,25736,25796,27347,28510,28696,29200,30439,32769,34310,34396,36335,36613,38706,39791,40442,40565,30860,31103,32160,33737,37636,40575,40595,35542,22751,24324,26407,28711,29903,31840,32894,20769,28712,29282,30922,36034,36058,36084,38647,20102,20698,23534,24278,26009,29134,30274,30637,32842,34044,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36988,39719,40845,22744,23105,23650,27155,28122,28431,30267,32047,32311,34078,35128,37860,38475,21129,26066,26611,27060,27969,28316,28687,29705,29792,30041,30244,30827,35628,39006,20845,25134,38520,20374,20523,23833,28138,32184,36650,24459,24900,26647,63841,38534,21202,32907,20956,20940,26974,31260,32190,33777,38517,20442,21033,21400,21519,21774,23653,24743,26446,26792,28012,29313,29432,29702,29827,63842,30178,31852,32633,32696,33673,35023,35041,37324,37328,38626,39881,21533,28542,29136,29848,34298,36522,38563,40023,40607,26519,28107,29747,33256,38678,30764,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,31435,31520,31890,25705,29802,30194,30908,30952,39340,39764,40635,23518,24149,28448,33180,33707,37e3,19975,21325,23081,24018,24398,24930,25405,26217,26364,28415,28459,28771,30622,33836,34067,34875,36627,39237,39995,21788,25273,26411,27819,33545,35178,38778,20129,22916,24536,24537,26395,32178,32596,33426,33579,33725,36638,37017,22475,22969,23186,23504,26151,26522,26757,27599,29028,32629,36023,36067,36993,39749,33032,35978,38476,39488,40613,23391,27667,29467,30450,30431,33804,20906,35219,20813,20885,21193,26825,27796,30468,30496,32191,32236,38754,40629,28357,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,34065,20901,21517,21629,26126,26269,26919,28319,30399,30609,33559,33986,34719,37225,37528,40180,34946,20398,20882,21215,22982,24125,24917,25720,25721,26286,26576,27169,27597,27611,29279,29281,29761,30520,30683,32791,33468,33541,35584,35624,35980,26408,27792,29287,30446,30566,31302,40361,27519,27794,22818,26406,33945,21359,22675,22937,24287,25551,26164,26483,28218,29483,31447,33495,37672,21209,24043,25006,25035,25098,25287,25771,26080,26969,27494,27595,28961,29687,30045,32326,33310,33538,34154,35491,36031,38695,40289,22696,40664,20497,21006,21563,21839,25991,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,27766,32010,32011,32862,34442,38272,38639,21247,27797,29289,21619,23194,23614,23883,24396,24494,26410,26806,26979,28220,28228,30473,31859,32654,34183,35598,36855,38753,40692,23735,24758,24845,25003,25935,26107,26108,27665,27887,29599,29641,32225,38292,23494,34588,35600,21085,21338,25293,25615,25778,26420,27192,27850,29632,29854,31636,31893,32283,33162,33334,34180,36843,38649,39361,20276,21322,21453,21467,25292,25644,25856,26001,27075,27886,28504,29677,30036,30242,30436,30460,30928,30971,31020,32070,33324,34784,36820,38930,39151,21187,25300,25765,28196,28497,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,30332,36299,37297,37474,39662,39747,20515,20621,22346,22952,23592,24135,24439,25151,25918,26041,26049,26121,26507,27036,28354,30917,32033,32938,33152,33323,33459,33953,34444,35370,35607,37030,38450,40848,20493,20467,63843,22521,24472,25308,25490,26479,28227,28953,30403,32972,32986,35060,35061,35097,36064,36649,37197,38506,20271,20336,24091,26575,26658,30333,30334,39748,24161,27146,29033,29140,30058,63844,32321,34115,34281,39132,20240,31567,32624,38309,20961,24070,26805,27710,27726,27867,29359,31684,33539,27861,29754,20731,21128,22721,25816,27287,29863,30294,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,30887,34327,38370,38713,63845,21342,24321,35722,36776,36783,37002,21029,30629,40009,40712,19993,20482,20853,23643,24183,26142,26170,26564,26821,28851,29953,30149,31177,31453,36647,39200,39432,20445,22561,22577,23542,26222,27493,27921,28282,28541,29668,29995,33769,35036,35091,35676,36628,20239,20693,21264,21340,23443,24489,26381,31119,33145,33583,34068,35079,35206,36665,36667,39333,39954,26412,20086,20472,22857,23553,23791,23792,25447,26834,28925,29090,29739,32299,34028,34562,36898,37586,40179,19981,20184,20463,20613,21078,21103,21542,21648,22496,22827,23142,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,23386,23413,23500,24220,63846,25206,25975,26023,28014,28325,29238,31526,31807,32566,33104,33105,33178,33344,33433,33705,35331,36e3,36070,36091,36212,36282,37096,37340,38428,38468,39385,40167,21271,20998,21545,22132,22707,22868,22894,24575,24996,25198,26128,27774,28954,30406,31881,31966,32027,33452,36033,38640,63847,20315,24343,24447,25282,23849,26379,26842,30844,32323,40300,19989,20633,21269,21290,21329,22915,23138,24199,24754,24970,25161,25209,26e3,26503,27047,27604,27606,27607,27608,27832,63848,29749,30202,30738,30865,31189,31192,31875,32203,32737,32933,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,33086,33218,33778,34586,35048,35513,35692,36027,37145,38750,39131,40763,22188,23338,24428,25996,27315,27567,27996,28657,28693,29277,29613,36007,36051,38971,24977,27703,32856,39425,20045,20107,20123,20181,20282,20284,20351,20447,20735,21490,21496,21766,21987,22235,22763,22882,23057,23531,23546,23556,24051,24107,24473,24605,25448,26012,26031,26614,26619,26797,27515,27801,27863,28195,28681,29509,30722,31038,31040,31072,31169,31721,32023,32114,32902,33293,33678,34001,34503,35039,35408,35422,35613,36060,36198,36781,37034,39164,39391,40605,21066,63849,26388,63850,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,20632,21034,23665,25955,27733,29642,29987,30109,31639,33948,37240,38704,20087,25746,27578,29022,34217,19977,63851,26441,26862,28183,33439,34072,34923,25591,28545,37394,39087,19978,20663,20687,20767,21830,21930,22039,23360,23577,23776,24120,24202,24224,24258,24819,26705,27233,28248,29245,29248,29376,30456,31077,31665,32724,35059,35316,35443,35937,36062,38684,22622,29885,36093,21959,63852,31329,32034,33394,29298,29983,29989,63853,31513,22661,22779,23996,24207,24246,24464,24661,25234,25471,25933,26257,26329,26360,26646,26866,29312,29790,31598,32110,32214,32626,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,32997,33298,34223,35199,35475,36893,37604,40653,40736,22805,22893,24109,24796,26132,26227,26512,27728,28101,28511,30707,30889,33990,37323,37675,20185,20682,20808,21892,23307,23459,25159,25982,26059,28210,29053,29697,29764,29831,29887,30316,31146,32218,32341,32680,33146,33203,33337,34330,34796,35445,36323,36984,37521,37925,39245,39854,21352,23633,26964,27844,27945,28203,33292,34203,35131,35373,35498,38634,40807,21089,26297,27570,32406,34814,36109,38275,38493,25885,28041,29166,63854,22478,22995,23468,24615,24826,25104,26143,26207,29481,29689,30427,30465,31596,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,32854,32882,33125,35488,37266,19990,21218,27506,27927,31237,31545,32048,63855,36016,21484,22063,22609,23477,23567,23569,24034,25152,25475,25620,26157,26803,27836,28040,28335,28703,28836,29138,29990,30095,30094,30233,31505,31712,31787,32032,32057,34092,34157,34311,35380,36877,36961,37045,37559,38902,39479,20439,23660,26463,28049,31903,32396,35606,36118,36895,23403,24061,25613,33984,36956,39137,29575,23435,24730,26494,28126,35359,35494,36865,38924,21047,63856,28753,30862,37782,34928,37335,20462,21463,22013,22234,22402,22781,23234,23432,23723,23744,24101,24833,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,25101,25163,25480,25628,25910,25976,27193,27530,27700,27929,28465,29159,29417,29560,29703,29874,30246,30561,31168,31319,31466,31929,32143,32172,32353,32670,33065,33585,33936,34010,34282,34966,35504,35728,36664,36930,36995,37228,37526,37561,38539,38567,38568,38614,38656,38920,39318,39635,39706,21460,22654,22809,23408,23487,28113,28506,29087,29729,29881,32901,33789,24033,24455,24490,24642,26092,26642,26991,27219,27529,27957,28147,29667,30462,30636,31565,32020,33059,33308,33600,34036,34147,35426,35524,37255,37662,38918,39348,25100,34899,36848,37477,23815,23847,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,23913,29791,33181,34664,28629,25342,32722,35126,35186,19998,20056,20711,21213,21319,25215,26119,32361,34821,38494,20365,21273,22070,22987,23204,23608,23630,23629,24066,24337,24643,26045,26159,26178,26558,26612,29468,30690,31034,32709,33940,33997,35222,35430,35433,35553,35925,35962,22516,23508,24335,24687,25325,26893,27542,28252,29060,31698,34645,35672,36606,39135,39166,20280,20353,20449,21627,23072,23480,24892,26032,26216,29180,30003,31070,32051,33102,33251,33688,34218,34254,34563,35338,36523,36763,63857,36805,22833,23460,23526,24713,23529,23563,24515,27777,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,63858,28145,28683,29978,33455,35574,20160,21313,63859,38617,27663,20126,20420,20818,21854,23077,23784,25105,29273,33469,33706,34558,34905,35357,38463,38597,39187,40201,40285,22538,23731,23997,24132,24801,24853,25569,27138,28197,37122,37716,38990,39952,40823,23433,23736,25353,26191,26696,30524,38593,38797,38996,39839,26017,35585,36555,38332,21813,23721,24022,24245,26263,30284,33780,38343,22739,25276,29390,40232,20208,22830,24591,26171,27523,31207,40230,21395,21696,22467,23830,24859,26326,28079,30861,33406,38552,38724,21380,25212,25494,28082,32266,33099,38989,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,27387,32588,40367,40474,20063,20539,20918,22812,24825,25590,26928,29242,32822,63860,37326,24369,63861,63862,32004,33509,33903,33979,34277,36493,63863,20335,63864,63865,22756,23363,24665,25562,25880,25965,26264,63866,26954,27171,27915,28673,29036,30162,30221,31155,31344,63867,32650,63868,35140,63869,35731,37312,38525,63870,39178,22276,24481,26044,28417,30208,31142,35486,39341,39770,40812,20740,25014,25233,27277,33222,20547,22576,24422,28937,35328,35578,23420,34326,20474,20796,22196,22852,25513,28153,23978,26989,20870,20104,20313,63871,63872,63873,22914,63874,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,63875,27487,27741,63876,29877,30998,63877,33287,33349,33593,36671,36701,63878,39192,63879,63880,63881,20134,63882,22495,24441,26131,63883,63884,30123,32377,35695,63885,36870,39515,22181,22567,23032,23071,23476,63886,24310,63887,63888,25424,25403,63889,26941,27783,27839,28046,28051,28149,28436,63890,28895,28982,29017,63891,29123,29141,63892,30799,30831,63893,31605,32227,63894,32303,63895,34893,36575,63896,63897,63898,37467,63899,40182,63900,63901,63902,24709,28037,63903,29105,63904,63905,38321,21421,63906,63907,63908,26579,63909,28814,28976,29744,33398,33490,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,63910,38331,39653,40573,26308,63911,29121,33865,63912,63913,22603,63914,63915,23992,24433,63916,26144,26254,27001,27054,27704,27891,28214,28481,28634,28699,28719,29008,29151,29552,63917,29787,63918,29908,30408,31310,32403,63919,63920,33521,35424,36814,63921,37704,63922,38681,63923,63924,20034,20522,63925,21e3,21473,26355,27757,28618,29450,30591,31330,33454,34269,34306,63926,35028,35427,35709,35947,63927,37555,63928,38675,38928,20116,20237,20425,20658,21320,21566,21555,21978,22626,22714,22887,23067,23524,24735,63929,25034,25942,26111,26212,26791,27738,28595,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,28879,29100,29522,31613,34568,35492,39986,40711,23627,27779,29508,29577,37434,28331,29797,30239,31337,32277,34314,20800,22725,25793,29934,29973,30320,32705,37013,38605,39252,28198,29926,31401,31402,33253,34521,34680,35355,23113,23436,23451,26785,26880,28003,29609,29715,29740,30871,32233,32747,33048,33109,33694,35916,38446,38929,26352,24448,26106,26505,27754,29579,20525,23043,27498,30702,22806,23916,24013,29477,30031,63930,63931,20709,20985,22575,22829,22934,23002,23525,63932,63933,23970,25303,25622,25747,25854,63934,26332,63935,27208,63936,29183,29796,63937,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,31368,31407,32327,32350,32768,33136,63938,34799,35201,35616,36953,63939,36992,39250,24958,27442,28020,32287,35109,36785,20433,20653,20887,21191,22471,22665,23481,24248,24898,27029,28044,28263,28342,29076,29794,29992,29996,32883,33592,33993,36362,37780,37854,63940,20110,20305,20598,20778,21448,21451,21491,23431,23507,23588,24858,24962,26100,29275,29591,29760,30402,31056,31121,31161,32006,32701,33419,34261,34398,36802,36935,37109,37354,38533,38632,38633,21206,24423,26093,26161,26671,29020,31286,37057,38922,20113,63941,27218,27550,28560,29065,32792,33464,34131,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36939,38549,38642,38907,34074,39729,20112,29066,38596,20803,21407,21729,22291,22290,22435,23195,23236,23491,24616,24895,25588,27781,27961,28274,28304,29232,29503,29783,33489,34945,36677,36960,63942,38498,39e3,40219,26376,36234,37470,20301,20553,20702,21361,22285,22996,23041,23561,24944,26256,28205,29234,29771,32239,32963,33806,33894,34111,34655,34907,35096,35586,36949,38859,39759,20083,20369,20754,20842,63943,21807,21929,23418,23461,24188,24189,24254,24736,24799,24840,24841,25540,25912,26377,63944,26580,26586,63945,26977,26978,27833,27943,63946,28216,63947,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,28641,29494,29495,63948,29788,30001,63949,30290,63950,63951,32173,33278,33848,35029,35480,35547,35565,36400,36418,36938,36926,36986,37193,37321,37742,63952,63953,22537,63954,27603,32905,32946,63955,63956,20801,22891,23609,63957,63958,28516,29607,32996,36103,63959,37399,38287,63960,63961,63962,63963,32895,25102,28700,32104,34701,63964,22432,24681,24903,27575,35518,37504,38577,20057,21535,28139,34093,38512,38899,39150,25558,27875,37009,20957,25033,33210,40441,20381,20506,20736,23452,24847,25087,25836,26885,27589,30097,30691,32681,33380,34191,34811,34915,35516,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,35696,37291,20108,20197,20234,63965,63966,22839,23016,63967,24050,24347,24411,24609,63968,63969,63970,63971,29246,29669,63972,30064,30157,63973,31227,63974,32780,32819,32900,33505,33617,63975,63976,36029,36019,36999,63977,63978,39156,39180,63979,63980,28727,30410,32714,32716,32764,35610,20154,20161,20995,21360,63981,21693,22240,23035,23493,24341,24525,28270,63982,63983,32106,33589,63984,34451,35469,63985,38765,38775,63986,63987,19968,20314,20350,22777,26085,28322,36920,37808,39353,20219,22764,22922,23001,24641,63988,63989,31252,63990,33615,36035,20837,21316,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,63991,63992,63993,20173,21097,23381,33471,20180,21050,21672,22985,23039,23376,23383,23388,24675,24904,28363,28825,29038,29574,29943,30133,30913,32043,32773,33258,33576,34071,34249,35566,36039,38604,20316,21242,22204,26027,26152,28796,28856,29237,32189,33421,37196,38592,40306,23409,26855,27544,28538,30430,23697,26283,28507,31668,31786,34870,38620,19976,20183,21280,22580,22715,22767,22892,23559,24115,24196,24373,25484,26290,26454,27167,27299,27404,28479,29254,63994,29520,29835,31456,31911,33144,33247,33255,33674,33900,34083,34196,34255,35037,36115,37292,38263,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,38556,20877,21705,22312,23472,25165,26448,26685,26771,28221,28371,28797,32289,35009,36001,36617,40779,40782,29229,31631,35533,37658,20295,20302,20786,21632,22992,24213,25269,26485,26990,27159,27822,28186,29401,29482,30141,31672,32053,33511,33785,33879,34295,35419,36015,36487,36889,37048,38606,40799,21219,21514,23265,23490,25688,25973,28404,29380,63995,30340,31309,31515,31821,32318,32735,33659,35627,36042,36196,36321,36447,36842,36857,36969,37841,20291,20346,20659,20840,20856,21069,21098,22625,22652,22880,23560,23637,24283,24731,25136,26643,27583,27656,28593,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,29006,29728,3e4,30008,30033,30322,31564,31627,31661,31686,32399,35438,36670,36681,37439,37523,37666,37931,38651,39002,39019,39198,20999,25130,25240,27993,30308,31434,31680,32118,21344,23742,24215,28472,28857,31896,38673,39822,40670,25509,25722,34678,19969,20117,20141,20572,20597,21576,22979,23450,24128,24237,24311,24449,24773,25402,25919,25972,26060,26230,26232,26622,26984,27273,27491,27712,28096,28136,28191,28254,28702,28833,29582,29693,30010,30555,30855,31118,31243,31357,31934,32142,33351,35330,35562,35998,37165,37194,37336,37478,37580,37664,38662,38742,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,38748,38914,40718,21046,21137,21884,22564,24093,24351,24716,25552,26799,28639,31085,31532,33229,34234,35069,35576,36420,37261,38500,38555,38717,38988,40778,20430,20806,20939,21161,22066,24340,24427,25514,25805,26089,26177,26362,26361,26397,26781,26839,27133,28437,28526,29031,29157,29226,29866,30522,31062,31066,31199,31264,31381,31895,31967,32068,32368,32903,34299,34468,35412,35519,36249,36481,36896,36973,37347,38459,38613,40165,26063,31751,36275,37827,23384,23562,21330,25305,29469,20519,23447,24478,24752,24939,26837,28121,29742,31278,32066,32156,32305,33131,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36394,36405,37758,37912,20304,22352,24038,24231,25387,32618,20027,20303,20367,20570,23005,32964,21610,21608,22014,22863,23449,24030,24282,26205,26417,26609,26666,27880,27954,28234,28557,28855,29664,30087,31820,32002,32044,32162,33311,34523,35387,35461,36208,36490,36659,36913,37198,37202,37956,39376,31481,31909,20426,20737,20934,22472,23535,23803,26201,27197,27994,28310,28652,28940,30063,31459,34850,36897,36981,38603,39423,33537,20013,20210,34886,37325,21373,27355,26987,27713,33914,22686,24974,26366,25327,28893,29969,30151,32338,33976,35657,36104,20043,21482,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21675,22320,22336,24535,25345,25351,25711,25903,26088,26234,26525,26547,27490,27744,27802,28460,30693,30757,31049,31063,32025,32930,33026,33267,33437,33463,34584,35468,63996,36100,36286,36978,30452,31257,31287,32340,32887,21767,21972,22645,25391,25634,26185,26187,26733,27035,27524,27941,28337,29645,29800,29857,30043,30137,30433,30494,30603,31206,32265,32285,33275,34095,34967,35386,36049,36587,36784,36914,37805,38499,38515,38663,20356,21489,23018,23241,24089,26702,29894,30142,31209,31378,33187,34541,36074,36300,36845,26015,26389,63997,22519,28503,32221,36655,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,37878,38598,24501,25074,28548,19988,20376,20511,21449,21983,23919,24046,27425,27492,30923,31642,63998,36425,36554,36974,25417,25662,30528,31364,37679,38015,40810,25776,28591,29158,29864,29914,31428,31762,32386,31922,32408,35738,36106,38013,39184,39244,21049,23519,25830,26413,32046,20717,21443,22649,24920,24921,25082,26028,31449,35730,35734,20489,20513,21109,21809,23100,24288,24432,24884,25950,26124,26166,26274,27085,28356,28466,29462,30241,31379,33081,33369,33750,33980,20661,22512,23488,23528,24425,25505,30758,32181,33756,34081,37319,37365,20874,26613,31574,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36012,20932,22971,24765,34389,20508,63999,21076,23610,24957,25114,25299,25842,26021,28364,30240,33034,36448,38495,38587,20191,21315,21912,22825,24029,25797,27849,28154,29588,31359,33307,34214,36068,36368,36983,37351,38369,38433,38854,20984,21746,21894,24505,25764,28552,32180,36639,36685,37941,20681,23574,27838,28155,29979,30651,31805,31844,35449,35522,22558,22974,24086,25463,29266,30090,30571,35548,36028,36626,24307,26228,28152,32893,33729,35531,38737,39894,64e3,21059,26367,28053,28399,32224,35558,36910,36958,39636,21021,21119,21736,24980,25220,25307,26786,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,26898,26970,27189,28818,28966,30813,30977,30990,31186,31245,32918,33400,33493,33609,34121,35970,36229,37218,37259,37294,20419,22225,29165,30679,34560,35320,23544,24534,26449,37032,21474,22618,23541,24740,24961,25696,32317,32880,34085,37507,25774,20652,23828,26368,22684,25277,25512,26894,27e3,27166,28267,30394,31179,33467,33833,35535,36264,36861,37138,37195,37276,37648,37656,37786,38619,39478,39949,19985,30044,31069,31482,31569,31689,32302,33988,36441,36468,36600,36880,26149,26943,29763,20986,26414,40668,20805,24544,27798,34802,34909,34935,24756,33205,33795,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36101,21462,21561,22068,23094,23601,28810,32736,32858,33030,33261,36259,37257,39519,40434,20596,20164,21408,24827,28204,23652,20360,20516,21988,23769,24159,24677,26772,27835,28100,29118,30164,30196,30305,31258,31305,32199,32251,32622,33268,34473,36636,38601,39347,40786,21063,21189,39149,35242,19971,26578,28422,20405,23522,26517,27784,28024,29723,30759,37341,37756,34756,31204,31281,24555,20182,21668,21822,22702,22949,24816,25171,25302,26422,26965,33333,38464,39345,39389,20524,21331,21828,22396,64001,25176,64002,25826,26219,26589,28609,28655,29730,29752,35351,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,37944,21585,22022,22374,24392,24986,27470,28760,28845,32187,35477,22890,33067,25506,30472,32829,36010,22612,25645,27067,23445,24081,28271,64003,34153,20812,21488,22826,24608,24907,27526,27760,27888,31518,32974,33492,36294,37040,39089,64004,25799,28580,25745,25860,20814,21520,22303,35342,24927,26742,64005,30171,31570,32113,36890,22534,27084,33151,35114,36864,38969,20600,22871,22956,25237,36879,39722,24925,29305,38358,22369,23110,24052,25226,25773,25850,26487,27874,27966,29228,29750,30772,32631,33453,36315,38935,21028,22338,26495,29256,29923,36009,36774,37393,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,38442,20843,21485,25420,20329,21764,24726,25943,27803,28031,29260,29437,31255,35207,35997,24429,28558,28921,33192,24846,20415,20559,25153,29255,31687,32232,32745,36941,38829,39449,36022,22378,24179,26544,33805,35413,21536,23318,24163,24290,24330,25987,32954,34109,38281,38491,20296,21253,21261,21263,21638,21754,22275,24067,24598,25243,25265,25429,64006,27873,28006,30129,30770,32990,33071,33502,33889,33970,34957,35090,36875,37610,39165,39825,24133,26292,26333,28689,29190,64007,20469,21117,24426,24915,26451,27161,28418,29922,31080,34920,35961,39111,39108,39491,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21697,31263,26963,35575,35914,39080,39342,24444,25259,30130,30382,34987,36991,38466,21305,24380,24517,27852,29644,30050,30091,31558,33534,39325,20047,36924,19979,20309,21414,22799,24264,26160,27827,29781,33655,34662,36032,36944,38686,39957,22737,23416,34384,35604,40372,23506,24680,24717,26097,27735,28450,28579,28698,32597,32752,38289,38290,38480,38867,21106,36676,20989,21547,21688,21859,21898,27323,28085,32216,33382,37532,38519,40569,21512,21704,30418,34532,38308,38356,38492,20130,20233,23022,23270,24055,24658,25239,26477,26689,27782,28207,32568,32923,33322,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,64008,64009,38917,20133,20565,21683,22419,22874,23401,23475,25032,26999,28023,28707,34809,35299,35442,35559,36994,39405,39608,21182,26680,20502,24184,26447,33607,34892,20139,21521,22190,29670,37141,38911,39177,39255,39321,22099,22687,34395,35377,25010,27382,29563,36562,27463,38570,39511,22869,29184,36203,38761,20436,23796,24358,25080,26203,27883,28843,29572,29625,29694,30505,30541,32067,32098,32291,33335,34898,64010,36066,37449,39023,23377,31348,34880,38913,23244,20448,21332,22846,23805,25406,28025,29433,33029,33031,33698,37583,38960,20136,20804,21009,22411,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,24418,27842,28366,28677,28752,28847,29074,29673,29801,33610,34722,34913,36872,37026,37795,39336,20846,24407,24800,24935,26291,34137,36426,37295,38795,20046,20114,21628,22741,22778,22909,23733,24359,25142,25160,26122,26215,27627,28009,28111,28246,28408,28564,28640,28649,28765,29392,29733,29786,29920,30355,31068,31946,32286,32993,33446,33899,33983,34382,34399,34676,35703,35946,37804,38912,39013,24785,25110,37239,23130,26127,28151,28222,29759,39746,24573,24794,31503,21700,24344,27742,27859,27946,28888,32005,34425,35340,40251,21270,21644,23301,27194,28779,30069,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,31117,31166,33457,33775,35441,35649,36008,38772,64011,25844,25899,30906,30907,31339,20024,21914,22864,23462,24187,24739,25563,27489,26213,26707,28185,29029,29872,32008,36996,39529,39973,27963,28369,29502,35905,38346,20976,24140,24488,24653,24822,24880,24908,26179,26180,27045,27841,28255,28361,28514,29004,29852,30343,31681,31783,33618,34647,36945,38541,40643,21295,22238,24315,24458,24674,24724,25079,26214,26371,27292,28142,28590,28784,29546,32362,33214,33588,34516,35496,36036,21123,29554,23446,27243,37892,21742,22150,23389,25928,25989,26313,26783,28045,28102,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,29243,32948,37237,39501,20399,20505,21402,21518,21564,21897,21957,24127,24460,26429,29030,29661,36869,21211,21235,22628,22734,28932,29071,29179,34224,35347,26248,34216,21927,26244,29002,33841,21321,21913,27585,24409,24509,25582,26249,28999,35569,36637,40638,20241,25658,28875,30054,34407,24676,35662,40440,20807,20982,21256,27958,33016,40657,26133,27427,28824,30165,21507,23673,32007,35350,27424,27453,27462,21560,24688,27965,32725,33288,20694,20958,21916,22123,22221,23020,23305,24076,24985,24984,25137,26206,26342,29081,29113,29114,29351,31143,31232,32690,35440,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],
gb18030:[19970,19972,19973,19974,19983,19986,19991,19999,2e4,20001,20003,20006,20009,20014,20015,20017,20019,20021,20023,20028,20032,20033,20034,20036,20038,20042,20049,20053,20055,20058,20059,20066,20067,20068,20069,20071,20072,20074,20075,20076,20077,20078,20079,20082,20084,20085,20086,20087,20088,20089,20090,20091,20092,20093,20095,20096,20097,20098,20099,20100,20101,20103,20106,20112,20118,20119,20121,20124,20125,20126,20131,20138,20143,20144,20145,20148,20150,20151,20152,20153,20156,20157,20158,20168,20172,20175,20176,20178,20186,20187,20188,20192,20194,20198,20199,20201,20205,20206,20207,20209,20212,20216,20217,20218,20220,20222,20224,20226,20227,20228,20229,20230,20231,20232,20235,20236,20242,20243,20244,20245,20246,20252,20253,20257,20259,20264,20265,20268,20269,20270,20273,20275,20277,20279,20281,20283,20286,20287,20288,20289,20290,20292,20293,20295,20296,20297,20298,20299,20300,20306,20308,20310,20321,20322,20326,20328,20330,20331,20333,20334,20337,20338,20341,20343,20344,20345,20346,20349,20352,20353,20354,20357,20358,20359,20362,20364,20366,20368,20370,20371,20373,20374,20376,20377,20378,20380,20382,20383,20385,20386,20388,20395,20397,20400,20401,20402,20403,20404,20406,20407,20408,20409,20410,20411,20412,20413,20414,20416,20417,20418,20422,20423,20424,20425,20427,20428,20429,20434,20435,20436,20437,20438,20441,20443,20448,20450,20452,20453,20455,20459,20460,20464,20466,20468,20469,20470,20471,20473,20475,20476,20477,20479,20480,20481,20482,20483,20484,20485,20486,20487,20488,20489,20490,20491,20494,20496,20497,20499,20501,20502,20503,20507,20509,20510,20512,20514,20515,20516,20519,20523,20527,20528,20529,20530,20531,20532,20533,20534,20535,20536,20537,20539,20541,20543,20544,20545,20546,20548,20549,20550,20553,20554,20555,20557,20560,20561,20562,20563,20564,20566,20567,20568,20569,20571,20573,20574,20575,20576,20577,20578,20579,20580,20582,20583,20584,20585,20586,20587,20589,20590,20591,20592,20593,20594,20595,20596,20597,20600,20601,20602,20604,20605,20609,20610,20611,20612,20614,20615,20617,20618,20619,20620,20622,20623,20624,20625,20626,20627,20628,20629,20630,20631,20632,20633,20634,20635,20636,20637,20638,20639,20640,20641,20642,20644,20646,20650,20651,20653,20654,20655,20656,20657,20659,20660,20661,20662,20663,20664,20665,20668,20669,20670,20671,20672,20673,20674,20675,20676,20677,20678,20679,20680,20681,20682,20683,20684,20685,20686,20688,20689,20690,20691,20692,20693,20695,20696,20697,20699,20700,20701,20702,20703,20704,20705,20706,20707,20708,20709,20712,20713,20714,20715,20719,20720,20721,20722,20724,20726,20727,20728,20729,20730,20732,20733,20734,20735,20736,20737,20738,20739,20740,20741,20744,20745,20746,20748,20749,20750,20751,20752,20753,20755,20756,20757,20758,20759,20760,20761,20762,20763,20764,20765,20766,20767,20768,20770,20771,20772,20773,20774,20775,20776,20777,20778,20779,20780,20781,20782,20783,20784,20785,20786,20787,20788,20789,20790,20791,20792,20793,20794,20795,20796,20797,20798,20802,20807,20810,20812,20814,20815,20816,20818,20819,20823,20824,20825,20827,20829,20830,20831,20832,20833,20835,20836,20838,20839,20841,20842,20847,20850,20858,20862,20863,20867,20868,20870,20871,20874,20875,20878,20879,20880,20881,20883,20884,20888,20890,20893,20894,20895,20897,20899,20902,20903,20904,20905,20906,20909,20910,20916,20920,20921,20922,20926,20927,20929,20930,20931,20933,20936,20938,20941,20942,20944,20946,20947,20948,20949,20950,20951,20952,20953,20954,20956,20958,20959,20962,20963,20965,20966,20967,20968,20969,20970,20972,20974,20977,20978,20980,20983,20990,20996,20997,21001,21003,21004,21007,21008,21011,21012,21013,21020,21022,21023,21025,21026,21027,21029,21030,21031,21034,21036,21039,21041,21042,21044,21045,21052,21054,21060,21061,21062,21063,21064,21065,21067,21070,21071,21074,21075,21077,21079,21080,21081,21082,21083,21085,21087,21088,21090,21091,21092,21094,21096,21099,21100,21101,21102,21104,21105,21107,21108,21109,21110,21111,21112,21113,21114,21115,21116,21118,21120,21123,21124,21125,21126,21127,21129,21130,21131,21132,21133,21134,21135,21137,21138,21140,21141,21142,21143,21144,21145,21146,21148,21156,21157,21158,21159,21166,21167,21168,21172,21173,21174,21175,21176,21177,21178,21179,21180,21181,21184,21185,21186,21188,21189,21190,21192,21194,21196,21197,21198,21199,21201,21203,21204,21205,21207,21209,21210,21211,21212,21213,21214,21216,21217,21218,21219,21221,21222,21223,21224,21225,21226,21227,21228,21229,21230,21231,21233,21234,21235,21236,21237,21238,21239,21240,21243,21244,21245,21249,21250,21251,21252,21255,21257,21258,21259,21260,21262,21265,21266,21267,21268,21272,21275,21276,21278,21279,21282,21284,21285,21287,21288,21289,21291,21292,21293,21295,21296,21297,21298,21299,21300,21301,21302,21303,21304,21308,21309,21312,21314,21316,21318,21323,21324,21325,21328,21332,21336,21337,21339,21341,21349,21352,21354,21356,21357,21362,21366,21369,21371,21372,21373,21374,21376,21377,21379,21383,21384,21386,21390,21391,21392,21393,21394,21395,21396,21398,21399,21401,21403,21404,21406,21408,21409,21412,21415,21418,21419,21420,21421,21423,21424,21425,21426,21427,21428,21429,21431,21432,21433,21434,21436,21437,21438,21440,21443,21444,21445,21446,21447,21454,21455,21456,21458,21459,21461,21466,21468,21469,21470,21473,21474,21479,21492,21498,21502,21503,21504,21506,21509,21511,21515,21524,21528,21529,21530,21532,21538,21540,21541,21546,21552,21555,21558,21559,21562,21565,21567,21569,21570,21572,21573,21575,21577,21580,21581,21582,21583,21585,21594,21597,21598,21599,21600,21601,21603,21605,21607,21609,21610,21611,21612,21613,21614,21615,21616,21620,21625,21626,21630,21631,21633,21635,21637,21639,21640,21641,21642,21645,21649,21651,21655,21656,21660,21662,21663,21664,21665,21666,21669,21678,21680,21682,21685,21686,21687,21689,21690,21692,21694,21699,21701,21706,21707,21718,21720,21723,21728,21729,21730,21731,21732,21739,21740,21743,21744,21745,21748,21749,21750,21751,21752,21753,21755,21758,21760,21762,21763,21764,21765,21768,21770,21771,21772,21773,21774,21778,21779,21781,21782,21783,21784,21785,21786,21788,21789,21790,21791,21793,21797,21798,21800,21801,21803,21805,21810,21812,21813,21814,21816,21817,21818,21819,21821,21824,21826,21829,21831,21832,21835,21836,21837,21838,21839,21841,21842,21843,21844,21847,21848,21849,21850,21851,21853,21854,21855,21856,21858,21859,21864,21865,21867,21871,21872,21873,21874,21875,21876,21881,21882,21885,21887,21893,21894,21900,21901,21902,21904,21906,21907,21909,21910,21911,21914,21915,21918,21920,21921,21922,21923,21924,21925,21926,21928,21929,21930,21931,21932,21933,21934,21935,21936,21938,21940,21942,21944,21946,21948,21951,21952,21953,21954,21955,21958,21959,21960,21962,21963,21966,21967,21968,21973,21975,21976,21977,21978,21979,21982,21984,21986,21991,21993,21997,21998,22e3,22001,22004,22006,22008,22009,22010,22011,22012,22015,22018,22019,22020,22021,22022,22023,22026,22027,22029,22032,22033,22034,22035,22036,22037,22038,22039,22041,22042,22044,22045,22048,22049,22050,22053,22054,22056,22057,22058,22059,22062,22063,22064,22067,22069,22071,22072,22074,22076,22077,22078,22080,22081,22082,22083,22084,22085,22086,22087,22088,22089,22090,22091,22095,22096,22097,22098,22099,22101,22102,22106,22107,22109,22110,22111,22112,22113,22115,22117,22118,22119,22125,22126,22127,22128,22130,22131,22132,22133,22135,22136,22137,22138,22141,22142,22143,22144,22145,22146,22147,22148,22151,22152,22153,22154,22155,22156,22157,22160,22161,22162,22164,22165,22166,22167,22168,22169,22170,22171,22172,22173,22174,22175,22176,22177,22178,22180,22181,22182,22183,22184,22185,22186,22187,22188,22189,22190,22192,22193,22194,22195,22196,22197,22198,22200,22201,22202,22203,22205,22206,22207,22208,22209,22210,22211,22212,22213,22214,22215,22216,22217,22219,22220,22221,22222,22223,22224,22225,22226,22227,22229,22230,22232,22233,22236,22243,22245,22246,22247,22248,22249,22250,22252,22254,22255,22258,22259,22262,22263,22264,22267,22268,22272,22273,22274,22277,22279,22283,22284,22285,22286,22287,22288,22289,22290,22291,22292,22293,22294,22295,22296,22297,22298,22299,22301,22302,22304,22305,22306,22308,22309,22310,22311,22315,22321,22322,22324,22325,22326,22327,22328,22332,22333,22335,22337,22339,22340,22341,22342,22344,22345,22347,22354,22355,22356,22357,22358,22360,22361,22370,22371,22373,22375,22380,22382,22384,22385,22386,22388,22389,22392,22393,22394,22397,22398,22399,22400,22401,22407,22408,22409,22410,22413,22414,22415,22416,22417,22420,22421,22422,22423,22424,22425,22426,22428,22429,22430,22431,22437,22440,22442,22444,22447,22448,22449,22451,22453,22454,22455,22457,22458,22459,22460,22461,22462,22463,22464,22465,22468,22469,22470,22471,22472,22473,22474,22476,22477,22480,22481,22483,22486,22487,22491,22492,22494,22497,22498,22499,22501,22502,22503,22504,22505,22506,22507,22508,22510,22512,22513,22514,22515,22517,22518,22519,22523,22524,22526,22527,22529,22531,22532,22533,22536,22537,22538,22540,22542,22543,22544,22546,22547,22548,22550,22551,22552,22554,22555,22556,22557,22559,22562,22563,22565,22566,22567,22568,22569,22571,22572,22573,22574,22575,22577,22578,22579,22580,22582,22583,22584,22585,22586,22587,22588,22589,22590,22591,22592,22593,22594,22595,22597,22598,22599,22600,22601,22602,22603,22606,22607,22608,22610,22611,22613,22614,22615,22617,22618,22619,22620,22621,22623,22624,22625,22626,22627,22628,22630,22631,22632,22633,22634,22637,22638,22639,22640,22641,22642,22643,22644,22645,22646,22647,22648,22649,22650,22651,22652,22653,22655,22658,22660,22662,22663,22664,22666,22667,22668,22669,22670,22671,22672,22673,22676,22677,22678,22679,22680,22683,22684,22685,22688,22689,22690,22691,22692,22693,22694,22695,22698,22699,22700,22701,22702,22703,22704,22705,22706,22707,22708,22709,22710,22711,22712,22713,22714,22715,22717,22718,22719,22720,22722,22723,22724,22726,22727,22728,22729,22730,22731,22732,22733,22734,22735,22736,22738,22739,22740,22742,22743,22744,22745,22746,22747,22748,22749,22750,22751,22752,22753,22754,22755,22757,22758,22759,22760,22761,22762,22765,22767,22769,22770,22772,22773,22775,22776,22778,22779,22780,22781,22782,22783,22784,22785,22787,22789,22790,22792,22793,22794,22795,22796,22798,22800,22801,22802,22803,22807,22808,22811,22813,22814,22816,22817,22818,22819,22822,22824,22828,22832,22834,22835,22837,22838,22843,22845,22846,22847,22848,22851,22853,22854,22858,22860,22861,22864,22866,22867,22873,22875,22876,22877,22878,22879,22881,22883,22884,22886,22887,22888,22889,22890,22891,22892,22893,22894,22895,22896,22897,22898,22901,22903,22906,22907,22908,22910,22911,22912,22917,22921,22923,22924,22926,22927,22928,22929,22932,22933,22936,22938,22939,22940,22941,22943,22944,22945,22946,22950,22951,22956,22957,22960,22961,22963,22964,22965,22966,22967,22968,22970,22972,22973,22975,22976,22977,22978,22979,22980,22981,22983,22984,22985,22988,22989,22990,22991,22997,22998,23001,23003,23006,23007,23008,23009,23010,23012,23014,23015,23017,23018,23019,23021,23022,23023,23024,23025,23026,23027,23028,23029,23030,23031,23032,23034,23036,23037,23038,23040,23042,23050,23051,23053,23054,23055,23056,23058,23060,23061,23062,23063,23065,23066,23067,23069,23070,23073,23074,23076,23078,23079,23080,23082,23083,23084,23085,23086,23087,23088,23091,23093,23095,23096,23097,23098,23099,23101,23102,23103,23105,23106,23107,23108,23109,23111,23112,23115,23116,23117,23118,23119,23120,23121,23122,23123,23124,23126,23127,23128,23129,23131,23132,23133,23134,23135,23136,23137,23139,23140,23141,23142,23144,23145,23147,23148,23149,23150,23151,23152,23153,23154,23155,23160,23161,23163,23164,23165,23166,23168,23169,23170,23171,23172,23173,23174,23175,23176,23177,23178,23179,23180,23181,23182,23183,23184,23185,23187,23188,23189,23190,23191,23192,23193,23196,23197,23198,23199,23200,23201,23202,23203,23204,23205,23206,23207,23208,23209,23211,23212,23213,23214,23215,23216,23217,23220,23222,23223,23225,23226,23227,23228,23229,23231,23232,23235,23236,23237,23238,23239,23240,23242,23243,23245,23246,23247,23248,23249,23251,23253,23255,23257,23258,23259,23261,23262,23263,23266,23268,23269,23271,23272,23274,23276,23277,23278,23279,23280,23282,23283,23284,23285,23286,23287,23288,23289,23290,23291,23292,23293,23294,23295,23296,23297,23298,23299,23300,23301,23302,23303,23304,23306,23307,23308,23309,23310,23311,23312,23313,23314,23315,23316,23317,23320,23321,23322,23323,23324,23325,23326,23327,23328,23329,23330,23331,23332,23333,23334,23335,23336,23337,23338,23339,23340,23341,23342,23343,23344,23345,23347,23349,23350,23352,23353,23354,23355,23356,23357,23358,23359,23361,23362,23363,23364,23365,23366,23367,23368,23369,23370,23371,23372,23373,23374,23375,23378,23382,23390,23392,23393,23399,23400,23403,23405,23406,23407,23410,23412,23414,23415,23416,23417,23419,23420,23422,23423,23426,23430,23434,23437,23438,23440,23441,23442,23444,23446,23455,23463,23464,23465,23468,23469,23470,23471,23473,23474,23479,23482,23483,23484,23488,23489,23491,23496,23497,23498,23499,23501,23502,23503,23505,23508,23509,23510,23511,23512,23513,23514,23515,23516,23520,23522,23523,23526,23527,23529,23530,23531,23532,23533,23535,23537,23538,23539,23540,23541,23542,23543,23549,23550,23552,23554,23555,23557,23559,23560,23563,23564,23565,23566,23568,23570,23571,23575,23577,23579,23582,23583,23584,23585,23587,23590,23592,23593,23594,23595,23597,23598,23599,23600,23602,23603,23605,23606,23607,23619,23620,23622,23623,23628,23629,23634,23635,23636,23638,23639,23640,23642,23643,23644,23645,23647,23650,23652,23655,23656,23657,23658,23659,23660,23661,23664,23666,23667,23668,23669,23670,23671,23672,23675,23676,23677,23678,23680,23683,23684,23685,23686,23687,23689,23690,23691,23694,23695,23698,23699,23701,23709,23710,23711,23712,23713,23716,23717,23718,23719,23720,23722,23726,23727,23728,23730,23732,23734,23737,23738,23739,23740,23742,23744,23746,23747,23749,23750,23751,23752,23753,23754,23756,23757,23758,23759,23760,23761,23763,23764,23765,23766,23767,23768,23770,23771,23772,23773,23774,23775,23776,23778,23779,23783,23785,23787,23788,23790,23791,23793,23794,23795,23796,23797,23798,23799,23800,23801,23802,23804,23805,23806,23807,23808,23809,23812,23813,23816,23817,23818,23819,23820,23821,23823,23824,23825,23826,23827,23829,23831,23832,23833,23834,23836,23837,23839,23840,23841,23842,23843,23845,23848,23850,23851,23852,23855,23856,23857,23858,23859,23861,23862,23863,23864,23865,23866,23867,23868,23871,23872,23873,23874,23875,23876,23877,23878,23880,23881,23885,23886,23887,23888,23889,23890,23891,23892,23893,23894,23895,23897,23898,23900,23902,23903,23904,23905,23906,23907,23908,23909,23910,23911,23912,23914,23917,23918,23920,23921,23922,23923,23925,23926,23927,23928,23929,23930,23931,23932,23933,23934,23935,23936,23937,23939,23940,23941,23942,23943,23944,23945,23946,23947,23948,23949,23950,23951,23952,23953,23954,23955,23956,23957,23958,23959,23960,23962,23963,23964,23966,23967,23968,23969,23970,23971,23972,23973,23974,23975,23976,23977,23978,23979,23980,23981,23982,23983,23984,23985,23986,23987,23988,23989,23990,23992,23993,23994,23995,23996,23997,23998,23999,24e3,24001,24002,24003,24004,24006,24007,24008,24009,24010,24011,24012,24014,24015,24016,24017,24018,24019,24020,24021,24022,24023,24024,24025,24026,24028,24031,24032,24035,24036,24042,24044,24045,24048,24053,24054,24056,24057,24058,24059,24060,24063,24064,24068,24071,24073,24074,24075,24077,24078,24082,24083,24087,24094,24095,24096,24097,24098,24099,24100,24101,24104,24105,24106,24107,24108,24111,24112,24114,24115,24116,24117,24118,24121,24122,24126,24127,24128,24129,24131,24134,24135,24136,24137,24138,24139,24141,24142,24143,24144,24145,24146,24147,24150,24151,24152,24153,24154,24156,24157,24159,24160,24163,24164,24165,24166,24167,24168,24169,24170,24171,24172,24173,24174,24175,24176,24177,24181,24183,24185,24190,24193,24194,24195,24197,24200,24201,24204,24205,24206,24210,24216,24219,24221,24225,24226,24227,24228,24232,24233,24234,24235,24236,24238,24239,24240,24241,24242,24244,24250,24251,24252,24253,24255,24256,24257,24258,24259,24260,24261,24262,24263,24264,24267,24268,24269,24270,24271,24272,24276,24277,24279,24280,24281,24282,24284,24285,24286,24287,24288,24289,24290,24291,24292,24293,24294,24295,24297,24299,24300,24301,24302,24303,24304,24305,24306,24307,24309,24312,24313,24315,24316,24317,24325,24326,24327,24329,24332,24333,24334,24336,24338,24340,24342,24345,24346,24348,24349,24350,24353,24354,24355,24356,24360,24363,24364,24366,24368,24370,24371,24372,24373,24374,24375,24376,24379,24381,24382,24383,24385,24386,24387,24388,24389,24390,24391,24392,24393,24394,24395,24396,24397,24398,24399,24401,24404,24409,24410,24411,24412,24414,24415,24416,24419,24421,24423,24424,24427,24430,24431,24434,24436,24437,24438,24440,24442,24445,24446,24447,24451,24454,24461,24462,24463,24465,24467,24468,24470,24474,24475,24477,24478,24479,24480,24482,24483,24484,24485,24486,24487,24489,24491,24492,24495,24496,24497,24498,24499,24500,24502,24504,24505,24506,24507,24510,24511,24512,24513,24514,24519,24520,24522,24523,24526,24531,24532,24533,24538,24539,24540,24542,24543,24546,24547,24549,24550,24552,24553,24556,24559,24560,24562,24563,24564,24566,24567,24569,24570,24572,24583,24584,24585,24587,24588,24592,24593,24595,24599,24600,24602,24606,24607,24610,24611,24612,24620,24621,24622,24624,24625,24626,24627,24628,24630,24631,24632,24633,24634,24637,24638,24640,24644,24645,24646,24647,24648,24649,24650,24652,24654,24655,24657,24659,24660,24662,24663,24664,24667,24668,24670,24671,24672,24673,24677,24678,24686,24689,24690,24692,24693,24695,24702,24704,24705,24706,24709,24710,24711,24712,24714,24715,24718,24719,24720,24721,24723,24725,24727,24728,24729,24732,24734,24737,24738,24740,24741,24743,24745,24746,24750,24752,24755,24757,24758,24759,24761,24762,24765,24766,24767,24768,24769,24770,24771,24772,24775,24776,24777,24780,24781,24782,24783,24784,24786,24787,24788,24790,24791,24793,24795,24798,24801,24802,24803,24804,24805,24810,24817,24818,24821,24823,24824,24827,24828,24829,24830,24831,24834,24835,24836,24837,24839,24842,24843,24844,24848,24849,24850,24851,24852,24854,24855,24856,24857,24859,24860,24861,24862,24865,24866,24869,24872,24873,24874,24876,24877,24878,24879,24880,24881,24882,24883,24884,24885,24886,24887,24888,24889,24890,24891,24892,24893,24894,24896,24897,24898,24899,24900,24901,24902,24903,24905,24907,24909,24911,24912,24914,24915,24916,24918,24919,24920,24921,24922,24923,24924,24926,24927,24928,24929,24931,24932,24933,24934,24937,24938,24939,24940,24941,24942,24943,24945,24946,24947,24948,24950,24952,24953,24954,24955,24956,24957,24958,24959,24960,24961,24962,24963,24964,24965,24966,24967,24968,24969,24970,24972,24973,24975,24976,24977,24978,24979,24981,24982,24983,24984,24985,24986,24987,24988,24990,24991,24992,24993,24994,24995,24996,24997,24998,25002,25003,25005,25006,25007,25008,25009,25010,25011,25012,25013,25014,25016,25017,25018,25019,25020,25021,25023,25024,25025,25027,25028,25029,25030,25031,25033,25036,25037,25038,25039,25040,25043,25045,25046,25047,25048,25049,25050,25051,25052,25053,25054,25055,25056,25057,25058,25059,25060,25061,25063,25064,25065,25066,25067,25068,25069,25070,25071,25072,25073,25074,25075,25076,25078,25079,25080,25081,25082,25083,25084,25085,25086,25088,25089,25090,25091,25092,25093,25095,25097,25107,25108,25113,25116,25117,25118,25120,25123,25126,25127,25128,25129,25131,25133,25135,25136,25137,25138,25141,25142,25144,25145,25146,25147,25148,25154,25156,25157,25158,25162,25167,25168,25173,25174,25175,25177,25178,25180,25181,25182,25183,25184,25185,25186,25188,25189,25192,25201,25202,25204,25205,25207,25208,25210,25211,25213,25217,25218,25219,25221,25222,25223,25224,25227,25228,25229,25230,25231,25232,25236,25241,25244,25245,25246,25251,25254,25255,25257,25258,25261,25262,25263,25264,25266,25267,25268,25270,25271,25272,25274,25278,25280,25281,25283,25291,25295,25297,25301,25309,25310,25312,25313,25316,25322,25323,25328,25330,25333,25336,25337,25338,25339,25344,25347,25348,25349,25350,25354,25355,25356,25357,25359,25360,25362,25363,25364,25365,25367,25368,25369,25372,25382,25383,25385,25388,25389,25390,25392,25393,25395,25396,25397,25398,25399,25400,25403,25404,25406,25407,25408,25409,25412,25415,25416,25418,25425,25426,25427,25428,25430,25431,25432,25433,25434,25435,25436,25437,25440,25444,25445,25446,25448,25450,25451,25452,25455,25456,25458,25459,25460,25461,25464,25465,25468,25469,25470,25471,25473,25475,25476,25477,25478,25483,25485,25489,25491,25492,25493,25495,25497,25498,25499,25500,25501,25502,25503,25505,25508,25510,25515,25519,25521,25522,25525,25526,25529,25531,25533,25535,25536,25537,25538,25539,25541,25543,25544,25546,25547,25548,25553,25555,25556,25557,25559,25560,25561,25562,25563,25564,25565,25567,25570,25572,25573,25574,25575,25576,25579,25580,25582,25583,25584,25585,25587,25589,25591,25593,25594,25595,25596,25598,25603,25604,25606,25607,25608,25609,25610,25613,25614,25617,25618,25621,25622,25623,25624,25625,25626,25629,25631,25634,25635,25636,25637,25639,25640,25641,25643,25646,25647,25648,25649,25650,25651,25653,25654,25655,25656,25657,25659,25660,25662,25664,25666,25667,25673,25675,25676,25677,25678,25679,25680,25681,25683,25685,25686,25687,25689,25690,25691,25692,25693,25695,25696,25697,25698,25699,25700,25701,25702,25704,25706,25707,25708,25710,25711,25712,25713,25714,25715,25716,25717,25718,25719,25723,25724,25725,25726,25727,25728,25729,25731,25734,25736,25737,25738,25739,25740,25741,25742,25743,25744,25747,25748,25751,25752,25754,25755,25756,25757,25759,25760,25761,25762,25763,25765,25766,25767,25768,25770,25771,25775,25777,25778,25779,25780,25782,25785,25787,25789,25790,25791,25793,25795,25796,25798,25799,25800,25801,25802,25803,25804,25807,25809,25811,25812,25813,25814,25817,25818,25819,25820,25821,25823,25824,25825,25827,25829,25831,25832,25833,25834,25835,25836,25837,25838,25839,25840,25841,25842,25843,25844,25845,25846,25847,25848,25849,25850,25851,25852,25853,25854,25855,25857,25858,25859,25860,25861,25862,25863,25864,25866,25867,25868,25869,25870,25871,25872,25873,25875,25876,25877,25878,25879,25881,25882,25883,25884,25885,25886,25887,25888,25889,25890,25891,25892,25894,25895,25896,25897,25898,25900,25901,25904,25905,25906,25907,25911,25914,25916,25917,25920,25921,25922,25923,25924,25926,25927,25930,25931,25933,25934,25936,25938,25939,25940,25943,25944,25946,25948,25951,25952,25953,25956,25957,25959,25960,25961,25962,25965,25966,25967,25969,25971,25973,25974,25976,25977,25978,25979,25980,25981,25982,25983,25984,25985,25986,25987,25988,25989,25990,25992,25993,25994,25997,25998,25999,26002,26004,26005,26006,26008,26010,26013,26014,26016,26018,26019,26022,26024,26026,26028,26030,26033,26034,26035,26036,26037,26038,26039,26040,26042,26043,26046,26047,26048,26050,26055,26056,26057,26058,26061,26064,26065,26067,26068,26069,26072,26073,26074,26075,26076,26077,26078,26079,26081,26083,26084,26090,26091,26098,26099,26100,26101,26104,26105,26107,26108,26109,26110,26111,26113,26116,26117,26119,26120,26121,26123,26125,26128,26129,26130,26134,26135,26136,26138,26139,26140,26142,26145,26146,26147,26148,26150,26153,26154,26155,26156,26158,26160,26162,26163,26167,26168,26169,26170,26171,26173,26175,26176,26178,26180,26181,26182,26183,26184,26185,26186,26189,26190,26192,26193,26200,26201,26203,26204,26205,26206,26208,26210,26211,26213,26215,26217,26218,26219,26220,26221,26225,26226,26227,26229,26232,26233,26235,26236,26237,26239,26240,26241,26243,26245,26246,26248,26249,26250,26251,26253,26254,26255,26256,26258,26259,26260,26261,26264,26265,26266,26267,26268,26270,26271,26272,26273,26274,26275,26276,26277,26278,26281,26282,26283,26284,26285,26287,26288,26289,26290,26291,26293,26294,26295,26296,26298,26299,26300,26301,26303,26304,26305,26306,26307,26308,26309,26310,26311,26312,26313,26314,26315,26316,26317,26318,26319,26320,26321,26322,26323,26324,26325,26326,26327,26328,26330,26334,26335,26336,26337,26338,26339,26340,26341,26343,26344,26346,26347,26348,26349,26350,26351,26353,26357,26358,26360,26362,26363,26365,26369,26370,26371,26372,26373,26374,26375,26380,26382,26383,26385,26386,26387,26390,26392,26393,26394,26396,26398,26400,26401,26402,26403,26404,26405,26407,26409,26414,26416,26418,26419,26422,26423,26424,26425,26427,26428,26430,26431,26433,26436,26437,26439,26442,26443,26445,26450,26452,26453,26455,26456,26457,26458,26459,26461,26466,26467,26468,26470,26471,26475,26476,26478,26481,26484,26486,26488,26489,26490,26491,26493,26496,26498,26499,26501,26502,26504,26506,26508,26509,26510,26511,26513,26514,26515,26516,26518,26521,26523,26527,26528,26529,26532,26534,26537,26540,26542,26545,26546,26548,26553,26554,26555,26556,26557,26558,26559,26560,26562,26565,26566,26567,26568,26569,26570,26571,26572,26573,26574,26581,26582,26583,26587,26591,26593,26595,26596,26598,26599,26600,26602,26603,26605,26606,26610,26613,26614,26615,26616,26617,26618,26619,26620,26622,26625,26626,26627,26628,26630,26637,26640,26642,26644,26645,26648,26649,26650,26651,26652,26654,26655,26656,26658,26659,26660,26661,26662,26663,26664,26667,26668,26669,26670,26671,26672,26673,26676,26677,26678,26682,26683,26687,26695,26699,26701,26703,26706,26710,26711,26712,26713,26714,26715,26716,26717,26718,26719,26730,26732,26733,26734,26735,26736,26737,26738,26739,26741,26744,26745,26746,26747,26748,26749,26750,26751,26752,26754,26756,26759,26760,26761,26762,26763,26764,26765,26766,26768,26769,26770,26772,26773,26774,26776,26777,26778,26779,26780,26781,26782,26783,26784,26785,26787,26788,26789,26793,26794,26795,26796,26798,26801,26802,26804,26806,26807,26808,26809,26810,26811,26812,26813,26814,26815,26817,26819,26820,26821,26822,26823,26824,26826,26828,26830,26831,26832,26833,26835,26836,26838,26839,26841,26843,26844,26845,26846,26847,26849,26850,26852,26853,26854,26855,26856,26857,26858,26859,26860,26861,26863,26866,26867,26868,26870,26871,26872,26875,26877,26878,26879,26880,26882,26883,26884,26886,26887,26888,26889,26890,26892,26895,26897,26899,26900,26901,26902,26903,26904,26905,26906,26907,26908,26909,26910,26913,26914,26915,26917,26918,26919,26920,26921,26922,26923,26924,26926,26927,26929,26930,26931,26933,26934,26935,26936,26938,26939,26940,26942,26944,26945,26947,26948,26949,26950,26951,26952,26953,26954,26955,26956,26957,26958,26959,26960,26961,26962,26963,26965,26966,26968,26969,26971,26972,26975,26977,26978,26980,26981,26983,26984,26985,26986,26988,26989,26991,26992,26994,26995,26996,26997,26998,27002,27003,27005,27006,27007,27009,27011,27013,27018,27019,27020,27022,27023,27024,27025,27026,27027,27030,27031,27033,27034,27037,27038,27039,27040,27041,27042,27043,27044,27045,27046,27049,27050,27052,27054,27055,27056,27058,27059,27061,27062,27064,27065,27066,27068,27069,27070,27071,27072,27074,27075,27076,27077,27078,27079,27080,27081,27083,27085,27087,27089,27090,27091,27093,27094,27095,27096,27097,27098,27100,27101,27102,27105,27106,27107,27108,27109,27110,27111,27112,27113,27114,27115,27116,27118,27119,27120,27121,27123,27124,27125,27126,27127,27128,27129,27130,27131,27132,27134,27136,27137,27138,27139,27140,27141,27142,27143,27144,27145,27147,27148,27149,27150,27151,27152,27153,27154,27155,27156,27157,27158,27161,27162,27163,27164,27165,27166,27168,27170,27171,27172,27173,27174,27175,27177,27179,27180,27181,27182,27184,27186,27187,27188,27190,27191,27192,27193,27194,27195,27196,27199,27200,27201,27202,27203,27205,27206,27208,27209,27210,27211,27212,27213,27214,27215,27217,27218,27219,27220,27221,27222,27223,27226,27228,27229,27230,27231,27232,27234,27235,27236,27238,27239,27240,27241,27242,27243,27244,27245,27246,27247,27248,27250,27251,27252,27253,27254,27255,27256,27258,27259,27261,27262,27263,27265,27266,27267,27269,27270,27271,27272,27273,27274,27275,27276,27277,27279,27282,27283,27284,27285,27286,27288,27289,27290,27291,27292,27293,27294,27295,27297,27298,27299,27300,27301,27302,27303,27304,27306,27309,27310,27311,27312,27313,27314,27315,27316,27317,27318,27319,27320,27321,27322,27323,27324,27325,27326,27327,27328,27329,27330,27331,27332,27333,27334,27335,27336,27337,27338,27339,27340,27341,27342,27343,27344,27345,27346,27347,27348,27349,27350,27351,27352,27353,27354,27355,27356,27357,27358,27359,27360,27361,27362,27363,27364,27365,27366,27367,27368,27369,27370,27371,27372,27373,27374,27375,27376,27377,27378,27379,27380,27381,27382,27383,27384,27385,27386,27387,27388,27389,27390,27391,27392,27393,27394,27395,27396,27397,27398,27399,27400,27401,27402,27403,27404,27405,27406,27407,27408,27409,27410,27411,27412,27413,27414,27415,27416,27417,27418,27419,27420,27421,27422,27423,27429,27430,27432,27433,27434,27435,27436,27437,27438,27439,27440,27441,27443,27444,27445,27446,27448,27451,27452,27453,27455,27456,27457,27458,27460,27461,27464,27466,27467,27469,27470,27471,27472,27473,27474,27475,27476,27477,27478,27479,27480,27482,27483,27484,27485,27486,27487,27488,27489,27496,27497,27499,27500,27501,27502,27503,27504,27505,27506,27507,27508,27509,27510,27511,27512,27514,27517,27518,27519,27520,27525,27528,27532,27534,27535,27536,27537,27540,27541,27543,27544,27545,27548,27549,27550,27551,27552,27554,27555,27556,27557,27558,27559,27560,27561,27563,27564,27565,27566,27567,27568,27569,27570,27574,27576,27577,27578,27579,27580,27581,27582,27584,27587,27588,27590,27591,27592,27593,27594,27596,27598,27600,27601,27608,27610,27612,27613,27614,27615,27616,27618,27619,27620,27621,27622,27623,27624,27625,27628,27629,27630,27632,27633,27634,27636,27638,27639,27640,27642,27643,27644,27646,27647,27648,27649,27650,27651,27652,27656,27657,27658,27659,27660,27662,27666,27671,27676,27677,27678,27680,27683,27685,27691,27692,27693,27697,27699,27702,27703,27705,27706,27707,27708,27710,27711,27715,27716,27717,27720,27723,27724,27725,27726,27727,27729,27730,27731,27734,27736,27737,27738,27746,27747,27749,27750,27751,27755,27756,27757,27758,27759,27761,27763,27765,27767,27768,27770,27771,27772,27775,27776,27780,27783,27786,27787,27789,27790,27793,27794,27797,27798,27799,27800,27802,27804,27805,27806,27808,27810,27816,27820,27823,27824,27828,27829,27830,27831,27834,27840,27841,27842,27843,27846,27847,27848,27851,27853,27854,27855,27857,27858,27864,27865,27866,27868,27869,27871,27876,27878,27879,27881,27884,27885,27890,27892,27897,27903,27904,27906,27907,27909,27910,27912,27913,27914,27917,27919,27920,27921,27923,27924,27925,27926,27928,27932,27933,27935,27936,27937,27938,27939,27940,27942,27944,27945,27948,27949,27951,27952,27956,27958,27959,27960,27962,27967,27968,27970,27972,27977,27980,27984,27989,27990,27991,27992,27995,27997,27999,28001,28002,28004,28005,28007,28008,28011,28012,28013,28016,28017,28018,28019,28021,28022,28025,28026,28027,28029,28030,28031,28032,28033,28035,28036,28038,28039,28042,28043,28045,28047,28048,28050,28054,28055,28056,28057,28058,28060,28066,28069,28076,28077,28080,28081,28083,28084,28086,28087,28089,28090,28091,28092,28093,28094,28097,28098,28099,28104,28105,28106,28109,28110,28111,28112,28114,28115,28116,28117,28119,28122,28123,28124,28127,28130,28131,28133,28135,28136,28137,28138,28141,28143,28144,28146,28148,28149,28150,28152,28154,28157,28158,28159,28160,28161,28162,28163,28164,28166,28167,28168,28169,28171,28175,28178,28179,28181,28184,28185,28187,28188,28190,28191,28194,28198,28199,28200,28202,28204,28206,28208,28209,28211,28213,28214,28215,28217,28219,28220,28221,28222,28223,28224,28225,28226,28229,28230,28231,28232,28233,28234,28235,28236,28239,28240,28241,28242,28245,28247,28249,28250,28252,28253,28254,28256,28257,28258,28259,28260,28261,28262,28263,28264,28265,28266,28268,28269,28271,28272,28273,28274,28275,28276,28277,28278,28279,28280,28281,28282,28283,28284,28285,28288,28289,28290,28292,28295,28296,28298,28299,28300,28301,28302,28305,28306,28307,28308,28309,28310,28311,28313,28314,28315,28317,28318,28320,28321,28323,28324,28326,28328,28329,28331,28332,28333,28334,28336,28339,28341,28344,28345,28348,28350,28351,28352,28355,28356,28357,28358,28360,28361,28362,28364,28365,28366,28368,28370,28374,28376,28377,28379,28380,28381,28387,28391,28394,28395,28396,28397,28398,28399,28400,28401,28402,28403,28405,28406,28407,28408,28410,28411,28412,28413,28414,28415,28416,28417,28419,28420,28421,28423,28424,28426,28427,28428,28429,28430,28432,28433,28434,28438,28439,28440,28441,28442,28443,28444,28445,28446,28447,28449,28450,28451,28453,28454,28455,28456,28460,28462,28464,28466,28468,28469,28471,28472,28473,28474,28475,28476,28477,28479,28480,28481,28482,28483,28484,28485,28488,28489,28490,28492,28494,28495,28496,28497,28498,28499,28500,28501,28502,28503,28505,28506,28507,28509,28511,28512,28513,28515,28516,28517,28519,28520,28521,28522,28523,28524,28527,28528,28529,28531,28533,28534,28535,28537,28539,28541,28542,28543,28544,28545,28546,28547,28549,28550,28551,28554,28555,28559,28560,28561,28562,28563,28564,28565,28566,28567,28568,28569,28570,28571,28573,28574,28575,28576,28578,28579,28580,28581,28582,28584,28585,28586,28587,28588,28589,28590,28591,28592,28593,28594,28596,28597,28599,28600,28602,28603,28604,28605,28606,28607,28609,28611,28612,28613,28614,28615,28616,28618,28619,28620,28621,28622,28623,28624,28627,28628,28629,28630,28631,28632,28633,28634,28635,28636,28637,28639,28642,28643,28644,28645,28646,28647,28648,28649,28650,28651,28652,28653,28656,28657,28658,28659,28660,28661,28662,28663,28664,28665,28666,28667,28668,28669,28670,28671,28672,28673,28674,28675,28676,28677,28678,28679,28680,28681,28682,28683,28684,28685,28686,28687,28688,28690,28691,28692,28693,28694,28695,28696,28697,28700,28701,28702,28703,28704,28705,28706,28708,28709,28710,28711,28712,28713,28714,28715,28716,28717,28718,28719,28720,28721,28722,28723,28724,28726,28727,28728,28730,28731,28732,28733,28734,28735,28736,28737,28738,28739,28740,28741,28742,28743,28744,28745,28746,28747,28749,28750,28752,28753,28754,28755,28756,28757,28758,28759,28760,28761,28762,28763,28764,28765,28767,28768,28769,28770,28771,28772,28773,28774,28775,28776,28777,28778,28782,28785,28786,28787,28788,28791,28793,28794,28795,28797,28801,28802,28803,28804,28806,28807,28808,28811,28812,28813,28815,28816,28817,28819,28823,28824,28826,28827,28830,28831,28832,28833,28834,28835,28836,28837,28838,28839,28840,28841,28842,28848,28850,28852,28853,28854,28858,28862,28863,28868,28869,28870,28871,28873,28875,28876,28877,28878,28879,28880,28881,28882,28883,28884,28885,28886,28887,28890,28892,28893,28894,28896,28897,28898,28899,28901,28906,28910,28912,28913,28914,28915,28916,28917,28918,28920,28922,28923,28924,28926,28927,28928,28929,28930,28931,28932,28933,28934,28935,28936,28939,28940,28941,28942,28943,28945,28946,28948,28951,28955,28956,28957,28958,28959,28960,28961,28962,28963,28964,28965,28967,28968,28969,28970,28971,28972,28973,28974,28978,28979,28980,28981,28983,28984,28985,28986,28987,28988,28989,28990,28991,28992,28993,28994,28995,28996,28998,28999,29e3,29001,29003,29005,29007,29008,29009,29010,29011,29012,29013,29014,29015,29016,29017,29018,29019,29021,29023,29024,29025,29026,29027,29029,29033,29034,29035,29036,29037,29039,29040,29041,29044,29045,29046,29047,29049,29051,29052,29054,29055,29056,29057,29058,29059,29061,29062,29063,29064,29065,29067,29068,29069,29070,29072,29073,29074,29075,29077,29078,29079,29082,29083,29084,29085,29086,29089,29090,29091,29092,29093,29094,29095,29097,29098,29099,29101,29102,29103,29104,29105,29106,29108,29110,29111,29112,29114,29115,29116,29117,29118,29119,29120,29121,29122,29124,29125,29126,29127,29128,29129,29130,29131,29132,29133,29135,29136,29137,29138,29139,29142,29143,29144,29145,29146,29147,29148,29149,29150,29151,29153,29154,29155,29156,29158,29160,29161,29162,29163,29164,29165,29167,29168,29169,29170,29171,29172,29173,29174,29175,29176,29178,29179,29180,29181,29182,29183,29184,29185,29186,29187,29188,29189,29191,29192,29193,29194,29195,29196,29197,29198,29199,29200,29201,29202,29203,29204,29205,29206,29207,29208,29209,29210,29211,29212,29214,29215,29216,29217,29218,29219,29220,29221,29222,29223,29225,29227,29229,29230,29231,29234,29235,29236,29242,29244,29246,29248,29249,29250,29251,29252,29253,29254,29257,29258,29259,29262,29263,29264,29265,29267,29268,29269,29271,29272,29274,29276,29278,29280,29283,29284,29285,29288,29290,29291,29292,29293,29296,29297,29299,29300,29302,29303,29304,29307,29308,29309,29314,29315,29317,29318,29319,29320,29321,29324,29326,29328,29329,29331,29332,29333,29334,29335,29336,29337,29338,29339,29340,29341,29342,29344,29345,29346,29347,29348,29349,29350,29351,29352,29353,29354,29355,29358,29361,29362,29363,29365,29370,29371,29372,29373,29374,29375,29376,29381,29382,29383,29385,29386,29387,29388,29391,29393,29395,29396,29397,29398,29400,29402,29403,58566,58567,58568,58569,58570,58571,58572,58573,58574,58575,58576,58577,58578,58579,58580,58581,58582,58583,58584,58585,58586,58587,58588,58589,58590,58591,58592,58593,58594,58595,58596,58597,58598,58599,58600,58601,58602,58603,58604,58605,58606,58607,58608,58609,58610,58611,58612,58613,58614,58615,58616,58617,58618,58619,58620,58621,58622,58623,58624,58625,58626,58627,58628,58629,58630,58631,58632,58633,58634,58635,58636,58637,58638,58639,58640,58641,58642,58643,58644,58645,58646,58647,58648,58649,58650,58651,58652,58653,58654,58655,58656,58657,58658,58659,58660,58661,12288,12289,12290,183,713,711,168,12291,12293,8212,65374,8214,8230,8216,8217,8220,8221,12308,12309,12296,12297,12298,12299,12300,12301,12302,12303,12310,12311,12304,12305,177,215,247,8758,8743,8744,8721,8719,8746,8745,8712,8759,8730,8869,8741,8736,8978,8857,8747,8750,8801,8780,8776,8765,8733,8800,8814,8815,8804,8805,8734,8757,8756,9794,9792,176,8242,8243,8451,65284,164,65504,65505,8240,167,8470,9734,9733,9675,9679,9678,9671,9670,9633,9632,9651,9650,8251,8594,8592,8593,8595,12307,58662,58663,58664,58665,58666,58667,58668,58669,58670,58671,58672,58673,58674,58675,58676,58677,58678,58679,58680,58681,58682,58683,58684,58685,58686,58687,58688,58689,58690,58691,58692,58693,58694,58695,58696,58697,58698,58699,58700,58701,58702,58703,58704,58705,58706,58707,58708,58709,58710,58711,58712,58713,58714,58715,58716,58717,58718,58719,58720,58721,58722,58723,58724,58725,58726,58727,58728,58729,58730,58731,58732,58733,58734,58735,58736,58737,58738,58739,58740,58741,58742,58743,58744,58745,58746,58747,58748,58749,58750,58751,58752,58753,58754,58755,58756,58757,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,59238,59239,59240,59241,59242,59243,9352,9353,9354,9355,9356,9357,9358,9359,9360,9361,9362,9363,9364,9365,9366,9367,9368,9369,9370,9371,9332,9333,9334,9335,9336,9337,9338,9339,9340,9341,9342,9343,9344,9345,9346,9347,9348,9349,9350,9351,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,8364,59245,12832,12833,12834,12835,12836,12837,12838,12839,12840,12841,59246,59247,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,8554,8555,59248,59249,58758,58759,58760,58761,58762,58763,58764,58765,58766,58767,58768,58769,58770,58771,58772,58773,58774,58775,58776,58777,58778,58779,58780,58781,58782,58783,58784,58785,58786,58787,58788,58789,58790,58791,58792,58793,58794,58795,58796,58797,58798,58799,58800,58801,58802,58803,58804,58805,58806,58807,58808,58809,58810,58811,58812,58813,58814,58815,58816,58817,58818,58819,58820,58821,58822,58823,58824,58825,58826,58827,58828,58829,58830,58831,58832,58833,58834,58835,58836,58837,58838,58839,58840,58841,58842,58843,58844,58845,58846,58847,58848,58849,58850,58851,58852,12288,65281,65282,65283,65509,65285,65286,65287,65288,65289,65290,65291,65292,65293,65294,65295,65296,65297,65298,65299,65300,65301,65302,65303,65304,65305,65306,65307,65308,65309,65310,65311,65312,65313,65314,65315,65316,65317,65318,65319,65320,65321,65322,65323,65324,65325,65326,65327,65328,65329,65330,65331,65332,65333,65334,65335,65336,65337,65338,65339,65340,65341,65342,65343,65344,65345,65346,65347,65348,65349,65350,65351,65352,65353,65354,65355,65356,65357,65358,65359,65360,65361,65362,65363,65364,65365,65366,65367,65368,65369,65370,65371,65372,65373,65507,58854,58855,58856,58857,58858,58859,58860,58861,58862,58863,58864,58865,58866,58867,58868,58869,58870,58871,58872,58873,58874,58875,58876,58877,58878,58879,58880,58881,58882,58883,58884,58885,58886,58887,58888,58889,58890,58891,58892,58893,58894,58895,58896,58897,58898,58899,58900,58901,58902,58903,58904,58905,58906,58907,58908,58909,58910,58911,58912,58913,58914,58915,58916,58917,58918,58919,58920,58921,58922,58923,58924,58925,58926,58927,58928,58929,58930,58931,58932,58933,58934,58935,58936,58937,58938,58939,58940,58941,58942,58943,58944,58945,58946,58947,58948,58949,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12367,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12427,12428,12429,12430,12431,12432,12433,12434,12435,59250,59251,59252,59253,59254,59255,59256,59257,59258,59259,59260,58950,58951,58952,58953,58954,58955,58956,58957,58958,58959,58960,58961,58962,58963,58964,58965,58966,58967,58968,58969,58970,58971,58972,58973,58974,58975,58976,58977,58978,58979,58980,58981,58982,58983,58984,58985,58986,58987,58988,58989,58990,58991,58992,58993,58994,58995,58996,58997,58998,58999,59e3,59001,59002,59003,59004,59005,59006,59007,59008,59009,59010,59011,59012,59013,59014,59015,59016,59017,59018,59019,59020,59021,59022,59023,59024,59025,59026,59027,59028,59029,59030,59031,59032,59033,59034,59035,59036,59037,59038,59039,59040,59041,59042,59043,59044,59045,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502,12503,12504,12505,12506,12507,12508,12509,12510,12511,12512,12513,12514,12515,12516,12517,12518,12519,12520,12521,12522,12523,12524,12525,12526,12527,12528,12529,12530,12531,12532,12533,12534,59261,59262,59263,59264,59265,59266,59267,59268,59046,59047,59048,59049,59050,59051,59052,59053,59054,59055,59056,59057,59058,59059,59060,59061,59062,59063,59064,59065,59066,59067,59068,59069,59070,59071,59072,59073,59074,59075,59076,59077,59078,59079,59080,59081,59082,59083,59084,59085,59086,59087,59088,59089,59090,59091,59092,59093,59094,59095,59096,59097,59098,59099,59100,59101,59102,59103,59104,59105,59106,59107,59108,59109,59110,59111,59112,59113,59114,59115,59116,59117,59118,59119,59120,59121,59122,59123,59124,59125,59126,59127,59128,59129,59130,59131,59132,59133,59134,59135,59136,59137,59138,59139,59140,59141,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,59269,59270,59271,59272,59273,59274,59275,59276,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,963,964,965,966,967,968,969,59277,59278,59279,59280,59281,59282,59283,65077,65078,65081,65082,65087,65088,65085,65086,65089,65090,65091,65092,59284,59285,65083,65084,65079,65080,65073,59286,65075,65076,59287,59288,59289,59290,59291,59292,59293,59294,59295,59142,59143,59144,59145,59146,59147,59148,59149,59150,59151,59152,59153,59154,59155,59156,59157,59158,59159,59160,59161,59162,59163,59164,59165,59166,59167,59168,59169,59170,59171,59172,59173,59174,59175,59176,59177,59178,59179,59180,59181,59182,59183,59184,59185,59186,59187,59188,59189,59190,59191,59192,59193,59194,59195,59196,59197,59198,59199,59200,59201,59202,59203,59204,59205,59206,59207,59208,59209,59210,59211,59212,59213,59214,59215,59216,59217,59218,59219,59220,59221,59222,59223,59224,59225,59226,59227,59228,59229,59230,59231,59232,59233,59234,59235,59236,59237,1040,1041,1042,1043,1044,1045,1025,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,59296,59297,59298,59299,59300,59301,59302,59303,59304,59305,59306,59307,59308,59309,59310,1072,1073,1074,1075,1076,1077,1105,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,59311,59312,59313,59314,59315,59316,59317,59318,59319,59320,59321,59322,59323,714,715,729,8211,8213,8229,8245,8453,8457,8598,8599,8600,8601,8725,8735,8739,8786,8806,8807,8895,9552,9553,9554,9555,9556,9557,9558,9559,9560,9561,9562,9563,9564,9565,9566,9567,9568,9569,9570,9571,9572,9573,9574,9575,9576,9577,9578,9579,9580,9581,9582,9583,9584,9585,9586,9587,9601,9602,9603,9604,9605,9606,9607,9608,9609,9610,9611,9612,9613,9614,9615,9619,9620,9621,9660,9661,9698,9699,9700,9701,9737,8853,12306,12317,12318,59324,59325,59326,59327,59328,59329,59330,59331,59332,59333,59334,257,225,462,224,275,233,283,232,299,237,464,236,333,243,466,242,363,250,468,249,470,472,474,476,252,234,593,7743,324,328,505,609,59337,59338,59339,59340,12549,12550,12551,12552,12553,12554,12555,12556,12557,12558,12559,12560,12561,12562,12563,12564,12565,12566,12567,12568,12569,12570,12571,12572,12573,12574,12575,12576,12577,12578,12579,12580,12581,12582,12583,12584,12585,59341,59342,59343,59344,59345,59346,59347,59348,59349,59350,59351,59352,59353,59354,59355,59356,59357,59358,59359,59360,59361,12321,12322,12323,12324,12325,12326,12327,12328,12329,12963,13198,13199,13212,13213,13214,13217,13252,13262,13265,13266,13269,65072,65506,65508,59362,8481,12849,59363,8208,59364,59365,59366,12540,12443,12444,12541,12542,12294,12445,12446,65097,65098,65099,65100,65101,65102,65103,65104,65105,65106,65108,65109,65110,65111,65113,65114,65115,65116,65117,65118,65119,65120,65121,65122,65123,65124,65125,65126,65128,65129,65130,65131,12350,12272,12273,12274,12275,12276,12277,12278,12279,12280,12281,12282,12283,12295,59380,59381,59382,59383,59384,59385,59386,59387,59388,59389,59390,59391,59392,9472,9473,9474,9475,9476,9477,9478,9479,9480,9481,9482,9483,9484,9485,9486,9487,9488,9489,9490,9491,9492,9493,9494,9495,9496,9497,9498,9499,9500,9501,9502,9503,9504,9505,9506,9507,9508,9509,9510,9511,9512,9513,9514,9515,9516,9517,9518,9519,9520,9521,9522,9523,9524,9525,9526,9527,9528,9529,9530,9531,9532,9533,9534,9535,9536,9537,9538,9539,9540,9541,9542,9543,9544,9545,9546,9547,59393,59394,59395,59396,59397,59398,59399,59400,59401,59402,59403,59404,59405,59406,59407,29404,29405,29407,29410,29411,29412,29413,29414,29415,29418,29419,29429,29430,29433,29437,29438,29439,29440,29442,29444,29445,29446,29447,29448,29449,29451,29452,29453,29455,29456,29457,29458,29460,29464,29465,29466,29471,29472,29475,29476,29478,29479,29480,29485,29487,29488,29490,29491,29493,29494,29498,29499,29500,29501,29504,29505,29506,29507,29508,29509,29510,29511,29512,29513,29514,29515,29516,29518,29519,29521,29523,29524,29525,29526,29528,29529,29530,29531,29532,29533,29534,29535,29537,29538,29539,29540,29541,29542,29543,29544,29545,29546,29547,29550,29552,29553,57344,57345,57346,57347,57348,57349,57350,57351,57352,57353,57354,57355,57356,57357,57358,57359,57360,57361,57362,57363,57364,57365,57366,57367,57368,57369,57370,57371,57372,57373,57374,57375,57376,57377,57378,57379,57380,57381,57382,57383,57384,57385,57386,57387,57388,57389,57390,57391,57392,57393,57394,57395,57396,57397,57398,57399,57400,57401,57402,57403,57404,57405,57406,57407,57408,57409,57410,57411,57412,57413,57414,57415,57416,57417,57418,57419,57420,57421,57422,57423,57424,57425,57426,57427,57428,57429,57430,57431,57432,57433,57434,57435,57436,57437,29554,29555,29556,29557,29558,29559,29560,29561,29562,29563,29564,29565,29567,29568,29569,29570,29571,29573,29574,29576,29578,29580,29581,29583,29584,29586,29587,29588,29589,29591,29592,29593,29594,29596,29597,29598,29600,29601,29603,29604,29605,29606,29607,29608,29610,29612,29613,29617,29620,29621,29622,29624,29625,29628,29629,29630,29631,29633,29635,29636,29637,29638,29639,29643,29644,29646,29650,29651,29652,29653,29654,29655,29656,29658,29659,29660,29661,29663,29665,29666,29667,29668,29670,29672,29674,29675,29676,29678,29679,29680,29681,29683,29684,29685,29686,29687,57438,57439,57440,57441,57442,57443,57444,57445,57446,57447,57448,57449,57450,57451,57452,57453,57454,57455,57456,57457,57458,57459,57460,57461,57462,57463,57464,57465,57466,57467,57468,57469,57470,57471,57472,57473,57474,57475,57476,57477,57478,57479,57480,57481,57482,57483,57484,57485,57486,57487,57488,57489,57490,57491,57492,57493,57494,57495,57496,57497,57498,57499,57500,57501,57502,57503,57504,57505,57506,57507,57508,57509,57510,57511,57512,57513,57514,57515,57516,57517,57518,57519,57520,57521,57522,57523,57524,57525,57526,57527,57528,57529,57530,57531,29688,29689,29690,29691,29692,29693,29694,29695,29696,29697,29698,29700,29703,29704,29707,29708,29709,29710,29713,29714,29715,29716,29717,29718,29719,29720,29721,29724,29725,29726,29727,29728,29729,29731,29732,29735,29737,29739,29741,29743,29745,29746,29751,29752,29753,29754,29755,29757,29758,29759,29760,29762,29763,29764,29765,29766,29767,29768,29769,29770,29771,29772,29773,29774,29775,29776,29777,29778,29779,29780,29782,29784,29789,29792,29793,29794,29795,29796,29797,29798,29799,29800,29801,29802,29803,29804,29806,29807,29809,29810,29811,29812,29813,29816,29817,29818,57532,57533,57534,57535,57536,57537,57538,57539,57540,57541,57542,57543,57544,57545,57546,57547,57548,57549,57550,57551,57552,57553,57554,57555,57556,57557,57558,57559,57560,57561,57562,57563,57564,57565,57566,57567,57568,57569,57570,57571,57572,57573,57574,57575,57576,57577,57578,57579,57580,57581,57582,57583,57584,57585,57586,57587,57588,57589,57590,57591,57592,57593,57594,57595,57596,57597,57598,57599,57600,57601,57602,57603,57604,57605,57606,57607,57608,57609,57610,57611,57612,57613,57614,57615,57616,57617,57618,57619,57620,57621,57622,57623,57624,57625,29819,29820,29821,29823,29826,29828,29829,29830,29832,29833,29834,29836,29837,29839,29841,29842,29843,29844,29845,29846,29847,29848,29849,29850,29851,29853,29855,29856,29857,29858,29859,29860,29861,29862,29866,29867,29868,29869,29870,29871,29872,29873,29874,29875,29876,29877,29878,29879,29880,29881,29883,29884,29885,29886,29887,29888,29889,29890,29891,29892,29893,29894,29895,29896,29897,29898,29899,29900,29901,29902,29903,29904,29905,29907,29908,29909,29910,29911,29912,29913,29914,29915,29917,29919,29921,29925,29927,29928,29929,29930,29931,29932,29933,29936,29937,29938,57626,57627,57628,57629,57630,57631,57632,57633,57634,57635,57636,57637,57638,57639,57640,57641,57642,57643,57644,57645,57646,57647,57648,57649,57650,57651,57652,57653,57654,57655,57656,57657,57658,57659,57660,57661,57662,57663,57664,57665,57666,57667,57668,57669,57670,57671,57672,57673,57674,57675,57676,57677,57678,57679,57680,57681,57682,57683,57684,57685,57686,57687,57688,57689,57690,57691,57692,57693,57694,57695,57696,57697,57698,57699,57700,57701,57702,57703,57704,57705,57706,57707,57708,57709,57710,57711,57712,57713,57714,57715,57716,57717,57718,57719,29939,29941,29944,29945,29946,29947,29948,29949,29950,29952,29953,29954,29955,29957,29958,29959,29960,29961,29962,29963,29964,29966,29968,29970,29972,29973,29974,29975,29979,29981,29982,29984,29985,29986,29987,29988,29990,29991,29994,29998,30004,30006,30009,30012,30013,30015,30017,30018,30019,30020,30022,30023,30025,30026,30029,30032,30033,30034,30035,30037,30038,30039,30040,30045,30046,30047,30048,30049,30050,30051,30052,30055,30056,30057,30059,30060,30061,30062,30063,30064,30065,30067,30069,30070,30071,30074,30075,30076,30077,30078,30080,30081,30082,30084,30085,30087,57720,57721,57722,57723,57724,57725,57726,57727,57728,57729,57730,57731,57732,57733,57734,57735,57736,57737,57738,57739,57740,57741,57742,57743,57744,57745,57746,57747,57748,57749,57750,57751,57752,57753,57754,57755,57756,57757,57758,57759,57760,57761,57762,57763,57764,57765,57766,57767,57768,57769,57770,57771,57772,57773,57774,57775,57776,57777,57778,57779,57780,57781,57782,57783,57784,57785,57786,57787,57788,57789,57790,57791,57792,57793,57794,57795,57796,57797,57798,57799,57800,57801,57802,57803,57804,57805,57806,57807,57808,57809,57810,57811,57812,57813,30088,30089,30090,30092,30093,30094,30096,30099,30101,30104,30107,30108,30110,30114,30118,30119,30120,30121,30122,30125,30134,30135,30138,30139,30143,30144,30145,30150,30155,30156,30158,30159,30160,30161,30163,30167,30169,30170,30172,30173,30175,30176,30177,30181,30185,30188,30189,30190,30191,30194,30195,30197,30198,30199,30200,30202,30203,30205,30206,30210,30212,30214,30215,30216,30217,30219,30221,30222,30223,30225,30226,30227,30228,30230,30234,30236,30237,30238,30241,30243,30247,30248,30252,30254,30255,30257,30258,30262,30263,30265,30266,30267,30269,30273,30274,30276,57814,57815,57816,57817,57818,57819,57820,57821,57822,57823,57824,57825,57826,57827,57828,57829,57830,57831,57832,57833,57834,57835,57836,57837,57838,57839,57840,57841,57842,57843,57844,57845,57846,57847,57848,57849,57850,57851,57852,57853,57854,57855,57856,57857,57858,57859,57860,57861,57862,57863,57864,57865,57866,57867,57868,57869,57870,57871,57872,57873,57874,57875,57876,57877,57878,57879,57880,57881,57882,57883,57884,57885,57886,57887,57888,57889,57890,57891,57892,57893,57894,57895,57896,57897,57898,57899,57900,57901,57902,57903,57904,57905,57906,57907,30277,30278,30279,30280,30281,30282,30283,30286,30287,30288,30289,30290,30291,30293,30295,30296,30297,30298,30299,30301,30303,30304,30305,30306,30308,30309,30310,30311,30312,30313,30314,30316,30317,30318,30320,30321,30322,30323,30324,30325,30326,30327,30329,30330,30332,30335,30336,30337,30339,30341,30345,30346,30348,30349,30351,30352,30354,30356,30357,30359,30360,30362,30363,30364,30365,30366,30367,30368,30369,30370,30371,30373,30374,30375,30376,30377,30378,30379,30380,30381,30383,30384,30387,30389,30390,30391,30392,30393,30394,30395,30396,30397,30398,30400,30401,30403,21834,38463,22467,25384,21710,21769,21696,30353,30284,34108,30702,33406,30861,29233,38552,38797,27688,23433,20474,25353,26263,23736,33018,26696,32942,26114,30414,20985,25942,29100,32753,34948,20658,22885,25034,28595,33453,25420,25170,21485,21543,31494,20843,30116,24052,25300,36299,38774,25226,32793,22365,38712,32610,29240,30333,26575,30334,25670,20336,36133,25308,31255,26001,29677,25644,25203,33324,39041,26495,29256,25198,25292,20276,29923,21322,21150,32458,37030,24110,26758,27036,33152,32465,26834,30917,34444,38225,20621,35876,33502,32990,21253,35090,21093,30404,30407,30409,30411,30412,30419,30421,30425,30426,30428,30429,30430,30432,30433,30434,30435,30436,30438,30439,30440,30441,30442,30443,30444,30445,30448,30451,30453,30454,30455,30458,30459,30461,30463,30464,30466,30467,30469,30470,30474,30476,30478,30479,30480,30481,30482,30483,30484,30485,30486,30487,30488,30491,30492,30493,30494,30497,30499,30500,30501,30503,30506,30507,30508,30510,30512,30513,30514,30515,30516,30521,30523,30525,30526,30527,30530,30532,30533,30534,30536,30537,30538,30539,30540,30541,30542,30543,30546,30547,30548,30549,30550,30551,30552,30553,30556,34180,38649,20445,22561,39281,23453,25265,25253,26292,35961,40077,29190,26479,30865,24754,21329,21271,36744,32972,36125,38049,20493,29384,22791,24811,28953,34987,22868,33519,26412,31528,23849,32503,29997,27893,36454,36856,36924,40763,27604,37145,31508,24444,30887,34006,34109,27605,27609,27606,24065,24199,30201,38381,25949,24330,24517,36767,22721,33218,36991,38491,38829,36793,32534,36140,25153,20415,21464,21342,36776,36777,36779,36941,26631,24426,33176,34920,40150,24971,21035,30250,24428,25996,28626,28392,23486,25672,20853,20912,26564,19993,31177,39292,28851,30557,30558,30559,30560,30564,30567,30569,30570,30573,30574,30575,30576,30577,30578,30579,30580,30581,30582,30583,30584,30586,30587,30588,30593,30594,30595,30598,30599,30600,30601,30602,30603,30607,30608,30611,30612,30613,30614,30615,30616,30617,30618,30619,30620,30621,30622,30625,30627,30628,30630,30632,30635,30637,30638,30639,30641,30642,30644,30646,30647,30648,30649,30650,30652,30654,30656,30657,30658,30659,30660,30661,30662,30663,30664,30665,30666,30667,30668,30670,30671,30672,30673,30674,30675,30676,30677,30678,30680,30681,30682,30685,30686,30687,30688,30689,30692,30149,24182,29627,33760,25773,25320,38069,27874,21338,21187,25615,38082,31636,20271,24091,33334,33046,33162,28196,27850,39539,25429,21340,21754,34917,22496,19981,24067,27493,31807,37096,24598,25830,29468,35009,26448,25165,36130,30572,36393,37319,24425,33756,34081,39184,21442,34453,27531,24813,24808,28799,33485,33329,20179,27815,34255,25805,31961,27133,26361,33609,21397,31574,20391,20876,27979,23618,36461,25554,21449,33580,33590,26597,30900,25661,23519,23700,24046,35815,25286,26612,35962,25600,25530,34633,39307,35863,32544,38130,20135,38416,39076,26124,29462,30694,30696,30698,30703,30704,30705,30706,30708,30709,30711,30713,30714,30715,30716,30723,30724,30725,30726,30727,30728,30730,30731,30734,30735,30736,30739,30741,30745,30747,30750,30752,30753,30754,30756,30760,30762,30763,30766,30767,30769,30770,30771,30773,30774,30781,30783,30785,30786,30787,30788,30790,30792,30793,30794,30795,30797,30799,30801,30803,30804,30808,30809,30810,30811,30812,30814,30815,30816,30817,30818,30819,30820,30821,30822,30823,30824,30825,30831,30832,30833,30834,30835,30836,30837,30838,30840,30841,30842,30843,30845,30846,30847,30848,30849,30850,30851,22330,23581,24120,38271,20607,32928,21378,25950,30021,21809,20513,36229,25220,38046,26397,22066,28526,24034,21557,28818,36710,25199,25764,25507,24443,28552,37108,33251,36784,23576,26216,24561,27785,38472,36225,34924,25745,31216,22478,27225,25104,21576,20056,31243,24809,28548,35802,25215,36894,39563,31204,21507,30196,25345,21273,27744,36831,24347,39536,32827,40831,20360,23610,36196,32709,26021,28861,20805,20914,34411,23815,23456,25277,37228,30068,36364,31264,24833,31609,20167,32504,30597,19985,33261,21021,20986,27249,21416,36487,38148,38607,28353,38500,26970,30852,30853,30854,30856,30858,30859,30863,30864,30866,30868,30869,30870,30873,30877,30878,30880,30882,30884,30886,30888,30889,30890,30891,30892,30893,30894,30895,30901,30902,30903,30904,30906,30907,30908,30909,30911,30912,30914,30915,30916,30918,30919,30920,30924,30925,30926,30927,30929,30930,30931,30934,30935,30936,30938,30939,30940,30941,30942,30943,30944,30945,30946,30947,30948,30949,30950,30951,30953,30954,30955,30957,30958,30959,30960,30961,30963,30965,30966,30968,30969,30971,30972,30973,30974,30975,30976,30978,30979,30980,30982,30983,30984,30985,30986,30987,30988,30784,20648,30679,25616,35302,22788,25571,24029,31359,26941,20256,33337,21912,20018,30126,31383,24162,24202,38383,21019,21561,28810,25462,38180,22402,26149,26943,37255,21767,28147,32431,34850,25139,32496,30133,33576,30913,38604,36766,24904,29943,35789,27492,21050,36176,27425,32874,33905,22257,21254,20174,19995,20945,31895,37259,31751,20419,36479,31713,31388,25703,23828,20652,33030,30209,31929,28140,32736,26449,23384,23544,30923,25774,25619,25514,25387,38169,25645,36798,31572,30249,25171,22823,21574,27513,20643,25140,24102,27526,20195,36151,34955,24453,36910,30989,30990,30991,30992,30993,30994,30996,30997,30998,30999,31e3,31001,31002,31003,31004,31005,31007,31008,31009,31010,31011,31013,31014,31015,31016,31017,31018,31019,31020,31021,31022,31023,31024,31025,31026,31027,31029,31030,31031,31032,31033,31037,31039,31042,31043,31044,31045,31047,31050,31051,31052,31053,31054,31055,31056,31057,31058,31060,31061,31064,31065,31073,31075,31076,31078,31081,31082,31083,31084,31086,31088,31089,31090,31091,31092,31093,31094,31097,31099,31100,31101,31102,31103,31106,31107,31110,31111,31112,31113,31115,31116,31117,31118,31120,31121,31122,24608,32829,25285,20025,21333,37112,25528,32966,26086,27694,20294,24814,28129,35806,24377,34507,24403,25377,20826,33633,26723,20992,25443,36424,20498,23707,31095,23548,21040,31291,24764,36947,30423,24503,24471,30340,36460,28783,30331,31561,30634,20979,37011,22564,20302,28404,36842,25932,31515,29380,28068,32735,23265,25269,24213,22320,33922,31532,24093,24351,36882,32532,39072,25474,28359,30872,28857,20856,38747,22443,30005,20291,30008,24215,24806,22880,28096,27583,30857,21500,38613,20939,20993,25481,21514,38035,35843,36300,29241,30879,34678,36845,35853,21472,31123,31124,31125,31126,31127,31128,31129,31131,31132,31133,31134,31135,31136,31137,31138,31139,31140,31141,31142,31144,31145,31146,31147,31148,31149,31150,31151,31152,31153,31154,31156,31157,31158,31159,31160,31164,31167,31170,31172,31173,31175,31176,31178,31180,31182,31183,31184,31187,31188,31190,31191,31193,31194,31195,31196,31197,31198,31200,31201,31202,31205,31208,31210,31212,31214,31217,31218,31219,31220,31221,31222,31223,31225,31226,31228,31230,31231,31233,31236,31237,31239,31240,31241,31242,31244,31247,31248,31249,31250,31251,31253,31254,31256,31257,31259,31260,19969,30447,21486,38025,39030,40718,38189,23450,35746,20002,19996,20908,33891,25026,21160,26635,20375,24683,20923,27934,20828,25238,26007,38497,35910,36887,30168,37117,30563,27602,29322,29420,35835,22581,30585,36172,26460,38208,32922,24230,28193,22930,31471,30701,38203,27573,26029,32526,22534,20817,38431,23545,22697,21544,36466,25958,39039,22244,38045,30462,36929,25479,21702,22810,22842,22427,36530,26421,36346,33333,21057,24816,22549,34558,23784,40517,20420,39069,35769,23077,24694,21380,25212,36943,37122,39295,24681,32780,20799,32819,23572,39285,27953,20108,31261,31263,31265,31266,31268,31269,31270,31271,31272,31273,31274,31275,31276,31277,31278,31279,31280,31281,31282,31284,31285,31286,31288,31290,31294,31296,31297,31298,31299,31300,31301,31303,31304,31305,31306,31307,31308,31309,31310,31311,31312,31314,31315,31316,31317,31318,31320,31321,31322,31323,31324,31325,31326,31327,31328,31329,31330,31331,31332,31333,31334,31335,31336,31337,31338,31339,31340,31341,31342,31343,31345,31346,31347,31349,31355,31356,31357,31358,31362,31365,31367,31369,31370,31371,31372,31374,31375,31376,31379,31380,31385,31386,31387,31390,31393,31394,36144,21457,32602,31567,20240,20047,38400,27861,29648,34281,24070,30058,32763,27146,30718,38034,32321,20961,28902,21453,36820,33539,36137,29359,39277,27867,22346,33459,26041,32938,25151,38450,22952,20223,35775,32442,25918,33778,38750,21857,39134,32933,21290,35837,21536,32954,24223,27832,36153,33452,37210,21545,27675,20998,32439,22367,28954,27774,31881,22859,20221,24575,24868,31914,20016,23553,26539,34562,23792,38155,39118,30127,28925,36898,20911,32541,35773,22857,20964,20315,21542,22827,25975,32932,23413,25206,25282,36752,24133,27679,31526,20239,20440,26381,31395,31396,31399,31401,31402,31403,31406,31407,31408,31409,31410,31412,31413,31414,31415,31416,31417,31418,31419,31420,31421,31422,31424,31425,31426,31427,31428,31429,31430,31431,31432,31433,31434,31436,31437,31438,31439,31440,31441,31442,31443,31444,31445,31447,31448,31450,31451,31452,31453,31457,31458,31460,31463,31464,31465,31466,31467,31468,31470,31472,31473,31474,31475,31476,31477,31478,31479,31480,31483,31484,31486,31488,31489,31490,31493,31495,31497,31500,31501,31502,31504,31506,31507,31510,31511,31512,31514,31516,31517,31519,31521,31522,31523,31527,31529,31533,28014,28074,31119,34993,24343,29995,25242,36741,20463,37340,26023,33071,33105,24220,33104,36212,21103,35206,36171,22797,20613,20184,38428,29238,33145,36127,23500,35747,38468,22919,32538,21648,22134,22030,35813,25913,27010,38041,30422,28297,24178,29976,26438,26577,31487,32925,36214,24863,31174,25954,36195,20872,21018,38050,32568,32923,32434,23703,28207,26464,31705,30347,39640,33167,32660,31957,25630,38224,31295,21578,21733,27468,25601,25096,40509,33011,30105,21106,38761,33883,26684,34532,38401,38548,38124,20010,21508,32473,26681,36319,32789,26356,24218,32697,31535,31536,31538,31540,31541,31542,31543,31545,31547,31549,31551,31552,31553,31554,31555,31556,31558,31560,31562,31565,31566,31571,31573,31575,31577,31580,31582,31583,31585,31587,31588,31589,31590,31591,31592,31593,31594,31595,31596,31597,31599,31600,31603,31604,31606,31608,31610,31612,31613,31615,31617,31618,31619,31620,31622,31623,31624,31625,31626,31627,31628,31630,31631,31633,31634,31635,31638,31640,31641,31642,31643,31646,31647,31648,31651,31652,31653,31662,31663,31664,31666,31667,31669,31670,31671,31673,31674,31675,31676,31677,31678,31679,31680,31682,31683,31684,22466,32831,26775,24037,25915,21151,24685,40858,20379,36524,20844,23467,24339,24041,27742,25329,36129,20849,38057,21246,27807,33503,29399,22434,26500,36141,22815,36764,33735,21653,31629,20272,27837,23396,22993,40723,21476,34506,39592,35895,32929,25925,39038,22266,38599,21038,29916,21072,23521,25346,35074,20054,25296,24618,26874,20851,23448,20896,35266,31649,39302,32592,24815,28748,36143,20809,24191,36891,29808,35268,22317,30789,24402,40863,38394,36712,39740,35809,30328,26690,26588,36330,36149,21053,36746,28378,26829,38149,37101,22269,26524,35065,36807,21704,31685,31688,31689,31690,31691,31693,31694,31695,31696,31698,31700,31701,31702,31703,31704,31707,31708,31710,31711,31712,31714,31715,31716,31719,31720,31721,31723,31724,31725,31727,31728,31730,31731,31732,31733,31734,31736,31737,31738,31739,31741,31743,31744,31745,31746,31747,31748,31749,31750,31752,31753,31754,31757,31758,31760,31761,31762,31763,31764,31765,31767,31768,31769,31770,31771,31772,31773,31774,31776,31777,31778,31779,31780,31781,31784,31785,31787,31788,31789,31790,31791,31792,31793,31794,31795,31796,31797,31798,31799,31801,31802,31803,31804,31805,31806,31810,39608,23401,28023,27686,20133,23475,39559,37219,25e3,37039,38889,21547,28085,23506,20989,21898,32597,32752,25788,25421,26097,25022,24717,28938,27735,27721,22831,26477,33322,22741,22158,35946,27627,37085,22909,32791,21495,28009,21621,21917,33655,33743,26680,31166,21644,20309,21512,30418,35977,38402,27827,28088,36203,35088,40548,36154,22079,40657,30165,24456,29408,24680,21756,20136,27178,34913,24658,36720,21700,28888,34425,40511,27946,23439,24344,32418,21897,20399,29492,21564,21402,20505,21518,21628,20046,24573,29786,22774,33899,32993,34676,29392,31946,28246,31811,31812,31813,31814,31815,31816,31817,31818,31819,31820,31822,31823,31824,31825,31826,31827,31828,31829,31830,31831,31832,31833,31834,31835,31836,31837,31838,31839,31840,31841,31842,31843,31844,31845,31846,31847,31848,31849,31850,31851,31852,31853,31854,31855,31856,31857,31858,31861,31862,31863,31864,31865,31866,31870,31871,31872,31873,31874,31875,31876,31877,31878,31879,31880,31882,31883,31884,31885,31886,31887,31888,31891,31892,31894,31897,31898,31899,31904,31905,31907,31910,31911,31912,31913,31915,31916,31917,31919,31920,31924,31925,31926,31927,31928,31930,31931,24359,34382,21804,25252,20114,27818,25143,33457,21719,21326,29502,28369,30011,21010,21270,35805,27088,24458,24576,28142,22351,27426,29615,26707,36824,32531,25442,24739,21796,30186,35938,28949,28067,23462,24187,33618,24908,40644,30970,34647,31783,30343,20976,24822,29004,26179,24140,24653,35854,28784,25381,36745,24509,24674,34516,22238,27585,24724,24935,21321,24800,26214,36159,31229,20250,28905,27719,35763,35826,32472,33636,26127,23130,39746,27985,28151,35905,27963,20249,28779,33719,25110,24785,38669,36135,31096,20987,22334,22522,26426,30072,31293,31215,31637,31935,31936,31938,31939,31940,31942,31945,31947,31950,31951,31952,31953,31954,31955,31956,31960,31962,31963,31965,31966,31969,31970,31971,31972,31973,31974,31975,31977,31978,31979,31980,31981,31982,31984,31985,31986,31987,31988,31989,31990,31991,31993,31994,31996,31997,31998,31999,32e3,32001,32002,32003,32004,32005,32006,32007,32008,32009,32011,32012,32013,32014,32015,32016,32017,32018,32019,32020,32021,32022,32023,32024,32025,32026,32027,32028,32029,32030,32031,32033,32035,32036,32037,32038,32040,32041,32042,32044,32045,32046,32048,32049,32050,32051,32052,32053,32054,32908,39269,36857,28608,35749,40481,23020,32489,32521,21513,26497,26840,36753,31821,38598,21450,24613,30142,27762,21363,23241,32423,25380,20960,33034,24049,34015,25216,20864,23395,20238,31085,21058,24760,27982,23492,23490,35745,35760,26082,24524,38469,22931,32487,32426,22025,26551,22841,20339,23478,21152,33626,39050,36158,30002,38078,20551,31292,20215,26550,39550,23233,27516,30417,22362,23574,31546,38388,29006,20860,32937,33392,22904,32516,33575,26816,26604,30897,30839,25315,25441,31616,20461,21098,20943,33616,27099,37492,36341,36145,35265,38190,31661,20214,32055,32056,32057,32058,32059,32060,32061,32062,32063,32064,32065,32066,32067,32068,32069,32070,32071,32072,32073,32074,32075,32076,32077,32078,32079,32080,32081,32082,32083,32084,32085,32086,32087,32088,32089,32090,32091,32092,32093,32094,32095,32096,32097,32098,32099,32100,32101,32102,32103,32104,32105,32106,32107,32108,32109,32111,32112,32113,32114,32115,32116,32117,32118,32120,32121,32122,32123,32124,32125,32126,32127,32128,32129,32130,32131,32132,32133,32134,32135,32136,32137,32138,32139,32140,32141,32142,32143,32144,32145,32146,32147,32148,32149,32150,32151,32152,20581,33328,21073,39279,28176,28293,28071,24314,20725,23004,23558,27974,27743,30086,33931,26728,22870,35762,21280,37233,38477,34121,26898,30977,28966,33014,20132,37066,27975,39556,23047,22204,25605,38128,30699,20389,33050,29409,35282,39290,32564,32478,21119,25945,37237,36735,36739,21483,31382,25581,25509,30342,31224,34903,38454,25130,21163,33410,26708,26480,25463,30571,31469,27905,32467,35299,22992,25106,34249,33445,30028,20511,20171,30117,35819,23626,24062,31563,26020,37329,20170,27941,35167,32039,38182,20165,35880,36827,38771,26187,31105,36817,28908,28024,32153,32154,32155,32156,32157,32158,32159,32160,32161,32162,32163,32164,32165,32167,32168,32169,32170,32171,32172,32173,32175,32176,32177,32178,32179,32180,32181,32182,32183,32184,32185,32186,32187,32188,32189,32190,32191,32192,32193,32194,32195,32196,32197,32198,32199,32200,32201,32202,32203,32204,32205,32206,32207,32208,32209,32210,32211,32212,32213,32214,32215,32216,32217,32218,32219,32220,32221,32222,32223,32224,32225,32226,32227,32228,32229,32230,32231,32232,32233,32234,32235,32236,32237,32238,32239,32240,32241,32242,32243,32244,32245,32246,32247,32248,32249,32250,23613,21170,33606,20834,33550,30555,26230,40120,20140,24778,31934,31923,32463,20117,35686,26223,39048,38745,22659,25964,38236,24452,30153,38742,31455,31454,20928,28847,31384,25578,31350,32416,29590,38893,20037,28792,20061,37202,21417,25937,26087,33276,33285,21646,23601,30106,38816,25304,29401,30141,23621,39545,33738,23616,21632,30697,20030,27822,32858,25298,25454,24040,20855,36317,36382,38191,20465,21477,24807,28844,21095,25424,40515,23071,20518,30519,21367,32482,25733,25899,25225,25496,20500,29237,35273,20915,35776,32477,22343,33740,38055,20891,21531,23803,32251,32252,32253,32254,32255,32256,32257,32258,32259,32260,32261,32262,32263,32264,32265,32266,32267,32268,32269,32270,32271,32272,32273,32274,32275,32276,32277,32278,32279,32280,32281,32282,32283,32284,32285,32286,32287,32288,32289,32290,32291,32292,32293,32294,32295,32296,32297,32298,32299,32300,32301,32302,32303,32304,32305,32306,32307,32308,32309,32310,32311,32312,32313,32314,32316,32317,32318,32319,32320,32322,32323,32324,32325,32326,32328,32329,32330,32331,32332,32333,32334,32335,32336,32337,32338,32339,32340,32341,32342,32343,32344,32345,32346,32347,32348,32349,20426,31459,27994,37089,39567,21888,21654,21345,21679,24320,25577,26999,20975,24936,21002,22570,21208,22350,30733,30475,24247,24951,31968,25179,25239,20130,28821,32771,25335,28900,38752,22391,33499,26607,26869,30933,39063,31185,22771,21683,21487,28212,20811,21051,23458,35838,32943,21827,22438,24691,22353,21549,31354,24656,23380,25511,25248,21475,25187,23495,26543,21741,31391,33510,37239,24211,35044,22840,22446,25358,36328,33007,22359,31607,20393,24555,23485,27454,21281,31568,29378,26694,30719,30518,26103,20917,20111,30420,23743,31397,33909,22862,39745,20608,32350,32351,32352,32353,32354,32355,32356,32357,32358,32359,32360,32361,32362,32363,32364,32365,32366,32367,32368,32369,32370,32371,32372,32373,32374,32375,32376,32377,32378,32379,32380,32381,32382,32383,32384,32385,32387,32388,32389,32390,32391,32392,32393,32394,32395,32396,32397,32398,32399,32400,32401,32402,32403,32404,32405,32406,32407,32408,32409,32410,32412,32413,32414,32430,32436,32443,32444,32470,32484,32492,32505,32522,32528,32542,32567,32569,32571,32572,32573,32574,32575,32576,32577,32579,32582,32583,32584,32585,32586,32587,32588,32589,32590,32591,32594,32595,39304,24871,28291,22372,26118,25414,22256,25324,25193,24275,38420,22403,25289,21895,34593,33098,36771,21862,33713,26469,36182,34013,23146,26639,25318,31726,38417,20848,28572,35888,25597,35272,25042,32518,28866,28389,29701,27028,29436,24266,37070,26391,28010,25438,21171,29282,32769,20332,23013,37226,28889,28061,21202,20048,38647,38253,34174,30922,32047,20769,22418,25794,32907,31867,27882,26865,26974,20919,21400,26792,29313,40654,31729,29432,31163,28435,29702,26446,37324,40100,31036,33673,33620,21519,26647,20029,21385,21169,30782,21382,21033,20616,20363,20432,32598,32601,32603,32604,32605,32606,32608,32611,32612,32613,32614,32615,32619,32620,32621,32623,32624,32627,32629,32630,32631,32632,32634,32635,32636,32637,32639,32640,32642,32643,32644,32645,32646,32647,32648,32649,32651,32653,32655,32656,32657,32658,32659,32661,32662,32663,32664,32665,32667,32668,32672,32674,32675,32677,32678,32680,32681,32682,32683,32684,32685,32686,32689,32691,32692,32693,32694,32695,32698,32699,32702,32704,32706,32707,32708,32710,32711,32712,32713,32715,32717,32719,32720,32721,32722,32723,32726,32727,32729,32730,32731,32732,32733,32734,32738,32739,30178,31435,31890,27813,38582,21147,29827,21737,20457,32852,33714,36830,38256,24265,24604,28063,24088,25947,33080,38142,24651,28860,32451,31918,20937,26753,31921,33391,20004,36742,37327,26238,20142,35845,25769,32842,20698,30103,29134,23525,36797,28518,20102,25730,38243,24278,26009,21015,35010,28872,21155,29454,29747,26519,30967,38678,20020,37051,40158,28107,20955,36161,21533,25294,29618,33777,38646,40836,38083,20278,32666,20940,28789,38517,23725,39046,21478,20196,28316,29705,27060,30827,39311,30041,21016,30244,27969,26611,20845,40857,32843,21657,31548,31423,32740,32743,32744,32746,32747,32748,32749,32751,32754,32756,32757,32758,32759,32760,32761,32762,32765,32766,32767,32770,32775,32776,32777,32778,32782,32783,32785,32787,32794,32795,32797,32798,32799,32801,32803,32804,32811,32812,32813,32814,32815,32816,32818,32820,32825,32826,32828,32830,32832,32833,32836,32837,32839,32840,32841,32846,32847,32848,32849,32851,32853,32854,32855,32857,32859,32860,32861,32862,32863,32864,32865,32866,32867,32868,32869,32870,32871,32872,32875,32876,32877,32878,32879,32880,32882,32883,32884,32885,32886,32887,32888,32889,32890,32891,32892,32893,38534,22404,25314,38471,27004,23044,25602,31699,28431,38475,33446,21346,39045,24208,28809,25523,21348,34383,40065,40595,30860,38706,36335,36162,40575,28510,31108,24405,38470,25134,39540,21525,38109,20387,26053,23653,23649,32533,34385,27695,24459,29575,28388,32511,23782,25371,23402,28390,21365,20081,25504,30053,25249,36718,20262,20177,27814,32438,35770,33821,34746,32599,36923,38179,31657,39585,35064,33853,27931,39558,32476,22920,40635,29595,30721,34434,39532,39554,22043,21527,22475,20080,40614,21334,36808,33033,30610,39314,34542,28385,34067,26364,24930,28459,32894,32897,32898,32901,32904,32906,32909,32910,32911,32912,32913,32914,32916,32917,32919,32921,32926,32931,32934,32935,32936,32940,32944,32947,32949,32950,32952,32953,32955,32965,32967,32968,32969,32970,32971,32975,32976,32977,32978,32979,32980,32981,32984,32991,32992,32994,32995,32998,33006,33013,33015,33017,33019,33022,33023,33024,33025,33027,33028,33029,33031,33032,33035,33036,33045,33047,33049,33051,33052,33053,33055,33056,33057,33058,33059,33060,33061,33062,33063,33064,33065,33066,33067,33069,33070,33072,33075,33076,33077,33079,33081,33082,33083,33084,33085,33087,35881,33426,33579,30450,27667,24537,33725,29483,33541,38170,27611,30683,38086,21359,33538,20882,24125,35980,36152,20040,29611,26522,26757,37238,38665,29028,27809,30473,23186,38209,27599,32654,26151,23504,22969,23194,38376,38391,20204,33804,33945,27308,30431,38192,29467,26790,23391,30511,37274,38753,31964,36855,35868,24357,31859,31192,35269,27852,34588,23494,24130,26825,30496,32501,20885,20813,21193,23081,32517,38754,33495,25551,30596,34256,31186,28218,24217,22937,34065,28781,27665,25279,30399,25935,24751,38397,26126,34719,40483,38125,21517,21629,35884,25720,33088,33089,33090,33091,33092,33093,33095,33097,33101,33102,33103,33106,33110,33111,33112,33115,33116,33117,33118,33119,33121,33122,33123,33124,33126,33128,33130,33131,33132,33135,33138,33139,33141,33142,33143,33144,33153,33155,33156,33157,33158,33159,33161,33163,33164,33165,33166,33168,33170,33171,33172,33173,33174,33175,33177,33178,33182,33183,33184,33185,33186,33188,33189,33191,33193,33195,33196,33197,33198,33199,33200,33201,33202,33204,33205,33206,33207,33208,33209,33212,33213,33214,33215,33220,33221,33223,33224,33225,33227,33229,33230,33231,33232,33233,33234,33235,25721,34321,27169,33180,30952,25705,39764,25273,26411,33707,22696,40664,27819,28448,23518,38476,35851,29279,26576,25287,29281,20137,22982,27597,22675,26286,24149,21215,24917,26408,30446,30566,29287,31302,25343,21738,21584,38048,37027,23068,32435,27670,20035,22902,32784,22856,21335,30007,38590,22218,25376,33041,24700,38393,28118,21602,39297,20869,23273,33021,22958,38675,20522,27877,23612,25311,20320,21311,33147,36870,28346,34091,25288,24180,30910,25781,25467,24565,23064,37247,40479,23615,25423,32834,23421,21870,38218,38221,28037,24744,26592,29406,20957,23425,33236,33237,33238,33239,33240,33241,33242,33243,33244,33245,33246,33247,33248,33249,33250,33252,33253,33254,33256,33257,33259,33262,33263,33264,33265,33266,33269,33270,33271,33272,33273,33274,33277,33279,33283,33287,33288,33289,33290,33291,33294,33295,33297,33299,33301,33302,33303,33304,33305,33306,33309,33312,33316,33317,33318,33319,33321,33326,33330,33338,33340,33341,33343,33344,33345,33346,33347,33349,33350,33352,33354,33356,33357,33358,33360,33361,33362,33363,33364,33365,33366,33367,33369,33371,33372,33373,33374,33376,33377,33378,33379,33380,33381,33382,33383,33385,25319,27870,29275,25197,38062,32445,33043,27987,20892,24324,22900,21162,24594,22899,26262,34384,30111,25386,25062,31983,35834,21734,27431,40485,27572,34261,21589,20598,27812,21866,36276,29228,24085,24597,29750,25293,25490,29260,24472,28227,27966,25856,28504,30424,30928,30460,30036,21028,21467,20051,24222,26049,32810,32982,25243,21638,21032,28846,34957,36305,27873,21624,32986,22521,35060,36180,38506,37197,20329,27803,21943,30406,30768,25256,28921,28558,24429,34028,26842,30844,31735,33192,26379,40527,25447,30896,22383,30738,38713,25209,25259,21128,29749,27607,33386,33387,33388,33389,33393,33397,33398,33399,33400,33403,33404,33408,33409,33411,33413,33414,33415,33417,33420,33424,33427,33428,33429,33430,33434,33435,33438,33440,33442,33443,33447,33458,33461,33462,33466,33467,33468,33471,33472,33474,33475,33477,33478,33481,33488,33494,33497,33498,33501,33506,33511,33512,33513,33514,33516,33517,33518,33520,33522,33523,33525,33526,33528,33530,33532,33533,33534,33535,33536,33546,33547,33549,33552,33554,33555,33558,33560,33561,33565,33566,33567,33568,33569,33570,33571,33572,33573,33574,33577,33578,33582,33584,33586,33591,33595,33597,21860,33086,30130,30382,21305,30174,20731,23617,35692,31687,20559,29255,39575,39128,28418,29922,31080,25735,30629,25340,39057,36139,21697,32856,20050,22378,33529,33805,24179,20973,29942,35780,23631,22369,27900,39047,23110,30772,39748,36843,31893,21078,25169,38138,20166,33670,33889,33769,33970,22484,26420,22275,26222,28006,35889,26333,28689,26399,27450,26646,25114,22971,19971,20932,28422,26578,27791,20854,26827,22855,27495,30054,23822,33040,40784,26071,31048,31041,39569,36215,23682,20062,20225,21551,22865,30732,22120,27668,36804,24323,27773,27875,35755,25488,33598,33599,33601,33602,33604,33605,33608,33610,33611,33612,33613,33614,33619,33621,33622,33623,33624,33625,33629,33634,33648,33649,33650,33651,33652,33653,33654,33657,33658,33662,33663,33664,33665,33666,33667,33668,33671,33672,33674,33675,33676,33677,33679,33680,33681,33684,33685,33686,33687,33689,33690,33693,33695,33697,33698,33699,33700,33701,33702,33703,33708,33709,33710,33711,33717,33723,33726,33727,33730,33731,33732,33734,33736,33737,33739,33741,33742,33744,33745,33746,33747,33749,33751,33753,33754,33755,33758,33762,33763,33764,33766,33767,33768,33771,33772,33773,24688,27965,29301,25190,38030,38085,21315,36801,31614,20191,35878,20094,40660,38065,38067,21069,28508,36963,27973,35892,22545,23884,27424,27465,26538,21595,33108,32652,22681,34103,24378,25250,27207,38201,25970,24708,26725,30631,20052,20392,24039,38808,25772,32728,23789,20431,31373,20999,33540,19988,24623,31363,38054,20405,20146,31206,29748,21220,33465,25810,31165,23517,27777,38738,36731,27682,20542,21375,28165,25806,26228,27696,24773,39031,35831,24198,29756,31351,31179,19992,37041,29699,27714,22234,37195,27845,36235,21306,34502,26354,36527,23624,39537,28192,33774,33775,33779,33780,33781,33782,33783,33786,33787,33788,33790,33791,33792,33794,33797,33799,33800,33801,33802,33808,33810,33811,33812,33813,33814,33815,33817,33818,33819,33822,33823,33824,33825,33826,33827,33833,33834,33835,33836,33837,33838,33839,33840,33842,33843,33844,33845,33846,33847,33849,33850,33851,33854,33855,33856,33857,33858,33859,33860,33861,33863,33864,33865,33866,33867,33868,33869,33870,33871,33872,33874,33875,33876,33877,33878,33880,33885,33886,33887,33888,33890,33892,33893,33894,33895,33896,33898,33902,33903,33904,33906,33908,33911,33913,33915,33916,21462,23094,40843,36259,21435,22280,39079,26435,37275,27849,20840,30154,25331,29356,21048,21149,32570,28820,30264,21364,40522,27063,30830,38592,35033,32676,28982,29123,20873,26579,29924,22756,25880,22199,35753,39286,25200,32469,24825,28909,22764,20161,20154,24525,38887,20219,35748,20995,22922,32427,25172,20173,26085,25102,33592,33993,33635,34701,29076,28342,23481,32466,20887,25545,26580,32905,33593,34837,20754,23418,22914,36785,20083,27741,20837,35109,36719,38446,34122,29790,38160,38384,28070,33509,24369,25746,27922,33832,33134,40131,22622,36187,19977,21441,33917,33918,33919,33920,33921,33923,33924,33925,33926,33930,33933,33935,33936,33937,33938,33939,33940,33941,33942,33944,33946,33947,33949,33950,33951,33952,33954,33955,33956,33957,33958,33959,33960,33961,33962,33963,33964,33965,33966,33968,33969,33971,33973,33974,33975,33979,33980,33982,33984,33986,33987,33989,33990,33991,33992,33995,33996,33998,33999,34002,34004,34005,34007,34008,34009,34010,34011,34012,34014,34017,34018,34020,34023,34024,34025,34026,34027,34029,34030,34031,34033,34034,34035,34036,34037,34038,34039,34040,34041,34042,34043,34045,34046,34048,34049,34050,20254,25955,26705,21971,20007,25620,39578,25195,23234,29791,33394,28073,26862,20711,33678,30722,26432,21049,27801,32433,20667,21861,29022,31579,26194,29642,33515,26441,23665,21024,29053,34923,38378,38485,25797,36193,33203,21892,27733,25159,32558,22674,20260,21830,36175,26188,19978,23578,35059,26786,25422,31245,28903,33421,21242,38902,23569,21736,37045,32461,22882,36170,34503,33292,33293,36198,25668,23556,24913,28041,31038,35774,30775,30003,21627,20280,36523,28145,23072,32453,31070,27784,23457,23158,29978,32958,24910,28183,22768,29983,29989,29298,21319,32499,34051,34052,34053,34054,34055,34056,34057,34058,34059,34061,34062,34063,34064,34066,34068,34069,34070,34072,34073,34075,34076,34077,34078,34080,34082,34083,34084,34085,34086,34087,34088,34089,34090,34093,34094,34095,34096,34097,34098,34099,34100,34101,34102,34110,34111,34112,34113,34114,34116,34117,34118,34119,34123,34124,34125,34126,34127,34128,34129,34130,34131,34132,34133,34135,34136,34138,34139,34140,34141,34143,34144,34145,34146,34147,34149,34150,34151,34153,34154,34155,34156,34157,34158,34159,34160,34161,34163,34165,34166,34167,34168,34172,34173,34175,34176,34177,30465,30427,21097,32988,22307,24072,22833,29422,26045,28287,35799,23608,34417,21313,30707,25342,26102,20160,39135,34432,23454,35782,21490,30690,20351,23630,39542,22987,24335,31034,22763,19990,26623,20107,25325,35475,36893,21183,26159,21980,22124,36866,20181,20365,37322,39280,27663,24066,24643,23460,35270,35797,25910,25163,39318,23432,23551,25480,21806,21463,30246,20861,34092,26530,26803,27530,25234,36755,21460,33298,28113,30095,20070,36174,23408,29087,34223,26257,26329,32626,34560,40653,40736,23646,26415,36848,26641,26463,25101,31446,22661,24246,25968,28465,34178,34179,34182,34184,34185,34186,34187,34188,34189,34190,34192,34193,34194,34195,34196,34197,34198,34199,34200,34201,34202,34205,34206,34207,34208,34209,34210,34211,34213,34214,34215,34217,34219,34220,34221,34225,34226,34227,34228,34229,34230,34232,34234,34235,34236,34237,34238,34239,34240,34242,34243,34244,34245,34246,34247,34248,34250,34251,34252,34253,34254,34257,34258,34260,34262,34263,34264,34265,34266,34267,34269,34270,34271,34272,34273,34274,34275,34277,34278,34279,34280,34282,34283,34284,34285,34286,34287,34288,34289,34290,34291,34292,34293,34294,34295,34296,24661,21047,32781,25684,34928,29993,24069,26643,25332,38684,21452,29245,35841,27700,30561,31246,21550,30636,39034,33308,35828,30805,26388,28865,26031,25749,22070,24605,31169,21496,19997,27515,32902,23546,21987,22235,20282,20284,39282,24051,26494,32824,24578,39042,36865,23435,35772,35829,25628,33368,25822,22013,33487,37221,20439,32032,36895,31903,20723,22609,28335,23487,35785,32899,37240,33948,31639,34429,38539,38543,32485,39635,30862,23681,31319,36930,38567,31071,23385,25439,31499,34001,26797,21766,32553,29712,32034,38145,25152,22604,20182,23427,22905,22612,34297,34298,34300,34301,34302,34304,34305,34306,34307,34308,34310,34311,34312,34313,34314,34315,34316,34317,34318,34319,34320,34322,34323,34324,34325,34327,34328,34329,34330,34331,34332,34333,34334,34335,34336,34337,34338,34339,34340,34341,34342,34344,34346,34347,34348,34349,34350,34351,34352,34353,34354,34355,34356,34357,34358,34359,34361,34362,34363,34365,34366,34367,34368,34369,34370,34371,34372,34373,34374,34375,34376,34377,34378,34379,34380,34386,34387,34389,34390,34391,34392,34393,34395,34396,34397,34399,34400,34401,34403,34404,34405,34406,34407,34408,34409,34410,29549,25374,36427,36367,32974,33492,25260,21488,27888,37214,22826,24577,27760,22349,25674,36138,30251,28393,22363,27264,30192,28525,35885,35848,22374,27631,34962,30899,25506,21497,28845,27748,22616,25642,22530,26848,33179,21776,31958,20504,36538,28108,36255,28907,25487,28059,28372,32486,33796,26691,36867,28120,38518,35752,22871,29305,34276,33150,30140,35466,26799,21076,36386,38161,25552,39064,36420,21884,20307,26367,22159,24789,28053,21059,23625,22825,28155,22635,3e4,29980,24684,33300,33094,25361,26465,36834,30522,36339,36148,38081,24086,21381,21548,28867,34413,34415,34416,34418,34419,34420,34421,34422,34423,34424,34435,34436,34437,34438,34439,34440,34441,34446,34447,34448,34449,34450,34452,34454,34455,34456,34457,34458,34459,34462,34463,34464,34465,34466,34469,34470,34475,34477,34478,34482,34483,34487,34488,34489,34491,34492,34493,34494,34495,34497,34498,34499,34501,34504,34508,34509,34514,34515,34517,34518,34519,34522,34524,34525,34528,34529,34530,34531,34533,34534,34535,34536,34538,34539,34540,34543,34549,34550,34551,34554,34555,34556,34557,34559,34561,34564,34565,34566,34571,34572,34574,34575,34576,34577,34580,34582,27712,24311,20572,20141,24237,25402,33351,36890,26704,37230,30643,21516,38108,24420,31461,26742,25413,31570,32479,30171,20599,25237,22836,36879,20984,31171,31361,22270,24466,36884,28034,23648,22303,21520,20820,28237,22242,25512,39059,33151,34581,35114,36864,21534,23663,33216,25302,25176,33073,40501,38464,39534,39548,26925,22949,25299,21822,25366,21703,34521,27964,23043,29926,34972,27498,22806,35916,24367,28286,29609,39037,20024,28919,23436,30871,25405,26202,30358,24779,23451,23113,19975,33109,27754,29579,20129,26505,32593,24448,26106,26395,24536,22916,23041,34585,34587,34589,34591,34592,34596,34598,34599,34600,34602,34603,34604,34605,34607,34608,34610,34611,34613,34614,34616,34617,34618,34620,34621,34624,34625,34626,34627,34628,34629,34630,34634,34635,34637,34639,34640,34641,34642,34644,34645,34646,34648,34650,34651,34652,34653,34654,34655,34657,34658,34662,34663,34664,34665,34666,34667,34668,34669,34671,34673,34674,34675,34677,34679,34680,34681,34682,34687,34688,34689,34692,34694,34695,34697,34698,34700,34702,34703,34704,34705,34706,34708,34709,34710,34712,34713,34714,34715,34716,34717,34718,34720,34721,34722,34723,34724,24013,24494,21361,38886,36829,26693,22260,21807,24799,20026,28493,32500,33479,33806,22996,20255,20266,23614,32428,26410,34074,21619,30031,32963,21890,39759,20301,28205,35859,23561,24944,21355,30239,28201,34442,25991,38395,32441,21563,31283,32010,38382,21985,32705,29934,25373,34583,28065,31389,25105,26017,21351,25569,27779,24043,21596,38056,20044,27745,35820,23627,26080,33436,26791,21566,21556,27595,27494,20116,25410,21320,33310,20237,20398,22366,25098,38654,26212,29289,21247,21153,24735,35823,26132,29081,26512,35199,30802,30717,26224,22075,21560,38177,29306,34725,34726,34727,34729,34730,34734,34736,34737,34738,34740,34742,34743,34744,34745,34747,34748,34750,34751,34753,34754,34755,34756,34757,34759,34760,34761,34764,34765,34766,34767,34768,34772,34773,34774,34775,34776,34777,34778,34780,34781,34782,34783,34785,34786,34787,34788,34790,34791,34792,34793,34795,34796,34797,34799,34800,34801,34802,34803,34804,34805,34806,34807,34808,34810,34811,34812,34813,34815,34816,34817,34818,34820,34821,34822,34823,34824,34825,34827,34828,34829,34830,34831,34832,34833,34834,34836,34839,34840,34841,34842,34844,34845,34846,34847,34848,34851,31232,24687,24076,24713,33181,22805,24796,29060,28911,28330,27728,29312,27268,34989,24109,20064,23219,21916,38115,27927,31995,38553,25103,32454,30606,34430,21283,38686,36758,26247,23777,20384,29421,19979,21414,22799,21523,25472,38184,20808,20185,40092,32420,21688,36132,34900,33335,38386,28046,24358,23244,26174,38505,29616,29486,21439,33146,39301,32673,23466,38519,38480,32447,30456,21410,38262,39321,31665,35140,28248,20065,32724,31077,35814,24819,21709,20139,39033,24055,27233,20687,21521,35937,33831,30813,38660,21066,21742,22179,38144,28040,23477,28102,26195,34852,34853,34854,34855,34856,34857,34858,34859,34860,34861,34862,34863,34864,34865,34867,34868,34869,34870,34871,34872,34874,34875,34877,34878,34879,34881,34882,34883,34886,34887,34888,34889,34890,34891,34894,34895,34896,34897,34898,34899,34901,34902,34904,34906,34907,34908,34909,34910,34911,34912,34918,34919,34922,34925,34927,34929,34931,34932,34933,34934,34936,34937,34938,34939,34940,34944,34947,34950,34951,34953,34954,34956,34958,34959,34960,34961,34963,34964,34965,34967,34968,34969,34970,34971,34973,34974,34975,34976,34977,34979,34981,34982,34983,34984,34985,34986,23567,23389,26657,32918,21880,31505,25928,26964,20123,27463,34638,38795,21327,25375,25658,37034,26012,32961,35856,20889,26800,21368,34809,25032,27844,27899,35874,23633,34218,33455,38156,27427,36763,26032,24571,24515,20449,34885,26143,33125,29481,24826,20852,21009,22411,24418,37026,34892,37266,24184,26447,24615,22995,20804,20982,33016,21256,27769,38596,29066,20241,20462,32670,26429,21957,38152,31168,34966,32483,22687,25100,38656,34394,22040,39035,24464,35768,33988,37207,21465,26093,24207,30044,24676,32110,23167,32490,32493,36713,21927,23459,24748,26059,29572,34988,34990,34991,34992,34994,34995,34996,34997,34998,35e3,35001,35002,35003,35005,35006,35007,35008,35011,35012,35015,35016,35018,35019,35020,35021,35023,35024,35025,35027,35030,35031,35034,35035,35036,35037,35038,35040,35041,35046,35047,35049,35050,35051,35052,35053,35054,35055,35058,35061,35062,35063,35066,35067,35069,35071,35072,35073,35075,35076,35077,35078,35079,35080,35081,35083,35084,35085,35086,35087,35089,35092,35093,35094,35095,35096,35100,35101,35102,35103,35104,35106,35107,35108,35110,35111,35112,35113,35116,35117,35118,35119,35121,35122,35123,35125,35127,36873,30307,30505,32474,38772,34203,23398,31348,38634,34880,21195,29071,24490,26092,35810,23547,39535,24033,27529,27739,35757,35759,36874,36805,21387,25276,40486,40493,21568,20011,33469,29273,34460,23830,34905,28079,38597,21713,20122,35766,28937,21693,38409,28895,28153,30416,20005,30740,34578,23721,24310,35328,39068,38414,28814,27839,22852,25513,30524,34893,28436,33395,22576,29141,21388,30746,38593,21761,24422,28976,23476,35866,39564,27523,22830,40495,31207,26472,25196,20335,30113,32650,27915,38451,27687,20208,30162,20859,26679,28478,36992,33136,22934,29814,35128,35129,35130,35131,35132,35133,35134,35135,35136,35138,35139,35141,35142,35143,35144,35145,35146,35147,35148,35149,35150,35151,35152,35153,35154,35155,35156,35157,35158,35159,35160,35161,35162,35163,35164,35165,35168,35169,35170,35171,35172,35173,35175,35176,35177,35178,35179,35180,35181,35182,35183,35184,35185,35186,35187,35188,35189,35190,35191,35192,35193,35194,35196,35197,35198,35200,35202,35204,35205,35207,35208,35209,35210,35211,35212,35213,35214,35215,35216,35217,35218,35219,35220,35221,35222,35223,35224,35225,35226,35227,35228,35229,35230,35231,35232,35233,25671,23591,36965,31377,35875,23002,21676,33280,33647,35201,32768,26928,22094,32822,29239,37326,20918,20063,39029,25494,19994,21494,26355,33099,22812,28082,19968,22777,21307,25558,38129,20381,20234,34915,39056,22839,36951,31227,20202,33008,30097,27778,23452,23016,24413,26885,34433,20506,24050,20057,30691,20197,33402,25233,26131,37009,23673,20159,24441,33222,36920,32900,30123,20134,35028,24847,27589,24518,20041,30410,28322,35811,35758,35850,35793,24322,32764,32716,32462,33589,33643,22240,27575,38899,38452,23035,21535,38134,28139,23493,39278,23609,24341,38544,35234,35235,35236,35237,35238,35239,35240,35241,35242,35243,35244,35245,35246,35247,35248,35249,35250,35251,35252,35253,35254,35255,35256,35257,35258,35259,35260,35261,35262,35263,35264,35267,35277,35283,35284,35285,35287,35288,35289,35291,35293,35295,35296,35297,35298,35300,35303,35304,35305,35306,35308,35309,35310,35312,35313,35314,35316,35317,35318,35319,35320,35321,35322,35323,35324,35325,35326,35327,35329,35330,35331,35332,35333,35334,35336,35337,35338,35339,35340,35341,35342,35343,35344,35345,35346,35347,35348,35349,35350,35351,35352,35353,35354,35355,35356,35357,21360,33521,27185,23156,40560,24212,32552,33721,33828,33829,33639,34631,36814,36194,30408,24433,39062,30828,26144,21727,25317,20323,33219,30152,24248,38605,36362,34553,21647,27891,28044,27704,24703,21191,29992,24189,20248,24736,24551,23588,30001,37038,38080,29369,27833,28216,37193,26377,21451,21491,20305,37321,35825,21448,24188,36802,28132,20110,30402,27014,34398,24858,33286,20313,20446,36926,40060,24841,28189,28180,38533,20104,23089,38632,19982,23679,31161,23431,35821,32701,29577,22495,33419,37057,21505,36935,21947,23786,24481,24840,27442,29425,32946,35465,35358,35359,35360,35361,35362,35363,35364,35365,35366,35367,35368,35369,35370,35371,35372,35373,35374,35375,35376,35377,35378,35379,35380,35381,35382,35383,35384,35385,35386,35387,35388,35389,35391,35392,35393,35394,35395,35396,35397,35398,35399,35401,35402,35403,35404,35405,35406,35407,35408,35409,35410,35411,35412,35413,35414,35415,35416,35417,35418,35419,35420,35421,35422,35423,35424,35425,35426,35427,35428,35429,35430,35431,35432,35433,35434,35435,35436,35437,35438,35439,35440,35441,35442,35443,35444,35445,35446,35447,35448,35450,35451,35452,35453,35454,35455,35456,28020,23507,35029,39044,35947,39533,40499,28170,20900,20803,22435,34945,21407,25588,36757,22253,21592,22278,29503,28304,32536,36828,33489,24895,24616,38498,26352,32422,36234,36291,38053,23731,31908,26376,24742,38405,32792,20113,37095,21248,38504,20801,36816,34164,37213,26197,38901,23381,21277,30776,26434,26685,21705,28798,23472,36733,20877,22312,21681,25874,26242,36190,36163,33039,33900,36973,31967,20991,34299,26531,26089,28577,34468,36481,22122,36896,30338,28790,29157,36131,25321,21017,27901,36156,24590,22686,24974,26366,36192,25166,21939,28195,26413,36711,35457,35458,35459,35460,35461,35462,35463,35464,35467,35468,35469,35470,35471,35472,35473,35474,35476,35477,35478,35479,35480,35481,35482,35483,35484,35485,35486,35487,35488,35489,35490,35491,35492,35493,35494,35495,35496,35497,35498,35499,35500,35501,35502,35503,35504,35505,35506,35507,35508,35509,35510,35511,35512,35513,35514,35515,35516,35517,35518,35519,35520,35521,35522,35523,35524,35525,35526,35527,35528,35529,35530,35531,35532,35533,35534,35535,35536,35537,35538,35539,35540,35541,35542,35543,35544,35545,35546,35547,35548,35549,35550,35551,35552,35553,35554,35555,38113,38392,30504,26629,27048,21643,20045,28856,35784,25688,25995,23429,31364,20538,23528,30651,27617,35449,31896,27838,30415,26025,36759,23853,23637,34360,26632,21344,25112,31449,28251,32509,27167,31456,24432,28467,24352,25484,28072,26454,19976,24080,36134,20183,32960,30260,38556,25307,26157,25214,27836,36213,29031,32617,20806,32903,21484,36974,25240,21746,34544,36761,32773,38167,34071,36825,27993,29645,26015,30495,29956,30759,33275,36126,38024,20390,26517,30137,35786,38663,25391,38215,38453,33976,25379,30529,24449,29424,20105,24596,25972,25327,27491,25919,35556,35557,35558,35559,35560,35561,35562,35563,35564,35565,35566,35567,35568,35569,35570,35571,35572,35573,35574,35575,35576,35577,35578,35579,35580,35581,35582,35583,35584,35585,35586,35587,35588,35589,35590,35592,35593,35594,35595,35596,35597,35598,35599,35600,35601,35602,35603,35604,35605,35606,35607,35608,35609,35610,35611,35612,35613,35614,35615,35616,35617,35618,35619,35620,35621,35623,35624,35625,35626,35627,35628,35629,35630,35631,35632,35633,35634,35635,35636,35637,35638,35639,35640,35641,35642,35643,35644,35645,35646,35647,35648,35649,35650,35651,35652,35653,24103,30151,37073,35777,33437,26525,25903,21553,34584,30693,32930,33026,27713,20043,32455,32844,30452,26893,27542,25191,20540,20356,22336,25351,27490,36286,21482,26088,32440,24535,25370,25527,33267,33268,32622,24092,23769,21046,26234,31209,31258,36136,28825,30164,28382,27835,31378,20013,30405,24544,38047,34935,32456,31181,32959,37325,20210,20247,33311,21608,24030,27954,35788,31909,36724,32920,24090,21650,30385,23449,26172,39588,29664,26666,34523,26417,29482,35832,35803,36880,31481,28891,29038,25284,30633,22065,20027,33879,26609,21161,34496,36142,38136,31569,35654,35655,35656,35657,35658,35659,35660,35661,35662,35663,35664,35665,35666,35667,35668,35669,35670,35671,35672,35673,35674,35675,35676,35677,35678,35679,35680,35681,35682,35683,35684,35685,35687,35688,35689,35690,35691,35693,35694,35695,35696,35697,35698,35699,35700,35701,35702,35703,35704,35705,35706,35707,35708,35709,35710,35711,35712,35713,35714,35715,35716,35717,35718,35719,35720,35721,35722,35723,35724,35725,35726,35727,35728,35729,35730,35731,35732,35733,35734,35735,35736,35737,35738,35739,35740,35741,35742,35743,35756,35761,35771,35783,35792,35818,35849,35870,20303,27880,31069,39547,25235,29226,25341,19987,30742,36716,25776,36186,31686,26729,24196,35013,22918,25758,22766,29366,26894,38181,36861,36184,22368,32512,35846,20934,25417,25305,21331,26700,29730,33537,37196,21828,30528,28796,27978,20857,21672,36164,23039,28363,28100,23388,32043,20180,31869,28371,23376,33258,28173,23383,39683,26837,36394,23447,32508,24635,32437,37049,36208,22863,25549,31199,36275,21330,26063,31062,35781,38459,32452,38075,32386,22068,37257,26368,32618,23562,36981,26152,24038,20304,26590,20570,20316,22352,24231,59408,59409,59410,59411,59412,35896,35897,35898,35899,35900,35901,35902,35903,35904,35906,35907,35908,35909,35912,35914,35915,35917,35918,35919,35920,35921,35922,35923,35924,35926,35927,35928,35929,35931,35932,35933,35934,35935,35936,35939,35940,35941,35942,35943,35944,35945,35948,35949,35950,35951,35952,35953,35954,35956,35957,35958,35959,35963,35964,35965,35966,35967,35968,35969,35971,35972,35974,35975,35976,35979,35981,35982,35983,35984,35985,35986,35987,35989,35990,35991,35993,35994,35995,35996,35997,35998,35999,36e3,36001,36002,36003,36004,36005,36006,36007,36008,36009,36010,36011,36012,36013,20109,19980,20800,19984,24319,21317,19989,20120,19998,39730,23404,22121,20008,31162,20031,21269,20039,22829,29243,21358,27664,22239,32996,39319,27603,30590,40727,20022,20127,40720,20060,20073,20115,33416,23387,21868,22031,20164,21389,21405,21411,21413,21422,38757,36189,21274,21493,21286,21294,21310,36188,21350,21347,20994,21e3,21006,21037,21043,21055,21056,21068,21086,21089,21084,33967,21117,21122,21121,21136,21139,20866,32596,20155,20163,20169,20162,20200,20193,20203,20190,20251,20211,20258,20324,20213,20261,20263,20233,20267,20318,20327,25912,20314,20317,36014,36015,36016,36017,36018,36019,36020,36021,36022,36023,36024,36025,36026,36027,36028,36029,36030,36031,36032,36033,36034,36035,36036,36037,36038,36039,36040,36041,36042,36043,36044,36045,36046,36047,36048,36049,36050,36051,36052,36053,36054,36055,36056,36057,36058,36059,36060,36061,36062,36063,36064,36065,36066,36067,36068,36069,36070,36071,36072,36073,36074,36075,36076,36077,36078,36079,36080,36081,36082,36083,36084,36085,36086,36087,36088,36089,36090,36091,36092,36093,36094,36095,36096,36097,36098,36099,36100,36101,36102,36103,36104,36105,36106,36107,36108,36109,20319,20311,20274,20285,20342,20340,20369,20361,20355,20367,20350,20347,20394,20348,20396,20372,20454,20456,20458,20421,20442,20451,20444,20433,20447,20472,20521,20556,20467,20524,20495,20526,20525,20478,20508,20492,20517,20520,20606,20547,20565,20552,20558,20588,20603,20645,20647,20649,20666,20694,20742,20717,20716,20710,20718,20743,20747,20189,27709,20312,20325,20430,40864,27718,31860,20846,24061,40649,39320,20865,22804,21241,21261,35335,21264,20971,22809,20821,20128,20822,20147,34926,34980,20149,33044,35026,31104,23348,34819,32696,20907,20913,20925,20924,36110,36111,36112,36113,36114,36115,36116,36117,36118,36119,36120,36121,36122,36123,36124,36128,36177,36178,36183,36191,36197,36200,36201,36202,36204,36206,36207,36209,36210,36216,36217,36218,36219,36220,36221,36222,36223,36224,36226,36227,36230,36231,36232,36233,36236,36237,36238,36239,36240,36242,36243,36245,36246,36247,36248,36249,36250,36251,36252,36253,36254,36256,36257,36258,36260,36261,36262,36263,36264,36265,36266,36267,36268,36269,36270,36271,36272,36274,36278,36279,36281,36283,36285,36288,36289,36290,36293,36295,36296,36297,36298,36301,36304,36306,36307,36308,20935,20886,20898,20901,35744,35750,35751,35754,35764,35765,35767,35778,35779,35787,35791,35790,35794,35795,35796,35798,35800,35801,35804,35807,35808,35812,35816,35817,35822,35824,35827,35830,35833,35836,35839,35840,35842,35844,35847,35852,35855,35857,35858,35860,35861,35862,35865,35867,35864,35869,35871,35872,35873,35877,35879,35882,35883,35886,35887,35890,35891,35893,35894,21353,21370,38429,38434,38433,38449,38442,38461,38460,38466,38473,38484,38495,38503,38508,38514,38516,38536,38541,38551,38576,37015,37019,37021,37017,37036,37025,37044,37043,37046,37050,36309,36312,36313,36316,36320,36321,36322,36325,36326,36327,36329,36333,36334,36336,36337,36338,36340,36342,36348,36350,36351,36352,36353,36354,36355,36356,36358,36359,36360,36363,36365,36366,36368,36369,36370,36371,36373,36374,36375,36376,36377,36378,36379,36380,36384,36385,36388,36389,36390,36391,36392,36395,36397,36400,36402,36403,36404,36406,36407,36408,36411,36412,36414,36415,36419,36421,36422,36428,36429,36430,36431,36432,36435,36436,36437,36438,36439,36440,36442,36443,36444,36445,36446,36447,36448,36449,36450,36451,36452,36453,36455,36456,36458,36459,36462,36465,37048,37040,37071,37061,37054,37072,37060,37063,37075,37094,37090,37084,37079,37083,37099,37103,37118,37124,37154,37150,37155,37169,37167,37177,37187,37190,21005,22850,21154,21164,21165,21182,21759,21200,21206,21232,21471,29166,30669,24308,20981,20988,39727,21430,24321,30042,24047,22348,22441,22433,22654,22716,22725,22737,22313,22316,22314,22323,22329,22318,22319,22364,22331,22338,22377,22405,22379,22406,22396,22395,22376,22381,22390,22387,22445,22436,22412,22450,22479,22439,22452,22419,22432,22485,22488,22490,22489,22482,22456,22516,22511,22520,22500,22493,36467,36469,36471,36472,36473,36474,36475,36477,36478,36480,36482,36483,36484,36486,36488,36489,36490,36491,36492,36493,36494,36497,36498,36499,36501,36502,36503,36504,36505,36506,36507,36509,36511,36512,36513,36514,36515,36516,36517,36518,36519,36520,36521,36522,36525,36526,36528,36529,36531,36532,36533,36534,36535,36536,36537,36539,36540,36541,36542,36543,36544,36545,36546,36547,36548,36549,36550,36551,36552,36553,36554,36555,36556,36557,36559,36560,36561,36562,36563,36564,36565,36566,36567,36568,36569,36570,36571,36572,36573,36574,36575,36576,36577,36578,36579,36580,22539,22541,22525,22509,22528,22558,22553,22596,22560,22629,22636,22657,22665,22682,22656,39336,40729,25087,33401,33405,33407,33423,33418,33448,33412,33422,33425,33431,33433,33451,33464,33470,33456,33480,33482,33507,33432,33463,33454,33483,33484,33473,33449,33460,33441,33450,33439,33476,33486,33444,33505,33545,33527,33508,33551,33543,33500,33524,33490,33496,33548,33531,33491,33553,33562,33542,33556,33557,33504,33493,33564,33617,33627,33628,33544,33682,33596,33588,33585,33691,33630,33583,33615,33607,33603,33631,33600,33559,33632,33581,33594,33587,33638,33637,36581,36582,36583,36584,36585,36586,36587,36588,36589,36590,36591,36592,36593,36594,36595,36596,36597,36598,36599,36600,36601,36602,36603,36604,36605,36606,36607,36608,36609,36610,36611,36612,36613,36614,36615,36616,36617,36618,36619,36620,36621,36622,36623,36624,36625,36626,36627,36628,36629,36630,36631,36632,36633,36634,36635,36636,36637,36638,36639,36640,36641,36642,36643,36644,36645,36646,36647,36648,36649,36650,36651,36652,36653,36654,36655,36656,36657,36658,36659,36660,36661,36662,36663,36664,36665,36666,36667,36668,36669,36670,36671,36672,36673,36674,36675,36676,33640,33563,33641,33644,33642,33645,33646,33712,33656,33715,33716,33696,33706,33683,33692,33669,33660,33718,33705,33661,33720,33659,33688,33694,33704,33722,33724,33729,33793,33765,33752,22535,33816,33803,33757,33789,33750,33820,33848,33809,33798,33748,33759,33807,33795,33784,33785,33770,33733,33728,33830,33776,33761,33884,33873,33882,33881,33907,33927,33928,33914,33929,33912,33852,33862,33897,33910,33932,33934,33841,33901,33985,33997,34e3,34022,33981,34003,33994,33983,33978,34016,33953,33977,33972,33943,34021,34019,34060,29965,34104,34032,34105,34079,34106,36677,36678,36679,36680,36681,36682,36683,36684,36685,36686,36687,36688,36689,36690,36691,36692,36693,36694,36695,36696,36697,36698,36699,36700,36701,36702,36703,36704,36705,36706,36707,36708,36709,36714,36736,36748,36754,36765,36768,36769,36770,36772,36773,36774,36775,36778,36780,36781,36782,36783,36786,36787,36788,36789,36791,36792,36794,36795,36796,36799,36800,36803,36806,36809,36810,36811,36812,36813,36815,36818,36822,36823,36826,36832,36833,36835,36839,36844,36847,36849,36850,36852,36853,36854,36858,36859,36860,36862,36863,36871,36872,36876,36878,36883,36885,36888,34134,34107,34047,34044,34137,34120,34152,34148,34142,34170,30626,34115,34162,34171,34212,34216,34183,34191,34169,34222,34204,34181,34233,34231,34224,34259,34241,34268,34303,34343,34309,34345,34326,34364,24318,24328,22844,22849,32823,22869,22874,22872,21263,23586,23589,23596,23604,25164,25194,25247,25275,25290,25306,25303,25326,25378,25334,25401,25419,25411,25517,25590,25457,25466,25486,25524,25453,25516,25482,25449,25518,25532,25586,25592,25568,25599,25540,25566,25550,25682,25542,25534,25669,25665,25611,25627,25632,25612,25638,25633,25694,25732,25709,25750,36889,36892,36899,36900,36901,36903,36904,36905,36906,36907,36908,36912,36913,36914,36915,36916,36919,36921,36922,36925,36927,36928,36931,36933,36934,36936,36937,36938,36939,36940,36942,36948,36949,36950,36953,36954,36956,36957,36958,36959,36960,36961,36964,36966,36967,36969,36970,36971,36972,36975,36976,36977,36978,36979,36982,36983,36984,36985,36986,36987,36988,36990,36993,36996,36997,36998,36999,37001,37002,37004,37005,37006,37007,37008,37010,37012,37014,37016,37018,37020,37022,37023,37024,37028,37029,37031,37032,37033,37035,37037,37042,37047,37052,37053,37055,37056,25722,25783,25784,25753,25786,25792,25808,25815,25828,25826,25865,25893,25902,24331,24530,29977,24337,21343,21489,21501,21481,21480,21499,21522,21526,21510,21579,21586,21587,21588,21590,21571,21537,21591,21593,21539,21554,21634,21652,21623,21617,21604,21658,21659,21636,21622,21606,21661,21712,21677,21698,21684,21714,21671,21670,21715,21716,21618,21667,21717,21691,21695,21708,21721,21722,21724,21673,21674,21668,21725,21711,21726,21787,21735,21792,21757,21780,21747,21794,21795,21775,21777,21799,21802,21863,21903,21941,21833,21869,21825,21845,21823,21840,21820,37058,37059,37062,37064,37065,37067,37068,37069,37074,37076,37077,37078,37080,37081,37082,37086,37087,37088,37091,37092,37093,37097,37098,37100,37102,37104,37105,37106,37107,37109,37110,37111,37113,37114,37115,37116,37119,37120,37121,37123,37125,37126,37127,37128,37129,37130,37131,37132,37133,37134,37135,37136,37137,37138,37139,37140,37141,37142,37143,37144,37146,37147,37148,37149,37151,37152,37153,37156,37157,37158,37159,37160,37161,37162,37163,37164,37165,37166,37168,37170,37171,37172,37173,37174,37175,37176,37178,37179,37180,37181,37182,37183,37184,37185,37186,37188,21815,21846,21877,21878,21879,21811,21808,21852,21899,21970,21891,21937,21945,21896,21889,21919,21886,21974,21905,21883,21983,21949,21950,21908,21913,21994,22007,21961,22047,21969,21995,21996,21972,21990,21981,21956,21999,21989,22002,22003,21964,21965,21992,22005,21988,36756,22046,22024,22028,22017,22052,22051,22014,22016,22055,22061,22104,22073,22103,22060,22093,22114,22105,22108,22092,22100,22150,22116,22129,22123,22139,22140,22149,22163,22191,22228,22231,22237,22241,22261,22251,22265,22271,22276,22282,22281,22300,24079,24089,24084,24081,24113,24123,24124,37189,37191,37192,37201,37203,37204,37205,37206,37208,37209,37211,37212,37215,37216,37222,37223,37224,37227,37229,37235,37242,37243,37244,37248,37249,37250,37251,37252,37254,37256,37258,37262,37263,37267,37268,37269,37270,37271,37272,37273,37276,37277,37278,37279,37280,37281,37284,37285,37286,37287,37288,37289,37291,37292,37296,37297,37298,37299,37302,37303,37304,37305,37307,37308,37309,37310,37311,37312,37313,37314,37315,37316,37317,37318,37320,37323,37328,37330,37331,37332,37333,37334,37335,37336,37337,37338,37339,37341,37342,37343,37344,37345,37346,37347,37348,37349,24119,24132,24148,24155,24158,24161,23692,23674,23693,23696,23702,23688,23704,23705,23697,23706,23708,23733,23714,23741,23724,23723,23729,23715,23745,23735,23748,23762,23780,23755,23781,23810,23811,23847,23846,23854,23844,23838,23814,23835,23896,23870,23860,23869,23916,23899,23919,23901,23915,23883,23882,23913,23924,23938,23961,23965,35955,23991,24005,24435,24439,24450,24455,24457,24460,24469,24473,24476,24488,24493,24501,24508,34914,24417,29357,29360,29364,29367,29368,29379,29377,29390,29389,29394,29416,29423,29417,29426,29428,29431,29441,29427,29443,29434,37350,37351,37352,37353,37354,37355,37356,37357,37358,37359,37360,37361,37362,37363,37364,37365,37366,37367,37368,37369,37370,37371,37372,37373,37374,37375,37376,37377,37378,37379,37380,37381,37382,37383,37384,37385,37386,37387,37388,37389,37390,37391,37392,37393,37394,37395,37396,37397,37398,37399,37400,37401,37402,37403,37404,37405,37406,37407,37408,37409,37410,37411,37412,37413,37414,37415,37416,37417,37418,37419,37420,37421,37422,37423,37424,37425,37426,37427,37428,37429,37430,37431,37432,37433,37434,37435,37436,37437,37438,37439,37440,37441,37442,37443,37444,37445,29435,29463,29459,29473,29450,29470,29469,29461,29474,29497,29477,29484,29496,29489,29520,29517,29527,29536,29548,29551,29566,33307,22821,39143,22820,22786,39267,39271,39272,39273,39274,39275,39276,39284,39287,39293,39296,39300,39303,39306,39309,39312,39313,39315,39316,39317,24192,24209,24203,24214,24229,24224,24249,24245,24254,24243,36179,24274,24273,24283,24296,24298,33210,24516,24521,24534,24527,24579,24558,24580,24545,24548,24574,24581,24582,24554,24557,24568,24601,24629,24614,24603,24591,24589,24617,24619,24586,24639,24609,24696,24697,24699,24698,24642,37446,37447,37448,37449,37450,37451,37452,37453,37454,37455,37456,37457,37458,37459,37460,37461,37462,37463,37464,37465,37466,37467,37468,37469,37470,37471,37472,37473,37474,37475,37476,37477,37478,37479,37480,37481,37482,37483,37484,37485,37486,37487,37488,37489,37490,37491,37493,37494,37495,37496,37497,37498,37499,37500,37501,37502,37503,37504,37505,37506,37507,37508,37509,37510,37511,37512,37513,37514,37515,37516,37517,37519,37520,37521,37522,37523,37524,37525,37526,37527,37528,37529,37530,37531,37532,37533,37534,37535,37536,37537,37538,37539,37540,37541,37542,37543,24682,24701,24726,24730,24749,24733,24707,24722,24716,24731,24812,24763,24753,24797,24792,24774,24794,24756,24864,24870,24853,24867,24820,24832,24846,24875,24906,24949,25004,24980,24999,25015,25044,25077,24541,38579,38377,38379,38385,38387,38389,38390,38396,38398,38403,38404,38406,38408,38410,38411,38412,38413,38415,38418,38421,38422,38423,38425,38426,20012,29247,25109,27701,27732,27740,27722,27811,27781,27792,27796,27788,27752,27753,27764,27766,27782,27817,27856,27860,27821,27895,27896,27889,27863,27826,27872,27862,27898,27883,27886,27825,27859,27887,27902,37544,37545,37546,37547,37548,37549,37551,37552,37553,37554,37555,37556,37557,37558,37559,37560,37561,37562,37563,37564,37565,37566,37567,37568,37569,37570,37571,37572,37573,37574,37575,37577,37578,37579,37580,37581,37582,37583,37584,37585,37586,37587,37588,37589,37590,37591,37592,37593,37594,37595,37596,37597,37598,37599,37600,37601,37602,37603,37604,37605,37606,37607,37608,37609,37610,37611,37612,37613,37614,37615,37616,37617,37618,37619,37620,37621,37622,37623,37624,37625,37626,37627,37628,37629,37630,37631,37632,37633,37634,37635,37636,37637,37638,37639,37640,37641,27961,27943,27916,27971,27976,27911,27908,27929,27918,27947,27981,27950,27957,27930,27983,27986,27988,27955,28049,28015,28062,28064,27998,28051,28052,27996,28e3,28028,28003,28186,28103,28101,28126,28174,28095,28128,28177,28134,28125,28121,28182,28075,28172,28078,28203,28270,28238,28267,28338,28255,28294,28243,28244,28210,28197,28228,28383,28337,28312,28384,28461,28386,28325,28327,28349,28347,28343,28375,28340,28367,28303,28354,28319,28514,28486,28487,28452,28437,28409,28463,28470,28491,28532,28458,28425,28457,28553,28557,28556,28536,28530,28540,28538,28625,37642,37643,37644,37645,37646,37647,37648,37649,37650,37651,37652,37653,37654,37655,37656,37657,37658,37659,37660,37661,37662,37663,37664,37665,37666,37667,37668,37669,37670,37671,37672,37673,37674,37675,37676,37677,37678,37679,37680,37681,37682,37683,37684,37685,37686,37687,37688,37689,37690,37691,37692,37693,37695,37696,37697,37698,37699,37700,37701,37702,37703,37704,37705,37706,37707,37708,37709,37710,37711,37712,37713,37714,37715,37716,37717,37718,37719,37720,37721,37722,37723,37724,37725,37726,37727,37728,37729,37730,37731,37732,37733,37734,37735,37736,37737,37739,28617,28583,28601,28598,28610,28641,28654,28638,28640,28655,28698,28707,28699,28729,28725,28751,28766,23424,23428,23445,23443,23461,23480,29999,39582,25652,23524,23534,35120,23536,36423,35591,36790,36819,36821,36837,36846,36836,36841,36838,36851,36840,36869,36868,36875,36902,36881,36877,36886,36897,36917,36918,36909,36911,36932,36945,36946,36944,36968,36952,36962,36955,26297,36980,36989,36994,37e3,36995,37003,24400,24407,24406,24408,23611,21675,23632,23641,23409,23651,23654,32700,24362,24361,24365,33396,24380,39739,23662,22913,22915,22925,22953,22954,22947,37740,37741,37742,37743,37744,37745,37746,37747,37748,37749,37750,37751,37752,37753,37754,37755,37756,37757,37758,37759,37760,37761,37762,37763,37764,37765,37766,37767,37768,37769,37770,37771,37772,37773,37774,37776,37777,37778,37779,37780,37781,37782,37783,37784,37785,37786,37787,37788,37789,37790,37791,37792,37793,37794,37795,37796,37797,37798,37799,37800,37801,37802,37803,37804,37805,37806,37807,37808,37809,37810,37811,37812,37813,37814,37815,37816,37817,37818,37819,37820,37821,37822,37823,37824,37825,37826,37827,37828,37829,37830,37831,37832,37833,37835,37836,37837,22935,22986,22955,22942,22948,22994,22962,22959,22999,22974,23045,23046,23005,23048,23011,23e3,23033,23052,23049,23090,23092,23057,23075,23059,23104,23143,23114,23125,23100,23138,23157,33004,23210,23195,23159,23162,23230,23275,23218,23250,23252,23224,23264,23267,23281,23254,23270,23256,23260,23305,23319,23318,23346,23351,23360,23573,23580,23386,23397,23411,23377,23379,23394,39541,39543,39544,39546,39551,39549,39552,39553,39557,39560,39562,39568,39570,39571,39574,39576,39579,39580,39581,39583,39584,39586,39587,39589,39591,32415,32417,32419,32421,32424,32425,37838,37839,37840,37841,37842,37843,37844,37845,37847,37848,37849,37850,37851,37852,37853,37854,37855,37856,37857,37858,37859,37860,37861,37862,37863,37864,37865,37866,37867,37868,37869,37870,37871,37872,37873,37874,37875,37876,37877,37878,37879,37880,37881,37882,37883,37884,37885,37886,37887,37888,37889,37890,37891,37892,37893,37894,37895,37896,37897,37898,37899,37900,37901,37902,37903,37904,37905,37906,37907,37908,37909,37910,37911,37912,37913,37914,37915,37916,37917,37918,37919,37920,37921,37922,37923,37924,37925,37926,37927,37928,37929,37930,37931,37932,37933,37934,32429,32432,32446,32448,32449,32450,32457,32459,32460,32464,32468,32471,32475,32480,32481,32488,32491,32494,32495,32497,32498,32525,32502,32506,32507,32510,32513,32514,32515,32519,32520,32523,32524,32527,32529,32530,32535,32537,32540,32539,32543,32545,32546,32547,32548,32549,32550,32551,32554,32555,32556,32557,32559,32560,32561,32562,32563,32565,24186,30079,24027,30014,37013,29582,29585,29614,29602,29599,29647,29634,29649,29623,29619,29632,29641,29640,29669,29657,39036,29706,29673,29671,29662,29626,29682,29711,29738,29787,29734,29733,29736,29744,29742,29740,37935,37936,37937,37938,37939,37940,37941,37942,37943,37944,37945,37946,37947,37948,37949,37951,37952,37953,37954,37955,37956,37957,37958,37959,37960,37961,37962,37963,37964,37965,37966,37967,37968,37969,37970,37971,37972,37973,37974,37975,37976,37977,37978,37979,37980,37981,37982,37983,37984,37985,37986,37987,37988,37989,37990,37991,37992,37993,37994,37996,37997,37998,37999,38e3,38001,38002,38003,38004,38005,38006,38007,38008,38009,38010,38011,38012,38013,38014,38015,38016,38017,38018,38019,38020,38033,38038,38040,38087,38095,38099,38100,38106,38118,38139,38172,38176,29723,29722,29761,29788,29783,29781,29785,29815,29805,29822,29852,29838,29824,29825,29831,29835,29854,29864,29865,29840,29863,29906,29882,38890,38891,38892,26444,26451,26462,26440,26473,26533,26503,26474,26483,26520,26535,26485,26536,26526,26541,26507,26487,26492,26608,26633,26584,26634,26601,26544,26636,26585,26549,26586,26547,26589,26624,26563,26552,26594,26638,26561,26621,26674,26675,26720,26721,26702,26722,26692,26724,26755,26653,26709,26726,26689,26727,26688,26686,26698,26697,26665,26805,26767,26740,26743,26771,26731,26818,26990,26876,26911,26912,26873,38183,38195,38205,38211,38216,38219,38229,38234,38240,38254,38260,38261,38263,38264,38265,38266,38267,38268,38269,38270,38272,38273,38274,38275,38276,38277,38278,38279,38280,38281,38282,38283,38284,38285,38286,38287,38288,38289,38290,38291,38292,38293,38294,38295,38296,38297,38298,38299,38300,38301,38302,38303,38304,38305,38306,38307,38308,38309,38310,38311,38312,38313,38314,38315,38316,38317,38318,38319,38320,38321,38322,38323,38324,38325,38326,38327,38328,38329,38330,38331,38332,38333,38334,38335,38336,38337,38338,38339,38340,38341,38342,38343,38344,38345,38346,38347,26916,26864,26891,26881,26967,26851,26896,26993,26937,26976,26946,26973,27012,26987,27008,27032,27e3,26932,27084,27015,27016,27086,27017,26982,26979,27001,27035,27047,27067,27051,27053,27092,27057,27073,27082,27103,27029,27104,27021,27135,27183,27117,27159,27160,27237,27122,27204,27198,27296,27216,27227,27189,27278,27257,27197,27176,27224,27260,27281,27280,27305,27287,27307,29495,29522,27521,27522,27527,27524,27538,27539,27533,27546,27547,27553,27562,36715,36717,36721,36722,36723,36725,36726,36728,36727,36729,36730,36732,36734,36737,36738,36740,36743,36747,38348,38349,38350,38351,38352,38353,38354,38355,38356,38357,38358,38359,38360,38361,38362,38363,38364,38365,38366,38367,38368,38369,38370,38371,38372,38373,38374,38375,38380,38399,38407,38419,38424,38427,38430,38432,38435,38436,38437,38438,38439,38440,38441,38443,38444,38445,38447,38448,38455,38456,38457,38458,38462,38465,38467,38474,38478,38479,38481,38482,38483,38486,38487,38488,38489,38490,38492,38493,38494,38496,38499,38501,38502,38507,38509,38510,38511,38512,38513,38515,38520,38521,38522,38523,38524,38525,38526,38527,38528,38529,38530,38531,38532,38535,38537,38538,36749,36750,36751,36760,36762,36558,25099,25111,25115,25119,25122,25121,25125,25124,25132,33255,29935,29940,29951,29967,29969,29971,25908,26094,26095,26096,26122,26137,26482,26115,26133,26112,28805,26359,26141,26164,26161,26166,26165,32774,26207,26196,26177,26191,26198,26209,26199,26231,26244,26252,26279,26269,26302,26331,26332,26342,26345,36146,36147,36150,36155,36157,36160,36165,36166,36168,36169,36167,36173,36181,36185,35271,35274,35275,35276,35278,35279,35280,35281,29294,29343,29277,29286,29295,29310,29311,29316,29323,29325,29327,29330,25352,25394,25520,38540,38542,38545,38546,38547,38549,38550,38554,38555,38557,38558,38559,38560,38561,38562,38563,38564,38565,38566,38568,38569,38570,38571,38572,38573,38574,38575,38577,38578,38580,38581,38583,38584,38586,38587,38591,38594,38595,38600,38602,38603,38608,38609,38611,38612,38614,38615,38616,38617,38618,38619,38620,38621,38622,38623,38625,38626,38627,38628,38629,38630,38631,38635,38636,38637,38638,38640,38641,38642,38644,38645,38648,38650,38651,38652,38653,38655,38658,38659,38661,38666,38667,38668,38672,38673,38674,38676,38677,38679,38680,38681,38682,38683,38685,38687,38688,25663,25816,32772,27626,27635,27645,27637,27641,27653,27655,27654,27661,27669,27672,27673,27674,27681,27689,27684,27690,27698,25909,25941,25963,29261,29266,29270,29232,34402,21014,32927,32924,32915,32956,26378,32957,32945,32939,32941,32948,32951,32999,33e3,33001,33002,32987,32962,32964,32985,32973,32983,26384,32989,33003,33009,33012,33005,33037,33038,33010,33020,26389,33042,35930,33078,33054,33068,33048,33074,33096,33100,33107,33140,33113,33114,33137,33120,33129,33148,33149,33133,33127,22605,23221,33160,33154,33169,28373,33187,33194,33228,26406,33226,33211,38689,38690,38691,38692,38693,38694,38695,38696,38697,38699,38700,38702,38703,38705,38707,38708,38709,38710,38711,38714,38715,38716,38717,38719,38720,38721,38722,38723,38724,38725,38726,38727,38728,38729,38730,38731,38732,38733,38734,38735,38736,38737,38740,38741,38743,38744,38746,38748,38749,38751,38755,38756,38758,38759,38760,38762,38763,38764,38765,38766,38767,38768,38769,38770,38773,38775,38776,38777,38778,38779,38781,38782,38783,38784,38785,38786,38787,38788,38790,38791,38792,38793,38794,38796,38798,38799,38800,38803,38805,38806,38807,38809,38810,38811,38812,38813,33217,33190,27428,27447,27449,27459,27462,27481,39121,39122,39123,39125,39129,39130,27571,24384,27586,35315,26e3,40785,26003,26044,26054,26052,26051,26060,26062,26066,26070,28800,28828,28822,28829,28859,28864,28855,28843,28849,28904,28874,28944,28947,28950,28975,28977,29043,29020,29032,28997,29042,29002,29048,29050,29080,29107,29109,29096,29088,29152,29140,29159,29177,29213,29224,28780,28952,29030,29113,25150,25149,25155,25160,25161,31035,31040,31046,31049,31067,31068,31059,31066,31074,31063,31072,31087,31079,31098,31109,31114,31130,31143,31155,24529,24528,38814,38815,38817,38818,38820,38821,38822,38823,38824,38825,38826,38828,38830,38832,38833,38835,38837,38838,38839,38840,38841,38842,38843,38844,38845,38846,38847,38848,38849,38850,38851,38852,38853,38854,38855,38856,38857,38858,38859,38860,38861,38862,38863,38864,38865,38866,38867,38868,38869,38870,38871,38872,38873,38874,38875,38876,38877,38878,38879,38880,38881,38882,38883,38884,38885,38888,38894,38895,38896,38897,38898,38900,38903,38904,38905,38906,38907,38908,38909,38910,38911,38912,38913,38914,38915,38916,38917,38918,38919,38920,38921,38922,38923,38924,38925,38926,24636,24669,24666,24679,24641,24665,24675,24747,24838,24845,24925,25001,24989,25035,25041,25094,32896,32895,27795,27894,28156,30710,30712,30720,30729,30743,30744,30737,26027,30765,30748,30749,30777,30778,30779,30751,30780,30757,30764,30755,30761,30798,30829,30806,30807,30758,30800,30791,30796,30826,30875,30867,30874,30855,30876,30881,30883,30898,30905,30885,30932,30937,30921,30956,30962,30981,30964,30995,31012,31006,31028,40859,40697,40699,40700,30449,30468,30477,30457,30471,30472,30490,30498,30489,30509,30502,30517,30520,30544,30545,30535,30531,30554,30568,38927,38928,38929,38930,38931,38932,38933,38934,38935,38936,38937,38938,38939,38940,38941,38942,38943,38944,38945,38946,38947,38948,38949,38950,38951,38952,38953,38954,38955,38956,38957,38958,38959,38960,38961,38962,38963,38964,38965,38966,38967,38968,38969,38970,38971,38972,38973,38974,38975,38976,38977,38978,38979,38980,38981,38982,38983,38984,38985,38986,38987,38988,38989,38990,38991,38992,38993,38994,38995,38996,38997,38998,38999,39e3,39001,39002,39003,39004,39005,39006,39007,39008,39009,39010,39011,39012,39013,39014,39015,39016,39017,39018,39019,39020,39021,39022,30562,30565,30591,30605,30589,30592,30604,30609,30623,30624,30640,30645,30653,30010,30016,30030,30027,30024,30043,30066,30073,30083,32600,32609,32607,35400,32616,32628,32625,32633,32641,32638,30413,30437,34866,38021,38022,38023,38027,38026,38028,38029,38031,38032,38036,38039,38037,38042,38043,38044,38051,38052,38059,38058,38061,38060,38063,38064,38066,38068,38070,38071,38072,38073,38074,38076,38077,38079,38084,38088,38089,38090,38091,38092,38093,38094,38096,38097,38098,38101,38102,38103,38105,38104,38107,38110,38111,38112,38114,38116,38117,38119,38120,38122,39023,39024,39025,39026,39027,39028,39051,39054,39058,39061,39065,39075,39080,39081,39082,39083,39084,39085,39086,39087,39088,39089,39090,39091,39092,39093,39094,39095,39096,39097,39098,39099,39100,39101,39102,39103,39104,39105,39106,39107,39108,39109,39110,39111,39112,39113,39114,39115,39116,39117,39119,39120,39124,39126,39127,39131,39132,39133,39136,39137,39138,39139,39140,39141,39142,39145,39146,39147,39148,39149,39150,39151,39152,39153,39154,39155,39156,39157,39158,39159,39160,39161,39162,39163,39164,39165,39166,39167,39168,39169,39170,39171,39172,39173,39174,39175,38121,38123,38126,38127,38131,38132,38133,38135,38137,38140,38141,38143,38147,38146,38150,38151,38153,38154,38157,38158,38159,38162,38163,38164,38165,38166,38168,38171,38173,38174,38175,38178,38186,38187,38185,38188,38193,38194,38196,38198,38199,38200,38204,38206,38207,38210,38197,38212,38213,38214,38217,38220,38222,38223,38226,38227,38228,38230,38231,38232,38233,38235,38238,38239,38237,38241,38242,38244,38245,38246,38247,38248,38249,38250,38251,38252,38255,38257,38258,38259,38202,30695,30700,38601,31189,31213,31203,31211,31238,23879,31235,31234,31262,31252,39176,39177,39178,39179,39180,39182,39183,39185,39186,39187,39188,39189,39190,39191,39192,39193,39194,39195,39196,39197,39198,39199,39200,39201,39202,39203,39204,39205,39206,39207,39208,39209,39210,39211,39212,39213,39215,39216,39217,39218,39219,39220,39221,39222,39223,39224,39225,39226,39227,39228,39229,39230,39231,39232,39233,39234,39235,39236,39237,39238,39239,39240,39241,39242,39243,39244,39245,39246,39247,39248,39249,39250,39251,39254,39255,39256,39257,39258,39259,39260,39261,39262,39263,39264,39265,39266,39268,39270,39283,39288,39289,39291,39294,39298,39299,39305,31289,31287,31313,40655,39333,31344,30344,30350,30355,30361,30372,29918,29920,29996,40480,40482,40488,40489,40490,40491,40492,40498,40497,40502,40504,40503,40505,40506,40510,40513,40514,40516,40518,40519,40520,40521,40523,40524,40526,40529,40533,40535,40538,40539,40540,40542,40547,40550,40551,40552,40553,40554,40555,40556,40561,40557,40563,30098,30100,30102,30112,30109,30124,30115,30131,30132,30136,30148,30129,30128,30147,30146,30166,30157,30179,30184,30182,30180,30187,30183,30211,30193,30204,30207,30224,30208,30213,30220,30231,30218,30245,30232,30229,30233,39308,39310,39322,39323,39324,39325,39326,39327,39328,39329,39330,39331,39332,39334,39335,39337,39338,39339,39340,39341,39342,39343,39344,39345,39346,39347,39348,39349,39350,39351,39352,39353,39354,39355,39356,39357,39358,39359,39360,39361,39362,39363,39364,39365,39366,39367,39368,39369,39370,39371,39372,39373,39374,39375,39376,39377,39378,39379,39380,39381,39382,39383,39384,39385,39386,39387,39388,39389,39390,39391,39392,39393,39394,39395,39396,39397,39398,39399,39400,39401,39402,39403,39404,39405,39406,39407,39408,39409,39410,39411,39412,39413,39414,39415,39416,39417,30235,30268,30242,30240,30272,30253,30256,30271,30261,30275,30270,30259,30285,30302,30292,30300,30294,30315,30319,32714,31462,31352,31353,31360,31366,31368,31381,31398,31392,31404,31400,31405,31411,34916,34921,34930,34941,34943,34946,34978,35014,34999,35004,35017,35042,35022,35043,35045,35057,35098,35068,35048,35070,35056,35105,35097,35091,35099,35082,35124,35115,35126,35137,35174,35195,30091,32997,30386,30388,30684,32786,32788,32790,32796,32800,32802,32805,32806,32807,32809,32808,32817,32779,32821,32835,32838,32845,32850,32873,32881,35203,39032,39040,39043,39418,39419,39420,39421,39422,39423,39424,39425,39426,39427,39428,39429,39430,39431,39432,39433,39434,39435,39436,39437,39438,39439,39440,39441,39442,39443,39444,39445,39446,39447,39448,39449,39450,39451,39452,39453,39454,39455,39456,39457,39458,39459,39460,39461,39462,39463,39464,39465,39466,39467,39468,39469,39470,39471,39472,39473,39474,39475,39476,39477,39478,39479,39480,39481,39482,39483,39484,39485,39486,39487,39488,39489,39490,39491,39492,39493,39494,39495,39496,39497,39498,39499,39500,39501,39502,39503,39504,39505,39506,39507,39508,39509,39510,39511,39512,39513,39049,39052,39053,39055,39060,39066,39067,39070,39071,39073,39074,39077,39078,34381,34388,34412,34414,34431,34426,34428,34427,34472,34445,34443,34476,34461,34471,34467,34474,34451,34473,34486,34500,34485,34510,34480,34490,34481,34479,34505,34511,34484,34537,34545,34546,34541,34547,34512,34579,34526,34548,34527,34520,34513,34563,34567,34552,34568,34570,34573,34569,34595,34619,34590,34597,34606,34586,34622,34632,34612,34609,34601,34615,34623,34690,34594,34685,34686,34683,34656,34672,34636,34670,34699,34643,34659,34684,34660,34649,34661,34707,34735,34728,34770,39514,39515,39516,39517,39518,39519,39520,39521,39522,39523,39524,39525,39526,39527,39528,39529,39530,39531,39538,39555,39561,39565,39566,39572,39573,39577,39590,39593,39594,39595,39596,39597,39598,39599,39602,39603,39604,39605,39609,39611,39613,39614,39615,39619,39620,39622,39623,39624,39625,39626,39629,39630,39631,39632,39634,39636,39637,39638,39639,39641,39642,39643,39644,39645,39646,39648,39650,39651,39652,39653,39655,39656,39657,39658,39660,39662,39664,39665,39666,39667,39668,39669,39670,39671,39672,39674,39676,39677,39678,39679,39680,39681,39682,39684,39685,39686,34758,34696,34693,34733,34711,34691,34731,34789,34732,34741,34739,34763,34771,34749,34769,34752,34762,34779,34794,34784,34798,34838,34835,34814,34826,34843,34849,34873,34876,32566,32578,32580,32581,33296,31482,31485,31496,31491,31492,31509,31498,31531,31503,31559,31544,31530,31513,31534,31537,31520,31525,31524,31539,31550,31518,31576,31578,31557,31605,31564,31581,31584,31598,31611,31586,31602,31601,31632,31654,31655,31672,31660,31645,31656,31621,31658,31644,31650,31659,31668,31697,31681,31692,31709,31706,31717,31718,31722,31756,31742,31740,31759,31766,31755,39687,39689,39690,39691,39692,39693,39694,39696,39697,39698,39700,39701,39702,39703,39704,39705,39706,39707,39708,39709,39710,39712,39713,39714,39716,39717,39718,39719,39720,39721,39722,39723,39724,39725,39726,39728,39729,39731,39732,39733,39734,39735,39736,39737,39738,39741,39742,39743,39744,39750,39754,39755,39756,39758,39760,39762,39763,39765,39766,39767,39768,39769,39770,39771,39772,39773,39774,39775,39776,39777,39778,39779,39780,39781,39782,39783,39784,39785,39786,39787,39788,39789,39790,39791,39792,39793,39794,39795,39796,39797,39798,39799,39800,39801,39802,39803,31775,31786,31782,31800,31809,31808,33278,33281,33282,33284,33260,34884,33313,33314,33315,33325,33327,33320,33323,33336,33339,33331,33332,33342,33348,33353,33355,33359,33370,33375,33384,34942,34949,34952,35032,35039,35166,32669,32671,32679,32687,32688,32690,31868,25929,31889,31901,31900,31902,31906,31922,31932,31933,31937,31943,31948,31949,31944,31941,31959,31976,33390,26280,32703,32718,32725,32741,32737,32742,32745,32750,32755,31992,32119,32166,32174,32327,32411,40632,40628,36211,36228,36244,36241,36273,36199,36205,35911,35913,37194,37200,37198,37199,37220,39804,39805,39806,39807,39808,39809,39810,39811,39812,39813,39814,39815,39816,39817,39818,39819,39820,39821,39822,39823,39824,39825,39826,39827,39828,39829,39830,39831,39832,39833,39834,39835,39836,39837,39838,39839,39840,39841,39842,39843,39844,39845,39846,39847,39848,39849,39850,39851,39852,39853,39854,39855,39856,39857,39858,39859,39860,39861,39862,39863,39864,39865,39866,39867,39868,39869,39870,39871,39872,39873,39874,39875,39876,39877,39878,39879,39880,39881,39882,39883,39884,39885,39886,39887,39888,39889,39890,39891,39892,39893,39894,39895,39896,39897,39898,39899,37218,37217,37232,37225,37231,37245,37246,37234,37236,37241,37260,37253,37264,37261,37265,37282,37283,37290,37293,37294,37295,37301,37300,37306,35925,40574,36280,36331,36357,36441,36457,36277,36287,36284,36282,36292,36310,36311,36314,36318,36302,36303,36315,36294,36332,36343,36344,36323,36345,36347,36324,36361,36349,36372,36381,36383,36396,36398,36387,36399,36410,36416,36409,36405,36413,36401,36425,36417,36418,36433,36434,36426,36464,36470,36476,36463,36468,36485,36495,36500,36496,36508,36510,35960,35970,35978,35973,35992,35988,26011,35286,35294,35290,35292,39900,39901,39902,39903,39904,39905,39906,39907,39908,39909,39910,39911,39912,39913,39914,39915,39916,39917,39918,39919,39920,39921,39922,39923,39924,39925,39926,39927,39928,39929,39930,39931,39932,39933,39934,39935,39936,39937,39938,39939,39940,39941,39942,39943,39944,39945,39946,39947,39948,39949,39950,39951,39952,39953,39954,39955,39956,39957,39958,39959,39960,39961,39962,39963,39964,39965,39966,39967,39968,39969,39970,39971,39972,39973,39974,39975,39976,39977,39978,39979,39980,39981,39982,39983,39984,39985,39986,39987,39988,39989,39990,39991,39992,39993,39994,39995,35301,35307,35311,35390,35622,38739,38633,38643,38639,38662,38657,38664,38671,38670,38698,38701,38704,38718,40832,40835,40837,40838,40839,40840,40841,40842,40844,40702,40715,40717,38585,38588,38589,38606,38610,30655,38624,37518,37550,37576,37694,37738,37834,37775,37950,37995,40063,40066,40069,40070,40071,40072,31267,40075,40078,40080,40081,40082,40084,40085,40090,40091,40094,40095,40096,40097,40098,40099,40101,40102,40103,40104,40105,40107,40109,40110,40112,40113,40114,40115,40116,40117,40118,40119,40122,40123,40124,40125,40132,40133,40134,40135,40138,40139,39996,39997,39998,39999,4e4,40001,40002,40003,40004,40005,40006,40007,40008,40009,40010,40011,40012,40013,40014,40015,40016,40017,40018,40019,40020,40021,40022,40023,40024,40025,40026,40027,40028,40029,40030,40031,40032,40033,40034,40035,40036,40037,40038,40039,40040,40041,40042,40043,40044,40045,40046,40047,40048,40049,40050,40051,40052,40053,40054,40055,40056,40057,40058,40059,40061,40062,40064,40067,40068,40073,40074,40076,40079,40083,40086,40087,40088,40089,40093,40106,40108,40111,40121,40126,40127,40128,40129,40130,40136,40137,40145,40146,40154,40155,40160,40161,40140,40141,40142,40143,40144,40147,40148,40149,40151,40152,40153,40156,40157,40159,40162,38780,38789,38801,38802,38804,38831,38827,38819,38834,38836,39601,39600,39607,40536,39606,39610,39612,39617,39616,39621,39618,39627,39628,39633,39749,39747,39751,39753,39752,39757,39761,39144,39181,39214,39253,39252,39647,39649,39654,39663,39659,39675,39661,39673,39688,39695,39699,39711,39715,40637,40638,32315,40578,40583,40584,40587,40594,37846,40605,40607,40667,40668,40669,40672,40671,40674,40681,40679,40677,40682,40687,40738,40748,40751,40761,40759,40765,40766,40772,40163,40164,40165,40166,40167,40168,40169,40170,40171,40172,40173,40174,40175,40176,40177,40178,40179,40180,40181,40182,40183,40184,40185,40186,40187,40188,40189,40190,40191,40192,40193,40194,40195,40196,40197,40198,40199,40200,40201,40202,40203,40204,40205,40206,40207,40208,40209,40210,40211,40212,40213,40214,40215,40216,40217,40218,40219,40220,40221,40222,40223,40224,40225,40226,40227,40228,40229,40230,40231,40232,40233,40234,40235,40236,40237,40238,40239,40240,40241,40242,40243,40244,40245,40246,40247,40248,40249,40250,40251,40252,40253,40254,40255,40256,40257,40258,57908,57909,57910,57911,57912,57913,57914,57915,57916,57917,57918,57919,57920,57921,57922,57923,57924,57925,57926,57927,57928,57929,57930,57931,57932,57933,57934,57935,57936,57937,57938,57939,57940,57941,57942,57943,57944,57945,57946,57947,57948,57949,57950,57951,57952,57953,57954,57955,57956,57957,57958,57959,57960,57961,57962,57963,57964,57965,57966,57967,57968,57969,57970,57971,57972,57973,57974,57975,57976,57977,57978,57979,57980,57981,57982,57983,57984,57985,57986,57987,57988,57989,57990,57991,57992,57993,57994,57995,57996,57997,57998,57999,58e3,58001,40259,40260,40261,40262,40263,40264,40265,40266,40267,40268,40269,40270,40271,40272,40273,40274,40275,40276,40277,40278,40279,40280,40281,40282,40283,40284,40285,40286,40287,40288,40289,40290,40291,40292,40293,40294,40295,40296,40297,40298,40299,40300,40301,40302,40303,40304,40305,40306,40307,40308,40309,40310,40311,40312,40313,40314,40315,40316,40317,40318,40319,40320,40321,40322,40323,40324,40325,40326,40327,40328,40329,40330,40331,40332,40333,40334,40335,40336,40337,40338,40339,40340,40341,40342,40343,40344,40345,40346,40347,40348,40349,40350,40351,40352,40353,40354,58002,58003,58004,58005,58006,58007,58008,58009,58010,58011,58012,58013,58014,58015,58016,58017,58018,58019,58020,58021,58022,58023,58024,58025,58026,58027,58028,58029,58030,58031,58032,58033,58034,58035,58036,58037,58038,58039,58040,58041,58042,58043,58044,58045,58046,58047,58048,58049,58050,58051,58052,58053,58054,58055,58056,58057,58058,58059,58060,58061,58062,58063,58064,58065,58066,58067,58068,58069,58070,58071,58072,58073,58074,58075,58076,58077,58078,58079,58080,58081,58082,58083,58084,58085,58086,58087,58088,58089,58090,58091,58092,58093,58094,58095,40355,40356,40357,40358,40359,40360,40361,40362,40363,40364,40365,40366,40367,40368,40369,40370,40371,40372,40373,40374,40375,40376,40377,40378,40379,40380,40381,40382,40383,40384,40385,40386,40387,40388,40389,40390,40391,40392,40393,40394,40395,40396,40397,40398,40399,40400,40401,40402,40403,40404,40405,40406,40407,40408,40409,40410,40411,40412,40413,40414,40415,40416,40417,40418,40419,40420,40421,40422,40423,40424,40425,40426,40427,40428,40429,40430,40431,40432,40433,40434,40435,40436,40437,40438,40439,40440,40441,40442,40443,40444,40445,40446,40447,40448,40449,40450,58096,58097,58098,58099,58100,58101,58102,58103,58104,58105,58106,58107,58108,58109,58110,58111,58112,58113,58114,58115,58116,58117,58118,58119,58120,58121,58122,58123,58124,58125,58126,58127,58128,58129,58130,58131,58132,58133,58134,58135,58136,58137,58138,58139,58140,58141,58142,58143,58144,58145,58146,58147,58148,58149,58150,58151,58152,58153,58154,58155,58156,58157,58158,58159,58160,58161,58162,58163,58164,58165,58166,58167,58168,58169,58170,58171,58172,58173,58174,58175,58176,58177,58178,58179,58180,58181,58182,58183,58184,58185,58186,58187,58188,58189,40451,40452,40453,40454,40455,40456,40457,40458,40459,40460,40461,40462,40463,40464,40465,40466,40467,40468,40469,40470,40471,40472,40473,40474,40475,40476,40477,40478,40484,40487,40494,40496,40500,40507,40508,40512,40525,40528,40530,40531,40532,40534,40537,40541,40543,40544,40545,40546,40549,40558,40559,40562,40564,40565,40566,40567,40568,40569,40570,40571,40572,40573,40576,40577,40579,40580,40581,40582,40585,40586,40588,40589,40590,40591,40592,40593,40596,40597,40598,40599,40600,40601,40602,40603,40604,40606,40608,40609,40610,40611,40612,40613,40615,40616,40617,40618,58190,58191,58192,58193,58194,58195,58196,58197,58198,58199,58200,58201,58202,58203,58204,58205,58206,58207,58208,58209,58210,58211,58212,58213,58214,58215,58216,58217,58218,58219,58220,58221,58222,58223,58224,58225,58226,58227,58228,58229,58230,58231,58232,58233,58234,58235,58236,58237,58238,58239,58240,58241,58242,58243,58244,58245,58246,58247,58248,58249,58250,58251,58252,58253,58254,58255,58256,58257,58258,58259,58260,58261,58262,58263,58264,58265,58266,58267,58268,58269,58270,58271,58272,58273,58274,58275,58276,58277,58278,58279,58280,58281,58282,58283,40619,40620,40621,40622,40623,40624,40625,40626,40627,40629,40630,40631,40633,40634,40636,40639,40640,40641,40642,40643,40645,40646,40647,40648,40650,40651,40652,40656,40658,40659,40661,40662,40663,40665,40666,40670,40673,40675,40676,40678,40680,40683,40684,40685,40686,40688,40689,40690,40691,40692,40693,40694,40695,40696,40698,40701,40703,40704,40705,40706,40707,40708,40709,40710,40711,40712,40713,40714,40716,40719,40721,40722,40724,40725,40726,40728,40730,40731,40732,40733,40734,40735,40737,40739,40740,40741,40742,40743,40744,40745,40746,40747,40749,40750,40752,40753,58284,58285,58286,58287,58288,58289,58290,58291,58292,58293,58294,58295,58296,58297,58298,58299,58300,58301,58302,58303,58304,58305,58306,58307,58308,58309,58310,58311,58312,58313,58314,58315,58316,58317,58318,58319,58320,58321,58322,58323,58324,58325,58326,58327,58328,58329,58330,58331,58332,58333,58334,58335,58336,58337,58338,58339,58340,58341,58342,58343,58344,58345,58346,58347,58348,58349,58350,58351,58352,58353,58354,58355,58356,58357,58358,58359,58360,58361,58362,58363,58364,58365,58366,58367,58368,58369,58370,58371,58372,58373,58374,58375,58376,58377,40754,40755,40756,40757,40758,40760,40762,40764,40767,40768,40769,40770,40771,40773,40774,40775,40776,40777,40778,40779,40780,40781,40782,40783,40786,40787,40788,40789,40790,40791,40792,40793,40794,40795,40796,40797,40798,40799,40800,40801,40802,40803,40804,40805,40806,40807,40808,40809,40810,40811,40812,40813,40814,40815,40816,40817,40818,40819,40820,40821,40822,40823,40824,40825,40826,40827,40828,40829,40830,40833,40834,40845,40846,40847,40848,40849,40850,40851,40852,40853,40854,40855,40856,40860,40861,40862,40865,40866,40867,40868,40869,63788,63865,63893,63975,63985,58378,58379,58380,58381,58382,58383,58384,58385,58386,58387,58388,58389,58390,58391,58392,58393,58394,58395,58396,58397,58398,58399,58400,58401,58402,58403,58404,58405,58406,58407,58408,58409,58410,58411,58412,58413,58414,58415,58416,58417,58418,58419,58420,58421,58422,58423,58424,58425,58426,58427,58428,58429,58430,58431,58432,58433,58434,58435,58436,58437,58438,58439,58440,58441,58442,58443,58444,58445,58446,58447,58448,58449,58450,58451,58452,58453,58454,58455,58456,58457,58458,58459,58460,58461,58462,58463,58464,58465,58466,58467,58468,58469,58470,58471,64012,64013,64014,64015,64017,64019,64020,64024,64031,64032,64033,64035,64036,64039,64040,64041,11905,59414,59415,59416,11908,13427,13383,11912,11915,59422,13726,13850,13838,11916,11927,14702,14616,59430,14799,14815,14963,14800,59435,59436,15182,15470,15584,11943,59441,59442,11946,16470,16735,11950,17207,11955,11958,11959,59451,17329,17324,11963,17373,17622,18017,17996,59459,18211,18217,18300,18317,11978,18759,18810,18813,18818,18819,18821,18822,18847,18843,18871,18870,59476,59477,19619,19615,19616,19617,19575,19618,19731,19732,19733,19734,19735,19736,19737,19886,59492,58472,58473,58474,58475,58476,58477,58478,58479,58480,58481,58482,58483,58484,58485,58486,58487,58488,58489,58490,58491,58492,58493,58494,58495,58496,58497,58498,58499,58500,58501,58502,58503,58504,58505,58506,58507,58508,58509,58510,58511,58512,58513,58514,58515,58516,58517,58518,58519,58520,58521,58522,58523,58524,58525,58526,58527,58528,58529,58530,58531,58532,58533,58534,58535,58536,58537,58538,58539,58540,58541,58542,58543,58544,58545,58546,58547,58548,58549,58550,58551,58552,58553,58554,58555,58556,58557,58558,58559,58560,58561,58562,58563,58564,58565],
"gb18030-ranges":[[0,128],[36,165],[38,169],[45,178],[50,184],[81,216],[89,226],[95,235],[96,238],[100,244],[103,248],[104,251],[105,253],[109,258],[126,276],[133,284],[148,300],[172,325],[175,329],[179,334],[208,364],[306,463],[307,465],[308,467],[309,469],[310,471],[311,473],[312,475],[313,477],[341,506],[428,594],[443,610],[544,712],[545,716],[558,730],[741,930],[742,938],[749,962],[750,970],[805,1026],[819,1104],[820,1106],[7922,8209],[7924,8215],[7925,8218],[7927,8222],[7934,8231],[7943,8241],[7944,8244],[7945,8246],[7950,8252],[8062,8365],[8148,8452],[8149,8454],[8152,8458],[8164,8471],[8174,8482],[8236,8556],[8240,8570],[8262,8596],[8264,8602],[8374,8713],[8380,8720],[8381,8722],[8384,8726],[8388,8731],[8390,8737],[8392,8740],[8393,8742],[8394,8748],[8396,8751],[8401,8760],[8406,8766],[8416,8777],[8419,8781],[8424,8787],[8437,8802],[8439,8808],[8445,8816],[8482,8854],[8485,8858],[8496,8870],[8521,8896],[8603,8979],[8936,9322],[8946,9372],[9046,9548],[9050,9588],[9063,9616],[9066,9622],[9076,9634],[9092,9652],[9100,9662],[9108,9672],[9111,9676],[9113,9680],[9131,9702],[9162,9735],[9164,9738],[9218,9793],[9219,9795],[11329,11906],[11331,11909],[11334,11913],[11336,11917],[11346,11928],[11361,11944],[11363,11947],[11366,11951],[11370,11956],[11372,11960],[11375,11964],[11389,11979],[11682,12284],[11686,12292],[11687,12312],[11692,12319],[11694,12330],[11714,12351],[11716,12436],[11723,12447],[11725,12535],[11730,12543],[11736,12586],[11982,12842],[11989,12850],[12102,12964],[12336,13200],[12348,13215],[12350,13218],[12384,13253],[12393,13263],[12395,13267],[12397,13270],[12510,13384],[12553,13428],[12851,13727],[12962,13839],[12973,13851],[13738,14617],[13823,14703],[13919,14801],[13933,14816],[14080,14964],[14298,15183],[14585,15471],[14698,15585],[15583,16471],[15847,16736],[16318,17208],[16434,17325],[16438,17330],[16481,17374],[16729,17623],[17102,17997],[17122,18018],[17315,18212],[17320,18218],[17402,18301],[17418,18318],[17859,18760],[17909,18811],[17911,18814],[17915,18820],[17916,18823],[17936,18844],[17939,18848],[17961,18872],[18664,19576],[18703,19620],[18814,19738],[18962,19887],[19043,40870],[33469,59244],[33470,59336],[33471,59367],[33484,59413],[33485,59417],[33490,59423],[33497,59431],[33501,59437],[33505,59443],[33513,59452],[33520,59460],[33536,59478],[33550,59493],[37845,63789],[37921,63866],[37948,63894],[38029,63976],[38038,63986],[38064,64016],[38065,64018],[38066,64021],[38069,64025],[38075,64034],[38076,64037],[38078,64042],[39108,65074],[39109,65093],[39113,65107],[39114,65112],[39115,65127],[39116,65132],[39265,65375],[39394,65510],[189e3,65536]],
jis0208:[12288,12289,12290,65292,65294,12539,65306,65307,65311,65281,12443,12444,180,65344,168,65342,65507,65343,12541,12542,12445,12446,12291,20189,12293,12294,12295,12540,8213,8208,65295,65340,65374,8741,65372,8230,8229,8216,8217,8220,8221,65288,65289,12308,12309,65339,65341,65371,65373,12296,12297,12298,12299,12300,12301,12302,12303,12304,12305,65291,65293,177,215,247,65309,8800,65308,65310,8806,8807,8734,8756,9794,9792,176,8242,8243,8451,65509,65284,65504,65505,65285,65283,65286,65290,65312,167,9734,9733,9675,9679,9678,9671,9670,9633,9632,9651,9650,9661,9660,8251,12306,8594,8592,8593,8595,12307,null,null,null,null,null,null,null,null,null,null,null,8712,8715,8838,8839,8834,8835,8746,8745,null,null,null,null,null,null,null,null,8743,8744,65506,8658,8660,8704,8707,null,null,null,null,null,null,null,null,null,null,null,8736,8869,8978,8706,8711,8801,8786,8810,8811,8730,8765,8733,8757,8747,8748,null,null,null,null,null,null,null,8491,8240,9839,9837,9834,8224,8225,182,null,null,null,null,9711,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,65296,65297,65298,65299,65300,65301,65302,65303,65304,65305,null,null,null,null,null,null,null,65313,65314,65315,65316,65317,65318,65319,65320,65321,65322,65323,65324,65325,65326,65327,65328,65329,65330,65331,65332,65333,65334,65335,65336,65337,65338,null,null,null,null,null,null,65345,65346,65347,65348,65349,65350,65351,65352,65353,65354,65355,65356,65357,65358,65359,65360,65361,65362,65363,65364,65365,65366,65367,65368,65369,65370,null,null,null,null,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12367,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12427,12428,12429,12430,12431,12432,12433,12434,12435,null,null,null,null,null,null,null,null,null,null,null,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502,12503,12504,12505,12506,12507,12508,12509,12510,12511,12512,12513,12514,12515,12516,12517,12518,12519,12520,12521,12522,12523,12524,12525,12526,12527,12528,12529,12530,12531,12532,12533,12534,null,null,null,null,null,null,null,null,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,null,null,null,null,null,null,null,null,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,963,964,965,966,967,968,969,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1040,1041,1042,1043,1044,1045,1025,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1072,1073,1074,1075,1076,1077,1105,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,null,null,null,null,null,null,null,null,null,null,null,null,null,9472,9474,9484,9488,9496,9492,9500,9516,9508,9524,9532,9473,9475,9487,9491,9499,9495,9507,9523,9515,9531,9547,9504,9519,9512,9527,9535,9501,9520,9509,9528,9538,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,9322,9323,9324,9325,9326,9327,9328,9329,9330,9331,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,null,13129,13076,13090,13133,13080,13095,13059,13110,13137,13143,13069,13094,13091,13099,13130,13115,13212,13213,13214,13198,13199,13252,13217,null,null,null,null,null,null,null,null,13179,12317,12319,8470,13261,8481,12964,12965,12966,12967,12968,12849,12850,12857,13182,13181,13180,8786,8801,8747,8750,8721,8730,8869,8736,8735,8895,8757,8745,8746,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,20124,21782,23043,38463,21696,24859,25384,23030,36898,33909,33564,31312,24746,25569,28197,26093,33894,33446,39925,26771,22311,26017,25201,23451,22992,34427,39156,32098,32190,39822,25110,31903,34999,23433,24245,25353,26263,26696,38343,38797,26447,20197,20234,20301,20381,20553,22258,22839,22996,23041,23561,24799,24847,24944,26131,26885,28858,30031,30064,31227,32173,32239,32963,33806,34915,35586,36949,36986,21307,20117,20133,22495,32946,37057,30959,19968,22769,28322,36920,31282,33576,33419,39983,20801,21360,21693,21729,22240,23035,24341,39154,28139,32996,34093,38498,38512,38560,38907,21515,21491,23431,28879,32701,36802,38632,21359,40284,31418,19985,30867,33276,28198,22040,21764,27421,34074,39995,23013,21417,28006,29916,38287,22082,20113,36939,38642,33615,39180,21473,21942,23344,24433,26144,26355,26628,27704,27891,27945,29787,30408,31310,38964,33521,34907,35424,37613,28082,30123,30410,39365,24742,35585,36234,38322,27022,21421,20870,22290,22576,22852,23476,24310,24616,25513,25588,27839,28436,28814,28948,29017,29141,29503,32257,33398,33489,34199,36960,37467,40219,22633,26044,27738,29989,20985,22830,22885,24448,24540,25276,26106,27178,27431,27572,29579,32705,35158,40236,40206,40644,23713,27798,33659,20740,23627,25014,33222,26742,29281,20057,20474,21368,24681,28201,31311,38899,19979,21270,20206,20309,20285,20385,20339,21152,21487,22025,22799,23233,23478,23521,31185,26247,26524,26550,27468,27827,28779,29634,31117,31166,31292,31623,33457,33499,33540,33655,33775,33747,34662,35506,22057,36008,36838,36942,38686,34442,20420,23784,25105,29273,30011,33253,33469,34558,36032,38597,39187,39381,20171,20250,35299,22238,22602,22730,24315,24555,24618,24724,24674,25040,25106,25296,25913,39745,26214,26800,28023,28784,30028,30342,32117,33445,34809,38283,38542,35997,20977,21182,22806,21683,23475,23830,24936,27010,28079,30861,33995,34903,35442,37799,39608,28012,39336,34521,22435,26623,34510,37390,21123,22151,21508,24275,25313,25785,26684,26680,27579,29554,30906,31339,35226,35282,36203,36611,37101,38307,38548,38761,23398,23731,27005,38989,38990,25499,31520,27179,27263,26806,39949,28511,21106,21917,24688,25324,27963,28167,28369,33883,35088,36676,19988,39993,21494,26907,27194,38788,26666,20828,31427,33970,37340,37772,22107,40232,26658,33541,33841,31909,21e3,33477,29926,20094,20355,20896,23506,21002,21208,21223,24059,21914,22570,23014,23436,23448,23515,24178,24185,24739,24863,24931,25022,25563,25954,26577,26707,26874,27454,27475,27735,28450,28567,28485,29872,29976,30435,30475,31487,31649,31777,32233,32566,32752,32925,33382,33694,35251,35532,36011,36996,37969,38291,38289,38306,38501,38867,39208,33304,20024,21547,23736,24012,29609,30284,30524,23721,32747,36107,38593,38929,38996,39e3,20225,20238,21361,21916,22120,22522,22855,23305,23492,23696,24076,24190,24524,25582,26426,26071,26082,26399,26827,26820,27231,24112,27589,27671,27773,30079,31048,23395,31232,32e3,24509,35215,35352,36020,36215,36556,36637,39138,39438,39740,20096,20605,20736,22931,23452,25135,25216,25836,27450,29344,30097,31047,32681,34811,35516,35696,25516,33738,38816,21513,21507,21931,26708,27224,35440,30759,26485,40653,21364,23458,33050,34384,36870,19992,20037,20167,20241,21450,21560,23470,24339,24613,25937,26429,27714,27762,27875,28792,29699,31350,31406,31496,32026,31998,32102,26087,29275,21435,23621,24040,25298,25312,25369,28192,34394,35377,36317,37624,28417,31142,39770,20136,20139,20140,20379,20384,20689,20807,31478,20849,20982,21332,21281,21375,21483,21932,22659,23777,24375,24394,24623,24656,24685,25375,25945,27211,27841,29378,29421,30703,33016,33029,33288,34126,37111,37857,38911,39255,39514,20208,20957,23597,26241,26989,23616,26354,26997,29577,26704,31873,20677,21220,22343,24062,37670,26020,27427,27453,29748,31105,31165,31563,32202,33465,33740,34943,35167,35641,36817,37329,21535,37504,20061,20534,21477,21306,29399,29590,30697,33510,36527,39366,39368,39378,20855,24858,34398,21936,31354,20598,23507,36935,38533,20018,27355,37351,23633,23624,25496,31391,27795,38772,36705,31402,29066,38536,31874,26647,32368,26705,37740,21234,21531,34219,35347,32676,36557,37089,21350,34952,31041,20418,20670,21009,20804,21843,22317,29674,22411,22865,24418,24452,24693,24950,24935,25001,25522,25658,25964,26223,26690,28179,30054,31293,31995,32076,32153,32331,32619,33550,33610,34509,35336,35427,35686,36605,38938,40335,33464,36814,39912,21127,25119,25731,28608,38553,26689,20625,27424,27770,28500,31348,32080,34880,35363,26376,20214,20537,20518,20581,20860,21048,21091,21927,22287,22533,23244,24314,25010,25080,25331,25458,26908,27177,29309,29356,29486,30740,30831,32121,30476,32937,35211,35609,36066,36562,36963,37749,38522,38997,39443,40568,20803,21407,21427,24187,24358,28187,28304,29572,29694,32067,33335,35328,35578,38480,20046,20491,21476,21628,22266,22993,23396,24049,24235,24359,25144,25925,26543,28246,29392,31946,34996,32929,32993,33776,34382,35463,36328,37431,38599,39015,40723,20116,20114,20237,21320,21577,21566,23087,24460,24481,24735,26791,27278,29786,30849,35486,35492,35703,37264,20062,39881,20132,20348,20399,20505,20502,20809,20844,21151,21177,21246,21402,21475,21521,21518,21897,22353,22434,22909,23380,23389,23439,24037,24039,24055,24184,24195,24218,24247,24344,24658,24908,25239,25304,25511,25915,26114,26179,26356,26477,26657,26775,27083,27743,27946,28009,28207,28317,30002,30343,30828,31295,31968,32005,32024,32094,32177,32789,32771,32943,32945,33108,33167,33322,33618,34892,34913,35611,36002,36092,37066,37237,37489,30783,37628,38308,38477,38917,39321,39640,40251,21083,21163,21495,21512,22741,25335,28640,35946,36703,40633,20811,21051,21578,22269,31296,37239,40288,40658,29508,28425,33136,29969,24573,24794,39592,29403,36796,27492,38915,20170,22256,22372,22718,23130,24680,25031,26127,26118,26681,26801,28151,30165,32058,33390,39746,20123,20304,21449,21766,23919,24038,24046,26619,27801,29811,30722,35408,37782,35039,22352,24231,25387,20661,20652,20877,26368,21705,22622,22971,23472,24425,25165,25505,26685,27507,28168,28797,37319,29312,30741,30758,31085,25998,32048,33756,35009,36617,38555,21092,22312,26448,32618,36001,20916,22338,38442,22586,27018,32948,21682,23822,22524,30869,40442,20316,21066,21643,25662,26152,26388,26613,31364,31574,32034,37679,26716,39853,31545,21273,20874,21047,23519,25334,25774,25830,26413,27578,34217,38609,30352,39894,25420,37638,39851,30399,26194,19977,20632,21442,23665,24808,25746,25955,26719,29158,29642,29987,31639,32386,34453,35715,36059,37240,39184,26028,26283,27531,20181,20180,20282,20351,21050,21496,21490,21987,22235,22763,22987,22985,23039,23376,23629,24066,24107,24535,24605,25351,25903,23388,26031,26045,26088,26525,27490,27515,27663,29509,31049,31169,31992,32025,32043,32930,33026,33267,35222,35422,35433,35430,35468,35566,36039,36060,38604,39164,27503,20107,20284,20365,20816,23383,23546,24904,25345,26178,27425,28363,27835,29246,29885,30164,30913,31034,32780,32819,33258,33940,36766,27728,40575,24335,35672,40235,31482,36600,23437,38635,19971,21489,22519,22833,23241,23460,24713,28287,28422,30142,36074,23455,34048,31712,20594,26612,33437,23649,34122,32286,33294,20889,23556,25448,36198,26012,29038,31038,32023,32773,35613,36554,36974,34503,37034,20511,21242,23610,26451,28796,29237,37196,37320,37675,33509,23490,24369,24825,20027,21462,23432,25163,26417,27530,29417,29664,31278,33131,36259,37202,39318,20754,21463,21610,23551,25480,27193,32172,38656,22234,21454,21608,23447,23601,24030,20462,24833,25342,27954,31168,31179,32066,32333,32722,33261,33311,33936,34886,35186,35728,36468,36655,36913,37195,37228,38598,37276,20160,20303,20805,21313,24467,25102,26580,27713,28171,29539,32294,37325,37507,21460,22809,23487,28113,31069,32302,31899,22654,29087,20986,34899,36848,20426,23803,26149,30636,31459,33308,39423,20934,24490,26092,26991,27529,28147,28310,28516,30462,32020,24033,36981,37255,38918,20966,21021,25152,26257,26329,28186,24246,32210,32626,26360,34223,34295,35576,21161,21465,22899,24207,24464,24661,37604,38500,20663,20767,21213,21280,21319,21484,21736,21830,21809,22039,22888,22974,23100,23477,23558,23567,23569,23578,24196,24202,24288,24432,25215,25220,25307,25484,25463,26119,26124,26157,26230,26494,26786,27167,27189,27836,28040,28169,28248,28988,28966,29031,30151,30465,30813,30977,31077,31216,31456,31505,31911,32057,32918,33750,33931,34121,34909,35059,35359,35388,35412,35443,35937,36062,37284,37478,37758,37912,38556,38808,19978,19976,19998,20055,20887,21104,22478,22580,22732,23330,24120,24773,25854,26465,26454,27972,29366,30067,31331,33976,35698,37304,37664,22065,22516,39166,25325,26893,27542,29165,32340,32887,33394,35302,39135,34645,36785,23611,20280,20449,20405,21767,23072,23517,23529,24515,24910,25391,26032,26187,26862,27035,28024,28145,30003,30137,30495,31070,31206,32051,33251,33455,34218,35242,35386,36523,36763,36914,37341,38663,20154,20161,20995,22645,22764,23563,29978,23613,33102,35338,36805,38499,38765,31525,35535,38920,37218,22259,21416,36887,21561,22402,24101,25512,27700,28810,30561,31883,32736,34928,36930,37204,37648,37656,38543,29790,39620,23815,23913,25968,26530,36264,38619,25454,26441,26905,33733,38935,38592,35070,28548,25722,23544,19990,28716,30045,26159,20932,21046,21218,22995,24449,24615,25104,25919,25972,26143,26228,26866,26646,27491,28165,29298,29983,30427,31934,32854,22768,35069,35199,35488,35475,35531,36893,37266,38738,38745,25993,31246,33030,38587,24109,24796,25114,26021,26132,26512,30707,31309,31821,32318,33034,36012,36196,36321,36447,30889,20999,25305,25509,25666,25240,35373,31363,31680,35500,38634,32118,33292,34633,20185,20808,21315,21344,23459,23554,23574,24029,25126,25159,25776,26643,26676,27849,27973,27927,26579,28508,29006,29053,26059,31359,31661,32218,32330,32680,33146,33307,33337,34214,35438,36046,36341,36984,36983,37549,37521,38275,39854,21069,21892,28472,28982,20840,31109,32341,33203,31950,22092,22609,23720,25514,26366,26365,26970,29401,30095,30094,30990,31062,31199,31895,32032,32068,34311,35380,38459,36961,40736,20711,21109,21452,21474,20489,21930,22766,22863,29245,23435,23652,21277,24803,24819,25436,25475,25407,25531,25805,26089,26361,24035,27085,27133,28437,29157,20105,30185,30456,31379,31967,32207,32156,32865,33609,33624,33900,33980,34299,35013,36208,36865,36973,37783,38684,39442,20687,22679,24974,33235,34101,36104,36896,20419,20596,21063,21363,24687,25417,26463,28204,36275,36895,20439,23646,36042,26063,32154,21330,34966,20854,25539,23384,23403,23562,25613,26449,36956,20182,22810,22826,27760,35409,21822,22549,22949,24816,25171,26561,33333,26965,38464,39364,39464,20307,22534,23550,32784,23729,24111,24453,24608,24907,25140,26367,27888,28382,32974,33151,33492,34955,36024,36864,36910,38538,40667,39899,20195,21488,22823,31532,37261,38988,40441,28381,28711,21331,21828,23429,25176,25246,25299,27810,28655,29730,35351,37944,28609,35582,33592,20967,34552,21482,21481,20294,36948,36784,22890,33073,24061,31466,36799,26842,35895,29432,40008,27197,35504,20025,21336,22022,22374,25285,25506,26086,27470,28129,28251,28845,30701,31471,31658,32187,32829,32966,34507,35477,37723,22243,22727,24382,26029,26262,27264,27573,30007,35527,20516,30693,22320,24347,24677,26234,27744,30196,31258,32622,33268,34584,36933,39347,31689,30044,31481,31569,33988,36880,31209,31378,33590,23265,30528,20013,20210,23449,24544,25277,26172,26609,27880,34411,34935,35387,37198,37619,39376,27159,28710,29482,33511,33879,36015,19969,20806,20939,21899,23541,24086,24115,24193,24340,24373,24427,24500,25074,25361,26274,26397,28526,29266,30010,30522,32884,33081,33144,34678,35519,35548,36229,36339,37530,38263,38914,40165,21189,25431,30452,26389,27784,29645,36035,37806,38515,27941,22684,26894,27084,36861,37786,30171,36890,22618,26626,25524,27131,20291,28460,26584,36795,34086,32180,37716,26943,28528,22378,22775,23340,32044,29226,21514,37347,40372,20141,20302,20572,20597,21059,35998,21576,22564,23450,24093,24213,24237,24311,24351,24716,25269,25402,25552,26799,27712,30855,31118,31243,32224,33351,35330,35558,36420,36883,37048,37165,37336,40718,27877,25688,25826,25973,28404,30340,31515,36969,37841,28346,21746,24505,25764,36685,36845,37444,20856,22635,22825,23637,24215,28155,32399,29980,36028,36578,39003,28857,20253,27583,28593,3e4,38651,20814,21520,22581,22615,22956,23648,24466,26007,26460,28193,30331,33759,36077,36884,37117,37709,30757,30778,21162,24230,22303,22900,24594,20498,20826,20908,20941,20992,21776,22612,22616,22871,23445,23798,23947,24764,25237,25645,26481,26691,26812,26847,30423,28120,28271,28059,28783,29128,24403,30168,31095,31561,31572,31570,31958,32113,21040,33891,34153,34276,35342,35588,35910,36367,36867,36879,37913,38518,38957,39472,38360,20685,21205,21516,22530,23566,24999,25758,27934,30643,31461,33012,33796,36947,37509,23776,40199,21311,24471,24499,28060,29305,30563,31167,31716,27602,29420,35501,26627,27233,20984,31361,26932,23626,40182,33515,23493,37193,28702,22136,23663,24775,25958,27788,35930,36929,38931,21585,26311,37389,22856,37027,20869,20045,20970,34201,35598,28760,25466,37707,26978,39348,32260,30071,21335,26976,36575,38627,27741,20108,23612,24336,36841,21250,36049,32905,34425,24319,26085,20083,20837,22914,23615,38894,20219,22922,24525,35469,28641,31152,31074,23527,33905,29483,29105,24180,24565,25467,25754,29123,31896,20035,24316,20043,22492,22178,24745,28611,32013,33021,33075,33215,36786,35223,34468,24052,25226,25773,35207,26487,27874,27966,29750,30772,23110,32629,33453,39340,20467,24259,25309,25490,25943,26479,30403,29260,32972,32954,36649,37197,20493,22521,23186,26757,26995,29028,29437,36023,22770,36064,38506,36889,34687,31204,30695,33833,20271,21093,21338,25293,26575,27850,30333,31636,31893,33334,34180,36843,26333,28448,29190,32283,33707,39361,40614,20989,31665,30834,31672,32903,31560,27368,24161,32908,30033,30048,20843,37474,28300,30330,37271,39658,20240,32624,25244,31567,38309,40169,22138,22617,34532,38588,20276,21028,21322,21453,21467,24070,25644,26001,26495,27710,27726,29256,29359,29677,30036,32321,33324,34281,36009,31684,37318,29033,38930,39151,25405,26217,30058,30436,30928,34115,34542,21290,21329,21542,22915,24199,24444,24754,25161,25209,25259,26e3,27604,27852,30130,30382,30865,31192,32203,32631,32933,34987,35513,36027,36991,38750,39131,27147,31800,20633,23614,24494,26503,27608,29749,30473,32654,40763,26570,31255,21305,30091,39661,24422,33181,33777,32920,24380,24517,30050,31558,36924,26727,23019,23195,32016,30334,35628,20469,24426,27161,27703,28418,29922,31080,34920,35413,35961,24287,25551,30149,31186,33495,37672,37618,33948,34541,39981,21697,24428,25996,27996,28693,36007,36051,38971,25935,29942,19981,20184,22496,22827,23142,23500,20904,24067,24220,24598,25206,25975,26023,26222,28014,29238,31526,33104,33178,33433,35676,36e3,36070,36212,38428,38468,20398,25771,27494,33310,33889,34154,37096,23553,26963,39080,33914,34135,20239,21103,24489,24133,26381,31119,33145,35079,35206,28149,24343,25173,27832,20175,29289,39826,20998,21563,22132,22707,24996,25198,28954,22894,31881,31966,32027,38640,25991,32862,19993,20341,20853,22592,24163,24179,24330,26564,20006,34109,38281,38491,31859,38913,20731,22721,30294,30887,21029,30629,34065,31622,20559,22793,29255,31687,32232,36794,36820,36941,20415,21193,23081,24321,38829,20445,33303,37610,22275,25429,27497,29995,35036,36628,31298,21215,22675,24917,25098,26286,27597,31807,33769,20515,20472,21253,21574,22577,22857,23453,23792,23791,23849,24214,25265,25447,25918,26041,26379,27861,27873,28921,30770,32299,32990,33459,33804,34028,34562,35090,35370,35914,37030,37586,39165,40179,40300,20047,20129,20621,21078,22346,22952,24125,24536,24537,25151,26292,26395,26576,26834,20882,32033,32938,33192,35584,35980,36031,37502,38450,21536,38956,21271,20693,21340,22696,25778,26420,29287,30566,31302,37350,21187,27809,27526,22528,24140,22868,26412,32763,20961,30406,25705,30952,39764,40635,22475,22969,26151,26522,27598,21737,27097,24149,33180,26517,39850,26622,40018,26717,20134,20451,21448,25273,26411,27819,36804,20397,32365,40639,19975,24930,28288,28459,34067,21619,26410,39749,24051,31637,23724,23494,34588,28234,34001,31252,33032,22937,31885,27665,30496,21209,22818,28961,29279,30683,38695,40289,26891,23167,23064,20901,21517,21629,26126,30431,36855,37528,40180,23018,29277,28357,20813,26825,32191,32236,38754,40634,25720,27169,33538,22916,23391,27611,29467,30450,32178,32791,33945,20786,26408,40665,30446,26466,21247,39173,23588,25147,31870,36016,21839,24758,32011,38272,21249,20063,20918,22812,29242,32822,37326,24357,30690,21380,24441,32004,34220,35379,36493,38742,26611,34222,37971,24841,24840,27833,30290,35565,36664,21807,20305,20778,21191,21451,23461,24189,24736,24962,25558,26377,26586,28263,28044,29494,29495,30001,31056,35029,35480,36938,37009,37109,38596,34701,22805,20104,20313,19982,35465,36671,38928,20653,24188,22934,23481,24248,25562,25594,25793,26332,26954,27096,27915,28342,29076,29992,31407,32650,32768,33865,33993,35201,35617,36362,36965,38525,39178,24958,25233,27442,27779,28020,32716,32764,28096,32645,34746,35064,26469,33713,38972,38647,27931,32097,33853,37226,20081,21365,23888,27396,28651,34253,34349,35239,21033,21519,23653,26446,26792,29702,29827,30178,35023,35041,37324,38626,38520,24459,29575,31435,33870,25504,30053,21129,27969,28316,29705,30041,30827,31890,38534,31452,40845,20406,24942,26053,34396,20102,20142,20698,20001,20940,23534,26009,26753,28092,29471,30274,30637,31260,31975,33391,35538,36988,37327,38517,38936,21147,32209,20523,21400,26519,28107,29136,29747,33256,36650,38563,40023,40607,29792,22593,28057,32047,39006,20196,20278,20363,20919,21169,23994,24604,29618,31036,33491,37428,38583,38646,38666,40599,40802,26278,27508,21015,21155,28872,35010,24265,24651,24976,28451,29001,31806,32244,32879,34030,36899,37676,21570,39791,27347,28809,36034,36335,38706,21172,23105,24266,24324,26391,27004,27028,28010,28431,29282,29436,31725,32769,32894,34635,37070,20845,40595,31108,32907,37682,35542,20525,21644,35441,27498,36036,33031,24785,26528,40434,20121,20120,39952,35435,34241,34152,26880,28286,30871,33109,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,24332,19984,19989,20010,20017,20022,20028,20031,20034,20054,20056,20098,20101,35947,20106,33298,24333,20110,20126,20127,20128,20130,20144,20147,20150,20174,20173,20164,20166,20162,20183,20190,20205,20191,20215,20233,20314,20272,20315,20317,20311,20295,20342,20360,20367,20376,20347,20329,20336,20369,20335,20358,20374,20760,20436,20447,20430,20440,20443,20433,20442,20432,20452,20453,20506,20520,20500,20522,20517,20485,20252,20470,20513,20521,20524,20478,20463,20497,20486,20547,20551,26371,20565,20560,20552,20570,20566,20588,20600,20608,20634,20613,20660,20658,20681,20682,20659,20674,20694,20702,20709,20717,20707,20718,20729,20725,20745,20737,20738,20758,20757,20756,20762,20769,20794,20791,20796,20795,20799,20800,20818,20812,20820,20834,31480,20841,20842,20846,20864,20866,22232,20876,20873,20879,20881,20883,20885,20886,20900,20902,20898,20905,20906,20907,20915,20913,20914,20912,20917,20925,20933,20937,20955,20960,34389,20969,20973,20976,20981,20990,20996,21003,21012,21006,21031,21034,21038,21043,21049,21071,21060,21067,21068,21086,21076,21098,21108,21097,21107,21119,21117,21133,21140,21138,21105,21128,21137,36776,36775,21164,21165,21180,21173,21185,21197,21207,21214,21219,21222,39149,21216,21235,21237,21240,21241,21254,21256,30008,21261,21264,21263,21269,21274,21283,21295,21297,21299,21304,21312,21318,21317,19991,21321,21325,20950,21342,21353,21358,22808,21371,21367,21378,21398,21408,21414,21413,21422,21424,21430,21443,31762,38617,21471,26364,29166,21486,21480,21485,21498,21505,21565,21568,21548,21549,21564,21550,21558,21545,21533,21582,21647,21621,21646,21599,21617,21623,21616,21650,21627,21632,21622,21636,21648,21638,21703,21666,21688,21669,21676,21700,21704,21672,21675,21698,21668,21694,21692,21720,21733,21734,21775,21780,21757,21742,21741,21754,21730,21817,21824,21859,21836,21806,21852,21829,21846,21847,21816,21811,21853,21913,21888,21679,21898,21919,21883,21886,21912,21918,21934,21884,21891,21929,21895,21928,21978,21957,21983,21956,21980,21988,21972,22036,22007,22038,22014,22013,22043,22009,22094,22096,29151,22068,22070,22066,22072,22123,22116,22063,22124,22122,22150,22144,22154,22176,22164,22159,22181,22190,22198,22196,22210,22204,22209,22211,22208,22216,22222,22225,22227,22231,22254,22265,22272,22271,22276,22281,22280,22283,22285,22291,22296,22294,21959,22300,22310,22327,22328,22350,22331,22336,22351,22377,22464,22408,22369,22399,22409,22419,22432,22451,22436,22442,22448,22467,22470,22484,22482,22483,22538,22486,22499,22539,22553,22557,22642,22561,22626,22603,22640,27584,22610,22589,22649,22661,22713,22687,22699,22714,22750,22715,22712,22702,22725,22739,22737,22743,22745,22744,22757,22748,22756,22751,22767,22778,22777,22779,22780,22781,22786,22794,22800,22811,26790,22821,22828,22829,22834,22840,22846,31442,22869,22864,22862,22874,22872,22882,22880,22887,22892,22889,22904,22913,22941,20318,20395,22947,22962,22982,23016,23004,22925,23001,23002,23077,23071,23057,23068,23049,23066,23104,23148,23113,23093,23094,23138,23146,23194,23228,23230,23243,23234,23229,23267,23255,23270,23273,23254,23290,23291,23308,23307,23318,23346,23248,23338,23350,23358,23363,23365,23360,23377,23381,23386,23387,23397,23401,23408,23411,23413,23416,25992,23418,23424,23427,23462,23480,23491,23495,23497,23508,23504,23524,23526,23522,23518,23525,23531,23536,23542,23539,23557,23559,23560,23565,23571,23584,23586,23592,23608,23609,23617,23622,23630,23635,23632,23631,23409,23660,23662,20066,23670,23673,23692,23697,23700,22939,23723,23739,23734,23740,23735,23749,23742,23751,23769,23785,23805,23802,23789,23948,23786,23819,23829,23831,23900,23839,23835,23825,23828,23842,23834,23833,23832,23884,23890,23886,23883,23916,23923,23926,23943,23940,23938,23970,23965,23980,23982,23997,23952,23991,23996,24009,24013,24019,24018,24022,24027,24043,24050,24053,24075,24090,24089,24081,24091,24118,24119,24132,24131,24128,24142,24151,24148,24159,24162,24164,24135,24181,24182,24186,40636,24191,24224,24257,24258,24264,24272,24271,24278,24291,24285,24282,24283,24290,24289,24296,24297,24300,24305,24307,24304,24308,24312,24318,24323,24329,24413,24412,24331,24337,24342,24361,24365,24376,24385,24392,24396,24398,24367,24401,24406,24407,24409,24417,24429,24435,24439,24451,24450,24447,24458,24456,24465,24455,24478,24473,24472,24480,24488,24493,24508,24534,24571,24548,24568,24561,24541,24755,24575,24609,24672,24601,24592,24617,24590,24625,24603,24597,24619,24614,24591,24634,24666,24641,24682,24695,24671,24650,24646,24653,24675,24643,24676,24642,24684,24683,24665,24705,24717,24807,24707,24730,24708,24731,24726,24727,24722,24743,24715,24801,24760,24800,24787,24756,24560,24765,24774,24757,24792,24909,24853,24838,24822,24823,24832,24820,24826,24835,24865,24827,24817,24845,24846,24903,24894,24872,24871,24906,24895,24892,24876,24884,24893,24898,24900,24947,24951,24920,24921,24922,24939,24948,24943,24933,24945,24927,24925,24915,24949,24985,24982,24967,25004,24980,24986,24970,24977,25003,25006,25036,25034,25033,25079,25032,25027,25030,25018,25035,32633,25037,25062,25059,25078,25082,25076,25087,25085,25084,25086,25088,25096,25097,25101,25100,25108,25115,25118,25121,25130,25134,25136,25138,25139,25153,25166,25182,25187,25179,25184,25192,25212,25218,25225,25214,25234,25235,25238,25300,25219,25236,25303,25297,25275,25295,25343,25286,25812,25288,25308,25292,25290,25282,25287,25243,25289,25356,25326,25329,25383,25346,25352,25327,25333,25424,25406,25421,25628,25423,25494,25486,25472,25515,25462,25507,25487,25481,25503,25525,25451,25449,25534,25577,25536,25542,25571,25545,25554,25590,25540,25622,25652,25606,25619,25638,25654,25885,25623,25640,25615,25703,25711,25718,25678,25898,25749,25747,25765,25769,25736,25788,25818,25810,25797,25799,25787,25816,25794,25841,25831,33289,25824,25825,25260,25827,25839,25900,25846,25844,25842,25850,25856,25853,25880,25884,25861,25892,25891,25899,25908,25909,25911,25910,25912,30027,25928,25942,25941,25933,25944,25950,25949,25970,25976,25986,25987,35722,26011,26015,26027,26039,26051,26054,26049,26052,26060,26066,26075,26073,26080,26081,26097,26482,26122,26115,26107,26483,26165,26166,26164,26140,26191,26180,26185,26177,26206,26205,26212,26215,26216,26207,26210,26224,26243,26248,26254,26249,26244,26264,26269,26305,26297,26313,26302,26300,26308,26296,26326,26330,26336,26175,26342,26345,26352,26357,26359,26383,26390,26398,26406,26407,38712,26414,26431,26422,26433,26424,26423,26438,26462,26464,26457,26467,26468,26505,26480,26537,26492,26474,26508,26507,26534,26529,26501,26551,26607,26548,26604,26547,26601,26552,26596,26590,26589,26594,26606,26553,26574,26566,26599,27292,26654,26694,26665,26688,26701,26674,26702,26803,26667,26713,26723,26743,26751,26783,26767,26797,26772,26781,26779,26755,27310,26809,26740,26805,26784,26810,26895,26765,26750,26881,26826,26888,26840,26914,26918,26849,26892,26829,26836,26855,26837,26934,26898,26884,26839,26851,26917,26873,26848,26863,26920,26922,26906,26915,26913,26822,27001,26999,26972,27e3,26987,26964,27006,26990,26937,26996,26941,26969,26928,26977,26974,26973,27009,26986,27058,27054,27088,27071,27073,27091,27070,27086,23528,27082,27101,27067,27075,27047,27182,27025,27040,27036,27029,27060,27102,27112,27138,27163,27135,27402,27129,27122,27111,27141,27057,27166,27117,27156,27115,27146,27154,27329,27171,27155,27204,27148,27250,27190,27256,27207,27234,27225,27238,27208,27192,27170,27280,27277,27296,27268,27298,27299,27287,34327,27323,27331,27330,27320,27315,27308,27358,27345,27359,27306,27354,27370,27387,27397,34326,27386,27410,27414,39729,27423,27448,27447,30428,27449,39150,27463,27459,27465,27472,27481,27476,27483,27487,27489,27512,27513,27519,27520,27524,27523,27533,27544,27541,27550,27556,27562,27563,27567,27570,27569,27571,27575,27580,27590,27595,27603,27615,27628,27627,27635,27631,40638,27656,27667,27668,27675,27684,27683,27742,27733,27746,27754,27778,27789,27802,27777,27803,27774,27752,27763,27794,27792,27844,27889,27859,27837,27863,27845,27869,27822,27825,27838,27834,27867,27887,27865,27882,27935,34893,27958,27947,27965,27960,27929,27957,27955,27922,27916,28003,28051,28004,27994,28025,27993,28046,28053,28644,28037,28153,28181,28170,28085,28103,28134,28088,28102,28140,28126,28108,28136,28114,28101,28154,28121,28132,28117,28138,28142,28205,28270,28206,28185,28274,28255,28222,28195,28267,28203,28278,28237,28191,28227,28218,28238,28196,28415,28189,28216,28290,28330,28312,28361,28343,28371,28349,28335,28356,28338,28372,28373,28303,28325,28354,28319,28481,28433,28748,28396,28408,28414,28479,28402,28465,28399,28466,28364,28478,28435,28407,28550,28538,28536,28545,28544,28527,28507,28659,28525,28546,28540,28504,28558,28561,28610,28518,28595,28579,28577,28580,28601,28614,28586,28639,28629,28652,28628,28632,28657,28654,28635,28681,28683,28666,28689,28673,28687,28670,28699,28698,28532,28701,28696,28703,28720,28734,28722,28753,28771,28825,28818,28847,28913,28844,28856,28851,28846,28895,28875,28893,28889,28937,28925,28956,28953,29029,29013,29064,29030,29026,29004,29014,29036,29071,29179,29060,29077,29096,29100,29143,29113,29118,29138,29129,29140,29134,29152,29164,29159,29173,29180,29177,29183,29197,29200,29211,29224,29229,29228,29232,29234,29243,29244,29247,29248,29254,29259,29272,29300,29310,29314,29313,29319,29330,29334,29346,29351,29369,29362,29379,29382,29380,29390,29394,29410,29408,29409,29433,29431,20495,29463,29450,29468,29462,29469,29492,29487,29481,29477,29502,29518,29519,40664,29527,29546,29544,29552,29560,29557,29563,29562,29640,29619,29646,29627,29632,29669,29678,29662,29858,29701,29807,29733,29688,29746,29754,29781,29759,29791,29785,29761,29788,29801,29808,29795,29802,29814,29822,29835,29854,29863,29898,29903,29908,29681,29920,29923,29927,29929,29934,29938,29936,29937,29944,29943,29956,29955,29957,29964,29966,29965,29973,29971,29982,29990,29996,30012,30020,30029,30026,30025,30043,30022,30042,30057,30052,30055,30059,30061,30072,30070,30086,30087,30068,30090,30089,30082,30100,30106,30109,30117,30115,30146,30131,30147,30133,30141,30136,30140,30129,30157,30154,30162,30169,30179,30174,30206,30207,30204,30209,30192,30202,30194,30195,30219,30221,30217,30239,30247,30240,30241,30242,30244,30260,30256,30267,30279,30280,30278,30300,30296,30305,30306,30312,30313,30314,30311,30316,30320,30322,30326,30328,30332,30336,30339,30344,30347,30350,30358,30355,30361,30362,30384,30388,30392,30393,30394,30402,30413,30422,30418,30430,30433,30437,30439,30442,34351,30459,30472,30471,30468,30505,30500,30494,30501,30502,30491,30519,30520,30535,30554,30568,30571,30555,30565,30591,30590,30585,30606,30603,30609,30624,30622,30640,30646,30649,30655,30652,30653,30651,30663,30669,30679,30682,30684,30691,30702,30716,30732,30738,31014,30752,31018,30789,30862,30836,30854,30844,30874,30860,30883,30901,30890,30895,30929,30918,30923,30932,30910,30908,30917,30922,30956,30951,30938,30973,30964,30983,30994,30993,31001,31020,31019,31040,31072,31063,31071,31066,31061,31059,31098,31103,31114,31133,31143,40779,31146,31150,31155,31161,31162,31177,31189,31207,31212,31201,31203,31240,31245,31256,31257,31264,31263,31104,31281,31291,31294,31287,31299,31319,31305,31329,31330,31337,40861,31344,31353,31357,31368,31383,31381,31384,31382,31401,31432,31408,31414,31429,31428,31423,36995,31431,31434,31437,31439,31445,31443,31449,31450,31453,31457,31458,31462,31469,31472,31490,31503,31498,31494,31539,31512,31513,31518,31541,31528,31542,31568,31610,31492,31565,31499,31564,31557,31605,31589,31604,31591,31600,31601,31596,31598,31645,31640,31647,31629,31644,31642,31627,31634,31631,31581,31641,31691,31681,31692,31695,31668,31686,31709,31721,31761,31764,31718,31717,31840,31744,31751,31763,31731,31735,31767,31757,31734,31779,31783,31786,31775,31799,31787,31805,31820,31811,31828,31823,31808,31824,31832,31839,31844,31830,31845,31852,31861,31875,31888,31908,31917,31906,31915,31905,31912,31923,31922,31921,31918,31929,31933,31936,31941,31938,31960,31954,31964,31970,39739,31983,31986,31988,31990,31994,32006,32002,32028,32021,32010,32069,32075,32046,32050,32063,32053,32070,32115,32086,32078,32114,32104,32110,32079,32099,32147,32137,32091,32143,32125,32155,32186,32174,32163,32181,32199,32189,32171,32317,32162,32175,32220,32184,32159,32176,32216,32221,32228,32222,32251,32242,32225,32261,32266,32291,32289,32274,32305,32287,32265,32267,32290,32326,32358,32315,32309,32313,32323,32311,32306,32314,32359,32349,32342,32350,32345,32346,32377,32362,32361,32380,32379,32387,32213,32381,36782,32383,32392,32393,32396,32402,32400,32403,32404,32406,32398,32411,32412,32568,32570,32581,32588,32589,32590,32592,32593,32597,32596,32600,32607,32608,32616,32617,32615,32632,32642,32646,32643,32648,32647,32652,32660,32670,32669,32666,32675,32687,32690,32697,32686,32694,32696,35697,32709,32710,32714,32725,32724,32737,32742,32745,32755,32761,39132,32774,32772,32779,32786,32792,32793,32796,32801,32808,32831,32827,32842,32838,32850,32856,32858,32863,32866,32872,32883,32882,32880,32886,32889,32893,32895,32900,32902,32901,32923,32915,32922,32941,20880,32940,32987,32997,32985,32989,32964,32986,32982,33033,33007,33009,33051,33065,33059,33071,33099,38539,33094,33086,33107,33105,33020,33137,33134,33125,33126,33140,33155,33160,33162,33152,33154,33184,33173,33188,33187,33119,33171,33193,33200,33205,33214,33208,33213,33216,33218,33210,33225,33229,33233,33241,33240,33224,33242,33247,33248,33255,33274,33275,33278,33281,33282,33285,33287,33290,33293,33296,33302,33321,33323,33336,33331,33344,33369,33368,33373,33370,33375,33380,33378,33384,33386,33387,33326,33393,33399,33400,33406,33421,33426,33451,33439,33467,33452,33505,33507,33503,33490,33524,33523,33530,33683,33539,33531,33529,33502,33542,33500,33545,33497,33589,33588,33558,33586,33585,33600,33593,33616,33605,33583,33579,33559,33560,33669,33690,33706,33695,33698,33686,33571,33678,33671,33674,33660,33717,33651,33653,33696,33673,33704,33780,33811,33771,33742,33789,33795,33752,33803,33729,33783,33799,33760,33778,33805,33826,33824,33725,33848,34054,33787,33901,33834,33852,34138,33924,33911,33899,33965,33902,33922,33897,33862,33836,33903,33913,33845,33994,33890,33977,33983,33951,34009,33997,33979,34010,34e3,33985,33990,34006,33953,34081,34047,34036,34071,34072,34092,34079,34069,34068,34044,34112,34147,34136,34120,34113,34306,34123,34133,34176,34212,34184,34193,34186,34216,34157,34196,34203,34282,34183,34204,34167,34174,34192,34249,34234,34255,34233,34256,34261,34269,34277,34268,34297,34314,34323,34315,34302,34298,34310,34338,34330,34352,34367,34381,20053,34388,34399,34407,34417,34451,34467,34473,34474,34443,34444,34486,34479,34500,34502,34480,34505,34851,34475,34516,34526,34537,34540,34527,34523,34543,34578,34566,34568,34560,34563,34555,34577,34569,34573,34553,34570,34612,34623,34615,34619,34597,34601,34586,34656,34655,34680,34636,34638,34676,34647,34664,34670,34649,34643,34659,34666,34821,34722,34719,34690,34735,34763,34749,34752,34768,38614,34731,34756,34739,34759,34758,34747,34799,34802,34784,34831,34829,34814,34806,34807,34830,34770,34833,34838,34837,34850,34849,34865,34870,34873,34855,34875,34884,34882,34898,34905,34910,34914,34923,34945,34942,34974,34933,34941,34997,34930,34946,34967,34962,34990,34969,34978,34957,34980,34992,35007,34993,35011,35012,35028,35032,35033,35037,35065,35074,35068,35060,35048,35058,35076,35084,35082,35091,35139,35102,35109,35114,35115,35137,35140,35131,35126,35128,35148,35101,35168,35166,35174,35172,35181,35178,35183,35188,35191,35198,35203,35208,35210,35219,35224,35233,35241,35238,35244,35247,35250,35258,35261,35263,35264,35290,35292,35293,35303,35316,35320,35331,35350,35344,35340,35355,35357,35365,35382,35393,35419,35410,35398,35400,35452,35437,35436,35426,35461,35458,35460,35496,35489,35473,35493,35494,35482,35491,35524,35533,35522,35546,35563,35571,35559,35556,35569,35604,35552,35554,35575,35550,35547,35596,35591,35610,35553,35606,35600,35607,35616,35635,38827,35622,35627,35646,35624,35649,35660,35663,35662,35657,35670,35675,35674,35691,35679,35692,35695,35700,35709,35712,35724,35726,35730,35731,35734,35737,35738,35898,35905,35903,35912,35916,35918,35920,35925,35938,35948,35960,35962,35970,35977,35973,35978,35981,35982,35988,35964,35992,25117,36013,36010,36029,36018,36019,36014,36022,36040,36033,36068,36067,36058,36093,36090,36091,36100,36101,36106,36103,36111,36109,36112,40782,36115,36045,36116,36118,36199,36205,36209,36211,36225,36249,36290,36286,36282,36303,36314,36310,36300,36315,36299,36330,36331,36319,36323,36348,36360,36361,36351,36381,36382,36368,36383,36418,36405,36400,36404,36426,36423,36425,36428,36432,36424,36441,36452,36448,36394,36451,36437,36470,36466,36476,36481,36487,36485,36484,36491,36490,36499,36497,36500,36505,36522,36513,36524,36528,36550,36529,36542,36549,36552,36555,36571,36579,36604,36603,36587,36606,36618,36613,36629,36626,36633,36627,36636,36639,36635,36620,36646,36659,36667,36665,36677,36674,36670,36684,36681,36678,36686,36695,36700,36706,36707,36708,36764,36767,36771,36781,36783,36791,36826,36837,36834,36842,36847,36999,36852,36869,36857,36858,36881,36885,36897,36877,36894,36886,36875,36903,36918,36917,36921,36856,36943,36944,36945,36946,36878,36937,36926,36950,36952,36958,36968,36975,36982,38568,36978,36994,36989,36993,36992,37002,37001,37007,37032,37039,37041,37045,37090,37092,25160,37083,37122,37138,37145,37170,37168,37194,37206,37208,37219,37221,37225,37235,37234,37259,37257,37250,37282,37291,37295,37290,37301,37300,37306,37312,37313,37321,37323,37328,37334,37343,37345,37339,37372,37365,37366,37406,37375,37396,37420,37397,37393,37470,37463,37445,37449,37476,37448,37525,37439,37451,37456,37532,37526,37523,37531,37466,37583,37561,37559,37609,37647,37626,37700,37678,37657,37666,37658,37667,37690,37685,37691,37724,37728,37756,37742,37718,37808,37804,37805,37780,37817,37846,37847,37864,37861,37848,37827,37853,37840,37832,37860,37914,37908,37907,37891,37895,37904,37942,37931,37941,37921,37946,37953,37970,37956,37979,37984,37986,37982,37994,37417,38e3,38005,38007,38013,37978,38012,38014,38017,38015,38274,38279,38282,38292,38294,38296,38297,38304,38312,38311,38317,38332,38331,38329,38334,38346,28662,38339,38349,38348,38357,38356,38358,38364,38369,38373,38370,38433,38440,38446,38447,38466,38476,38479,38475,38519,38492,38494,38493,38495,38502,38514,38508,38541,38552,38549,38551,38570,38567,38577,38578,38576,38580,38582,38584,38585,38606,38603,38601,38605,35149,38620,38669,38613,38649,38660,38662,38664,38675,38670,38673,38671,38678,38681,38692,38698,38704,38713,38717,38718,38724,38726,38728,38722,38729,38748,38752,38756,38758,38760,21202,38763,38769,38777,38789,38780,38785,38778,38790,38795,38799,38800,38812,38824,38822,38819,38835,38836,38851,38854,38856,38859,38876,38893,40783,38898,31455,38902,38901,38927,38924,38968,38948,38945,38967,38973,38982,38991,38987,39019,39023,39024,39025,39028,39027,39082,39087,39089,39094,39108,39107,39110,39145,39147,39171,39177,39186,39188,39192,39201,39197,39198,39204,39200,39212,39214,39229,39230,39234,39241,39237,39248,39243,39249,39250,39244,39253,39319,39320,39333,39341,39342,39356,39391,39387,39389,39384,39377,39405,39406,39409,39410,39419,39416,39425,39439,39429,39394,39449,39467,39479,39493,39490,39488,39491,39486,39509,39501,39515,39511,39519,39522,39525,39524,39529,39531,39530,39597,39600,39612,39616,39631,39633,39635,39636,39646,39647,39650,39651,39654,39663,39659,39662,39668,39665,39671,39675,39686,39704,39706,39711,39714,39715,39717,39719,39720,39721,39722,39726,39727,39730,39748,39747,39759,39757,39758,39761,39768,39796,39827,39811,39825,39830,39831,39839,39840,39848,39860,39872,39882,39865,39878,39887,39889,39890,39907,39906,39908,39892,39905,39994,39922,39921,39920,39957,39956,39945,39955,39948,39942,39944,39954,39946,39940,39982,39963,39973,39972,39969,39984,40007,39986,40006,39998,40026,40032,40039,40054,40056,40167,40172,40176,40201,40200,40171,40195,40198,40234,40230,40367,40227,40223,40260,40213,40210,40257,40255,40254,40262,40264,40285,40286,40292,40273,40272,40281,40306,40329,40327,40363,40303,40314,40346,40356,40361,40370,40388,40385,40379,40376,40378,40390,40399,40386,40409,40403,40440,40422,40429,40431,40445,40474,40475,40478,40565,40569,40573,40577,40584,40587,40588,40594,40597,40593,40605,40613,40617,40632,40618,40621,38753,40652,40654,40655,40656,40660,40668,40670,40669,40672,40677,40680,40687,40692,40694,40695,40697,40699,40700,40701,40711,40712,30391,40725,40737,40748,40766,40778,40786,40788,40803,40799,40800,40801,40806,40807,40812,40810,40823,40818,40822,40853,40860,40864,22575,27079,36953,29796,20956,29081,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,32394,35100,37704,37512,34012,20425,28859,26161,26824,37625,26363,24389,20008,20193,20220,20224,20227,20281,20310,20370,20362,20378,20372,20429,20544,20514,20479,20510,20550,20592,20546,20628,20724,20696,20810,20836,20893,20926,20972,21013,21148,21158,21184,21211,21248,21255,21284,21362,21395,21426,21469,64014,21660,21642,21673,21759,21894,22361,22373,22444,22472,22471,64015,64016,22686,22706,22795,22867,22875,22877,22883,22948,22970,23382,23488,29999,23512,23532,23582,23718,23738,23797,23847,23891,64017,23874,23917,23992,23993,24016,24353,24372,24423,24503,24542,24669,24709,24714,24798,24789,24864,24818,24849,24887,24880,24984,25107,25254,25589,25696,25757,25806,25934,26112,26133,26171,26121,26158,26142,26148,26213,26199,26201,64018,26227,26265,26272,26290,26303,26362,26382,63785,26470,26555,26706,26560,26625,26692,26831,64019,26984,64020,27032,27106,27184,27243,27206,27251,27262,27362,27364,27606,27711,27740,27782,27759,27866,27908,28039,28015,28054,28076,28111,28152,28146,28156,28217,28252,28199,28220,28351,28552,28597,28661,28677,28679,28712,28805,28843,28943,28932,29020,28998,28999,64021,29121,29182,29361,29374,29476,64022,29559,29629,29641,29654,29667,29650,29703,29685,29734,29738,29737,29742,29794,29833,29855,29953,30063,30338,30364,30366,30363,30374,64023,30534,21167,30753,30798,30820,30842,31024,64024,64025,64026,31124,64027,31131,31441,31463,64028,31467,31646,64029,32072,32092,32183,32160,32214,32338,32583,32673,64030,33537,33634,33663,33735,33782,33864,33972,34131,34137,34155,64031,34224,64032,64033,34823,35061,35346,35383,35449,35495,35518,35551,64034,35574,35667,35711,36080,36084,36114,36214,64035,36559,64036,64037,36967,37086,64038,37141,37159,37338,37335,37342,37357,37358,37348,37349,37382,37392,37386,37434,37440,37436,37454,37465,37457,37433,37479,37543,37495,37496,37607,37591,37593,37584,64039,37589,37600,37587,37669,37665,37627,64040,37662,37631,37661,37634,37744,37719,37796,37830,37854,37880,37937,37957,37960,38290,63964,64041,38557,38575,38707,38715,38723,38733,38735,38737,38741,38999,39013,64042,64043,39207,64044,39326,39502,39641,39644,39797,39794,39823,39857,39867,39936,40304,40299,64045,40473,40657,null,null,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,65506,65508,65287,65282,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,65506,65508,65287,65282,12849,8470,8481,8757,32394,35100,37704,37512,34012,20425,28859,26161,26824,37625,26363,24389,20008,20193,20220,20224,20227,20281,20310,20370,20362,20378,20372,20429,20544,20514,20479,20510,20550,20592,20546,20628,20724,20696,20810,20836,20893,20926,20972,21013,21148,21158,21184,21211,21248,21255,21284,21362,21395,21426,21469,64014,21660,21642,21673,21759,21894,22361,22373,22444,22472,22471,64015,64016,22686,22706,22795,22867,22875,22877,22883,22948,22970,23382,23488,29999,23512,23532,23582,23718,23738,23797,23847,23891,64017,23874,23917,23992,23993,24016,24353,24372,24423,24503,24542,24669,24709,24714,24798,24789,24864,24818,24849,24887,24880,24984,25107,25254,25589,25696,25757,25806,25934,26112,26133,26171,26121,26158,26142,26148,26213,26199,26201,64018,26227,26265,26272,26290,26303,26362,26382,63785,26470,26555,26706,26560,26625,26692,26831,64019,26984,64020,27032,27106,27184,27243,27206,27251,27262,27362,27364,27606,27711,27740,27782,27759,27866,27908,28039,28015,28054,28076,28111,28152,28146,28156,28217,28252,28199,28220,28351,28552,28597,28661,28677,28679,28712,28805,28843,28943,28932,29020,28998,28999,64021,29121,29182,29361,29374,29476,64022,29559,29629,29641,29654,29667,29650,29703,29685,29734,29738,29737,29742,29794,29833,29855,29953,30063,30338,30364,30366,30363,30374,64023,30534,21167,30753,30798,30820,30842,31024,64024,64025,64026,31124,64027,31131,31441,31463,64028,31467,31646,64029,32072,32092,32183,32160,32214,32338,32583,32673,64030,33537,33634,33663,33735,33782,33864,33972,34131,34137,34155,64031,34224,64032,64033,34823,35061,35346,35383,35449,35495,35518,35551,64034,35574,35667,35711,36080,36084,36114,36214,64035,36559,64036,64037,36967,37086,64038,37141,37159,37338,37335,37342,37357,37358,37348,37349,37382,37392,37386,37434,37440,37436,37454,37465,37457,37433,37479,37543,37495,37496,37607,37591,37593,37584,64039,37589,37600,37587,37669,37665,37627,64040,37662,37631,37661,37634,37744,37719,37796,37830,37854,37880,37937,37957,37960,38290,63964,64041,38557,38575,38707,38715,38723,38733,38735,38737,38741,38999,39013,64042,64043,39207,64044,39326,39502,39641,39644,39797,39794,39823,39857,39867,39936,40304,40299,64045,40473,40657,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],
jis0212:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,728,711,184,729,733,175,731,730,65374,900,901,null,null,null,null,null,null,null,null,161,166,191,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,186,170,169,174,8482,164,8470,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,902,904,905,906,938,null,908,null,910,939,null,911,null,null,null,null,940,941,942,943,970,912,972,962,973,971,944,974,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1038,1039,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1118,1119,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,198,272,null,294,null,306,null,321,319,null,330,216,338,null,358,222,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,230,273,240,295,305,307,312,322,320,329,331,248,339,223,359,254,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,193,192,196,194,258,461,256,260,197,195,262,264,268,199,266,270,201,200,203,202,282,278,274,280,null,284,286,290,288,292,205,204,207,206,463,304,298,302,296,308,310,313,317,315,323,327,325,209,211,210,214,212,465,336,332,213,340,344,342,346,348,352,350,356,354,218,217,220,219,364,467,368,362,370,366,360,471,475,473,469,372,221,376,374,377,381,379,null,null,null,null,null,null,null,225,224,228,226,259,462,257,261,229,227,263,265,269,231,267,271,233,232,235,234,283,279,275,281,501,285,287,null,289,293,237,236,239,238,464,null,299,303,297,309,311,314,318,316,324,328,326,241,243,242,246,244,466,337,333,245,341,345,343,347,349,353,351,357,355,250,249,252,251,365,468,369,363,371,367,361,472,476,474,470,373,253,255,375,378,382,380,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,19970,19972,19973,19980,19986,19999,20003,20004,20008,20011,20014,20015,20016,20021,20032,20033,20036,20039,20049,20058,20060,20067,20072,20073,20084,20085,20089,20095,20109,20118,20119,20125,20143,20153,20163,20176,20186,20187,20192,20193,20194,20200,20207,20209,20211,20213,20221,20222,20223,20224,20226,20227,20232,20235,20236,20242,20245,20246,20247,20249,20270,20273,20320,20275,20277,20279,20281,20283,20286,20288,20290,20296,20297,20299,20300,20306,20308,20310,20312,20319,20323,20330,20332,20334,20337,20343,20344,20345,20346,20349,20350,20353,20354,20356,20357,20361,20362,20364,20366,20368,20370,20371,20372,20375,20377,20378,20382,20383,20402,20407,20409,20411,20412,20413,20414,20416,20417,20421,20422,20424,20425,20427,20428,20429,20431,20434,20444,20448,20450,20464,20466,20476,20477,20479,20480,20481,20484,20487,20490,20492,20494,20496,20499,20503,20504,20507,20508,20509,20510,20514,20519,20526,20528,20530,20531,20533,20544,20545,20546,20549,20550,20554,20556,20558,20561,20562,20563,20567,20569,20575,20576,20578,20579,20582,20583,20586,20589,20592,20593,20539,20609,20611,20612,20614,20618,20622,20623,20624,20626,20627,20628,20630,20635,20636,20638,20639,20640,20641,20642,20650,20655,20656,20665,20666,20669,20672,20675,20676,20679,20684,20686,20688,20691,20692,20696,20700,20701,20703,20706,20708,20710,20712,20713,20719,20721,20726,20730,20734,20739,20742,20743,20744,20747,20748,20749,20750,20722,20752,20759,20761,20763,20764,20765,20766,20771,20775,20776,20780,20781,20783,20785,20787,20788,20789,20792,20793,20802,20810,20815,20819,20821,20823,20824,20831,20836,20838,20862,20867,20868,20875,20878,20888,20893,20897,20899,20909,20920,20922,20924,20926,20927,20930,20936,20943,20945,20946,20947,20949,20952,20958,20962,20965,20974,20978,20979,20980,20983,20993,20994,20997,21010,21011,21013,21014,21016,21026,21032,21041,21042,21045,21052,21061,21065,21077,21079,21080,21082,21084,21087,21088,21089,21094,21102,21111,21112,21113,21120,21122,21125,21130,21132,21139,21141,21142,21143,21144,21146,21148,21156,21157,21158,21159,21167,21168,21174,21175,21176,21178,21179,21181,21184,21188,21190,21192,21196,21199,21201,21204,21206,21211,21212,21217,21221,21224,21225,21226,21228,21232,21233,21236,21238,21239,21248,21251,21258,21259,21260,21265,21267,21272,21275,21276,21278,21279,21285,21287,21288,21289,21291,21292,21293,21296,21298,21301,21308,21309,21310,21314,21324,21323,21337,21339,21345,21347,21349,21356,21357,21362,21369,21374,21379,21383,21384,21390,21395,21396,21401,21405,21409,21412,21418,21419,21423,21426,21428,21429,21431,21432,21434,21437,21440,21445,21455,21458,21459,21461,21466,21469,21470,21472,21478,21479,21493,21506,21523,21530,21537,21543,21544,21546,21551,21553,21556,21557,21571,21572,21575,21581,21583,21598,21602,21604,21606,21607,21609,21611,21613,21614,21620,21631,21633,21635,21637,21640,21641,21645,21649,21653,21654,21660,21663,21665,21670,21671,21673,21674,21677,21678,21681,21687,21689,21690,21691,21695,21702,21706,21709,21710,21728,21738,21740,21743,21750,21756,21758,21759,21760,21761,21765,21768,21769,21772,21773,21774,21781,21802,21803,21810,21813,21814,21819,21820,21821,21825,21831,21833,21834,21837,21840,21841,21848,21850,21851,21854,21856,21857,21860,21862,21887,21889,21890,21894,21896,21902,21903,21905,21906,21907,21908,21911,21923,21924,21933,21938,21951,21953,21955,21958,21961,21963,21964,21966,21969,21970,21971,21975,21976,21979,21982,21986,21993,22006,22015,22021,22024,22026,22029,22030,22031,22032,22033,22034,22041,22060,22064,22067,22069,22071,22073,22075,22076,22077,22079,22080,22081,22083,22084,22086,22089,22091,22093,22095,22100,22110,22112,22113,22114,22115,22118,22121,22125,22127,22129,22130,22133,22148,22149,22152,22155,22156,22165,22169,22170,22173,22174,22175,22182,22183,22184,22185,22187,22188,22189,22193,22195,22199,22206,22213,22217,22218,22219,22223,22224,22220,22221,22233,22236,22237,22239,22241,22244,22245,22246,22247,22248,22257,22251,22253,22262,22263,22273,22274,22279,22282,22284,22289,22293,22298,22299,22301,22304,22306,22307,22308,22309,22313,22314,22316,22318,22319,22323,22324,22333,22334,22335,22341,22342,22348,22349,22354,22370,22373,22375,22376,22379,22381,22382,22383,22384,22385,22387,22388,22389,22391,22393,22394,22395,22396,22398,22401,22403,22412,22420,22423,22425,22426,22428,22429,22430,22431,22433,22421,22439,22440,22441,22444,22456,22461,22471,22472,22476,22479,22485,22493,22494,22500,22502,22503,22505,22509,22512,22517,22518,22520,22525,22526,22527,22531,22532,22536,22537,22497,22540,22541,22555,22558,22559,22560,22566,22567,22573,22578,22585,22591,22601,22604,22605,22607,22608,22613,22623,22625,22628,22631,22632,22648,22652,22655,22656,22657,22663,22664,22665,22666,22668,22669,22671,22672,22676,22678,22685,22688,22689,22690,22694,22697,22705,22706,22724,22716,22722,22728,22733,22734,22736,22738,22740,22742,22746,22749,22753,22754,22761,22771,22789,22790,22795,22796,22802,22803,22804,34369,22813,22817,22819,22820,22824,22831,22832,22835,22837,22838,22847,22851,22854,22866,22867,22873,22875,22877,22878,22879,22881,22883,22891,22893,22895,22898,22901,22902,22905,22907,22908,22923,22924,22926,22930,22933,22935,22943,22948,22951,22957,22958,22959,22960,22963,22967,22970,22972,22977,22979,22980,22984,22986,22989,22994,23005,23006,23007,23011,23012,23015,23022,23023,23025,23026,23028,23031,23040,23044,23052,23053,23054,23058,23059,23070,23075,23076,23079,23080,23082,23085,23088,23108,23109,23111,23112,23116,23120,23125,23134,23139,23141,23143,23149,23159,23162,23163,23166,23179,23184,23187,23190,23193,23196,23198,23199,23200,23202,23207,23212,23217,23218,23219,23221,23224,23226,23227,23231,23236,23238,23240,23247,23258,23260,23264,23269,23274,23278,23285,23286,23293,23296,23297,23304,23319,23348,23321,23323,23325,23329,23333,23341,23352,23361,23371,23372,23378,23382,23390,23400,23406,23407,23420,23421,23422,23423,23425,23428,23430,23434,23438,23440,23441,23443,23444,23446,23464,23465,23468,23469,23471,23473,23474,23479,23482,23484,23488,23489,23501,23503,23510,23511,23512,23513,23514,23520,23535,23537,23540,23549,23564,23575,23582,23583,23587,23590,23593,23595,23596,23598,23600,23602,23605,23606,23641,23642,23644,23650,23651,23655,23656,23657,23661,23664,23668,23669,23674,23675,23676,23677,23687,23688,23690,23695,23698,23709,23711,23712,23714,23715,23718,23722,23730,23732,23733,23738,23753,23755,23762,23773,23767,23790,23793,23794,23796,23809,23814,23821,23826,23851,23843,23844,23846,23847,23857,23860,23865,23869,23871,23874,23875,23878,23880,23893,23889,23897,23882,23903,23904,23905,23906,23908,23914,23917,23920,23929,23930,23934,23935,23937,23939,23944,23946,23954,23955,23956,23957,23961,23963,23967,23968,23975,23979,23984,23988,23992,23993,24003,24007,24011,24016,24014,24024,24025,24032,24036,24041,24056,24057,24064,24071,24077,24082,24084,24085,24088,24095,24096,24110,24104,24114,24117,24126,24139,24144,24137,24145,24150,24152,24155,24156,24158,24168,24170,24171,24172,24173,24174,24176,24192,24203,24206,24226,24228,24229,24232,24234,24236,24241,24243,24253,24254,24255,24262,24268,24267,24270,24273,24274,24276,24277,24284,24286,24293,24299,24322,24326,24327,24328,24334,24345,24348,24349,24353,24354,24355,24356,24360,24363,24364,24366,24368,24372,24374,24379,24381,24383,24384,24388,24389,24391,24397,24400,24404,24408,24411,24416,24419,24420,24423,24431,24434,24436,24437,24440,24442,24445,24446,24457,24461,24463,24470,24476,24477,24482,24487,24491,24484,24492,24495,24496,24497,24504,24516,24519,24520,24521,24523,24528,24529,24530,24531,24532,24542,24545,24546,24552,24553,24554,24556,24557,24558,24559,24562,24563,24566,24570,24572,24583,24586,24589,24595,24596,24599,24600,24602,24607,24612,24621,24627,24629,24640,24647,24648,24649,24652,24657,24660,24662,24663,24669,24673,24679,24689,24702,24703,24706,24710,24712,24714,24718,24721,24723,24725,24728,24733,24734,24738,24740,24741,24744,24752,24753,24759,24763,24766,24770,24772,24776,24777,24778,24779,24782,24783,24788,24789,24793,24795,24797,24798,24802,24805,24818,24821,24824,24828,24829,24834,24839,24842,24844,24848,24849,24850,24851,24852,24854,24855,24857,24860,24862,24866,24874,24875,24880,24881,24885,24886,24887,24889,24897,24901,24902,24905,24926,24928,24940,24946,24952,24955,24956,24959,24960,24961,24963,24964,24971,24973,24978,24979,24983,24984,24988,24989,24991,24992,24997,25e3,25002,25005,25016,25017,25020,25024,25025,25026,25038,25039,25045,25052,25053,25054,25055,25057,25058,25063,25065,25061,25068,25069,25071,25089,25091,25092,25095,25107,25109,25116,25120,25122,25123,25127,25129,25131,25145,25149,25154,25155,25156,25158,25164,25168,25169,25170,25172,25174,25178,25180,25188,25197,25199,25203,25210,25213,25229,25230,25231,25232,25254,25256,25267,25270,25271,25274,25278,25279,25284,25294,25301,25302,25306,25322,25330,25332,25340,25341,25347,25348,25354,25355,25357,25360,25363,25366,25368,25385,25386,25389,25397,25398,25401,25404,25409,25410,25411,25412,25414,25418,25419,25422,25426,25427,25428,25432,25435,25445,25446,25452,25453,25457,25460,25461,25464,25468,25469,25471,25474,25476,25479,25482,25488,25492,25493,25497,25498,25502,25508,25510,25517,25518,25519,25533,25537,25541,25544,25550,25553,25555,25556,25557,25564,25568,25573,25578,25580,25586,25587,25589,25592,25593,25609,25610,25616,25618,25620,25624,25630,25632,25634,25636,25637,25641,25642,25647,25648,25653,25661,25663,25675,25679,25681,25682,25683,25684,25690,25691,25692,25693,25695,25696,25697,25699,25709,25715,25716,25723,25725,25733,25735,25743,25744,25745,25752,25753,25755,25757,25759,25761,25763,25766,25768,25772,25779,25789,25790,25791,25796,25801,25802,25803,25804,25806,25808,25809,25813,25815,25828,25829,25833,25834,25837,25840,25845,25847,25851,25855,25857,25860,25864,25865,25866,25871,25875,25876,25878,25881,25883,25886,25887,25890,25894,25897,25902,25905,25914,25916,25917,25923,25927,25929,25936,25938,25940,25951,25952,25959,25963,25978,25981,25985,25989,25994,26002,26005,26008,26013,26016,26019,26022,26030,26034,26035,26036,26047,26050,26056,26057,26062,26064,26068,26070,26072,26079,26096,26098,26100,26101,26105,26110,26111,26112,26116,26120,26121,26125,26129,26130,26133,26134,26141,26142,26145,26146,26147,26148,26150,26153,26154,26155,26156,26158,26160,26161,26163,26169,26167,26176,26181,26182,26186,26188,26193,26190,26199,26200,26201,26203,26204,26208,26209,26363,26218,26219,26220,26238,26227,26229,26239,26231,26232,26233,26235,26240,26236,26251,26252,26253,26256,26258,26265,26266,26267,26268,26271,26272,26276,26285,26289,26290,26293,26299,26303,26304,26306,26307,26312,26316,26318,26319,26324,26331,26335,26344,26347,26348,26350,26362,26373,26375,26382,26387,26393,26396,26400,26402,26419,26430,26437,26439,26440,26444,26452,26453,26461,26470,26476,26478,26484,26486,26491,26497,26500,26510,26511,26513,26515,26518,26520,26521,26523,26544,26545,26546,26549,26555,26556,26557,26617,26560,26562,26563,26565,26568,26569,26578,26583,26585,26588,26593,26598,26608,26610,26614,26615,26706,26644,26649,26653,26655,26664,26663,26668,26669,26671,26672,26673,26675,26683,26687,26692,26693,26698,26700,26709,26711,26712,26715,26731,26734,26735,26736,26737,26738,26741,26745,26746,26747,26748,26754,26756,26758,26760,26774,26776,26778,26780,26785,26787,26789,26793,26794,26798,26802,26811,26821,26824,26828,26831,26832,26833,26835,26838,26841,26844,26845,26853,26856,26858,26859,26860,26861,26864,26865,26869,26870,26875,26876,26877,26886,26889,26890,26896,26897,26899,26902,26903,26929,26931,26933,26936,26939,26946,26949,26953,26958,26967,26971,26979,26980,26981,26982,26984,26985,26988,26992,26993,26994,27002,27003,27007,27008,27021,27026,27030,27032,27041,27045,27046,27048,27051,27053,27055,27063,27064,27066,27068,27077,27080,27089,27094,27095,27106,27109,27118,27119,27121,27123,27125,27134,27136,27137,27139,27151,27153,27157,27162,27165,27168,27172,27176,27184,27186,27188,27191,27195,27198,27199,27205,27206,27209,27210,27214,27216,27217,27218,27221,27222,27227,27236,27239,27242,27249,27251,27262,27265,27267,27270,27271,27273,27275,27281,27291,27293,27294,27295,27301,27307,27311,27312,27313,27316,27325,27326,27327,27334,27337,27336,27340,27344,27348,27349,27350,27356,27357,27364,27367,27372,27376,27377,27378,27388,27389,27394,27395,27398,27399,27401,27407,27408,27409,27415,27419,27422,27428,27432,27435,27436,27439,27445,27446,27451,27455,27462,27466,27469,27474,27478,27480,27485,27488,27495,27499,27502,27504,27509,27517,27518,27522,27525,27543,27547,27551,27552,27554,27555,27560,27561,27564,27565,27566,27568,27576,27577,27581,27582,27587,27588,27593,27596,27606,27610,27617,27619,27622,27623,27630,27633,27639,27641,27647,27650,27652,27653,27657,27661,27662,27664,27666,27673,27679,27686,27687,27688,27692,27694,27699,27701,27702,27706,27707,27711,27722,27723,27725,27727,27730,27732,27737,27739,27740,27755,27757,27759,27764,27766,27768,27769,27771,27781,27782,27783,27785,27796,27797,27799,27800,27804,27807,27824,27826,27828,27842,27846,27853,27855,27856,27857,27858,27860,27862,27866,27868,27872,27879,27881,27883,27884,27886,27890,27892,27908,27911,27914,27918,27919,27921,27923,27930,27942,27943,27944,27751,27950,27951,27953,27961,27964,27967,27991,27998,27999,28001,28005,28007,28015,28016,28028,28034,28039,28049,28050,28052,28054,28055,28056,28074,28076,28084,28087,28089,28093,28095,28100,28104,28106,28110,28111,28118,28123,28125,28127,28128,28130,28133,28137,28143,28144,28148,28150,28156,28160,28164,28190,28194,28199,28210,28214,28217,28219,28220,28228,28229,28232,28233,28235,28239,28241,28242,28243,28244,28247,28252,28253,28254,28258,28259,28264,28275,28283,28285,28301,28307,28313,28320,28327,28333,28334,28337,28339,28347,28351,28352,28353,28355,28359,28360,28362,28365,28366,28367,28395,28397,28398,28409,28411,28413,28420,28424,28426,28428,28429,28438,28440,28442,28443,28454,28457,28458,28463,28464,28467,28470,28475,28476,28461,28495,28497,28498,28499,28503,28505,28506,28509,28510,28513,28514,28520,28524,28541,28542,28547,28551,28552,28555,28556,28557,28560,28562,28563,28564,28566,28570,28575,28576,28581,28582,28583,28584,28590,28591,28592,28597,28598,28604,28613,28615,28616,28618,28634,28638,28648,28649,28656,28661,28665,28668,28669,28672,28677,28678,28679,28685,28695,28704,28707,28719,28724,28727,28729,28732,28739,28740,28744,28745,28746,28747,28756,28757,28765,28766,28750,28772,28773,28780,28782,28789,28790,28798,28801,28805,28806,28820,28821,28822,28823,28824,28827,28836,28843,28848,28849,28852,28855,28874,28881,28883,28884,28885,28886,28888,28892,28900,28922,28931,28932,28933,28934,28935,28939,28940,28943,28958,28960,28971,28973,28975,28976,28977,28984,28993,28997,28998,28999,29002,29003,29008,29010,29015,29018,29020,29022,29024,29032,29049,29056,29061,29063,29068,29074,29082,29083,29088,29090,29103,29104,29106,29107,29114,29119,29120,29121,29124,29131,29132,29139,29142,29145,29146,29148,29176,29182,29184,29191,29192,29193,29203,29207,29210,29213,29215,29220,29227,29231,29236,29240,29241,29249,29250,29251,29253,29262,29263,29264,29267,29269,29270,29274,29276,29278,29280,29283,29288,29291,29294,29295,29297,29303,29304,29307,29308,29311,29316,29321,29325,29326,29331,29339,29352,29357,29358,29361,29364,29374,29377,29383,29385,29388,29397,29398,29400,29407,29413,29427,29428,29434,29435,29438,29442,29444,29445,29447,29451,29453,29458,29459,29464,29465,29470,29474,29476,29479,29480,29484,29489,29490,29493,29498,29499,29501,29507,29517,29520,29522,29526,29528,29533,29534,29535,29536,29542,29543,29545,29547,29548,29550,29551,29553,29559,29561,29564,29568,29569,29571,29573,29574,29582,29584,29587,29589,29591,29592,29596,29598,29599,29600,29602,29605,29606,29610,29611,29613,29621,29623,29625,29628,29629,29631,29637,29638,29641,29643,29644,29647,29650,29651,29654,29657,29661,29665,29667,29670,29671,29673,29684,29685,29687,29689,29690,29691,29693,29695,29696,29697,29700,29703,29706,29713,29722,29723,29732,29734,29736,29737,29738,29739,29740,29741,29742,29743,29744,29745,29753,29760,29763,29764,29766,29767,29771,29773,29777,29778,29783,29789,29794,29798,29799,29800,29803,29805,29806,29809,29810,29824,29825,29829,29830,29831,29833,29839,29840,29841,29842,29848,29849,29850,29852,29855,29856,29857,29859,29862,29864,29865,29866,29867,29870,29871,29873,29874,29877,29881,29883,29887,29896,29897,29900,29904,29907,29912,29914,29915,29918,29919,29924,29928,29930,29931,29935,29940,29946,29947,29948,29951,29958,29970,29974,29975,29984,29985,29988,29991,29993,29994,29999,30006,30009,30013,30014,30015,30016,30019,30023,30024,30030,30032,30034,30039,30046,30047,30049,30063,30065,30073,30074,30075,30076,30077,30078,30081,30085,30096,30098,30099,30101,30105,30108,30114,30116,30132,30138,30143,30144,30145,30148,30150,30156,30158,30159,30167,30172,30175,30176,30177,30180,30183,30188,30190,30191,30193,30201,30208,30210,30211,30212,30215,30216,30218,30220,30223,30226,30227,30229,30230,30233,30235,30236,30237,30238,30243,30245,30246,30249,30253,30258,30259,30261,30264,30265,30266,30268,30282,30272,30273,30275,30276,30277,30281,30283,30293,30297,30303,30308,30309,30317,30318,30319,30321,30324,30337,30341,30348,30349,30357,30363,30364,30365,30367,30368,30370,30371,30372,30373,30374,30375,30376,30378,30381,30397,30401,30405,30409,30411,30412,30414,30420,30425,30432,30438,30440,30444,30448,30449,30454,30457,30460,30464,30470,30474,30478,30482,30484,30485,30487,30489,30490,30492,30498,30504,30509,30510,30511,30516,30517,30518,30521,30525,30526,30530,30533,30534,30538,30541,30542,30543,30546,30550,30551,30556,30558,30559,30560,30562,30564,30567,30570,30572,30576,30578,30579,30580,30586,30589,30592,30596,30604,30605,30612,30613,30614,30618,30623,30626,30631,30634,30638,30639,30641,30645,30654,30659,30665,30673,30674,30677,30681,30686,30687,30688,30692,30694,30698,30700,30704,30705,30708,30712,30715,30725,30726,30729,30733,30734,30737,30749,30753,30754,30755,30765,30766,30768,30773,30775,30787,30788,30791,30792,30796,30798,30802,30812,30814,30816,30817,30819,30820,30824,30826,30830,30842,30846,30858,30863,30868,30872,30881,30877,30878,30879,30884,30888,30892,30893,30896,30897,30898,30899,30907,30909,30911,30919,30920,30921,30924,30926,30930,30931,30933,30934,30948,30939,30943,30944,30945,30950,30954,30962,30963,30976,30966,30967,30970,30971,30975,30982,30988,30992,31002,31004,31006,31007,31008,31013,31015,31017,31021,31025,31028,31029,31035,31037,31039,31044,31045,31046,31050,31051,31055,31057,31060,31064,31067,31068,31079,31081,31083,31090,31097,31099,31100,31102,31115,31116,31121,31123,31124,31125,31126,31128,31131,31132,31137,31144,31145,31147,31151,31153,31156,31160,31163,31170,31172,31175,31176,31178,31183,31188,31190,31194,31197,31198,31200,31202,31205,31210,31211,31213,31217,31224,31228,31234,31235,31239,31241,31242,31244,31249,31253,31259,31262,31265,31271,31275,31277,31279,31280,31284,31285,31288,31289,31290,31300,31301,31303,31304,31308,31317,31318,31321,31324,31325,31327,31328,31333,31335,31338,31341,31349,31352,31358,31360,31362,31365,31366,31370,31371,31376,31377,31380,31390,31392,31395,31404,31411,31413,31417,31419,31420,31430,31433,31436,31438,31441,31451,31464,31465,31467,31468,31473,31476,31483,31485,31486,31495,31508,31519,31523,31527,31529,31530,31531,31533,31534,31535,31536,31537,31540,31549,31551,31552,31553,31559,31566,31573,31584,31588,31590,31593,31594,31597,31599,31602,31603,31607,31620,31625,31630,31632,31633,31638,31643,31646,31648,31653,31660,31663,31664,31666,31669,31670,31674,31675,31676,31677,31682,31685,31688,31690,31700,31702,31703,31705,31706,31707,31720,31722,31730,31732,31733,31736,31737,31738,31740,31742,31745,31746,31747,31748,31750,31753,31755,31756,31758,31759,31769,31771,31776,31781,31782,31784,31788,31793,31795,31796,31798,31801,31802,31814,31818,31829,31825,31826,31827,31833,31834,31835,31836,31837,31838,31841,31843,31847,31849,31853,31854,31856,31858,31865,31868,31869,31878,31879,31887,31892,31902,31904,31910,31920,31926,31927,31930,31931,31932,31935,31940,31943,31944,31945,31949,31951,31955,31956,31957,31959,31961,31962,31965,31974,31977,31979,31989,32003,32007,32008,32009,32015,32017,32018,32019,32022,32029,32030,32035,32038,32042,32045,32049,32060,32061,32062,32064,32065,32071,32072,32077,32081,32083,32087,32089,32090,32092,32093,32101,32103,32106,32112,32120,32122,32123,32127,32129,32130,32131,32133,32134,32136,32139,32140,32141,32145,32150,32151,32157,32158,32166,32167,32170,32179,32182,32183,32185,32194,32195,32196,32197,32198,32204,32205,32206,32215,32217,32256,32226,32229,32230,32234,32235,32237,32241,32245,32246,32249,32250,32264,32272,32273,32277,32279,32284,32285,32288,32295,32296,32300,32301,32303,32307,32310,32319,32324,32325,32327,32334,32336,32338,32344,32351,32353,32354,32357,32363,32366,32367,32371,32376,32382,32385,32390,32391,32394,32397,32401,32405,32408,32410,32413,32414,32572,32571,32573,32574,32575,32579,32580,32583,32591,32594,32595,32603,32604,32605,32609,32611,32612,32613,32614,32621,32625,32637,32638,32639,32640,32651,32653,32655,32656,32657,32662,32663,32668,32673,32674,32678,32682,32685,32692,32700,32703,32704,32707,32712,32718,32719,32731,32735,32739,32741,32744,32748,32750,32751,32754,32762,32765,32766,32767,32775,32776,32778,32781,32782,32783,32785,32787,32788,32790,32797,32798,32799,32800,32804,32806,32812,32814,32816,32820,32821,32823,32825,32826,32828,32830,32832,32836,32864,32868,32870,32877,32881,32885,32897,32904,32910,32924,32926,32934,32935,32939,32952,32953,32968,32973,32975,32978,32980,32981,32983,32984,32992,33005,33006,33008,33010,33011,33014,33017,33018,33022,33027,33035,33046,33047,33048,33052,33054,33056,33060,33063,33068,33072,33077,33082,33084,33093,33095,33098,33100,33106,33111,33120,33121,33127,33128,33129,33133,33135,33143,33153,33168,33156,33157,33158,33163,33166,33174,33176,33179,33182,33186,33198,33202,33204,33211,33227,33219,33221,33226,33230,33231,33237,33239,33243,33245,33246,33249,33252,33259,33260,33264,33265,33266,33269,33270,33272,33273,33277,33279,33280,33283,33295,33299,33300,33305,33306,33309,33313,33314,33320,33330,33332,33338,33347,33348,33349,33350,33355,33358,33359,33361,33366,33372,33376,33379,33383,33389,33396,33403,33405,33407,33408,33409,33411,33412,33415,33417,33418,33422,33425,33428,33430,33432,33434,33435,33440,33441,33443,33444,33447,33448,33449,33450,33454,33456,33458,33460,33463,33466,33468,33470,33471,33478,33488,33493,33498,33504,33506,33508,33512,33514,33517,33519,33526,33527,33533,33534,33536,33537,33543,33544,33546,33547,33620,33563,33565,33566,33567,33569,33570,33580,33581,33582,33584,33587,33591,33594,33596,33597,33602,33603,33604,33607,33613,33614,33617,33621,33622,33623,33648,33656,33661,33663,33664,33666,33668,33670,33677,33682,33684,33685,33688,33689,33691,33692,33693,33702,33703,33705,33708,33726,33727,33728,33735,33737,33743,33744,33745,33748,33757,33619,33768,33770,33782,33784,33785,33788,33793,33798,33802,33807,33809,33813,33817,33709,33839,33849,33861,33863,33864,33866,33869,33871,33873,33874,33878,33880,33881,33882,33884,33888,33892,33893,33895,33898,33904,33907,33908,33910,33912,33916,33917,33921,33925,33938,33939,33941,33950,33958,33960,33961,33962,33967,33969,33972,33978,33981,33982,33984,33986,33991,33992,33996,33999,34003,34012,34023,34026,34031,34032,34033,34034,34039,34098,34042,34043,34045,34050,34051,34055,34060,34062,34064,34076,34078,34082,34083,34084,34085,34087,34090,34091,34095,34099,34100,34102,34111,34118,34127,34128,34129,34130,34131,34134,34137,34140,34141,34142,34143,34144,34145,34146,34148,34155,34159,34169,34170,34171,34173,34175,34177,34181,34182,34185,34187,34188,34191,34195,34200,34205,34207,34208,34210,34213,34215,34228,34230,34231,34232,34236,34237,34238,34239,34242,34247,34250,34251,34254,34221,34264,34266,34271,34272,34278,34280,34285,34291,34294,34300,34303,34304,34308,34309,34317,34318,34320,34321,34322,34328,34329,34331,34334,34337,34343,34345,34358,34360,34362,34364,34365,34368,34370,34374,34386,34387,34390,34391,34392,34393,34397,34400,34401,34402,34403,34404,34409,34412,34415,34421,34422,34423,34426,34445,34449,34454,34456,34458,34460,34465,34470,34471,34472,34477,34481,34483,34484,34485,34487,34488,34489,34495,34496,34497,34499,34501,34513,34514,34517,34519,34522,34524,34528,34531,34533,34535,34440,34554,34556,34557,34564,34565,34567,34571,34574,34575,34576,34579,34580,34585,34590,34591,34593,34595,34600,34606,34607,34609,34610,34617,34618,34620,34621,34622,34624,34627,34629,34637,34648,34653,34657,34660,34661,34671,34673,34674,34683,34691,34692,34693,34694,34695,34696,34697,34699,34700,34704,34707,34709,34711,34712,34713,34718,34720,34723,34727,34732,34733,34734,34737,34741,34750,34751,34753,34760,34761,34762,34766,34773,34774,34777,34778,34780,34783,34786,34787,34788,34794,34795,34797,34801,34803,34808,34810,34815,34817,34819,34822,34825,34826,34827,34832,34841,34834,34835,34836,34840,34842,34843,34844,34846,34847,34856,34861,34862,34864,34866,34869,34874,34876,34881,34883,34885,34888,34889,34890,34891,34894,34897,34901,34902,34904,34906,34908,34911,34912,34916,34921,34929,34937,34939,34944,34968,34970,34971,34972,34975,34976,34984,34986,35002,35005,35006,35008,35018,35019,35020,35021,35022,35025,35026,35027,35035,35038,35047,35055,35056,35057,35061,35063,35073,35078,35085,35086,35087,35093,35094,35096,35097,35098,35100,35104,35110,35111,35112,35120,35121,35122,35125,35129,35130,35134,35136,35138,35141,35142,35145,35151,35154,35159,35162,35163,35164,35169,35170,35171,35179,35182,35184,35187,35189,35194,35195,35196,35197,35209,35213,35216,35220,35221,35227,35228,35231,35232,35237,35248,35252,35253,35254,35255,35260,35284,35285,35286,35287,35288,35301,35305,35307,35309,35313,35315,35318,35321,35325,35327,35332,35333,35335,35343,35345,35346,35348,35349,35358,35360,35362,35364,35366,35371,35372,35375,35381,35383,35389,35390,35392,35395,35397,35399,35401,35405,35406,35411,35414,35415,35416,35420,35421,35425,35429,35431,35445,35446,35447,35449,35450,35451,35454,35455,35456,35459,35462,35467,35471,35472,35474,35478,35479,35481,35487,35495,35497,35502,35503,35507,35510,35511,35515,35518,35523,35526,35528,35529,35530,35537,35539,35540,35541,35543,35549,35551,35564,35568,35572,35573,35574,35580,35583,35589,35590,35595,35601,35612,35614,35615,35594,35629,35632,35639,35644,35650,35651,35652,35653,35654,35656,35666,35667,35668,35673,35661,35678,35683,35693,35702,35704,35705,35708,35710,35713,35716,35717,35723,35725,35727,35732,35733,35740,35742,35743,35896,35897,35901,35902,35909,35911,35913,35915,35919,35921,35923,35924,35927,35928,35931,35933,35929,35939,35940,35942,35944,35945,35949,35955,35957,35958,35963,35966,35974,35975,35979,35984,35986,35987,35993,35995,35996,36004,36025,36026,36037,36038,36041,36043,36047,36054,36053,36057,36061,36065,36072,36076,36079,36080,36082,36085,36087,36088,36094,36095,36097,36099,36105,36114,36119,36123,36197,36201,36204,36206,36223,36226,36228,36232,36237,36240,36241,36245,36254,36255,36256,36262,36267,36268,36271,36274,36277,36279,36281,36283,36288,36293,36294,36295,36296,36298,36302,36305,36308,36309,36311,36313,36324,36325,36327,36332,36336,36284,36337,36338,36340,36349,36353,36356,36357,36358,36363,36369,36372,36374,36384,36385,36386,36387,36390,36391,36401,36403,36406,36407,36408,36409,36413,36416,36417,36427,36429,36430,36431,36436,36443,36444,36445,36446,36449,36450,36457,36460,36461,36463,36464,36465,36473,36474,36475,36482,36483,36489,36496,36498,36501,36506,36507,36509,36510,36514,36519,36521,36525,36526,36531,36533,36538,36539,36544,36545,36547,36548,36551,36559,36561,36564,36572,36584,36590,36592,36593,36599,36601,36602,36589,36608,36610,36615,36616,36623,36624,36630,36631,36632,36638,36640,36641,36643,36645,36647,36648,36652,36653,36654,36660,36661,36662,36663,36666,36672,36673,36675,36679,36687,36689,36690,36691,36692,36693,36696,36701,36702,36709,36765,36768,36769,36772,36773,36774,36789,36790,36792,36798,36800,36801,36806,36810,36811,36813,36816,36818,36819,36821,36832,36835,36836,36840,36846,36849,36853,36854,36859,36862,36866,36868,36872,36876,36888,36891,36904,36905,36911,36906,36908,36909,36915,36916,36919,36927,36931,36932,36940,36955,36957,36962,36966,36967,36972,36976,36980,36985,36997,37e3,37003,37004,37006,37008,37013,37015,37016,37017,37019,37024,37025,37026,37029,37040,37042,37043,37044,37046,37053,37068,37054,37059,37060,37061,37063,37064,37077,37079,37080,37081,37084,37085,37087,37093,37074,37110,37099,37103,37104,37108,37118,37119,37120,37124,37125,37126,37128,37133,37136,37140,37142,37143,37144,37146,37148,37150,37152,37157,37154,37155,37159,37161,37166,37167,37169,37172,37174,37175,37177,37178,37180,37181,37187,37191,37192,37199,37203,37207,37209,37210,37211,37217,37220,37223,37229,37236,37241,37242,37243,37249,37251,37253,37254,37258,37262,37265,37267,37268,37269,37272,37278,37281,37286,37288,37292,37293,37294,37296,37297,37298,37299,37302,37307,37308,37309,37311,37314,37315,37317,37331,37332,37335,37337,37338,37342,37348,37349,37353,37354,37356,37357,37358,37359,37360,37361,37367,37369,37371,37373,37376,37377,37380,37381,37382,37383,37385,37386,37388,37392,37394,37395,37398,37400,37404,37405,37411,37412,37413,37414,37416,37422,37423,37424,37427,37429,37430,37432,37433,37434,37436,37438,37440,37442,37443,37446,37447,37450,37453,37454,37455,37457,37464,37465,37468,37469,37472,37473,37477,37479,37480,37481,37486,37487,37488,37493,37494,37495,37496,37497,37499,37500,37501,37503,37512,37513,37514,37517,37518,37522,37527,37529,37535,37536,37540,37541,37543,37544,37547,37551,37554,37558,37560,37562,37563,37564,37565,37567,37568,37569,37570,37571,37573,37574,37575,37576,37579,37580,37581,37582,37584,37587,37589,37591,37592,37593,37596,37597,37599,37600,37601,37603,37605,37607,37608,37612,37614,37616,37625,37627,37631,37632,37634,37640,37645,37649,37652,37653,37660,37661,37662,37663,37665,37668,37669,37671,37673,37674,37683,37684,37686,37687,37703,37704,37705,37712,37713,37714,37717,37719,37720,37722,37726,37732,37733,37735,37737,37738,37741,37743,37744,37745,37747,37748,37750,37754,37757,37759,37760,37761,37762,37768,37770,37771,37773,37775,37778,37781,37784,37787,37790,37793,37795,37796,37798,37800,37803,37812,37813,37814,37818,37801,37825,37828,37829,37830,37831,37833,37834,37835,37836,37837,37843,37849,37852,37854,37855,37858,37862,37863,37881,37879,37880,37882,37883,37885,37889,37890,37892,37896,37897,37901,37902,37903,37909,37910,37911,37919,37934,37935,37937,37938,37939,37940,37947,37951,37949,37955,37957,37960,37962,37964,37973,37977,37980,37983,37985,37987,37992,37995,37997,37998,37999,38001,38002,38020,38019,38264,38265,38270,38276,38280,38284,38285,38286,38301,38302,38303,38305,38310,38313,38315,38316,38324,38326,38330,38333,38335,38342,38344,38345,38347,38352,38353,38354,38355,38361,38362,38365,38366,38367,38368,38372,38374,38429,38430,38434,38436,38437,38438,38444,38449,38451,38455,38456,38457,38458,38460,38461,38465,38482,38484,38486,38487,38488,38497,38510,38516,38523,38524,38526,38527,38529,38530,38531,38532,38537,38545,38550,38554,38557,38559,38564,38565,38566,38569,38574,38575,38579,38586,38602,38610,23986,38616,38618,38621,38622,38623,38633,38639,38641,38650,38658,38659,38661,38665,38682,38683,38685,38689,38690,38691,38696,38705,38707,38721,38723,38730,38734,38735,38741,38743,38744,38746,38747,38755,38759,38762,38766,38771,38774,38775,38776,38779,38781,38783,38784,38793,38805,38806,38807,38809,38810,38814,38815,38818,38828,38830,38833,38834,38837,38838,38840,38841,38842,38844,38846,38847,38849,38852,38853,38855,38857,38858,38860,38861,38862,38864,38865,38868,38871,38872,38873,38877,38878,38880,38875,38881,38884,38895,38897,38900,38903,38904,38906,38919,38922,38937,38925,38926,38932,38934,38940,38942,38944,38947,38950,38955,38958,38959,38960,38962,38963,38965,38949,38974,38980,38983,38986,38993,38994,38995,38998,38999,39001,39002,39010,39011,39013,39014,39018,39020,39083,39085,39086,39088,39092,39095,39096,39098,39099,39103,39106,39109,39112,39116,39137,39139,39141,39142,39143,39146,39155,39158,39170,39175,39176,39185,39189,39190,39191,39194,39195,39196,39199,39202,39206,39207,39211,39217,39218,39219,39220,39221,39225,39226,39227,39228,39232,39233,39238,39239,39240,39245,39246,39252,39256,39257,39259,39260,39262,39263,39264,39323,39325,39327,39334,39344,39345,39346,39349,39353,39354,39357,39359,39363,39369,39379,39380,39385,39386,39388,39390,39399,39402,39403,39404,39408,39412,39413,39417,39421,39422,39426,39427,39428,39435,39436,39440,39441,39446,39454,39456,39458,39459,39460,39463,39469,39470,39475,39477,39478,39480,39495,39489,39492,39498,39499,39500,39502,39505,39508,39510,39517,39594,39596,39598,39599,39602,39604,39605,39606,39609,39611,39614,39615,39617,39619,39622,39624,39630,39632,39634,39637,39638,39639,39643,39644,39648,39652,39653,39655,39657,39660,39666,39667,39669,39673,39674,39677,39679,39680,39681,39682,39683,39684,39685,39688,39689,39691,39692,39693,39694,39696,39698,39702,39705,39707,39708,39712,39718,39723,39725,39731,39732,39733,39735,39737,39738,39741,39752,39755,39756,39765,39766,39767,39771,39774,39777,39779,39781,39782,39784,39786,39787,39788,39789,39790,39795,39797,39799,39800,39801,39807,39808,39812,39813,39814,39815,39817,39818,39819,39821,39823,39824,39828,39834,39837,39838,39846,39847,39849,39852,39856,39857,39858,39863,39864,39867,39868,39870,39871,39873,39879,39880,39886,39888,39895,39896,39901,39903,39909,39911,39914,39915,39919,39923,39927,39928,39929,39930,39933,39935,39936,39938,39947,39951,39953,39958,39960,39961,39962,39964,39966,39970,39971,39974,39975,39976,39977,39978,39985,39989,39990,39991,39997,40001,40003,40004,40005,40009,40010,40014,40015,40016,40019,40020,40022,40024,40027,40029,40030,40031,40035,40041,40042,40028,40043,40040,40046,40048,40050,40053,40055,40059,40166,40178,40183,40185,40203,40194,40209,40215,40216,40220,40221,40222,40239,40240,40242,40243,40244,40250,40252,40261,40253,40258,40259,40263,40266,40275,40276,40287,40291,40290,40293,40297,40298,40299,40304,40310,40311,40315,40316,40318,40323,40324,40326,40330,40333,40334,40338,40339,40341,40342,40343,40344,40353,40362,40364,40366,40369,40373,40377,40380,40383,40387,40391,40393,40394,40404,40405,40406,40407,40410,40414,40415,40416,40421,40423,40425,40427,40430,40432,40435,40436,40446,40458,40450,40455,40462,40464,40465,40466,40469,40470,40473,40476,40477,40570,40571,40572,40576,40578,40579,40580,40581,40583,40590,40591,40598,40600,40603,40606,40612,40616,40620,40622,40623,40624,40627,40628,40629,40646,40648,40651,40661,40671,40676,40679,40684,40685,40686,40688,40689,40690,40693,40696,40703,40706,40707,40713,40719,40720,40721,40722,40724,40726,40727,40729,40730,40731,40735,40738,40742,40746,40747,40751,40753,40754,40756,40759,40761,40762,40764,40765,40767,40769,40771,40772,40773,40774,40775,40787,40789,40790,40791,40792,40794,40797,40798,40808,40809,40813,40814,40815,40816,40817,40819,40821,40826,40829,40847,40848,40849,40850,40852,40854,40855,40862,40865,40866,40867,40869,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],
ibm866:[1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,9617,9618,9619,9474,9508,9569,9570,9558,9557,9571,9553,9559,9565,9564,9563,9488,9492,9524,9516,9500,9472,9532,9566,9567,9562,9556,9577,9574,9568,9552,9580,9575,9576,9572,9573,9561,9560,9554,9555,9579,9578,9496,9484,9608,9604,9612,9616,9600,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1025,1105,1028,1108,1031,1111,1038,1118,176,8729,183,8730,8470,164,9632,160],"iso-8859-2":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,728,321,164,317,346,167,168,352,350,356,377,173,381,379,176,261,731,322,180,318,347,711,184,353,351,357,378,733,382,380,340,193,194,258,196,313,262,199,268,201,280,203,282,205,206,270,272,323,327,211,212,336,214,215,344,366,218,368,220,221,354,223,341,225,226,259,228,314,263,231,269,233,281,235,283,237,238,271,273,324,328,243,244,337,246,247,345,367,250,369,252,253,355,729],"iso-8859-3":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,294,728,163,164,null,292,167,168,304,350,286,308,173,null,379,176,295,178,179,180,181,293,183,184,305,351,287,309,189,null,380,192,193,194,null,196,266,264,199,200,201,202,203,204,205,206,207,null,209,210,211,212,288,214,215,284,217,218,219,220,364,348,223,224,225,226,null,228,267,265,231,232,233,234,235,236,237,238,239,null,241,242,243,244,289,246,247,285,249,250,251,252,365,349,729],"iso-8859-4":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,312,342,164,296,315,167,168,352,274,290,358,173,381,175,176,261,731,343,180,297,316,711,184,353,275,291,359,330,382,331,256,193,194,195,196,197,198,302,268,201,280,203,278,205,206,298,272,325,332,310,212,213,214,215,216,370,218,219,220,360,362,223,257,225,226,227,228,229,230,303,269,233,281,235,279,237,238,299,273,326,333,311,244,245,246,247,248,371,250,251,252,361,363,729],"iso-8859-5":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,173,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,8470,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,167,1118,1119],"iso-8859-6":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,null,null,null,164,null,null,null,null,null,null,null,1548,173,null,null,null,null,null,null,null,null,null,null,null,null,null,1563,null,null,null,1567,null,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,null,null,null,null,null,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,null,null,null,null,null,null,null,null,null,null,null,null,null],"iso-8859-7":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,8216,8217,163,8364,8367,166,167,168,169,890,171,172,173,null,8213,176,177,178,179,900,901,902,183,904,905,906,187,908,189,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,null,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,null],"iso-8859-8":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,null,162,163,164,165,166,167,168,169,215,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,247,187,188,189,190,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,8215,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,null,null,8206,8207,null],"iso-8859-10":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,274,290,298,296,310,167,315,272,352,358,381,173,362,330,176,261,275,291,299,297,311,183,316,273,353,359,382,8213,363,331,256,193,194,195,196,197,198,302,268,201,280,203,278,205,206,207,208,325,332,211,212,213,214,360,216,370,218,219,220,221,222,223,257,225,226,227,228,229,230,303,269,233,281,235,279,237,238,239,240,326,333,243,244,245,246,361,248,371,250,251,252,253,254,312],"iso-8859-13":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,8221,162,163,164,8222,166,167,216,169,342,171,172,173,174,198,176,177,178,179,8220,181,182,183,248,185,343,187,188,189,190,230,260,302,256,262,196,197,280,274,268,201,377,278,290,310,298,315,352,323,325,211,332,213,214,215,370,321,346,362,220,379,381,223,261,303,257,263,228,229,281,275,269,233,378,279,291,311,299,316,353,324,326,243,333,245,246,247,371,322,347,363,252,380,382,8217],"iso-8859-14":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,7682,7683,163,266,267,7690,167,7808,169,7810,7691,7922,173,174,376,7710,7711,288,289,7744,7745,182,7766,7809,7767,7811,7776,7923,7812,7813,7777,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,372,209,210,211,212,213,214,7786,216,217,218,219,220,221,374,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,373,241,242,243,244,245,246,7787,248,249,250,251,252,253,375,255],"iso-8859-15":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,8364,165,352,167,353,169,170,171,172,173,174,175,176,177,178,179,381,181,182,183,382,185,186,187,338,339,376,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255],"iso-8859-16":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,261,321,8364,8222,352,167,353,169,536,171,377,173,378,379,176,177,268,322,381,8221,182,183,382,269,537,187,338,339,376,380,192,193,194,258,196,262,198,199,200,201,202,203,204,205,206,207,272,323,210,211,212,336,214,346,368,217,218,219,220,280,538,223,224,225,226,259,228,263,230,231,232,233,234,235,236,237,238,239,273,324,242,243,244,337,246,347,369,249,250,251,252,281,539,255],"koi8-r":[9472,9474,9484,9488,9492,9496,9500,9508,9516,9524,9532,9600,9604,9608,9612,9616,9617,9618,9619,8992,9632,8729,8730,8776,8804,8805,160,8993,176,178,183,247,9552,9553,9554,1105,9555,9556,9557,9558,9559,9560,9561,9562,9563,9564,9565,9566,9567,9568,9569,1025,9570,9571,9572,9573,9574,9575,9576,9577,9578,9579,9580,169,1102,1072,1073,1094,1076,1077,1092,1075,1093,1080,1081,1082,1083,1084,1085,1086,1087,1103,1088,1089,1090,1091,1078,1074,1100,1099,1079,1096,1101,1097,1095,1098,1070,1040,1041,1062,1044,1045,1060,1043,1061,1048,1049,1050,1051,1052,1053,1054,1055,1071,1056,1057,1058,1059,1046,1042,1068,1067,1047,1064,1069,1065,1063,1066],"koi8-u":[9472,9474,9484,9488,9492,9496,9500,9508,9516,9524,9532,9600,9604,9608,9612,9616,9617,9618,9619,8992,9632,8729,8730,8776,8804,8805,160,8993,176,178,183,247,9552,9553,9554,1105,1108,9556,1110,1111,9559,9560,9561,9562,9563,1169,1118,9566,9567,9568,9569,1025,1028,9571,1030,1031,9574,9575,9576,9577,9578,1168,1038,169,1102,1072,1073,1094,1076,1077,1092,1075,1093,1080,1081,1082,1083,1084,1085,1086,1087,1103,1088,1089,1090,1091,1078,1074,1100,1099,1079,1096,1101,1097,1095,1098,1070,1040,1041,1062,1044,1045,1060,1043,1061,1048,1049,1050,1051,1052,1053,1054,1055,1071,1056,1057,1058,1059,1046,1042,1068,1067,1047,1064,1069,1065,1063,1066],macintosh:[196,197,199,201,209,214,220,225,224,226,228,227,229,231,233,232,234,235,237,236,238,239,241,243,242,244,246,245,250,249,251,252,8224,176,162,163,167,8226,182,223,174,169,8482,180,168,8800,198,216,8734,177,8804,8805,165,181,8706,8721,8719,960,8747,170,186,937,230,248,191,161,172,8730,402,8776,8710,171,187,8230,160,192,195,213,338,339,8211,8212,8220,8221,8216,8217,247,9674,255,376,8260,8364,8249,8250,64257,64258,8225,183,8218,8222,8240,194,202,193,203,200,205,206,207,204,211,212,63743,210,218,219,217,305,710,732,175,728,729,730,184,733,731,711],"windows-874":[8364,129,130,131,132,8230,134,135,136,137,138,139,140,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,152,153,154,155,156,157,158,159,160,3585,3586,3587,3588,3589,3590,3591,3592,3593,3594,3595,3596,3597,3598,3599,3600,3601,3602,3603,3604,3605,3606,3607,3608,3609,3610,3611,3612,3613,3614,3615,3616,3617,3618,3619,3620,3621,3622,3623,3624,3625,3626,3627,3628,3629,3630,3631,3632,3633,3634,3635,3636,3637,3638,3639,3640,3641,3642,null,null,null,null,3647,3648,3649,3650,3651,3652,3653,3654,3655,3656,3657,3658,3659,3660,3661,3662,3663,3664,3665,3666,3667,3668,3669,3670,3671,3672,3673,3674,3675,null,null,null,null],"windows-1250":[8364,129,8218,131,8222,8230,8224,8225,136,8240,352,8249,346,356,381,377,144,8216,8217,8220,8221,8226,8211,8212,152,8482,353,8250,347,357,382,378,160,711,728,321,164,260,166,167,168,169,350,171,172,173,174,379,176,177,731,322,180,181,182,183,184,261,351,187,317,733,318,380,340,193,194,258,196,313,262,199,268,201,280,203,282,205,206,270,272,323,327,211,212,336,214,215,344,366,218,368,220,221,354,223,341,225,226,259,228,314,263,231,269,233,281,235,283,237,238,271,273,324,328,243,244,337,246,247,345,367,250,369,252,253,355,729],"windows-1251":[1026,1027,8218,1107,8222,8230,8224,8225,8364,8240,1033,8249,1034,1036,1035,1039,1106,8216,8217,8220,8221,8226,8211,8212,152,8482,1113,8250,1114,1116,1115,1119,160,1038,1118,1032,164,1168,166,167,1025,169,1028,171,172,173,174,1031,176,177,1030,1110,1169,181,182,183,1105,8470,1108,187,1112,1029,1109,1111,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103],"windows-1252":[8364,129,8218,402,8222,8230,8224,8225,710,8240,352,8249,338,141,381,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,353,8250,339,157,382,376,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255],"windows-1253":[8364,129,8218,402,8222,8230,8224,8225,136,8240,138,8249,140,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,152,8482,154,8250,156,157,158,159,160,901,902,163,164,165,166,167,168,169,null,171,172,173,174,8213,176,177,178,179,900,181,182,183,904,905,906,187,908,189,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,null,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,null],"windows-1254":[8364,129,8218,402,8222,8230,8224,8225,710,8240,352,8249,338,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,353,8250,339,157,158,376,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,286,209,210,211,212,213,214,215,216,217,218,219,220,304,350,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,287,241,242,243,244,245,246,247,248,249,250,251,252,305,351,255],"windows-1255":[8364,129,8218,402,8222,8230,8224,8225,710,8240,138,8249,140,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,154,8250,156,157,158,159,160,161,162,163,8362,165,166,167,168,169,215,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,247,187,188,189,190,191,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1520,1521,1522,1523,1524,null,null,null,null,null,null,null,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,null,null,8206,8207,null],"windows-1256":[8364,1662,8218,402,8222,8230,8224,8225,710,8240,1657,8249,338,1670,1688,1672,1711,8216,8217,8220,8221,8226,8211,8212,1705,8482,1681,8250,339,8204,8205,1722,160,1548,162,163,164,165,166,167,168,169,1726,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,1563,187,188,189,190,1567,1729,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,215,1591,1592,1593,1594,1600,1601,1602,1603,224,1604,226,1605,1606,1607,1608,231,232,233,234,235,1609,1610,238,239,1611,1612,1613,1614,244,1615,1616,247,1617,249,1618,251,252,8206,8207,1746],"windows-1257":[8364,129,8218,131,8222,8230,8224,8225,136,8240,138,8249,140,168,711,184,144,8216,8217,8220,8221,8226,8211,8212,152,8482,154,8250,156,175,731,159,160,null,162,163,164,null,166,167,216,169,342,171,172,173,174,198,176,177,178,179,180,181,182,183,248,185,343,187,188,189,190,230,260,302,256,262,196,197,280,274,268,201,377,278,290,310,298,315,352,323,325,211,332,213,214,215,370,321,346,362,220,379,381,223,261,303,257,263,228,229,281,275,269,233,378,279,291,311,299,316,353,324,326,243,333,245,246,247,371,322,347,363,252,380,382,729],"windows-1258":[8364,129,8218,402,8222,8230,8224,8225,710,8240,138,8249,338,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,154,8250,339,157,158,376,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,258,196,197,198,199,200,201,202,203,768,205,206,207,272,209,777,211,212,416,214,215,216,217,218,219,220,431,771,223,224,225,226,259,228,229,230,231,232,233,234,235,769,237,238,239,273,241,803,243,244,417,246,247,248,249,250,251,252,432,8363,255],"x-mac-cyrillic":[1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,8224,176,1168,163,167,8226,182,1030,174,169,8482,1026,1106,8800,1027,1107,8734,177,8804,8805,1110,181,1169,1032,1028,1108,1031,1111,1033,1113,1034,1114,1112,1029,172,8730,402,8776,8710,171,187,8230,160,1035,1115,1036,1116,1109,8211,8212,8220,8221,8216,8217,247,8222,1038,1118,1039,1119,8470,1025,1105,1103,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,8364]}})(this||{});(function(n){"use strict";if(typeof module!=="undefined"&&module.exports&&!n["encoding-indexes"]){n["encoding-indexes"]=require("./encoding-indexes.js")["encoding-indexes"]}function t(n,t,e){return t<=n&&n<=e}function e(n,t){return n.indexOf(t)!==-1}var l=Math.floor;function i(n){if(n===undefined)return{};if(n===Object(n))return n;throw TypeError("Could not convert argument to dictionary")}function r(n){var t=String(n);var e=t.length;var l=0;var i=[];while(l<e){var r=t.charCodeAt(l);if(r<55296||r>57343){i.push(r)}else if(56320<=r&&r<=57343){i.push(65533)}else if(55296<=r&&r<=56319){if(l===e-1){i.push(65533)}else{var u=t.charCodeAt(l+1);if(56320<=u&&u<=57343){var s=r&1023;var a=u&1023;i.push(65536+(s<<10)+a);l+=1}else{i.push(65533)}}}l+=1}return i}function u(n){var t="";for(var e=0;e<n.length;++e){var l=n[e];if(l<=65535){t+=String.fromCharCode(l)}else{l-=65536;t+=String.fromCharCode((l>>10)+55296,(l&1023)+56320)}}return t}function s(n){return 0<=n&&n<=127}var a=s;var o=-1;function h(n){this.tokens=[].slice.call(n);this.tokens.reverse()}h.prototype={endOfStream:function(){return!this.tokens.length},read:function(){if(!this.tokens.length)return o;return this.tokens.pop()},prepend:function(n){if(Array.isArray(n)){var t=n;while(t.length)this.tokens.push(t.pop())}else{this.tokens.push(n)}},push:function(n){if(Array.isArray(n)){var t=n;while(t.length)this.tokens.unshift(t.shift())}else{this.tokens.unshift(n)}}};var f=-1;function c(n,t){if(n)throw TypeError("Decoder error");return t||65533}function d(n){throw TypeError("The code point "+n+" could not be encoded.")}function g(){}g.prototype={handler:function(n,t){}};function p(){}p.prototype={handler:function(n,t){}};function v(n){n=String(n).trim().toLowerCase();if(Object.prototype.hasOwnProperty.call(y,n)){return y[n]}return null}var m=[{encodings:[{labels:["unicode-1-1-utf-8","utf-8","utf8"],name:"UTF-8"}],heading:"The Encoding"},{encodings:[{labels:["866","cp866","csibm866","ibm866"],name:"IBM866"},{labels:["csisolatin2","iso-8859-2","iso-ir-101","iso8859-2","iso88592","iso_8859-2","iso_8859-2:1987","l2","latin2"],name:"ISO-8859-2"},{labels:["csisolatin3","iso-8859-3","iso-ir-109","iso8859-3","iso88593","iso_8859-3","iso_8859-3:1988","l3","latin3"],name:"ISO-8859-3"},{labels:["csisolatin4","iso-8859-4","iso-ir-110","iso8859-4","iso88594","iso_8859-4","iso_8859-4:1988","l4","latin4"],name:"ISO-8859-4"},{labels:["csisolatincyrillic","cyrillic","iso-8859-5","iso-ir-144","iso8859-5","iso88595","iso_8859-5","iso_8859-5:1988"],name:"ISO-8859-5"},{labels:["arabic","asmo-708","csiso88596e","csiso88596i","csisolatinarabic","ecma-114","iso-8859-6","iso-8859-6-e","iso-8859-6-i","iso-ir-127","iso8859-6","iso88596","iso_8859-6","iso_8859-6:1987"],name:"ISO-8859-6"},{labels:["csisolatingreek","ecma-118","elot_928","greek","greek8","iso-8859-7","iso-ir-126","iso8859-7","iso88597","iso_8859-7","iso_8859-7:1987","sun_eu_greek"],name:"ISO-8859-7"},{labels:["csiso88598e","csisolatinhebrew","hebrew","iso-8859-8","iso-8859-8-e","iso-ir-138","iso8859-8","iso88598","iso_8859-8","iso_8859-8:1988","visual"],name:"ISO-8859-8"},{labels:["csiso88598i","iso-8859-8-i","logical"],name:"ISO-8859-8-I"},{labels:["csisolatin6","iso-8859-10","iso-ir-157","iso8859-10","iso885910","l6","latin6"],name:"ISO-8859-10"},{labels:["iso-8859-13","iso8859-13","iso885913"],name:"ISO-8859-13"},{labels:["iso-8859-14","iso8859-14","iso885914"],name:"ISO-8859-14"},{labels:["csisolatin9","iso-8859-15","iso8859-15","iso885915","iso_8859-15","l9"],name:"ISO-8859-15"},{labels:["iso-8859-16"],name:"ISO-8859-16"},{labels:["cskoi8r","koi","koi8","koi8-r","koi8_r"],name:"KOI8-R"},{labels:["koi8-ru","koi8-u"],name:"KOI8-U"},{labels:["csmacintosh","mac","macintosh","x-mac-roman"],name:"macintosh"},{labels:["dos-874","iso-8859-11","iso8859-11","iso885911","tis-620","windows-874"],name:"windows-874"},{labels:["cp1250","windows-1250","x-cp1250"],name:"windows-1250"},{labels:["cp1251","windows-1251","x-cp1251"],name:"windows-1251"},{labels:["ansi_x3.4-1968","ascii","cp1252","cp819","csisolatin1","ibm819","iso-8859-1","iso-ir-100","iso8859-1","iso88591","iso_8859-1","iso_8859-1:1987","l1","latin1","us-ascii","windows-1252","x-cp1252"],name:"windows-1252"},{labels:["cp1253","windows-1253","x-cp1253"],name:"windows-1253"},{labels:["cp1254","csisolatin5","iso-8859-9","iso-ir-148","iso8859-9","iso88599","iso_8859-9","iso_8859-9:1989","l5","latin5","windows-1254","x-cp1254"],name:"windows-1254"},{labels:["cp1255","windows-1255","x-cp1255"],name:"windows-1255"},{labels:["cp1256","windows-1256","x-cp1256"],name:"windows-1256"},{labels:["cp1257","windows-1257","x-cp1257"],name:"windows-1257"},{labels:["cp1258","windows-1258","x-cp1258"],name:"windows-1258"},{labels:["x-mac-cyrillic","x-mac-ukrainian"],name:"x-mac-cyrillic"}],heading:"Legacy single-byte encodings"},{encodings:[{labels:["chinese","csgb2312","csiso58gb231280","gb2312","gb_2312","gb_2312-80","gbk","iso-ir-58","x-gbk"],name:"GBK"},{labels:["gb18030"],name:"gb18030"}],heading:"Legacy multi-byte Chinese (simplified) encodings"},{encodings:[{labels:["big5","big5-hkscs","cn-big5","csbig5","x-x-big5"],name:"Big5"}],heading:"Legacy multi-byte Chinese (traditional) encodings"},{encodings:[{labels:["cseucpkdfmtjapanese","euc-jp","x-euc-jp"],name:"EUC-JP"},{labels:["csiso2022jp","iso-2022-jp"],name:"ISO-2022-JP"},{labels:["csshiftjis","ms932","ms_kanji","shift-jis","shift_jis","sjis","windows-31j","x-sjis"],name:"Shift_JIS"}],heading:"Legacy multi-byte Japanese encodings"},{encodings:[{labels:["cseuckr","csksc56011987","euc-kr","iso-ir-149","korean","ks_c_5601-1987","ks_c_5601-1989","ksc5601","ksc_5601","windows-949"],name:"EUC-KR"}],heading:"Legacy multi-byte Korean encodings"},{encodings:[{labels:["csiso2022kr","hz-gb-2312","iso-2022-cn","iso-2022-cn-ext","iso-2022-kr"],name:"replacement"},{labels:["utf-16be"],name:"UTF-16BE"},{labels:["utf-16","utf-16le"],name:"UTF-16LE"},{labels:["x-user-defined"],name:"x-user-defined"}],heading:"Legacy miscellaneous encodings"}];var y={};m.forEach(function(n){n.encodings.forEach(function(n){n.labels.forEach(function(t){y[t]=n})})});var x={};var w={};function _(n,t){if(!t)return null;return t[n]||null}function M(n,t){var e=t.indexOf(n);return e===-1?null:e}function E(t){if(!("encoding-indexes"in n)){throw Error("Indexes missing."+" Did you forget to include encoding-indexes.js first?")}return n["encoding-indexes"][t]}function b(n){if(n>39419&&n<189e3||n>1237575)return null;if(n===7457)return 59335;var t=0;var e=0;var l=E("gb18030-ranges");var i;for(i=0;i<l.length;++i){var r=l[i];if(r[0]<=n){t=r[0];e=r[1]}else{break}}return e+n-t}function C(n){if(n===59335)return 7457;var t=0;var e=0;var l=E("gb18030-ranges");var i;for(i=0;i<l.length;++i){var r=l[i];if(r[1]<=n){t=r[1];e=r[0]}else{break}}return e+n-t}function I(n){S=S||E("jis0208").map(function(n,e){return t(e,8272,8835)?null:n});var e=S;return e.indexOf(n)}var S;function N(n){P=P||E("big5").map(function(n,t){return t<(161-129)*157?null:n});var t=P;if(n===9552||n===9566||n===9569||n===9578||n===21313||n===21317){return t.lastIndexOf(n)}return M(n,t)}var P;var L="utf-8";function R(n,t){if(!(this instanceof R))throw TypeError("Called as a function. Did you forget 'new'?");n=n!==undefined?String(n):L;t=i(t);this._encoding=null;this._decoder=null;this._ignoreBOM=false;this._BOMseen=false;this._error_mode="replacement";this._do_not_flush=false;var e=v(n);if(e===null||e.name==="replacement")throw RangeError("Unknown encoding: "+n);if(!w[e.name]){throw Error("Decoder not present."+" Did you forget to include encoding-indexes.js first?")}var l=this;l._encoding=e;if(Boolean(t["fatal"]))l._error_mode="fatal";if(Boolean(t["ignoreBOM"]))l._ignoreBOM=true;if(!Object.defineProperty){this.encoding=l._encoding.name.toLowerCase();this.fatal=l._error_mode==="fatal";this.ignoreBOM=l._ignoreBOM}return l}if(Object.defineProperty){Object.defineProperty(R.prototype,"encoding",{get:function(){return this._encoding.name.toLowerCase()}});Object.defineProperty(R.prototype,"fatal",{get:function(){return this._error_mode==="fatal"}});Object.defineProperty(R.prototype,"ignoreBOM",{get:function(){return this._ignoreBOM}})}R.prototype.decode=function n(t,l){var r;if(typeof t==="object"&&t instanceof ArrayBuffer){r=new Uint8Array(t)}else if(typeof t==="object"&&"buffer"in t&&t.buffer instanceof ArrayBuffer){r=new Uint8Array(t.buffer,t.byteOffset,t.byteLength)}else{r=new Uint8Array(0)}l=i(l);if(!this._do_not_flush){this._decoder=w[this._encoding.name]({fatal:this._error_mode==="fatal"});this._BOMseen=false}this._do_not_flush=Boolean(l["stream"]);var s=new h(r);var a=[];var c;while(true){var d=s.read();if(d===o)break;c=this._decoder.handler(s,d);if(c===f)break;if(c!==null){if(Array.isArray(c))a.push.apply(a,c);else a.push(c)}}if(!this._do_not_flush){do{c=this._decoder.handler(s,s.read());if(c===f)break;if(c===null)continue;if(Array.isArray(c))a.push.apply(a,c);else a.push(c)}while(!s.endOfStream());this._decoder=null}function g(n){if(e(["UTF-8","UTF-16LE","UTF-16BE"],this._encoding.name)&&!this._ignoreBOM&&!this._BOMseen){if(n.length>0&&n[0]===65279){this._BOMseen=true;n.shift()}else if(n.length>0){this._BOMseen=true}else{}}return u(n)}return g.call(this,a)};function T(t,e){if(!(this instanceof T))throw TypeError("Called as a function. Did you forget 'new'?");e=i(e);this._encoding=null;this._encoder=null;this._do_not_flush=false;this._fatal=Boolean(e["fatal"])?"fatal":"replacement";var l=this;if(Boolean(e["NONSTANDARD_allowLegacyEncoding"])){t=t!==undefined?String(t):L;var r=v(t);if(r===null||r.name==="replacement")throw RangeError("Unknown encoding: "+t);if(!x[r.name]){throw Error("Encoder not present."+" Did you forget to include encoding-indexes.js first?")}l._encoding=r}else{l._encoding=v("utf-8");if(t!==undefined&&"console"in n){console.warn("TextEncoder constructor called with encoding label, "+"which is ignored.")}}if(!Object.defineProperty)this.encoding=l._encoding.name.toLowerCase();return l}if(Object.defineProperty){Object.defineProperty(T.prototype,"encoding",{get:function(){return this._encoding.name.toLowerCase()}})}T.prototype.encode=function n(t,e){t=t===undefined?"":String(t);e=i(e);if(!this._do_not_flush)this._encoder=x[this._encoding.name]({fatal:this._fatal==="fatal"});this._do_not_flush=Boolean(e["stream"]);var l=new h(r(t));var u=[];var s;while(true){var a=l.read();if(a===o)break;s=this._encoder.handler(l,a);if(s===f)break;if(Array.isArray(s))u.push.apply(u,s);else u.push(s)}if(!this._do_not_flush){while(true){s=this._encoder.handler(l,l.read());if(s===f)break;if(Array.isArray(s))u.push.apply(u,s);else u.push(s)}this._encoder=null}return new Uint8Array(u)};function O(n){var e=n.fatal;var l=0,i=0,r=0,u=128,s=191;this.handler=function(n,a){if(a===o&&r!==0){r=0;return c(e)}if(a===o)return f;if(r===0){if(t(a,0,127)){return a}else if(t(a,194,223)){r=1;l=a&31}else if(t(a,224,239)){if(a===224)u=160;if(a===237)s=159;r=2;l=a&15}else if(t(a,240,244)){if(a===240)u=144;if(a===244)s=143;r=3;l=a&7}else{return c(e)}return null}if(!t(a,u,s)){l=r=i=0;u=128;s=191;n.prepend(a);return c(e)}u=128;s=191;l=l<<6|a&63;i+=1;if(i!==r)return null;var h=l;l=r=i=0;return h}}function A(n){var e=n.fatal;this.handler=function(n,e){if(e===o)return f;if(a(e))return e;var l,i;if(t(e,128,2047)){l=1;i=192}else if(t(e,2048,65535)){l=2;i=224}else if(t(e,65536,1114111)){l=3;i=240}var r=[(e>>6*l)+i];while(l>0){var u=e>>6*(l-1);r.push(128|u&63);l-=1}return r}}x["UTF-8"]=function(n){return new A(n)};w["UTF-8"]=function(n){return new O(n)};function k(n,t){var e=t.fatal;this.handler=function(t,l){if(l===o)return f;if(s(l))return l;var i=n[l-128];if(i===null)return c(e);return i}}function D(n,t){var e=t.fatal;this.handler=function(t,e){if(e===o)return f;if(a(e))return e;var l=M(e,n);if(l===null)d(e);return l+128}}(function(){if(!("encoding-indexes"in n))return;m.forEach(function(n){if(n.heading!=="Legacy single-byte encodings")return;n.encodings.forEach(function(n){var t=n.name;var e=E(t.toLowerCase());w[t]=function(n){return new k(e,n)};x[t]=function(n){return new D(e,n)}})})})();w["GBK"]=function(n){return new F(n)};x["GBK"]=function(n){return new B(n,true)};function F(n){var e=n.fatal;var l=0,i=0,r=0;this.handler=function(n,u){if(u===o&&l===0&&i===0&&r===0){return f}if(u===o&&(l!==0||i!==0||r!==0)){l=0;i=0;r=0;c(e)}var a;if(r!==0){a=null;if(t(u,48,57)){a=b((((l-129)*10+i-48)*126+r-129)*10+u-48)}var h=[i,r,u];l=0;i=0;r=0;if(a===null){n.prepend(h);return c(e)}return a}if(i!==0){if(t(u,129,254)){r=u;return null}n.prepend([i,u]);l=0;i=0;return c(e)}if(l!==0){if(t(u,48,57)){i=u;return null}var d=l;var g=null;l=0;var p=u<127?64:65;if(t(u,64,126)||t(u,128,254))g=(d-129)*190+(u-p);a=g===null?null:_(g,E("gb18030"));if(a===null&&s(u))n.prepend(u);if(a===null)return c(e);return a}if(s(u))return u;if(u===128)return 8364;if(t(u,129,254)){l=u;return null}return c(e)}}function B(n,t){var e=n.fatal;this.handler=function(n,e){if(e===o)return f;if(a(e))return e;if(e===58853)return d(e);if(t&&e===8364)return 128;var i=M(e,E("gb18030"));if(i!==null){var r=l(i/190)+129;var u=i%190;var s=u<63?64:65;return[r,u+s]}if(t)return d(e);i=C(e);var h=l(i/10/126/10);i=i-h*10*126*10;var c=l(i/10/126);i=i-c*10*126;var g=l(i/10);var p=i-g*10;return[h+129,c+48,g+129,p+48]}}x["gb18030"]=function(n){return new B(n)};w["gb18030"]=function(n){return new F(n)};function G(n){var e=n.fatal;var l=0;this.handler=function(n,i){if(i===o&&l!==0){l=0;return c(e)}if(i===o&&l===0)return f;if(l!==0){var r=l;var u=null;l=0;var a=i<127?64:98;if(t(i,64,126)||t(i,161,254))u=(r-129)*157+(i-a);switch(u){case 1133:return[202,772];case 1135:return[202,780];case 1164:return[234,772];case 1166:return[234,780]}var h=u===null?null:_(u,E("big5"));if(h===null&&s(i))n.prepend(i);if(h===null)return c(e);return h}if(s(i))return i;if(t(i,129,254)){l=i;return null}return c(e)}}function z(n){var t=n.fatal;this.handler=function(n,t){if(t===o)return f;if(a(t))return t;var e=N(t);if(e===null)return d(t);var i=l(e/157)+129;if(i<161)return d(t);var r=e%157;var u=r<63?64:98;return[i,r+u]}}x["Big5"]=function(n){return new z(n)};w["Big5"]=function(n){return new G(n)};function q(n){var e=n.fatal;var l=false,i=0;this.handler=function(n,r){if(r===o&&i!==0){i=0;return c(e)}if(r===o&&i===0)return f;if(i===142&&t(r,161,223)){i=0;return 65377-161+r}if(i===143&&t(r,161,254)){l=true;i=r;return null}if(i!==0){var u=i;i=0;var a=null;if(t(u,161,254)&&t(r,161,254)){a=_((u-161)*94+(r-161),E(!l?"jis0208":"jis0212"))}l=false;if(!t(r,161,254))n.prepend(r);if(a===null)return c(e);return a}if(s(r))return r;if(r===142||r===143||t(r,161,254)){i=r;return null}return c(e)}}function j(n){var e=n.fatal;this.handler=function(n,e){if(e===o)return f;if(a(e))return e;if(e===165)return 92;if(e===8254)return 126;if(t(e,65377,65439))return[142,e-65377+161];if(e===8722)e=65293;var i=M(e,E("jis0208"));if(i===null)return d(e);var r=l(i/94)+161;var u=i%94+161;return[r,u]}}x["EUC-JP"]=function(n){return new j(n)};w["EUC-JP"]=function(n){return new q(n)};function U(n){var e=n.fatal;var l={ASCII:0,Roman:1,Katakana:2,LeadByte:3,TrailByte:4,EscapeStart:5,Escape:6};var i=l.ASCII,r=l.ASCII,u=0,s=false;this.handler=function(n,a){switch(i){default:case l.ASCII:if(a===27){i=l.EscapeStart;return null}if(t(a,0,127)&&a!==14&&a!==15&&a!==27){s=false;return a}if(a===o){return f}s=false;return c(e);case l.Roman:if(a===27){i=l.EscapeStart;return null}if(a===92){s=false;return 165}if(a===126){s=false;return 8254}if(t(a,0,127)&&a!==14&&a!==15&&a!==27&&a!==92&&a!==126){s=false;return a}if(a===o){return f}s=false;return c(e);case l.Katakana:if(a===27){i=l.EscapeStart;return null}if(t(a,33,95)){s=false;return 65377-33+a}if(a===o){return f}s=false;return c(e);case l.LeadByte:if(a===27){i=l.EscapeStart;return null}if(t(a,33,126)){s=false;u=a;i=l.TrailByte;return null}if(a===o){return f}s=false;return c(e);case l.TrailByte:if(a===27){i=l.EscapeStart;return c(e)}if(t(a,33,126)){i=l.LeadByte;var h=(u-33)*94+a-33;var d=_(h,E("jis0208"));if(d===null)return c(e);return d}if(a===o){i=l.LeadByte;n.prepend(a);return c(e)}i=l.LeadByte;return c(e);case l.EscapeStart:if(a===36||a===40){u=a;i=l.Escape;return null}n.prepend(a);s=false;i=r;return c(e);case l.Escape:var g=u;u=0;var p=null;if(g===40&&a===66)p=l.ASCII;if(g===40&&a===74)p=l.Roman;if(g===40&&a===73)p=l.Katakana;if(g===36&&(a===64||a===66))p=l.LeadByte;if(p!==null){i=i=p;var v=s;s=true;return!v?null:c(e)}n.prepend([g,a]);s=false;i=r;return c(e)}}}function V(n){
var t=n.fatal;var e={ASCII:0,Roman:1,jis0208:2};var i=e.ASCII;this.handler=function(n,t){if(t===o&&i!==e.ASCII){n.prepend(t);i=e.ASCII;return[27,40,66]}if(t===o&&i===e.ASCII)return f;if((i===e.ASCII||i===e.Roman)&&(t===14||t===15||t===27)){return d(65533)}if(i===e.ASCII&&a(t))return t;if(i===e.Roman&&(a(t)&&t!==92&&t!==126||(t==165||t==8254))){if(a(t))return t;if(t===165)return 92;if(t===8254)return 126}if(a(t)&&i!==e.ASCII){n.prepend(t);i=e.ASCII;return[27,40,66]}if((t===165||t===8254)&&i!==e.Roman){n.prepend(t);i=e.Roman;return[27,40,74]}if(t===8722)t=65293;var r=M(t,E("jis0208"));if(r===null)return d(t);if(i!==e.jis0208){n.prepend(t);i=e.jis0208;return[27,36,66]}var u=l(r/94)+33;var s=r%94+33;return[u,s]}}x["ISO-2022-JP"]=function(n){return new V(n)};w["ISO-2022-JP"]=function(n){return new U(n)};function Y(n){var e=n.fatal;var l=0;this.handler=function(n,i){if(i===o&&l!==0){l=0;return c(e)}if(i===o&&l===0)return f;if(l!==0){var r=l;var u=null;l=0;var a=i<127?64:65;var h=r<160?129:193;if(t(i,64,126)||t(i,128,252))u=(r-h)*188+i-a;if(t(u,8836,10715))return 57344-8836+u;var d=u===null?null:_(u,E("jis0208"));if(d===null&&s(i))n.prepend(i);if(d===null)return c(e);return d}if(s(i)||i===128)return i;if(t(i,161,223))return 65377-161+i;if(t(i,129,159)||t(i,224,252)){l=i;return null}return c(e)}}function X(n){var e=n.fatal;this.handler=function(n,e){if(e===o)return f;if(a(e)||e===128)return e;if(e===165)return 92;if(e===8254)return 126;if(t(e,65377,65439))return e-65377+161;if(e===8722)e=65293;var i=I(e);if(i===null)return d(e);var r=l(i/188);var u=r<31?129:193;var s=i%188;var h=s<63?64:65;return[r+u,s+h]}}x["Shift_JIS"]=function(n){return new X(n)};w["Shift_JIS"]=function(n){return new Y(n)};function H(n){var e=n.fatal;var l=0;this.handler=function(n,i){if(i===o&&l!==0){l=0;return c(e)}if(i===o&&l===0)return f;if(l!==0){var r=l;var u=null;l=0;if(t(i,65,254))u=(r-129)*190+(i-65);var a=u===null?null:_(u,E("euc-kr"));if(u===null&&s(i))n.prepend(i);if(a===null)return c(e);return a}if(s(i))return i;if(t(i,129,254)){l=i;return null}return c(e)}}function W(n){var t=n.fatal;this.handler=function(n,t){if(t===o)return f;if(a(t))return t;var e=M(t,E("euc-kr"));if(e===null)return d(t);var i=l(e/190)+129;var r=e%190+65;return[i,r]}}x["EUC-KR"]=function(n){return new W(n)};w["EUC-KR"]=function(n){return new H(n)};function Z(n,t){var e=n>>8;var l=n&255;if(t)return[e,l];return[l,e]}function J(n,e){var l=e.fatal;var i=null,r=null;this.handler=function(e,u){if(u===o&&(i!==null||r!==null)){return c(l)}if(u===o&&i===null&&r===null){return f}if(i===null){i=u;return null}var s;if(n){s=(i<<8)+u}else{s=(u<<8)+i}i=null;if(r!==null){var a=r;r=null;if(t(s,56320,57343)){return 65536+(a-55296)*1024+(s-56320)}e.prepend(Z(s,n));return c(l)}if(t(s,55296,56319)){r=s;return null}if(t(s,56320,57343))return c(l);return s}}function K(n,e){var l=e.fatal;this.handler=function(e,l){if(l===o)return f;if(t(l,0,65535))return Z(l,n);var i=Z((l-65536>>10)+55296,n);var r=Z((l-65536&1023)+56320,n);return i.concat(r)}}x["UTF-16BE"]=function(n){return new K(true,n)};w["UTF-16BE"]=function(n){return new J(true,n)};x["UTF-16LE"]=function(n){return new K(false,n)};w["UTF-16LE"]=function(n){return new J(false,n)};function Q(n){var t=n.fatal;this.handler=function(n,t){if(t===o)return f;if(s(t))return t;return 63360+t-128}}function $(n){var e=n.fatal;this.handler=function(n,e){if(e===o)return f;if(a(e))return e;if(t(e,63360,63487))return e-63360+128;return d(e)}}x["x-user-defined"]=function(n){return new $(n)};w["x-user-defined"]=function(n){return new Q(n)};if(!n["TextEncoder"])n["TextEncoder"]=T;if(!n["TextDecoder"])n["TextDecoder"]=R;if(typeof module!=="undefined"&&module.exports){module.exports={TextEncoder:n["TextEncoder"],TextDecoder:n["TextDecoder"],EncodingIndexes:n["encoding-indexes"]}}})(this||{});define("ThirdParty/text-encoding/text-encoding.min",function(){});(function(n){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=n()}else if(typeof define==="function"&&define.amd){define("ThirdParty/shapefile-js-3.3.2/shp",["../text-encoding/text-encoding.min"],n)}else{var t;if(typeof window!=="undefined"){t=window}else if(typeof global!=="undefined"){t=global}else if(typeof self!=="undefined"){t=self}else{t=this}t.shp=n()}})(function(){var n,t,e;return function n(t,e,l){function i(u,s){if(!e[u]){if(!t[u]){var a=typeof require=="function"&&require;if(!s&&a)return a(u,!0);if(r)return r(u,!0);var o=new Error("Cannot find module '"+u+"'");throw o.code="MODULE_NOT_FOUND",o}var h=e[u]={exports:{}};t[u][0].call(h.exports,function(n){var e=t[u][1][n];return i(e?e:n)},h,h.exports,n,t,e,l)}return e[u].exports}var r=typeof require=="function"&&require;for(var u=0;u<l.length;u++)i(l[u]);return i}({1:[function(n,t,e){"use strict";var l=n("lie");t.exports=i;function i(n){return new l(function(t,e){var l=n.slice(-3);var i=new XMLHttpRequest;i.open("GET",n,true);if(l!=="prj"){i.responseType="arraybuffer"}i.addEventListener("load",function(){if(i.status>399||i.status==0){if(l==="prj"){return t(false)}else{return e(new Error(i.status))}}t(i.response)},false);i.send()})}},{lie:34}],2:[function(n,t,e){"use strict";function l(n){var t=0;var e=1;var l=n.length;var i,r;while(e<l){i=r||n[0];r=n[e];t+=(r[0]-i[0])*(r[1]+i[1]);e++}return t>0}function i(n,t){if(l(t)||!n.length){n.push([t])}else{n[n.length-1].push(t)}return n}s.prototype.parsePoint=function(n){return{type:"Point",coordinates:this.parseCoord(n,0)}};s.prototype.parseZPoint=function(n){var t=this.parsePoint(n);t.coordinates.push(this.parseCoord(n,16));return t};s.prototype.parsePointArray=function(n,t,e){var l=[];var i=0;while(i<e){l.push(this.parseCoord(n,t));t+=16;i++}return l};s.prototype.parseZPointArray=function(n,t,e,l){var i=0;while(i<e){l[i].push(n.getFloat64(t,true));i++;t+=8}return l};s.prototype.parseArrayGroup=function(n,t,e,l,i){var r=[];var u=0;var s,a=0,o;while(u<l){u++;e+=4;s=a;if(u===l){a=i}else{a=n.getInt32(e,true)}o=a-s;if(!o){continue}r.push(this.parsePointArray(n,t,o));t+=o<<4}return r};s.prototype.parseZArrayGroup=function(n,t,e,l){var i=0;while(i<e){l[i]=this.parseZPointArray(n,t,l[i].length,l[i]);t+=l[i].length<<3;i++}return l};s.prototype.parseMultiPoint=function(n){var t={};var e=this.parseCoord(n,0);var l=this.parseCoord(n,16);t.bbox=[e[0],e[1],l[0],l[1]];var i=n.getInt32(32,true);var r=36;if(i===1){t.type="Point";t.coordinates=this.parseCoord(n,r)}else{t.type="MultiPoint";t.coordinates=this.parsePointArray(n,r,i)}return t};s.prototype.parseZMultiPoint=function(n){var t=this.parseMultiPoint(n);var e;if(t.type==="Point"){t.coordinates.push(n.getFloat64(72,true));return t}else{e=t.coordinates.length}var l=56+(e<<4);t.coordinates=this.parseZPointArray(n,l,e,t.coordinates);return t};s.prototype.parsePolyline=function(n){var t={};var e=this.parseCoord(n,0);var l=this.parseCoord(n,16);t.bbox=[e[0],e[1],l[0],l[1]];var i=n.getInt32(32,true);var r=n.getInt32(36,true);var u,s;if(i===1){t.type="LineString";u=44;t.coordinates=this.parsePointArray(n,u,r)}else{t.type="MultiLineString";u=40+(i<<2);s=40;t.coordinates=this.parseArrayGroup(n,u,s,i,r)}return t};s.prototype.parseZPolyline=function(n){var t=this.parsePolyline(n);var e=t.coordinates.length;var l=60+(e<<4);if(t.type==="LineString"){t.coordinates=this.parseZPointArray(n,l,e,t.coordinates);return t}else{t.coordinates=this.parseZArrayGroup(n,l,e,t.coordinates);return t}};s.prototype.polyFuncs=function(n){if(n.type==="LineString"){n.type="Polygon";n.coordinates=[n.coordinates];return n}else{n.coordinates=n.coordinates.reduce(i,[]);if(n.coordinates.length===1){n.type="Polygon";n.coordinates=n.coordinates[0];return n}else{n.type="MultiPolygon";return n}}};s.prototype.parsePolygon=function(n){return this.polyFuncs(this.parsePolyline(n))};s.prototype.parseZPolygon=function(n){return this.polyFuncs(this.parseZPolyline(n))};var r={1:"parsePoint",3:"parsePolyline",5:"parsePolygon",8:"parseMultiPoint",11:"parseZPoint",13:"parseZPolyline",15:"parseZPolygon",18:"parseZMultiPoint"};function u(n){if(n){return function(t,e){return n.inverse([t.getFloat64(e,true),t.getFloat64(e+8,true)])}}else{return function(n,t){return[n.getFloat64(t,true),n.getFloat64(t+8,true)]}}}function s(n,t){if(!(this instanceof s)){return new s(n,t)}this.buffer=n;this.shpFuncs(t);this.rows=this.getRows()}s.prototype.shpFuncs=function(n){var t=this.getShpCode();if(t>20){t-=20}if(!(t in r)){throw new Error("I don't know that shp type")}this.parseFunc=this[r[t]];this.parseCoord=u(n)};s.prototype.getShpCode=function(){return this.parseHeader().shpCode};s.prototype.parseHeader=function(){var n=new DataView(this.buffer,0,100);return{length:n.getInt32(6<<2,false),version:n.getInt32(7<<2,true),shpCode:n.getInt32(8<<2,true),bbox:[n.getFloat64(9<<2,true),n.getFloat64(11<<2,true),n.getFloat64(13<<2,true),n.getFloat64(13<<2,true)]}};s.prototype.getRows=function(){var n=100;var t=this.buffer.byteLength;var e=[];var l;while(n<t){l=this.getRow(n);n+=8;n+=l.len;if(l.type){e.push(this.parseFunc(l.data))}}return e};s.prototype.getRow=function(n){var t=new DataView(this.buffer,n,12);var e=t.getInt32(4,false)<<1;var l=new DataView(this.buffer,n+12,e-4);return{id:t.getInt32(0,false),len:e,data:l,type:t.getInt32(8,true)}};t.exports=function(n,t){return new s(n,t).rows}},{}],3:[function(n,t,e){"use strict";t.exports=l;function l(n){var t=new ArrayBuffer(n.length);var e=new Uint8Array(t);var l=-1;var i=n.length;while(++l<i){e[l]=n[l]}return t}},{}],4:[function(n,t,e){"use strict";var l=n("jszip");t.exports=function(n){var t=new l(n);var e=t.file(/.+/);var i={};e.forEach(function(n){if(n.name.slice(-3).toLowerCase()==="shp"||n.name.slice(-3).toLowerCase()==="dbf"){i[n.name]=n.asText();i[n.name]=n.asArrayBuffer()}else{i[n.name]=n.asText()}});return i}},{jszip:19}],5:[function(n,t,e){"use strict";e.toByteArray=s;e.fromByteArray=h;var l=[];var i=[];var r=typeof Uint8Array!=="undefined"?Uint8Array:Array;function u(){var n;var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";var e=t.length;for(n=0;n<e;n++){l[n]=t[n]}for(n=0;n<e;++n){i[t.charCodeAt(n)]=n}i["-".charCodeAt(0)]=62;i["_".charCodeAt(0)]=63}u();function s(n){var t,e,l,u,s,a;var o=n.length;if(o%4>0){throw new Error("Invalid string. Length must be a multiple of 4")}s=n[o-2]==="="?2:n[o-1]==="="?1:0;a=new r(o*3/4-s);l=s>0?o-4:o;var h=0;for(t=0,e=0;t<l;t+=4,e+=3){u=i[n.charCodeAt(t)]<<18|i[n.charCodeAt(t+1)]<<12|i[n.charCodeAt(t+2)]<<6|i[n.charCodeAt(t+3)];a[h++]=(u&16711680)>>16;a[h++]=(u&65280)>>8;a[h++]=u&255}if(s===2){u=i[n.charCodeAt(t)]<<2|i[n.charCodeAt(t+1)]>>4;a[h++]=u&255}else if(s===1){u=i[n.charCodeAt(t)]<<10|i[n.charCodeAt(t+1)]<<4|i[n.charCodeAt(t+2)]>>2;a[h++]=u>>8&255;a[h++]=u&255}return a}function a(n){return l[n>>18&63]+l[n>>12&63]+l[n>>6&63]+l[n&63]}function o(n,t,e){var l;var i=[];for(var r=t;r<e;r+=3){l=(n[r]<<16)+(n[r+1]<<8)+n[r+2];i.push(a(l))}return i.join("")}function h(n){var t;var e=n.length;var i=e%3;var r="";var u=[];var s=16383;for(var a=0,h=e-i;a<h;a+=s){u.push(o(n,a,a+s>h?h:a+s))}if(i===1){t=n[e-1];r+=l[t>>2];r+=l[t<<4&63];r+="=="}else if(i===2){t=(n[e-2]<<8)+n[e-1];r+=l[t>>10];r+=l[t>>4&63];r+=l[t<<2&63];r+="="}u.push(r);return u.join("")}},{}],6:[function(n,t,e){(function(t){"use strict";var l=n("base64-js");var i=n("ieee754");var r=n("isarray");e.Buffer=o;e.SlowBuffer=_;e.INSPECT_MAX_BYTES=50;o.poolSize=8192;var u={};o.TYPED_ARRAY_SUPPORT=t.TYPED_ARRAY_SUPPORT!==undefined?t.TYPED_ARRAY_SUPPORT:s();function s(){try{var n=new Uint8Array(1);n.foo=function(){return 42};return n.foo()===42&&typeof n.subarray==="function"&&n.subarray(1,1).byteLength===0}catch(n){return false}}function a(){return o.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function o(n){if(!(this instanceof o)){if(arguments.length>1)return new o(n,arguments[1]);return new o(n)}if(!o.TYPED_ARRAY_SUPPORT){this.length=0;this.parent=undefined}if(typeof n==="number"){return h(this,n)}if(typeof n==="string"){return f(this,n,arguments.length>1?arguments[1]:"utf8")}return c(this,n)}o._augment=function(n){n.__proto__=o.prototype;return n};function h(n,t){n=x(n,t<0?0:w(t)|0);if(!o.TYPED_ARRAY_SUPPORT){for(var e=0;e<t;e++){n[e]=0}}return n}function f(n,t,e){if(typeof e!=="string"||e==="")e="utf8";var l=M(t,e)|0;n=x(n,l);n.write(t,e);return n}function c(n,t){if(o.isBuffer(t))return d(n,t);if(r(t))return g(n,t);if(t==null){throw new TypeError("must start with number, buffer, array or string")}if(typeof ArrayBuffer!=="undefined"){if(t.buffer instanceof ArrayBuffer){return p(n,t)}if(t instanceof ArrayBuffer){return v(n,t)}}if(t.length)return m(n,t);return y(n,t)}function d(n,t){var e=w(t.length)|0;n=x(n,e);t.copy(n,0,0,e);return n}function g(n,t){var e=w(t.length)|0;n=x(n,e);for(var l=0;l<e;l+=1){n[l]=t[l]&255}return n}function p(n,t){var e=w(t.length)|0;n=x(n,e);for(var l=0;l<e;l+=1){n[l]=t[l]&255}return n}function v(n,t){t.byteLength;if(o.TYPED_ARRAY_SUPPORT){n=new Uint8Array(t);n.__proto__=o.prototype}else{n=p(n,new Uint8Array(t))}return n}function m(n,t){var e=w(t.length)|0;n=x(n,e);for(var l=0;l<e;l+=1){n[l]=t[l]&255}return n}function y(n,t){var e;var l=0;if(t.type==="Buffer"&&r(t.data)){e=t.data;l=w(e.length)|0}n=x(n,l);for(var i=0;i<l;i+=1){n[i]=e[i]&255}return n}if(o.TYPED_ARRAY_SUPPORT){o.prototype.__proto__=Uint8Array.prototype;o.__proto__=Uint8Array;if(typeof Symbol!=="undefined"&&Symbol.species&&o[Symbol.species]===o){Object.defineProperty(o,Symbol.species,{value:null,configurable:true})}}else{o.prototype.length=undefined;o.prototype.parent=undefined}function x(n,t){if(o.TYPED_ARRAY_SUPPORT){n=new Uint8Array(t);n.__proto__=o.prototype}else{n.length=t}var e=t!==0&&t<=o.poolSize>>>1;if(e)n.parent=u;return n}function w(n){if(n>=a()){throw new RangeError("Attempt to allocate Buffer larger than maximum "+"size: 0x"+a().toString(16)+" bytes")}return n|0}function _(n,t){if(!(this instanceof _))return new _(n,t);var e=new o(n,t);delete e.parent;return e}o.isBuffer=function n(t){return!!(t!=null&&t._isBuffer)};o.compare=function n(t,e){if(!o.isBuffer(t)||!o.isBuffer(e)){throw new TypeError("Arguments must be Buffers")}if(t===e)return 0;var l=t.length;var i=e.length;var r=0;var u=Math.min(l,i);while(r<u){if(t[r]!==e[r])break;++r}if(r!==u){l=t[r];i=e[r]}if(l<i)return-1;if(i<l)return 1;return 0};o.isEncoding=function n(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"raw":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return true;default:return false}};o.concat=function n(t,e){if(!r(t))throw new TypeError("list argument must be an Array of Buffers.");if(t.length===0){return new o(0)}var l;if(e===undefined){e=0;for(l=0;l<t.length;l++){e+=t[l].length}}var i=new o(e);var u=0;for(l=0;l<t.length;l++){var s=t[l];s.copy(i,u);u+=s.length}return i};function M(n,t){if(typeof n!=="string")n=""+n;var e=n.length;if(e===0)return 0;var l=false;for(;;){switch(t){case"ascii":case"binary":case"raw":case"raws":return e;case"utf8":case"utf-8":return Z(n).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return e*2;case"hex":return e>>>1;case"base64":return Q(n).length;default:if(l)return Z(n).length;t=(""+t).toLowerCase();l=true}}}o.byteLength=M;function E(n,t,e){var l=false;t=t|0;e=e===undefined||e===Infinity?this.length:e|0;if(!n)n="utf8";if(t<0)t=0;if(e>this.length)e=this.length;if(e<=t)return"";while(true){switch(n){case"hex":return D(this,t,e);case"utf8":case"utf-8":return R(this,t,e);case"ascii":return A(this,t,e);case"binary":return k(this,t,e);case"base64":return L(this,t,e);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return F(this,t,e);default:if(l)throw new TypeError("Unknown encoding: "+n);n=(n+"").toLowerCase();l=true}}}o.prototype._isBuffer=true;o.prototype.toString=function n(){var t=this.length|0;if(t===0)return"";if(arguments.length===0)return R(this,0,t);return E.apply(this,arguments)};o.prototype.equals=function n(t){if(!o.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(this===t)return true;return o.compare(this,t)===0};o.prototype.inspect=function n(){var t="";var l=e.INSPECT_MAX_BYTES;if(this.length>0){t=this.toString("hex",0,l).match(/.{2}/g).join(" ");if(this.length>l)t+=" ... "}return"<Buffer "+t+">"};o.prototype.compare=function n(t){if(!o.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(this===t)return 0;return o.compare(this,t)};o.prototype.indexOf=function n(t,e){if(e>2147483647)e=2147483647;else if(e<-2147483648)e=-2147483648;e>>=0;if(this.length===0)return-1;if(e>=this.length)return-1;if(e<0)e=Math.max(this.length+e,0);if(typeof t==="string"){if(t.length===0)return-1;return String.prototype.indexOf.call(this,t,e)}if(o.isBuffer(t)){return l(this,t,e)}if(typeof t==="number"){if(o.TYPED_ARRAY_SUPPORT&&Uint8Array.prototype.indexOf==="function"){return Uint8Array.prototype.indexOf.call(this,t,e)}return l(this,[t],e)}function l(n,t,e){var l=-1;for(var i=0;e+i<n.length;i++){if(n[e+i]===t[l===-1?0:i-l]){if(l===-1)l=i;if(i-l+1===t.length)return e+l}else{l=-1}}return-1}throw new TypeError("val must be string, number or Buffer")};function b(n,t,e,l){e=Number(e)||0;var i=n.length-e;if(!l){l=i}else{l=Number(l);if(l>i){l=i}}var r=t.length;if(r%2!==0)throw new Error("Invalid hex string");if(l>r/2){l=r/2}for(var u=0;u<l;u++){var s=parseInt(t.substr(u*2,2),16);if(isNaN(s))throw new Error("Invalid hex string");n[e+u]=s}return u}function C(n,t,e,l){return $(Z(t,n.length-e),n,e,l)}function I(n,t,e,l){return $(J(t),n,e,l)}function S(n,t,e,l){return I(n,t,e,l)}function N(n,t,e,l){return $(Q(t),n,e,l)}function P(n,t,e,l){return $(K(t,n.length-e),n,e,l)}o.prototype.write=function n(t,e,l,i){if(e===undefined){i="utf8";l=this.length;e=0}else if(l===undefined&&typeof e==="string"){i=e;l=this.length;e=0}else if(isFinite(e)){e=e|0;if(isFinite(l)){l=l|0;if(i===undefined)i="utf8"}else{i=l;l=undefined}}else{var r=i;i=e;e=l|0;l=r}var u=this.length-e;if(l===undefined||l>u)l=u;if(t.length>0&&(l<0||e<0)||e>this.length){throw new RangeError("attempt to write outside buffer bounds")}if(!i)i="utf8";var s=false;for(;;){switch(i){case"hex":return b(this,t,e,l);case"utf8":case"utf-8":return C(this,t,e,l);case"ascii":return I(this,t,e,l);case"binary":return S(this,t,e,l);case"base64":return N(this,t,e,l);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return P(this,t,e,l);default:if(s)throw new TypeError("Unknown encoding: "+i);i=(""+i).toLowerCase();s=true}}};o.prototype.toJSON=function n(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function L(n,t,e){if(t===0&&e===n.length){return l.fromByteArray(n)}else{return l.fromByteArray(n.slice(t,e))}}function R(n,t,e){e=Math.min(n.length,e);var l=[];var i=t;while(i<e){var r=n[i];var u=null;var s=r>239?4:r>223?3:r>191?2:1;if(i+s<=e){var a,o,h,f;switch(s){case 1:if(r<128){u=r}break;case 2:a=n[i+1];if((a&192)===128){f=(r&31)<<6|a&63;if(f>127){u=f}}break;case 3:a=n[i+1];o=n[i+2];if((a&192)===128&&(o&192)===128){f=(r&15)<<12|(a&63)<<6|o&63;if(f>2047&&(f<55296||f>57343)){u=f}}break;case 4:a=n[i+1];o=n[i+2];h=n[i+3];if((a&192)===128&&(o&192)===128&&(h&192)===128){f=(r&15)<<18|(a&63)<<12|(o&63)<<6|h&63;if(f>65535&&f<1114112){u=f}}}}if(u===null){u=65533;s=1}else if(u>65535){u-=65536;l.push(u>>>10&1023|55296);u=56320|u&1023}l.push(u);i+=s}return O(l)}var T=4096;function O(n){var t=n.length;if(t<=T){return String.fromCharCode.apply(String,n)}var e="";var l=0;while(l<t){e+=String.fromCharCode.apply(String,n.slice(l,l+=T))}return e}function A(n,t,e){var l="";e=Math.min(n.length,e);for(var i=t;i<e;i++){l+=String.fromCharCode(n[i]&127)}return l}function k(n,t,e){var l="";e=Math.min(n.length,e);for(var i=t;i<e;i++){l+=String.fromCharCode(n[i])}return l}function D(n,t,e){var l=n.length;if(!t||t<0)t=0;if(!e||e<0||e>l)e=l;var i="";for(var r=t;r<e;r++){i+=W(n[r])}return i}function F(n,t,e){var l=n.slice(t,e);var i="";for(var r=0;r<l.length;r+=2){i+=String.fromCharCode(l[r]+l[r+1]*256)}return i}o.prototype.slice=function n(t,e){var l=this.length;t=~~t;e=e===undefined?l:~~e;if(t<0){t+=l;if(t<0)t=0}else if(t>l){t=l}if(e<0){e+=l;if(e<0)e=0}else if(e>l){e=l}if(e<t)e=t;var i;if(o.TYPED_ARRAY_SUPPORT){i=this.subarray(t,e);i.__proto__=o.prototype}else{var r=e-t;i=new o(r,undefined);for(var u=0;u<r;u++){i[u]=this[u+t]}}if(i.length)i.parent=this.parent||this;return i};function B(n,t,e){if(n%1!==0||n<0)throw new RangeError("offset is not uint");if(n+t>e)throw new RangeError("Trying to access beyond buffer length")}o.prototype.readUIntLE=function n(t,e,l){t=t|0;e=e|0;if(!l)B(t,e,this.length);var i=this[t];var r=1;var u=0;while(++u<e&&(r*=256)){i+=this[t+u]*r}return i};o.prototype.readUIntBE=function n(t,e,l){t=t|0;e=e|0;if(!l){B(t,e,this.length)}var i=this[t+--e];var r=1;while(e>0&&(r*=256)){i+=this[t+--e]*r}return i};o.prototype.readUInt8=function n(t,e){if(!e)B(t,1,this.length);return this[t]};o.prototype.readUInt16LE=function n(t,e){if(!e)B(t,2,this.length);return this[t]|this[t+1]<<8};o.prototype.readUInt16BE=function n(t,e){if(!e)B(t,2,this.length);return this[t]<<8|this[t+1]};o.prototype.readUInt32LE=function n(t,e){if(!e)B(t,4,this.length);return(this[t]|this[t+1]<<8|this[t+2]<<16)+this[t+3]*16777216};o.prototype.readUInt32BE=function n(t,e){if(!e)B(t,4,this.length);return this[t]*16777216+(this[t+1]<<16|this[t+2]<<8|this[t+3])};o.prototype.readIntLE=function n(t,e,l){t=t|0;e=e|0;if(!l)B(t,e,this.length);var i=this[t];var r=1;var u=0;while(++u<e&&(r*=256)){i+=this[t+u]*r}r*=128;if(i>=r)i-=Math.pow(2,8*e);return i};o.prototype.readIntBE=function n(t,e,l){t=t|0;e=e|0;if(!l)B(t,e,this.length);var i=e;var r=1;var u=this[t+--i];while(i>0&&(r*=256)){u+=this[t+--i]*r}r*=128;if(u>=r)u-=Math.pow(2,8*e);return u};o.prototype.readInt8=function n(t,e){if(!e)B(t,1,this.length);if(!(this[t]&128))return this[t];return(255-this[t]+1)*-1};o.prototype.readInt16LE=function n(t,e){if(!e)B(t,2,this.length);var l=this[t]|this[t+1]<<8;return l&32768?l|4294901760:l};o.prototype.readInt16BE=function n(t,e){if(!e)B(t,2,this.length);var l=this[t+1]|this[t]<<8;return l&32768?l|4294901760:l};o.prototype.readInt32LE=function n(t,e){if(!e)B(t,4,this.length);return this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24};o.prototype.readInt32BE=function n(t,e){if(!e)B(t,4,this.length);return this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]};o.prototype.readFloatLE=function n(t,e){if(!e)B(t,4,this.length);return i.read(this,t,true,23,4)};o.prototype.readFloatBE=function n(t,e){if(!e)B(t,4,this.length);return i.read(this,t,false,23,4)};o.prototype.readDoubleLE=function n(t,e){if(!e)B(t,8,this.length);return i.read(this,t,true,52,8)};o.prototype.readDoubleBE=function n(t,e){if(!e)B(t,8,this.length);return i.read(this,t,false,52,8)};function G(n,t,e,l,i,r){if(!o.isBuffer(n))throw new TypeError("buffer must be a Buffer instance");if(t>i||t<r)throw new RangeError("value is out of bounds");if(e+l>n.length)throw new RangeError("index out of range")}o.prototype.writeUIntLE=function n(t,e,l,i){t=+t;e=e|0;l=l|0;if(!i)G(this,t,e,l,Math.pow(2,8*l),0);var r=1;var u=0;this[e]=t&255;while(++u<l&&(r*=256)){this[e+u]=t/r&255}return e+l};o.prototype.writeUIntBE=function n(t,e,l,i){t=+t;e=e|0;l=l|0;if(!i)G(this,t,e,l,Math.pow(2,8*l),0);var r=l-1;var u=1;this[e+r]=t&255;while(--r>=0&&(u*=256)){this[e+r]=t/u&255}return e+l};o.prototype.writeUInt8=function n(t,e,l){t=+t;e=e|0;if(!l)G(this,t,e,1,255,0);if(!o.TYPED_ARRAY_SUPPORT)t=Math.floor(t);this[e]=t&255;return e+1};function z(n,t,e,l){if(t<0)t=65535+t+1;for(var i=0,r=Math.min(n.length-e,2);i<r;i++){n[e+i]=(t&255<<8*(l?i:1-i))>>>(l?i:1-i)*8}}o.prototype.writeUInt16LE=function n(t,e,l){t=+t;e=e|0;if(!l)G(this,t,e,2,65535,0);if(o.TYPED_ARRAY_SUPPORT){this[e]=t&255;this[e+1]=t>>>8}else{z(this,t,e,true)}return e+2};o.prototype.writeUInt16BE=function n(t,e,l){t=+t;e=e|0;if(!l)G(this,t,e,2,65535,0);if(o.TYPED_ARRAY_SUPPORT){this[e]=t>>>8;this[e+1]=t&255}else{z(this,t,e,false)}return e+2};function q(n,t,e,l){if(t<0)t=4294967295+t+1;for(var i=0,r=Math.min(n.length-e,4);i<r;i++){n[e+i]=t>>>(l?i:3-i)*8&255}}o.prototype.writeUInt32LE=function n(t,e,l){t=+t;e=e|0;if(!l)G(this,t,e,4,4294967295,0);if(o.TYPED_ARRAY_SUPPORT){this[e+3]=t>>>24;this[e+2]=t>>>16;this[e+1]=t>>>8;this[e]=t&255}else{q(this,t,e,true)}return e+4};o.prototype.writeUInt32BE=function n(t,e,l){t=+t;e=e|0;if(!l)G(this,t,e,4,4294967295,0);if(o.TYPED_ARRAY_SUPPORT){this[e]=t>>>24;this[e+1]=t>>>16;this[e+2]=t>>>8;this[e+3]=t&255}else{q(this,t,e,false)}return e+4};o.prototype.writeIntLE=function n(t,e,l,i){t=+t;e=e|0;if(!i){var r=Math.pow(2,8*l-1);G(this,t,e,l,r-1,-r)}var u=0;var s=1;var a=t<0?1:0;this[e]=t&255;while(++u<l&&(s*=256)){this[e+u]=(t/s>>0)-a&255}return e+l};o.prototype.writeIntBE=function n(t,e,l,i){t=+t;e=e|0;if(!i){var r=Math.pow(2,8*l-1);G(this,t,e,l,r-1,-r)}var u=l-1;var s=1;var a=t<0?1:0;this[e+u]=t&255;while(--u>=0&&(s*=256)){this[e+u]=(t/s>>0)-a&255}return e+l};o.prototype.writeInt8=function n(t,e,l){t=+t;e=e|0;if(!l)G(this,t,e,1,127,-128);if(!o.TYPED_ARRAY_SUPPORT)t=Math.floor(t);if(t<0)t=255+t+1;this[e]=t&255;return e+1};o.prototype.writeInt16LE=function n(t,e,l){t=+t;e=e|0;if(!l)G(this,t,e,2,32767,-32768);if(o.TYPED_ARRAY_SUPPORT){this[e]=t&255;this[e+1]=t>>>8}else{z(this,t,e,true)}return e+2};o.prototype.writeInt16BE=function n(t,e,l){t=+t;e=e|0;if(!l)G(this,t,e,2,32767,-32768);if(o.TYPED_ARRAY_SUPPORT){this[e]=t>>>8;this[e+1]=t&255}else{z(this,t,e,false)}return e+2};o.prototype.writeInt32LE=function n(t,e,l){t=+t;e=e|0;if(!l)G(this,t,e,4,2147483647,-2147483648);if(o.TYPED_ARRAY_SUPPORT){this[e]=t&255;this[e+1]=t>>>8;this[e+2]=t>>>16;this[e+3]=t>>>24}else{q(this,t,e,true)}return e+4};o.prototype.writeInt32BE=function n(t,e,l){t=+t;e=e|0;if(!l)G(this,t,e,4,2147483647,-2147483648);if(t<0)t=4294967295+t+1;if(o.TYPED_ARRAY_SUPPORT){this[e]=t>>>24;this[e+1]=t>>>16;this[e+2]=t>>>8;this[e+3]=t&255}else{q(this,t,e,false)}return e+4};function j(n,t,e,l,i,r){if(e+l>n.length)throw new RangeError("index out of range");if(e<0)throw new RangeError("index out of range")}function U(n,t,e,l,r){if(!r){j(n,t,e,4,3.4028234663852886e38,-3.4028234663852886e38)}i.write(n,t,e,l,23,4);return e+4}o.prototype.writeFloatLE=function n(t,e,l){return U(this,t,e,true,l)};o.prototype.writeFloatBE=function n(t,e,l){return U(this,t,e,false,l)};function V(n,t,e,l,r){if(!r){j(n,t,e,8,1.7976931348623157e308,-1.7976931348623157e308)}i.write(n,t,e,l,52,8);return e+8}o.prototype.writeDoubleLE=function n(t,e,l){return V(this,t,e,true,l)};o.prototype.writeDoubleBE=function n(t,e,l){return V(this,t,e,false,l)};o.prototype.copy=function n(t,e,l,i){if(!l)l=0;if(!i&&i!==0)i=this.length;if(e>=t.length)e=t.length;if(!e)e=0;if(i>0&&i<l)i=l;if(i===l)return 0;if(t.length===0||this.length===0)return 0;if(e<0){throw new RangeError("targetStart out of bounds")}if(l<0||l>=this.length)throw new RangeError("sourceStart out of bounds");if(i<0)throw new RangeError("sourceEnd out of bounds");if(i>this.length)i=this.length;if(t.length-e<i-l){i=t.length-e+l}var r=i-l;var u;if(this===t&&l<e&&e<i){for(u=r-1;u>=0;u--){t[u+e]=this[u+l]}}else if(r<1e3||!o.TYPED_ARRAY_SUPPORT){for(u=0;u<r;u++){t[u+e]=this[u+l]}}else{Uint8Array.prototype.set.call(t,this.subarray(l,l+r),e)}return r};o.prototype.fill=function n(t,e,l){if(!t)t=0;if(!e)e=0;if(!l)l=this.length;if(l<e)throw new RangeError("end < start");if(l===e)return;if(this.length===0)return;if(e<0||e>=this.length)throw new RangeError("start out of bounds");if(l<0||l>this.length)throw new RangeError("end out of bounds");var i;if(typeof t==="number"){for(i=e;i<l;i++){this[i]=t}}else{var r=Z(t.toString());var u=r.length;for(i=e;i<l;i++){this[i]=r[i%u]}}return this};var Y=/[^+\/0-9A-Za-z-_]/g;function X(n){n=H(n).replace(Y,"");if(n.length<2)return"";while(n.length%4!==0){n=n+"="}return n}function H(n){if(n.trim)return n.trim();return n.replace(/^\s+|\s+$/g,"")}function W(n){if(n<16)return"0"+n.toString(16);return n.toString(16)}function Z(n,t){t=t||Infinity;var e;var l=n.length;var i=null;var r=[];for(var u=0;u<l;u++){e=n.charCodeAt(u);if(e>55295&&e<57344){if(!i){if(e>56319){if((t-=3)>-1)r.push(239,191,189);continue}else if(u+1===l){if((t-=3)>-1)r.push(239,191,189);continue}i=e;continue}if(e<56320){if((t-=3)>-1)r.push(239,191,189);i=e;continue}e=(i-55296<<10|e-56320)+65536}else if(i){if((t-=3)>-1)r.push(239,191,189)}i=null;if(e<128){if((t-=1)<0)break;r.push(e)}else if(e<2048){if((t-=2)<0)break;r.push(e>>6|192,e&63|128)}else if(e<65536){if((t-=3)<0)break;r.push(e>>12|224,e>>6&63|128,e&63|128)}else if(e<1114112){if((t-=4)<0)break;r.push(e>>18|240,e>>12&63|128,e>>6&63|128,e&63|128)}else{throw new Error("Invalid code point")}}return r}function J(n){var t=[];for(var e=0;e<n.length;e++){t.push(n.charCodeAt(e)&255)}return t}function K(n,t){var e,l,i;var r=[];for(var u=0;u<n.length;u++){if((t-=2)<0)break;e=n.charCodeAt(u);l=e>>8;i=e%256;r.push(i);r.push(l)}return r}function Q(n){return l.toByteArray(X(n))}function $(n,t,e,l){for(var i=0;i<l;i++){if(i+e>=t.length||i>=n.length)break;t[i+e]=n[i]}return i}}).call(this,typeof global!=="undefined"?global:typeof self!=="undefined"?self:typeof window!=="undefined"?window:{})},{"base64-js":5,ieee754:8,isarray:7}],7:[function(n,t,e){var l={}.toString;t.exports=Array.isArray||function(n){return l.call(n)=="[object Array]"}},{}],8:[function(n,t,e){e.read=function(n,t,e,l,i){var r,u;var s=i*8-l-1;var a=(1<<s)-1;var o=a>>1;var h=-7;var f=e?i-1:0;var c=e?-1:1;var d=n[t+f];f+=c;r=d&(1<<-h)-1;d>>=-h;h+=s;for(;h>0;r=r*256+n[t+f],f+=c,h-=8){}u=r&(1<<-h)-1;r>>=-h;h+=l;for(;h>0;u=u*256+n[t+f],f+=c,h-=8){}if(r===0){r=1-o}else if(r===a){return u?NaN:(d?-1:1)*Infinity}else{u=u+Math.pow(2,l);r=r-o}return(d?-1:1)*u*Math.pow(2,r-l)};e.write=function(n,t,e,l,i,r){var u,s,a;var o=r*8-i-1;var h=(1<<o)-1;var f=h>>1;var c=i===23?Math.pow(2,-24)-Math.pow(2,-77):0;var d=l?0:r-1;var g=l?1:-1;var p=t<0||t===0&&1/t<0?1:0;t=Math.abs(t);if(isNaN(t)||t===Infinity){s=isNaN(t)?1:0;u=h}else{u=Math.floor(Math.log(t)/Math.LN2);if(t*(a=Math.pow(2,-u))<1){u--;a*=2}if(u+f>=1){t+=c/a}else{t+=c*Math.pow(2,1-f)}if(t*a>=2){u++;a/=2}if(u+f>=h){s=0;u=h}else if(u+f>=1){s=(t*a-1)*Math.pow(2,i);u=u+f}else{s=t*Math.pow(2,f-1)*Math.pow(2,i);u=0}}for(;i>=8;n[e+d]=s&255,d+=g,s/=256,i-=8){}u=u<<i|s;o+=i;for(;o>0;n[e+d]=u&255,d+=g,u/=256,o-=8){}n[e+d-g]|=p*128}},{}],9:[function(n,t,e){(function(n){"use strict";var e=n.MutationObserver||n.WebKitMutationObserver;var l;{if(e){var i=0;var r=new e(h);var u=n.document.createTextNode("");r.observe(u,{characterData:true});l=function(){u.data=i=++i%2}}else if(!n.setImmediate&&typeof n.MessageChannel!=="undefined"){var s=new n.MessageChannel;s.port1.onmessage=h;l=function(){s.port2.postMessage(0)}}else if("document"in n&&"onreadystatechange"in n.document.createElement("script")){l=function(){var t=n.document.createElement("script");t.onreadystatechange=function(){h();t.onreadystatechange=null;t.parentNode.removeChild(t);t=null};n.document.documentElement.appendChild(t)}}else{l=function(){setTimeout(h,0)}}}var a;var o=[];function h(){a=true;var n,t;var e=o.length;while(e){t=o;o=[];n=-1;while(++n<e){t[n]()}e=o.length}a=false}t.exports=f;function f(n){if(o.push(n)===1&&!a){l()}}}).call(this,typeof global!=="undefined"?global:typeof self!=="undefined"?self:typeof window!=="undefined"?window:{})},{}],10:[function(n,t,e){t.exports=function(n){return!!(n!=null&&(n._isBuffer||n.constructor&&typeof n.constructor.isBuffer==="function"&&n.constructor.isBuffer(n)))}},{}],11:[function(n,t,e){"use strict";var l="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";e.encode=function(n,t){var e="";var i,r,u,s,a,o,h;var f=0;while(f<n.length){i=n.charCodeAt(f++);r=n.charCodeAt(f++);u=n.charCodeAt(f++);s=i>>2;a=(i&3)<<4|r>>4;o=(r&15)<<2|u>>6;h=u&63;if(isNaN(r)){o=h=64}else if(isNaN(u)){h=64}e=e+l.charAt(s)+l.charAt(a)+l.charAt(o)+l.charAt(h)}return e};e.decode=function(n,t){var e="";var i,r,u;var s,a,o,h;var f=0;n=n.replace(/[^A-Za-z0-9\+\/\=]/g,"");while(f<n.length){s=l.indexOf(n.charAt(f++));a=l.indexOf(n.charAt(f++));o=l.indexOf(n.charAt(f++));h=l.indexOf(n.charAt(f++));i=s<<2|a>>4;r=(a&15)<<4|o>>2;u=(o&3)<<6|h
;e=e+String.fromCharCode(i);if(o!=64){e=e+String.fromCharCode(r)}if(h!=64){e=e+String.fromCharCode(u)}}return e}},{}],12:[function(n,t,e){"use strict";function l(){this.compressedSize=0;this.uncompressedSize=0;this.crc32=0;this.compressionMethod=null;this.compressedContent=null}l.prototype={getContent:function(){return null},getCompressedContent:function(){return null}};t.exports=l},{}],13:[function(n,t,e){"use strict";e.STORE={magic:"\0\0",compress:function(n,t){return n},uncompress:function(n){return n},compressInputType:null,uncompressInputType:null};e.DEFLATE=n("./flate")},{"./flate":18}],14:[function(n,t,e){"use strict";var l=n("./utils");var i=[0,1996959894,3993919788,2567524794,124634137,1886057615,3915621685,2657392035,249268274,2044508324,3772115230,2547177864,162941995,2125561021,3887607047,2428444049,498536548,1789927666,4089016648,2227061214,450548861,1843258603,4107580753,2211677639,325883990,1684777152,4251122042,2321926636,335633487,1661365465,4195302755,2366115317,997073096,1281953886,3579855332,2724688242,1006888145,1258607687,3524101629,2768942443,901097722,1119000684,3686517206,2898065728,853044451,1172266101,3705015759,2882616665,651767980,1373503546,3369554304,3218104598,565507253,1454621731,3485111705,3099436303,671266974,1594198024,3322730930,2970347812,795835527,1483230225,3244367275,3060149565,1994146192,31158534,2563907772,4023717930,1907459465,112637215,2680153253,3904427059,2013776290,251722036,2517215374,3775830040,2137656763,141376813,2439277719,3865271297,1802195444,476864866,2238001368,4066508878,1812370925,453092731,2181625025,4111451223,1706088902,314042704,2344532202,4240017532,1658658271,366619977,2362670323,4224994405,1303535960,984961486,2747007092,3569037538,1256170817,1037604311,2765210733,3554079995,1131014506,879679996,2909243462,3663771856,1141124467,855842277,2852801631,3708648649,1342533948,654459306,3188396048,3373015174,1466479909,544179635,3110523913,3462522015,1591671054,702138776,2966460450,3352799412,1504918807,783551873,3082640443,3233442989,3988292384,2596254646,62317068,1957810842,3939845945,2647816111,81470997,1943803523,3814918930,2489596804,225274430,2053790376,3826175755,2466906013,167816743,2097651377,4027552580,2265490386,503444072,1762050814,4150417245,2154129355,426522225,1852507879,4275313526,2312317920,282753626,1742555852,4189708143,2394877945,397917763,1622183637,3604390888,2714866558,953729732,1340076626,3518719985,2797360999,1068828381,1219638859,3624741850,2936675148,906185462,1090812512,3747672003,2825379669,829329135,1181335161,3412177804,3160834842,628085408,1382605366,3423369109,3138078467,570562233,1426400815,3317316542,2998733608,733239954,1555261956,3268935591,3050360625,752459403,1541320221,2607071920,3965973030,1969922972,40735498,2617837225,3943577151,1913087877,83908371,2512341634,3803740692,2075208622,213261112,2463272603,3855990285,2094854071,198958881,2262029012,4057260610,1759359992,534414190,2176718541,4139329115,1873836001,414664567,2282248934,4279200368,1711684554,285281116,2405801727,4167216745,1634467795,376229701,2685067896,3608007406,1308918612,956543938,2808555105,3495958263,1231636301,1047427035,2932959818,3654703836,1088359270,936918e3,2847714899,3736837829,1202900863,817233897,3183342108,3401237130,1404277552,615818150,3134207493,3453421203,1423857449,601450431,3009837614,3294710456,1567103746,711928724,3020668471,3272380065,1510334235,755167117];t.exports=function n(t,e){if(typeof t==="undefined"||!t.length){return 0}var r=l.getTypeOf(t)!=="string";if(typeof e=="undefined"){e=0}var u=0;var s=0;var a=0;e=e^-1;for(var o=0,h=t.length;o<h;o++){a=r?t[o]:t.charCodeAt(o);s=(e^a)&255;u=i[s];e=e>>>8^u}return e^-1}},{"./utils":31}],15:[function(n,t,e){"use strict";var l=n("./utils");function i(n){this.data=null;this.length=0;this.index=0}i.prototype={checkOffset:function(n){this.checkIndex(this.index+n)},checkIndex:function(n){if(this.length<n||n<0){throw new Error("End of data reached (data length = "+this.length+", asked index = "+n+"). Corrupted zip ?")}},setIndex:function(n){this.checkIndex(n);this.index=n},skip:function(n){this.setIndex(this.index+n)},byteAt:function(n){},readInt:function(n){var t=0,e;this.checkOffset(n);for(e=this.index+n-1;e>=this.index;e--){t=(t<<8)+this.byteAt(e)}this.index+=n;return t},readString:function(n){return l.transformTo("string",this.readData(n))},readData:function(n){},lastIndexOfSignature:function(n){},readDate:function(){var n=this.readInt(4);return new Date((n>>25&127)+1980,(n>>21&15)-1,n>>16&31,n>>11&31,n>>5&63,(n&31)<<1)}};t.exports=i},{"./utils":31}],16:[function(n,t,e){"use strict";e.base64=false;e.binary=false;e.dir=false;e.createFolders=false;e.date=null;e.compression=null;e.compressionOptions=null;e.comment=null;e.unixPermissions=null;e.dosPermissions=null},{}],17:[function(n,t,e){"use strict";var l=n("./utils");e.string2binary=function(n){return l.string2binary(n)};e.string2Uint8Array=function(n){return l.transformTo("uint8array",n)};e.uint8Array2String=function(n){return l.transformTo("string",n)};e.string2Blob=function(n){var t=l.transformTo("arraybuffer",n);return l.arrayBuffer2Blob(t)};e.arrayBuffer2Blob=function(n){return l.arrayBuffer2Blob(n)};e.transformTo=function(n,t){return l.transformTo(n,t)};e.getTypeOf=function(n){return l.getTypeOf(n)};e.checkSupport=function(n){return l.checkSupport(n)};e.MAX_VALUE_16BITS=l.MAX_VALUE_16BITS;e.MAX_VALUE_32BITS=l.MAX_VALUE_32BITS;e.pretty=function(n){return l.pretty(n)};e.findCompression=function(n){return l.findCompression(n)};e.isRegExp=function(n){return l.isRegExp(n)}},{"./utils":31}],18:[function(n,t,e){"use strict";var l=typeof Uint8Array!=="undefined"&&typeof Uint16Array!=="undefined"&&typeof Uint32Array!=="undefined";var i=n("pako");e.uncompressInputType=l?"uint8array":"array";e.compressInputType=l?"uint8array":"array";e.magic="\b\0";e.compress=function(n,t){return i.deflateRaw(n,{level:t.level||-1})};e.uncompress=function(n){return i.inflateRaw(n)}},{pako:37}],19:[function(n,t,e){"use strict";var l=n("./base64");function i(n,t){if(!(this instanceof i))return new i(n,t);this.files={};this.comment=null;this.root="";if(n){this.load(n,t)}this.clone=function(){var n=new i;for(var t in this){if(typeof this[t]!=="function"){n[t]=this[t]}}return n}}i.prototype=n("./object");i.prototype.load=n("./load");i.support=n("./support");i.defaults=n("./defaults");i.utils=n("./deprecatedPublicUtils");i.base64={encode:function(n){return l.encode(n)},decode:function(n){return l.decode(n)}};i.compressions=n("./compressions");t.exports=i},{"./base64":11,"./compressions":13,"./defaults":16,"./deprecatedPublicUtils":17,"./load":20,"./object":23,"./support":27}],20:[function(n,t,e){"use strict";var l=n("./base64");var i=n("./zipEntries");t.exports=function(n,t){var e,r,u,s;t=t||{};if(t.base64){n=l.decode(n)}r=new i(n,t);e=r.files;for(u=0;u<e.length;u++){s=e[u];this.file(s.fileName,s.decompressed,{binary:true,optimizedBinaryString:true,date:s.date,dir:s.dir,comment:s.fileComment.length?s.fileComment:null,unixPermissions:s.unixPermissions,dosPermissions:s.dosPermissions,createFolders:t.createFolders})}if(r.zipComment.length){this.comment=r.zipComment}return this}},{"./base64":11,"./zipEntries":32}],21:[function(n,t,e){(function(n){"use strict";t.exports=function(t,e){return new n(t,e)};t.exports.test=function(t){return n.isBuffer(t)}}).call(this,n("buffer").Buffer)},{buffer:6}],22:[function(n,t,e){"use strict";var l=n("./uint8ArrayReader");function i(n){this.data=n;this.length=this.data.length;this.index=0}i.prototype=new l;i.prototype.readData=function(n){this.checkOffset(n);var t=this.data.slice(this.index,this.index+n);this.index+=n;return t};t.exports=i},{"./uint8ArrayReader":28}],23:[function(n,t,e){"use strict";var l=n("./support");var i=n("./utils");var r=n("./crc32");var u=n("./signature");var s=n("./defaults");var a=n("./base64");var o=n("./compressions");var h=n("./compressedObject");var f=n("./nodeBuffer");var c=n("./utf8");var d=n("./stringWriter");var g=n("./uint8ArrayWriter");var p=function(n){if(n._data instanceof h){n._data=n._data.getContent();n.options.binary=true;n.options.base64=false;if(i.getTypeOf(n._data)==="uint8array"){var t=n._data;n._data=new Uint8Array(t.length);if(t.length!==0){n._data.set(t,0)}}}return n._data};var v=function(n){var t=p(n),e=i.getTypeOf(t);if(e==="string"){if(!n.options.binary){if(l.nodebuffer){return f(t,"utf-8")}}return n.asBinary()}return t};var m=function(n){var t=p(this);if(t===null||typeof t==="undefined"){return""}if(this.options.base64){t=a.decode(t)}if(n&&this.options.binary){t=L.utf8decode(t)}else{t=i.transformTo("string",t)}if(!n&&!this.options.binary){t=i.transformTo("string",L.utf8encode(t))}return t};var y=function(n,t,e){this.name=n;this.dir=e.dir;this.date=e.date;this.comment=e.comment;this.unixPermissions=e.unixPermissions;this.dosPermissions=e.dosPermissions;this._data=t;this.options=e;this._initialMetadata={dir:e.dir,date:e.date}};y.prototype={asText:function(){return m.call(this,true)},asBinary:function(){return m.call(this,false)},asNodeBuffer:function(){var n=v(this);return i.transformTo("nodebuffer",n)},asUint8Array:function(){var n=v(this);return i.transformTo("uint8array",n)},asArrayBuffer:function(){return this.asUint8Array().buffer}};var x=function(n,t){var e="",l;for(l=0;l<t;l++){e+=String.fromCharCode(n&255);n=n>>>8}return e};var w=function(){var n={},t,e;for(t=0;t<arguments.length;t++){for(e in arguments[t]){if(arguments[t].hasOwnProperty(e)&&typeof n[e]==="undefined"){n[e]=arguments[t][e]}}}return n};var _=function(n){n=n||{};if(n.base64===true&&(n.binary===null||n.binary===undefined)){n.binary=true}n=w(n,s);n.date=n.date||new Date;if(n.compression!==null)n.compression=n.compression.toUpperCase();return n};var M=function(n,t,e){var l=i.getTypeOf(t),r;e=_(e);if(typeof e.unixPermissions==="string"){e.unixPermissions=parseInt(e.unixPermissions,8)}if(e.unixPermissions&&e.unixPermissions&16384){e.dir=true}if(e.dosPermissions&&e.dosPermissions&16){e.dir=true}if(e.dir){n=b(n)}if(e.createFolders&&(r=E(n))){C.call(this,r,true)}if(e.dir||t===null||typeof t==="undefined"){e.base64=false;e.binary=false;t=null;l=null}else if(l==="string"){if(e.binary&&!e.base64){if(e.optimizedBinaryString!==true){t=i.string2binary(t)}}}else{e.base64=false;e.binary=true;if(!l&&!(t instanceof h)){throw new Error("The data of '"+n+"' is in an unsupported format !")}if(l==="arraybuffer"){t=i.transformTo("uint8array",t)}}var u=new y(n,t,e);this.files[n]=u;return u};var E=function(n){if(n.slice(-1)=="/"){n=n.substring(0,n.length-1)}var t=n.lastIndexOf("/");return t>0?n.substring(0,t):""};var b=function(n){if(n.slice(-1)!="/"){n+="/"}return n};var C=function(n,t){t=typeof t!=="undefined"?t:false;n=b(n);if(!this.files[n]){M.call(this,n,null,{dir:true,createFolders:t})}return this.files[n]};var I=function(n,t,e){var l=new h,u;if(n._data instanceof h){l.uncompressedSize=n._data.uncompressedSize;l.crc32=n._data.crc32;if(l.uncompressedSize===0||n.dir){t=o["STORE"];l.compressedContent="";l.crc32=0}else if(n._data.compressionMethod===t.magic){l.compressedContent=n._data.getCompressedContent()}else{u=n._data.getContent();l.compressedContent=t.compress(i.transformTo(t.compressInputType,u),e)}}else{u=v(n);if(!u||u.length===0||n.dir){t=o["STORE"];u=""}l.uncompressedSize=u.length;l.crc32=r(u);l.compressedContent=t.compress(i.transformTo(t.compressInputType,u),e)}l.compressedSize=l.compressedContent.length;l.compressionMethod=t.magic;return l};var S=function(n,t){var e=n;if(!n){e=t?16893:33204}return(e&65535)<<16};var N=function(n,t){return(n||0)&63};var P=function(n,t,e,l,s){var a=e.compressedContent,o=i.transformTo("string",c.utf8encode(t.name)),h=t.comment||"",f=i.transformTo("string",c.utf8encode(h)),d=o.length!==t.name.length,g=f.length!==h.length,p=t.options,v,m,y="",w="",_="",M,E;if(t._initialMetadata.dir!==t.dir){M=t.dir}else{M=p.dir}if(t._initialMetadata.date!==t.date){E=t.date}else{E=p.date}var b=0;var C=0;if(M){b|=16}if(s==="UNIX"){C=798;b|=S(t.unixPermissions,M)}else{C=20;b|=N(t.dosPermissions,M)}v=E.getHours();v=v<<6;v=v|E.getMinutes();v=v<<5;v=v|E.getSeconds()/2;m=E.getFullYear()-1980;m=m<<4;m=m|E.getMonth()+1;m=m<<5;m=m|E.getDate();if(d){w=x(1,1)+x(r(o),4)+o;y+="up"+x(w.length,2)+w}if(g){_=x(1,1)+x(this.crc32(f),4)+f;y+="uc"+x(_.length,2)+_}var I="";I+="\n\0";I+=d||g?"\0\b":"\0\0";I+=e.compressionMethod;I+=x(v,2);I+=x(m,2);I+=x(e.crc32,4);I+=x(e.compressedSize,4);I+=x(e.uncompressedSize,4);I+=x(o.length,2);I+=x(y.length,2);var P=u.LOCAL_FILE_HEADER+I+o+y;var L=u.CENTRAL_FILE_HEADER+x(C,2)+I+x(f.length,2)+"\0\0"+"\0\0"+x(b,4)+x(l,4)+o+y+f;return{fileRecord:P,dirRecord:L,compressedObject:e}};var L={load:function(n,t){throw new Error("Load method is not defined. Is the file jszip-load.js included ?")},filter:function(n){var t=[],e,l,i,r;for(e in this.files){if(!this.files.hasOwnProperty(e)){continue}i=this.files[e];r=new y(i.name,i._data,w(i.options));l=e.slice(this.root.length,e.length);if(e.slice(0,this.root.length)===this.root&&n(l,r)){t.push(r)}}return t},file:function(n,t,e){if(arguments.length===1){if(i.isRegExp(n)){var l=n;return this.filter(function(n,t){return!t.dir&&l.test(n)})}else{return this.filter(function(t,e){return!e.dir&&t===n})[0]||null}}else{n=this.root+n;M.call(this,n,t,e)}return this},folder:function(n){if(!n){return this}if(i.isRegExp(n)){return this.filter(function(t,e){return e.dir&&n.test(t)})}var t=this.root+n;var e=C.call(this,t);var l=this.clone();l.root=e.name;return l},remove:function(n){n=this.root+n;var t=this.files[n];if(!t){if(n.slice(-1)!="/"){n+="/"}t=this.files[n]}if(t&&!t.dir){delete this.files[n]}else{var e=this.filter(function(t,e){return e.name.slice(0,n.length)===n});for(var l=0;l<e.length;l++){delete this.files[e[l].name]}}return this},generate:function(n){n=w(n||{},{base64:true,compression:"STORE",compressionOptions:null,type:"base64",platform:"DOS",comment:null,mimeType:"application/zip"});i.checkSupport(n.type);if(n.platform==="darwin"||n.platform==="freebsd"||n.platform==="linux"||n.platform==="sunos"){n.platform="UNIX"}if(n.platform==="win32"){n.platform="DOS"}var t=[],e=0,l=0,r,s,h=i.transformTo("string",this.utf8encode(n.comment||this.comment||""));for(var f in this.files){if(!this.files.hasOwnProperty(f)){continue}var c=this.files[f];var p=c.options.compression||n.compression.toUpperCase();var v=o[p];if(!v){throw new Error(p+" is not a valid compression method !")}var m=c.options.compressionOptions||n.compressionOptions||{};var y=I.call(this,c,v,m);var _=P.call(this,f,c,y,e,n.platform);e+=_.fileRecord.length+y.compressedSize;l+=_.dirRecord.length;t.push(_)}var M="";M=u.CENTRAL_DIRECTORY_END+"\0\0"+"\0\0"+x(t.length,2)+x(t.length,2)+x(l,4)+x(e,4)+x(h.length,2)+h;var E=n.type.toLowerCase();if(E==="uint8array"||E==="arraybuffer"||E==="blob"||E==="nodebuffer"){r=new g(e+l+M.length)}else{r=new d(e+l+M.length)}for(s=0;s<t.length;s++){r.append(t[s].fileRecord);r.append(t[s].compressedObject.compressedContent)}for(s=0;s<t.length;s++){r.append(t[s].dirRecord)}r.append(M);var b=r.finalize();switch(n.type.toLowerCase()){case"uint8array":case"arraybuffer":case"nodebuffer":return i.transformTo(n.type.toLowerCase(),b);case"blob":return i.arrayBuffer2Blob(i.transformTo("arraybuffer",b),n.mimeType);case"base64":return n.base64?a.encode(b):b;default:return b}},crc32:function(n,t){return r(n,t)},utf8encode:function(n){return i.transformTo("string",c.utf8encode(n))},utf8decode:function(n){return c.utf8decode(n)}};t.exports=L},{"./base64":11,"./compressedObject":12,"./compressions":13,"./crc32":14,"./defaults":16,"./nodeBuffer":21,"./signature":24,"./stringWriter":26,"./support":27,"./uint8ArrayWriter":29,"./utf8":30,"./utils":31}],24:[function(n,t,e){"use strict";e.LOCAL_FILE_HEADER="PK";e.CENTRAL_FILE_HEADER="PK";e.CENTRAL_DIRECTORY_END="PK";e.ZIP64_CENTRAL_DIRECTORY_LOCATOR="PK";e.ZIP64_CENTRAL_DIRECTORY_END="PK";e.DATA_DESCRIPTOR="PK\b"},{}],25:[function(n,t,e){"use strict";var l=n("./dataReader");var i=n("./utils");function r(n,t){this.data=n;if(!t){this.data=i.string2binary(this.data)}this.length=this.data.length;this.index=0}r.prototype=new l;r.prototype.byteAt=function(n){return this.data.charCodeAt(n)};r.prototype.lastIndexOfSignature=function(n){return this.data.lastIndexOf(n)};r.prototype.readData=function(n){this.checkOffset(n);var t=this.data.slice(this.index,this.index+n);this.index+=n;return t};t.exports=r},{"./dataReader":15,"./utils":31}],26:[function(n,t,e){"use strict";var l=n("./utils");var i=function(){this.data=[]};i.prototype={append:function(n){n=l.transformTo("string",n);this.data.push(n)},finalize:function(){return this.data.join("")}};t.exports=i},{"./utils":31}],27:[function(n,t,e){(function(n){"use strict";e.base64=true;e.array=true;e.string=true;e.arraybuffer=typeof ArrayBuffer!=="undefined"&&typeof Uint8Array!=="undefined";e.nodebuffer=typeof n!=="undefined";e.uint8array=typeof Uint8Array!=="undefined";if(typeof ArrayBuffer==="undefined"){e.blob=false}else{var t=new ArrayBuffer(0);try{e.blob=new Blob([t],{type:"application/zip"}).size===0}catch(n){try{var l=window.BlobBuilder||window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder;var i=new l;i.append(t);e.blob=i.getBlob("application/zip").size===0}catch(n){e.blob=false}}}}).call(this,n("buffer").Buffer)},{buffer:6}],28:[function(n,t,e){"use strict";var l=n("./dataReader");function i(n){if(n){this.data=n;this.length=this.data.length;this.index=0}}i.prototype=new l;i.prototype.byteAt=function(n){return this.data[n]};i.prototype.lastIndexOfSignature=function(n){var t=n.charCodeAt(0),e=n.charCodeAt(1),l=n.charCodeAt(2),i=n.charCodeAt(3);for(var r=this.length-4;r>=0;--r){if(this.data[r]===t&&this.data[r+1]===e&&this.data[r+2]===l&&this.data[r+3]===i){return r}}return-1};i.prototype.readData=function(n){this.checkOffset(n);if(n===0){return new Uint8Array(0)}var t=this.data.subarray(this.index,this.index+n);this.index+=n;return t};t.exports=i},{"./dataReader":15}],29:[function(n,t,e){"use strict";var l=n("./utils");var i=function(n){this.data=new Uint8Array(n);this.index=0};i.prototype={append:function(n){if(n.length!==0){n=l.transformTo("uint8array",n);this.data.set(n,this.index);this.index+=n.length}},finalize:function(){return this.data}};t.exports=i},{"./utils":31}],30:[function(n,t,e){"use strict";var l=n("./utils");var i=n("./support");var r=n("./nodeBuffer");var u=new Array(256);for(var s=0;s<256;s++){u[s]=s>=252?6:s>=248?5:s>=240?4:s>=224?3:s>=192?2:1}u[254]=u[254]=1;var a=function(n){var t,e,l,r,u,s=n.length,a=0;for(r=0;r<s;r++){e=n.charCodeAt(r);if((e&64512)===55296&&r+1<s){l=n.charCodeAt(r+1);if((l&64512)===56320){e=65536+(e-55296<<10)+(l-56320);r++}}a+=e<128?1:e<2048?2:e<65536?3:4}if(i.uint8array){t=new Uint8Array(a)}else{t=new Array(a)}for(u=0,r=0;u<a;r++){e=n.charCodeAt(r);if((e&64512)===55296&&r+1<s){l=n.charCodeAt(r+1);if((l&64512)===56320){e=65536+(e-55296<<10)+(l-56320);r++}}if(e<128){t[u++]=e}else if(e<2048){t[u++]=192|e>>>6;t[u++]=128|e&63}else if(e<65536){t[u++]=224|e>>>12;t[u++]=128|e>>>6&63;t[u++]=128|e&63}else{t[u++]=240|e>>>18;t[u++]=128|e>>>12&63;t[u++]=128|e>>>6&63;t[u++]=128|e&63}}return t};var o=function(n,t){var e;t=t||n.length;if(t>n.length){t=n.length}e=t-1;while(e>=0&&(n[e]&192)===128){e--}if(e<0){return t}if(e===0){return t}return e+u[n[e]]>t?e:t};var h=function(n){var t,e,i,r,s;var a=n.length;var o=new Array(a*2);for(i=0,e=0;e<a;){r=n[e++];if(r<128){o[i++]=r;continue}s=u[r];if(s>4){o[i++]=65533;e+=s-1;continue}r&=s===2?31:s===3?15:7;while(s>1&&e<a){r=r<<6|n[e++]&63;s--}if(s>1){o[i++]=65533;continue}if(r<65536){o[i++]=r}else{r-=65536;o[i++]=55296|r>>10&1023;o[i++]=56320|r&1023}}if(o.length!==i){if(o.subarray){o=o.subarray(0,i)}else{o.length=i}}return l.applyFromCharCode(o)};e.utf8encode=function n(t){if(i.nodebuffer){return r(t,"utf-8")}return a(t)};e.utf8decode=function n(t){if(i.nodebuffer){return l.transformTo("nodebuffer",t).toString("utf-8")}t=l.transformTo(i.uint8array?"uint8array":"array",t);var e=[],r=0,u=t.length,s=65536;while(r<u){var a=o(t,Math.min(r+s,u));if(i.uint8array){e.push(h(t.subarray(r,a)))}else{e.push(h(t.slice(r,a)))}r=a}return e.join("")}},{"./nodeBuffer":21,"./support":27,"./utils":31}],31:[function(n,t,e){"use strict";var l=n("./support");var i=n("./compressions");var r=n("./nodeBuffer");e.string2binary=function(n){var t="";for(var e=0;e<n.length;e++){t+=String.fromCharCode(n.charCodeAt(e)&255)}return t};e.arrayBuffer2Blob=function(n,t){e.checkSupport("blob");t=t||"application/zip";try{return new Blob([n],{type:t})}catch(e){try{var l=window.BlobBuilder||window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder;var i=new l;i.append(n);return i.getBlob(t)}catch(n){throw new Error("Bug : can't construct the Blob.")}}};function u(n){return n}function s(n,t){for(var e=0;e<n.length;++e){t[e]=n.charCodeAt(e)&255}return t}function a(n){var t=65536;var l=[],i=n.length,u=e.getTypeOf(n),s=0,a=true;try{switch(u){case"uint8array":String.fromCharCode.apply(null,new Uint8Array(0));break;case"nodebuffer":String.fromCharCode.apply(null,r(0));break}}catch(n){a=false}if(!a){var o="";for(var h=0;h<n.length;h++){o+=String.fromCharCode(n[h])}return o}while(s<i&&t>1){try{if(u==="array"||u==="nodebuffer"){l.push(String.fromCharCode.apply(null,n.slice(s,Math.min(s+t,i))))}else{l.push(String.fromCharCode.apply(null,n.subarray(s,Math.min(s+t,i))))}s+=t}catch(n){t=Math.floor(t/2)}}return l.join("")}e.applyFromCharCode=a;function o(n,t){for(var e=0;e<n.length;e++){t[e]=n[e]}return t}var h={};h["string"]={string:u,array:function(n){return s(n,new Array(n.length))},arraybuffer:function(n){return h["string"]["uint8array"](n).buffer},uint8array:function(n){return s(n,new Uint8Array(n.length))},nodebuffer:function(n){return s(n,r(n.length))}};h["array"]={string:a,array:u,arraybuffer:function(n){return new Uint8Array(n).buffer},uint8array:function(n){return new Uint8Array(n)},nodebuffer:function(n){return r(n)}};h["arraybuffer"]={string:function(n){return a(new Uint8Array(n))},array:function(n){return o(new Uint8Array(n),new Array(n.byteLength))},arraybuffer:u,uint8array:function(n){return new Uint8Array(n)},nodebuffer:function(n){return r(new Uint8Array(n))}};h["uint8array"]={string:a,array:function(n){return o(n,new Array(n.length))},arraybuffer:function(n){return n.buffer},uint8array:u,nodebuffer:function(n){return r(n)}};h["nodebuffer"]={string:a,array:function(n){return o(n,new Array(n.length))},arraybuffer:function(n){return h["nodebuffer"]["uint8array"](n).buffer},uint8array:function(n){return o(n,new Uint8Array(n.length))},nodebuffer:u};e.transformTo=function(n,t){if(!t){t=""}if(!n){return t}e.checkSupport(n);var l=e.getTypeOf(t);var i=h[l][n](t);return i};e.getTypeOf=function(n){if(typeof n==="string"){return"string"}if(Object.prototype.toString.call(n)==="[object Array]"){return"array"}if(l.nodebuffer&&r.test(n)){return"nodebuffer"}if(l.uint8array&&n instanceof Uint8Array){return"uint8array"}if(l.arraybuffer&&n instanceof ArrayBuffer){return"arraybuffer"}};e.checkSupport=function(n){var t=l[n.toLowerCase()];if(!t){throw new Error(n+" is not supported by this browser")}};e.MAX_VALUE_16BITS=65535;e.MAX_VALUE_32BITS=-1;e.pretty=function(n){var t="",e,l;for(l=0;l<(n||"").length;l++){e=n.charCodeAt(l);t+="\\x"+(e<16?"0":"")+e.toString(16).toUpperCase()}return t};e.findCompression=function(n){for(var t in i){if(!i.hasOwnProperty(t)){continue}if(i[t].magic===n){return i[t]}}return null};e.isRegExp=function(n){return Object.prototype.toString.call(n)==="[object RegExp]"}},{"./compressions":13,"./nodeBuffer":21,"./support":27}],32:[function(n,t,e){"use strict";var l=n("./stringReader");var i=n("./nodeBufferReader");var r=n("./uint8ArrayReader");var u=n("./utils");var s=n("./signature");var a=n("./zipEntry");var o=n("./support");var h=n("./object");function f(n,t){this.files=[];this.loadOptions=t;if(n){this.load(n)}}f.prototype={checkSignature:function(n){var t=this.reader.readString(4);if(t!==n){throw new Error("Corrupted zip or bug : unexpected signature "+"("+u.pretty(t)+", expected "+u.pretty(n)+")")}},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2);this.diskWithCentralDirStart=this.reader.readInt(2);this.centralDirRecordsOnThisDisk=this.reader.readInt(2);this.centralDirRecords=this.reader.readInt(2);this.centralDirSize=this.reader.readInt(4);this.centralDirOffset=this.reader.readInt(4);this.zipCommentLength=this.reader.readInt(2);this.zipComment=this.reader.readString(this.zipCommentLength);this.zipComment=h.utf8decode(this.zipComment)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8);this.versionMadeBy=this.reader.readString(2);this.versionNeeded=this.reader.readInt(2);this.diskNumber=this.reader.readInt(4);this.diskWithCentralDirStart=this.reader.readInt(4);this.centralDirRecordsOnThisDisk=this.reader.readInt(8);this.centralDirRecords=this.reader.readInt(8);this.centralDirSize=this.reader.readInt(8);this.centralDirOffset=this.reader.readInt(8);this.zip64ExtensibleData={};var n=this.zip64EndOfCentralSize-44,t=0,e,l,i;while(t<n){e=this.reader.readInt(2);l=this.reader.readInt(4);i=this.reader.readString(l);this.zip64ExtensibleData[e]={id:e,length:l,value:i}}},readBlockZip64EndOfCentralLocator:function(){this.diskWithZip64CentralDirStart=this.reader.readInt(4);this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8);this.disksCount=this.reader.readInt(4);if(this.disksCount>1){throw new Error("Multi-volumes zip are not supported")}},readLocalFiles:function(){var n,t;for(n=0;n<this.files.length;n++){t=this.files[n];this.reader.setIndex(t.localHeaderOffset);this.checkSignature(s.LOCAL_FILE_HEADER);t.readLocalPart(this.reader);t.handleUTF8();t.processAttributes()}},readCentralDir:function(){var n;this.reader.setIndex(this.centralDirOffset);while(this.reader.readString(4)===s.CENTRAL_FILE_HEADER){n=new a({zip64:this.zip64},this.loadOptions);n.readCentralPart(this.reader);this.files.push(n)}},readEndOfCentral:function(){var n=this.reader.lastIndexOfSignature(s.CENTRAL_DIRECTORY_END);if(n===-1){var t=true;try{this.reader.setIndex(0);this.checkSignature(s.LOCAL_FILE_HEADER);t=false}catch(n){}if(t){throw new Error("Can't find end of central directory : is this a zip file ? "+"If it is, see http://stuk.github.io/jszip/documentation/howto/read_zip.html")}else{throw new Error("Corrupted zip : can't find end of central directory")}}this.reader.setIndex(n);this.checkSignature(s.CENTRAL_DIRECTORY_END);this.readBlockEndOfCentral();if(this.diskNumber===u.MAX_VALUE_16BITS||this.diskWithCentralDirStart===u.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===u.MAX_VALUE_16BITS||this.centralDirRecords===u.MAX_VALUE_16BITS||this.centralDirSize===u.MAX_VALUE_32BITS||this.centralDirOffset===u.MAX_VALUE_32BITS){this.zip64=true;n=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR);if(n===-1){throw new Error("Corrupted zip : can't find the ZIP64 end of central directory locator")}this.reader.setIndex(n);this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR);this.readBlockZip64EndOfCentralLocator();this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir);this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_END);this.readBlockZip64EndOfCentral()}},prepareReader:function(n){var t=u.getTypeOf(n);if(t==="string"&&!o.uint8array){this.reader=new l(n,this.loadOptions.optimizedBinaryString)}else if(t==="nodebuffer"){this.reader=new i(n)}else{this.reader=new r(u.transformTo("uint8array",n))}},load:function(n){this.prepareReader(n);this.readEndOfCentral();this.readCentralDir();this.readLocalFiles()}};t.exports=f},{"./nodeBufferReader":22,"./object":23,"./signature":24,"./stringReader":25,"./support":27,"./uint8ArrayReader":28,"./utils":31,"./zipEntry":33}],33:[function(n,t,e){"use strict";var l=n("./stringReader");var i=n("./utils");var r=n("./compressedObject");var u=n("./object");var s=0;var a=3;function o(n,t){this.options=n;this.loadOptions=t}o.prototype={isEncrypted:function(){return(this.bitFlag&1)===1},useUTF8:function(){return(this.bitFlag&2048)===2048},prepareCompressedContent:function(n,t,e){return function(){var l=n.index;n.setIndex(t);var i=n.readData(e);n.setIndex(l);return i}},prepareContent:function(n,t,e,l,r){return function(){var n=i.transformTo(l.uncompressInputType,this.getCompressedContent());var t=l.uncompress(n);if(t.length!==r){throw new Error("Bug : uncompressed data size mismatch")}return t}},readLocalPart:function(n){var t,e;n.skip(22);this.fileNameLength=n.readInt(2);e=n.readInt(2);this.fileName=n.readString(this.fileNameLength);n.skip(e);if(this.compressedSize==-1||this.uncompressedSize==-1){throw new Error("Bug or corrupted zip : didn't get enough informations from the central directory "+"(compressedSize == -1 || uncompressedSize == -1)")}t=i.findCompression(this.compressionMethod);if(t===null){throw new Error("Corrupted zip : compression "+i.pretty(this.compressionMethod)+" unknown (inner file : "+this.fileName+")")}this.decompressed=new r;this.decompressed.compressedSize=this.compressedSize;this.decompressed.uncompressedSize=this.uncompressedSize;this.decompressed.crc32=this.crc32;this.decompressed.compressionMethod=this.compressionMethod;this.decompressed.getCompressedContent=this.prepareCompressedContent(n,n.index,this.compressedSize,t);this.decompressed.getContent=this.prepareContent(n,n.index,this.compressedSize,t,this.uncompressedSize);if(this.loadOptions.checkCRC32){this.decompressed=i.transformTo("string",this.decompressed.getContent());if(u.crc32(this.decompressed)!==this.crc32){throw new Error("Corrupted zip : CRC32 mismatch")}}},readCentralPart:function(n){this.versionMadeBy=n.readInt(2);this.versionNeeded=n.readInt(2);this.bitFlag=n.readInt(2);this.compressionMethod=n.readString(2);this.date=n.readDate();this.crc32=n.readInt(4);this.compressedSize=n.readInt(4);this.uncompressedSize=n.readInt(4);this.fileNameLength=n.readInt(2);this.extraFieldsLength=n.readInt(2);this.fileCommentLength=n.readInt(2);this.diskNumberStart=n.readInt(2);this.internalFileAttributes=n.readInt(2);this.externalFileAttributes=n.readInt(4);this.localHeaderOffset=n.readInt(4);if(this.isEncrypted()){throw new Error("Encrypted zip are not supported")}this.fileName=n.readString(this.fileNameLength);this.readExtraFields(n);this.parseZIP64ExtraField(n);this.fileComment=n.readString(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null;this.dosPermissions=null;var n=this.versionMadeBy>>8;this.dir=this.externalFileAttributes&16?true:false;if(n===s){this.dosPermissions=this.externalFileAttributes&63}if(n===a){this.unixPermissions=this.externalFileAttributes>>16&65535}if(!this.dir&&this.fileName.slice(-1)==="/"){this.dir=true}},parseZIP64ExtraField:function(n){if(!this.extraFields[1]){return}var t=new l(this.extraFields[1].value);if(this.uncompressedSize===i.MAX_VALUE_32BITS){this.uncompressedSize=t.readInt(8)}if(this.compressedSize===i.MAX_VALUE_32BITS){this.compressedSize=t.readInt(8)}if(this.localHeaderOffset===i.MAX_VALUE_32BITS){this.localHeaderOffset=t.readInt(8)}if(this.diskNumberStart===i.MAX_VALUE_32BITS){this.diskNumberStart=t.readInt(4)}},readExtraFields:function(n){var t=n.index,e,l,i;this.extraFields=this.extraFields||{};while(n.index<t+this.extraFieldsLength){e=n.readInt(2);l=n.readInt(2);i=n.readString(l);this.extraFields[e]={id:e,length:l,value:i}}},handleUTF8:function(){if(this.useUTF8()){this.fileName=u.utf8decode(this.fileName);this.fileComment=u.utf8decode(this.fileComment)}else{var n=this.findExtraFieldUnicodePath();if(n!==null){this.fileName=n}var t=this.findExtraFieldUnicodeComment();if(t!==null){this.fileComment=t}}},findExtraFieldUnicodePath:function(){var n=this.extraFields[28789];if(n){var t=new l(n.value);if(t.readInt(1)!==1){return null}if(u.crc32(this.fileName)!==t.readInt(4)){return null}return u.utf8decode(t.readString(n.length-5))}return null},findExtraFieldUnicodeComment:function(){var n=this.extraFields[25461];if(n){var t=new l(n.value);if(t.readInt(1)!==1){return null}
if(u.crc32(this.fileComment)!==t.readInt(4)){return null}return u.utf8decode(t.readString(n.length-5))}return null}};t.exports=o},{"./compressedObject":12,"./object":23,"./stringReader":25,"./utils":31}],34:[function(n,t,e){"use strict";var l=n("immediate");function i(){}var r={};var u=["REJECTED"];var s=["FULFILLED"];var a=["PENDING"];t.exports=e=o;function o(n){if(typeof n!=="function"){throw new TypeError("resolver must be a function")}this.state=a;this.queue=[];this.outcome=void 0;if(n!==i){d(this,n)}}o.prototype["catch"]=function(n){return this.then(null,n)};o.prototype.then=function(n,t){if(typeof n!=="function"&&this.state===s||typeof t!=="function"&&this.state===u){return this}var e=new this.constructor(i);if(this.state!==a){var l=this.state===s?n:t;f(e,l,this.outcome)}else{this.queue.push(new h(e,n,t))}return e};function h(n,t,e){this.promise=n;if(typeof t==="function"){this.onFulfilled=t;this.callFulfilled=this.otherCallFulfilled}if(typeof e==="function"){this.onRejected=e;this.callRejected=this.otherCallRejected}}h.prototype.callFulfilled=function(n){r.resolve(this.promise,n)};h.prototype.otherCallFulfilled=function(n){f(this.promise,this.onFulfilled,n)};h.prototype.callRejected=function(n){r.reject(this.promise,n)};h.prototype.otherCallRejected=function(n){f(this.promise,this.onRejected,n)};function f(n,t,e){l(function(){var l;try{l=t(e)}catch(t){return r.reject(n,t)}if(l===n){r.reject(n,new TypeError("Cannot resolve promise with itself"))}else{r.resolve(n,l)}})}r.resolve=function(n,t){var e=g(c,t);if(e.status==="error"){return r.reject(n,e.value)}var l=e.value;if(l){d(n,l)}else{n.state=s;n.outcome=t;var i=-1;var u=n.queue.length;while(++i<u){n.queue[i].callFulfilled(t)}}return n};r.reject=function(n,t){n.state=u;n.outcome=t;var e=-1;var l=n.queue.length;while(++e<l){n.queue[e].callRejected(t)}return n};function c(n){var t=n&&n.then;if(n&&typeof n==="object"&&typeof t==="function"){return function e(){t.apply(n,arguments)}}}function d(n,t){var e=false;function l(t){if(e){return}e=true;r.reject(n,t)}function i(t){if(e){return}e=true;r.resolve(n,t)}function u(){t(i,l)}var s=g(u);if(s.status==="error"){l(s.value)}}function g(n,t){var e={};try{e.value=n(t);e.status="success"}catch(n){e.status="error";e.value=n}return e}e.resolve=p;function p(n){if(n instanceof this){return n}return r.resolve(new this(i),n)}e.reject=v;function v(n){var t=new this(i);return r.reject(t,n)}e.all=m;function m(n){var t=this;if(Object.prototype.toString.call(n)!=="[object Array]"){return this.reject(new TypeError("must be an array"))}var e=n.length;var l=false;if(!e){return this.resolve([])}var u=new Array(e);var s=0;var a=-1;var o=new this(i);while(++a<e){h(n[a],a)}return o;function h(n,i){t.resolve(n).then(a,function(n){if(!l){l=true;r.reject(o,n)}});function a(n){u[i]=n;if(++s===e&&!l){l=true;r.resolve(o,u)}}}}e.race=y;function y(n){var t=this;if(Object.prototype.toString.call(n)!=="[object Array]"){return this.reject(new TypeError("must be an array"))}var e=n.length;var l=false;if(!e){return this.resolve([])}var u=-1;var s=new this(i);while(++u<e){a(n[u])}return s;function a(n){t.resolve(n).then(function(n){if(!l){l=true;r.resolve(s,n)}},function(n){if(!l){l=true;r.reject(s,n)}})}}},{immediate:9}],35:[function(n,t,e){(function(){if(typeof t==="object"&&t.exports){t.exports=r}else{this.LRUCache=r}function n(n,t){return Object.prototype.hasOwnProperty.call(n,t)}function e(){return 1}var l=false;function i(n){if(!l&&typeof n!=="string"&&typeof n!=="number"){l=true;console.error(new TypeError("LRU: key must be a string or number. Almost certainly a bug! "+typeof n).stack)}}function r(n){if(!(this instanceof r))return new r(n);if(typeof n==="number")n={max:n};if(!n)n={};this._max=n.max;if(!this._max||!(typeof this._max==="number")||this._max<=0)this._max=Infinity;this._lengthCalculator=n.length||e;if(typeof this._lengthCalculator!=="function")this._lengthCalculator=e;this._allowStale=n.stale||false;this._maxAge=n.maxAge||null;this._dispose=n.dispose;this.reset()}Object.defineProperty(r.prototype,"max",{set:function(n){if(!n||!(typeof n==="number")||n<=0)n=Infinity;this._max=n;if(this._length>this._max)o(this)},get:function(){return this._max},enumerable:true});Object.defineProperty(r.prototype,"lengthCalculator",{set:function(n){if(typeof n!=="function"){this._lengthCalculator=e;this._length=this._itemCount;for(var t in this._cache){this._cache[t].length=1}}else{this._lengthCalculator=n;this._length=0;for(var t in this._cache){this._cache[t].length=this._lengthCalculator(this._cache[t].value);this._length+=this._cache[t].length}}if(this._length>this._max)o(this)},get:function(){return this._lengthCalculator},enumerable:true});Object.defineProperty(r.prototype,"length",{get:function(){return this._length},enumerable:true});Object.defineProperty(r.prototype,"itemCount",{get:function(){return this._itemCount},enumerable:true});r.prototype.forEach=function(n,t){t=t||this;var e=0;var l=this._itemCount;for(var i=this._mru-1;i>=0&&e<l;i--)if(this._lruList[i]){e++;var r=this._lruList[i];if(s(this,r)){f(this,r);if(!this._allowStale)r=undefined}if(r){n.call(t,r.value,r.key,this)}}};r.prototype.keys=function(){var n=new Array(this._itemCount);var t=0;for(var e=this._mru-1;e>=0&&t<this._itemCount;e--)if(this._lruList[e]){var l=this._lruList[e];n[t++]=l.key}return n};r.prototype.values=function(){var n=new Array(this._itemCount);var t=0;for(var e=this._mru-1;e>=0&&t<this._itemCount;e--)if(this._lruList[e]){var l=this._lruList[e];n[t++]=l.value}return n};r.prototype.reset=function(){if(this._dispose&&this._cache){for(var n in this._cache){this._dispose(n,this._cache[n].value)}}this._cache=Object.create(null);this._lruList=Object.create(null);this._mru=0;this._lru=0;this._length=0;this._itemCount=0};r.prototype.dump=function(){var n=[];var t=0;for(var e=this._mru-1;e>=0&&t<this._itemCount;e--)if(this._lruList[e]){var l=this._lruList[e];if(!s(this,l)){++t;n.push({k:l.key,v:l.value,e:l.now+(l.maxAge||0)})}}return n};r.prototype.dumpLru=function(){return this._lruList};r.prototype.set=function(t,e,l){l=l||this._maxAge;i(t);var r=l?Date.now():0;var u=this._lengthCalculator(e);if(n(this._cache,t)){if(u>this._max){f(this,this._cache[t]);return false}if(this._dispose)this._dispose(t,this._cache[t].value);this._cache[t].now=r;this._cache[t].maxAge=l;this._cache[t].value=e;this._length+=u-this._cache[t].length;this._cache[t].length=u;this.get(t);if(this._length>this._max)o(this);return true}var s=new c(t,e,this._mru++,u,r,l);if(s.length>this._max){if(this._dispose)this._dispose(t,e);return false}this._length+=s.length;this._lruList[s.lu]=this._cache[t]=s;this._itemCount++;if(this._length>this._max)o(this);return true};r.prototype.has=function(t){i(t);if(!n(this._cache,t))return false;var e=this._cache[t];if(s(this,e)){return false}return true};r.prototype.get=function(n){i(n);return u(this,n,true)};r.prototype.peek=function(n){i(n);return u(this,n,false)};r.prototype.pop=function(){var n=this._lruList[this._lru];f(this,n);return n||null};r.prototype.del=function(n){i(n);f(this,this._cache[n])};r.prototype.load=function(n){this.reset();var t=Date.now();for(var e=n.length-1;e>=0;e--){var l=n[e];i(l.k);var r=l.e||0;if(r===0){this.set(l.k,l.v)}else{var u=r-t;if(u>0)this.set(l.k,l.v,u)}}};function u(n,t,e){i(t);var l=n._cache[t];if(l){if(s(n,l)){f(n,l);if(!n._allowStale)l=undefined}else{if(e)a(n,l)}if(l)l=l.value}return l}function s(n,t){if(!t||!t.maxAge&&!n._maxAge)return false;var e=false;var l=Date.now()-t.now;if(t.maxAge){e=l>t.maxAge}else{e=n._maxAge&&l>n._maxAge}return e}function a(n,t){h(n,t);t.lu=n._mru++;n._lruList[t.lu]=t}function o(n){while(n._lru<n._mru&&n._length>n._max)f(n,n._lruList[n._lru])}function h(n,t){delete n._lruList[t.lu];while(n._lru<n._mru&&!n._lruList[n._lru])n._lru++}function f(n,t){if(t){if(n._dispose)n._dispose(t.key,t.value);n._length-=t.length;n._itemCount--;delete n._cache[t.key];h(n,t)}}function c(n,t,e,l,i,r){this.key=n;this.value=t;this.lu=e;this.length=l;this.now=i;if(r)this.maxAge=r}})()},{}],36:[function(n,t,e){var l=6;var i="AJSAJS";var r="AFAFAF";var u=65;var s=73;var a=79;var o=86;var h=90;e.forward=function(n,t){t=t||5;return v(d({lat:n[1],lon:n[0]}),t)};e.inverse=function(n){var t=g(w(n.toUpperCase()));if(t.lat&&t.lon){return[t.lon,t.lat,t.lon,t.lat]}return[t.left,t.bottom,t.right,t.top]};e.toPoint=function(n){var t=g(w(n.toUpperCase()));if(t.lat&&t.lon){return[t.lon,t.lat]}return[(t.left+t.right)/2,(t.top+t.bottom)/2]};function f(n){return n*(Math.PI/180)}function c(n){return 180*(n/Math.PI)}function d(n){var t=n.lat;var e=n.lon;var l=6378137;var i=.00669438;var r=.9996;var u;var s;var a,o,h,c,d;var g=f(t);var v=f(e);var m;var y;y=Math.floor((e+180)/6)+1;if(e===180){y=60}if(t>=56&&t<64&&e>=3&&e<12){y=32}if(t>=72&&t<84){if(e>=0&&e<9){y=31}else if(e>=9&&e<21){y=33}else if(e>=21&&e<33){y=35}else if(e>=33&&e<42){y=37}}u=(y-1)*6-180+3;m=f(u);s=i/(1-i);a=l/Math.sqrt(1-i*Math.sin(g)*Math.sin(g));o=Math.tan(g)*Math.tan(g);h=s*Math.cos(g)*Math.cos(g);c=Math.cos(g)*(v-m);d=l*((1-i/4-3*i*i/64-5*i*i*i/256)*g-(3*i/8+3*i*i/32+45*i*i*i/1024)*Math.sin(2*g)+(15*i*i/256+45*i*i*i/1024)*Math.sin(4*g)-35*i*i*i/3072*Math.sin(6*g));var x=r*a*(c+(1-o+h)*c*c*c/6+(5-18*o+o*o+72*h-58*s)*c*c*c*c*c/120)+5e5;var w=r*(d+a*Math.tan(g)*(c*c/2+(5-o+9*h+4*h*h)*c*c*c*c/24+(61-58*o+o*o+600*h-330*s)*c*c*c*c*c*c/720));if(t<0){w+=1e7}return{northing:Math.round(w),easting:Math.round(x),zoneNumber:y,zoneLetter:p(t)}}function g(n){var t=n.northing;var e=n.easting;var l=n.zoneLetter;var i=n.zoneNumber;if(i<0||i>60){return null}var r=.9996;var u=6378137;var s=.00669438;var a;var o=(1-Math.sqrt(1-s))/(1+Math.sqrt(1-s));var h,f,d,p,v,m;var y;var x,w;var _=e-5e5;var M=t;if(l<"N"){M-=1e7}y=(i-1)*6-180+3;a=s/(1-s);m=M/r;x=m/(u*(1-s/4-3*s*s/64-5*s*s*s/256));w=x+(3*o/2-27*o*o*o/32)*Math.sin(2*x)+(21*o*o/16-55*o*o*o*o/32)*Math.sin(4*x)+151*o*o*o/96*Math.sin(6*x);h=u/Math.sqrt(1-s*Math.sin(w)*Math.sin(w));f=Math.tan(w)*Math.tan(w);d=a*Math.cos(w)*Math.cos(w);p=u*(1-s)/Math.pow(1-s*Math.sin(w)*Math.sin(w),1.5);v=_/(h*r);var E=w-h*Math.tan(w)/p*(v*v/2-(5+3*f+10*d-4*d*d-9*a)*v*v*v*v/24+(61+90*f+298*d+45*f*f-252*a-3*d*d)*v*v*v*v*v*v/720);E=c(E);var b=(v-(1+2*f+d)*v*v*v/6+(5-2*d+28*f-3*d*d+8*a+24*f*f)*v*v*v*v*v/120)/Math.cos(w);b=y+c(b);var C;if(n.accuracy){var I=g({northing:n.northing+n.accuracy,easting:n.easting+n.accuracy,zoneLetter:n.zoneLetter,zoneNumber:n.zoneNumber});C={top:I.lat,right:I.lon,bottom:E,left:b}}else{C={lat:E,lon:b}}return C}function p(n){var t="Z";if(84>=n&&n>=72){t="X"}else if(72>n&&n>=64){t="W"}else if(64>n&&n>=56){t="V"}else if(56>n&&n>=48){t="U"}else if(48>n&&n>=40){t="T"}else if(40>n&&n>=32){t="S"}else if(32>n&&n>=24){t="R"}else if(24>n&&n>=16){t="Q"}else if(16>n&&n>=8){t="P"}else if(8>n&&n>=0){t="N"}else if(0>n&&n>=-8){t="M"}else if(-8>n&&n>=-16){t="L"}else if(-16>n&&n>=-24){t="K"}else if(-24>n&&n>=-32){t="J"}else if(-32>n&&n>=-40){t="H"}else if(-40>n&&n>=-48){t="G"}else if(-48>n&&n>=-56){t="F"}else if(-56>n&&n>=-64){t="E"}else if(-64>n&&n>=-72){t="D"}else if(-72>n&&n>=-80){t="C"}return t}function v(n,t){var e="00000"+n.easting,l="00000"+n.northing;return n.zoneNumber+n.zoneLetter+m(n.easting,n.northing,n.zoneNumber)+e.substr(e.length-5,t)+l.substr(l.length-5,t)}function m(n,t,e){var l=y(e);var i=Math.floor(n/1e5);var r=Math.floor(t/1e5)%20;return x(i,r,l)}function y(n){var t=n%l;if(t===0){t=l}return t}function x(n,t,e){var l=e-1;var f=i.charCodeAt(l);var c=r.charCodeAt(l);var d=f+n-1;var g=c+t;var p=false;if(d>h){d=d-h+u-1;p=true}if(d===s||f<s&&d>s||(d>s||f<s)&&p){d++}if(d===a||f<a&&d>a||(d>a||f<a)&&p){d++;if(d===s){d++}}if(d>h){d=d-h+u-1}if(g>o){g=g-o+u-1;p=true}else{p=false}if(g===s||c<s&&g>s||(g>s||c<s)&&p){g++}if(g===a||c<a&&g>a||(g>a||c<a)&&p){g++;if(g===s){g++}}if(g>o){g=g-o+u-1}var v=String.fromCharCode(d)+String.fromCharCode(g);return v}function w(n){if(n&&n.length===0){throw"MGRSPoint coverting from nothing"}var t=n.length;var e=null;var l="";var i;var r=0;while(!/[A-Z]/.test(i=n.charAt(r))){if(r>=2){throw"MGRSPoint bad conversion from: "+n}l+=i;r++}var u=parseInt(l,10);if(r===0||r+3>t){throw"MGRSPoint bad conversion from: "+n}var s=n.charAt(r++);if(s<="A"||s==="B"||s==="Y"||s>="Z"||s==="I"||s==="O"){throw"MGRSPoint zone letter "+s+" not handled: "+n}e=n.substring(r,r+=2);var a=y(u);var o=_(e.charAt(0),a);var h=M(e.charAt(1),a);while(h<E(s)){h+=2e6}var f=t-r;if(f%2!==0){throw"MGRSPoint has to have an even number \nof digits after the zone letter and two 100km letters - front \nhalf for easting meters, second half for \nnorthing meters"+n}var c=f/2;var d=0;var g=0;var p,v,m,x,w;if(c>0){p=1e5/Math.pow(10,c);v=n.substring(r,r+c);d=parseFloat(v)*p;m=n.substring(r+c);g=parseFloat(m)*p}x=d+o;w=g+h;return{easting:x,northing:w,zoneLetter:s,zoneNumber:u,accuracy:p}}function _(n,t){var e=i.charCodeAt(t-1);var l=1e5;var r=false;while(e!==n.charCodeAt(0)){e++;if(e===s){e++}if(e===a){e++}if(e>h){if(r){throw"Bad character: "+n}e=u;r=true}l+=1e5}return l}function M(n,t){if(n>"V"){throw"MGRSPoint given invalid Northing "+n}var e=r.charCodeAt(t-1);var l=0;var i=false;while(e!==n.charCodeAt(0)){e++;if(e===s){e++}if(e===a){e++}if(e>o){if(i){throw"Bad character: "+n}e=u;i=true}l+=1e5}return l}function E(n){var t;switch(n){case"C":t=11e5;break;case"D":t=2e6;break;case"E":t=28e5;break;case"F":t=37e5;break;case"G":t=46e5;break;case"H":t=55e5;break;case"J":t=64e5;break;case"K":t=73e5;break;case"L":t=82e5;break;case"M":t=91e5;break;case"N":t=0;break;case"P":t=8e5;break;case"Q":t=17e5;break;case"R":t=26e5;break;case"S":t=35e5;break;case"T":t=44e5;break;case"U":t=53e5;break;case"V":t=62e5;break;case"W":t=7e6;break;case"X":t=79e5;break;default:t=-1}if(t>=0){return t}else{throw"Invalid zone letter: "+n}}},{}],37:[function(n,t,e){"use strict";var l=n("./lib/utils/common").assign;var i=n("./lib/deflate");var r=n("./lib/inflate");var u=n("./lib/zlib/constants");var s={};l(s,i,r,u);t.exports=s},{"./lib/deflate":38,"./lib/inflate":39,"./lib/utils/common":40,"./lib/zlib/constants":43}],38:[function(n,t,e){"use strict";var l=n("./zlib/deflate.js");var i=n("./utils/common");var r=n("./utils/strings");var u=n("./zlib/messages");var s=n("./zlib/zstream");var a=Object.prototype.toString;var o=0;var h=4;var f=0;var c=1;var d=2;var g=-1;var p=0;var v=8;var m=function(n){this.options=i.assign({level:g,method:v,chunkSize:16384,windowBits:15,memLevel:8,strategy:p,to:""},n||{});var t=this.options;if(t.raw&&t.windowBits>0){t.windowBits=-t.windowBits}else if(t.gzip&&t.windowBits>0&&t.windowBits<16){t.windowBits+=16}this.err=0;this.msg="";this.ended=false;this.chunks=[];this.strm=new s;this.strm.avail_out=0;var e=l.deflateInit2(this.strm,t.level,t.method,t.windowBits,t.memLevel,t.strategy);if(e!==f){throw new Error(u[e])}if(t.header){l.deflateSetHeader(this.strm,t.header)}};m.prototype.push=function(n,t){var e=this.strm;var u=this.options.chunkSize;var s,g;if(this.ended){return false}g=t===~~t?t:t===true?h:o;if(typeof n==="string"){e.input=r.string2buf(n)}else if(a.call(n)==="[object ArrayBuffer]"){e.input=new Uint8Array(n)}else{e.input=n}e.next_in=0;e.avail_in=e.input.length;do{if(e.avail_out===0){e.output=new i.Buf8(u);e.next_out=0;e.avail_out=u}s=l.deflate(e,g);if(s!==c&&s!==f){this.onEnd(s);this.ended=true;return false}if(e.avail_out===0||e.avail_in===0&&(g===h||g===d)){if(this.options.to==="string"){this.onData(r.buf2binstring(i.shrinkBuf(e.output,e.next_out)))}else{this.onData(i.shrinkBuf(e.output,e.next_out))}}}while((e.avail_in>0||e.avail_out===0)&&s!==c);if(g===h){s=l.deflateEnd(this.strm);this.onEnd(s);this.ended=true;return s===f}if(g===d){this.onEnd(f);e.avail_out=0;return true}return true};m.prototype.onData=function(n){this.chunks.push(n)};m.prototype.onEnd=function(n){if(n===f){if(this.options.to==="string"){this.result=this.chunks.join("")}else{this.result=i.flattenChunks(this.chunks)}}this.chunks=[];this.err=n;this.msg=this.strm.msg};function y(n,t){var e=new m(t);e.push(n,true);if(e.err){throw e.msg}return e.result}function x(n,t){t=t||{};t.raw=true;return y(n,t)}function w(n,t){t=t||{};t.gzip=true;return y(n,t)}e.Deflate=m;e.deflate=y;e.deflateRaw=x;e.gzip=w},{"./utils/common":40,"./utils/strings":41,"./zlib/deflate.js":45,"./zlib/messages":50,"./zlib/zstream":52}],39:[function(n,t,e){"use strict";var l=n("./zlib/inflate.js");var i=n("./utils/common");var r=n("./utils/strings");var u=n("./zlib/constants");var s=n("./zlib/messages");var a=n("./zlib/zstream");var o=n("./zlib/gzheader");var h=Object.prototype.toString;var f=function(n){this.options=i.assign({chunkSize:16384,windowBits:0,to:""},n||{});var t=this.options;if(t.raw&&t.windowBits>=0&&t.windowBits<16){t.windowBits=-t.windowBits;if(t.windowBits===0){t.windowBits=-15}}if(t.windowBits>=0&&t.windowBits<16&&!(n&&n.windowBits)){t.windowBits+=32}if(t.windowBits>15&&t.windowBits<48){if((t.windowBits&15)===0){t.windowBits|=15}}this.err=0;this.msg="";this.ended=false;this.chunks=[];this.strm=new a;this.strm.avail_out=0;var e=l.inflateInit2(this.strm,t.windowBits);if(e!==u.Z_OK){throw new Error(s[e])}this.header=new o;l.inflateGetHeader(this.strm,this.header)};f.prototype.push=function(n,t){var e=this.strm;var s=this.options.chunkSize;var a,o;var f,c,d;var g=false;if(this.ended){return false}o=t===~~t?t:t===true?u.Z_FINISH:u.Z_NO_FLUSH;if(typeof n==="string"){e.input=r.binstring2buf(n)}else if(h.call(n)==="[object ArrayBuffer]"){e.input=new Uint8Array(n)}else{e.input=n}e.next_in=0;e.avail_in=e.input.length;do{if(e.avail_out===0){e.output=new i.Buf8(s);e.next_out=0;e.avail_out=s}a=l.inflate(e,u.Z_NO_FLUSH);if(a===u.Z_BUF_ERROR&&g===true){a=u.Z_OK;g=false}if(a!==u.Z_STREAM_END&&a!==u.Z_OK){this.onEnd(a);this.ended=true;return false}if(e.next_out){if(e.avail_out===0||a===u.Z_STREAM_END||e.avail_in===0&&(o===u.Z_FINISH||o===u.Z_SYNC_FLUSH)){if(this.options.to==="string"){f=r.utf8border(e.output,e.next_out);c=e.next_out-f;d=r.buf2string(e.output,f);e.next_out=c;e.avail_out=s-c;if(c){i.arraySet(e.output,e.output,f,c,0)}this.onData(d)}else{this.onData(i.shrinkBuf(e.output,e.next_out))}}}if(e.avail_in===0&&e.avail_out===0){g=true}}while((e.avail_in>0||e.avail_out===0)&&a!==u.Z_STREAM_END);if(a===u.Z_STREAM_END){o=u.Z_FINISH}if(o===u.Z_FINISH){a=l.inflateEnd(this.strm);this.onEnd(a);this.ended=true;return a===u.Z_OK}if(o===u.Z_SYNC_FLUSH){this.onEnd(u.Z_OK);e.avail_out=0;return true}return true};f.prototype.onData=function(n){this.chunks.push(n)};f.prototype.onEnd=function(n){if(n===u.Z_OK){if(this.options.to==="string"){this.result=this.chunks.join("")}else{this.result=i.flattenChunks(this.chunks)}}this.chunks=[];this.err=n;this.msg=this.strm.msg};function c(n,t){var e=new f(t);e.push(n,true);if(e.err){throw e.msg}return e.result}function d(n,t){t=t||{};t.raw=true;return c(n,t)}e.Inflate=f;e.inflate=c;e.inflateRaw=d;e.ungzip=c},{"./utils/common":40,"./utils/strings":41,"./zlib/constants":43,"./zlib/gzheader":46,"./zlib/inflate.js":48,"./zlib/messages":50,"./zlib/zstream":52}],40:[function(n,t,e){"use strict";var l=typeof Uint8Array!=="undefined"&&typeof Uint16Array!=="undefined"&&typeof Int32Array!=="undefined";e.assign=function(n){var t=Array.prototype.slice.call(arguments,1);while(t.length){var e=t.shift();if(!e){continue}if(typeof e!=="object"){throw new TypeError(e+"must be non-object")}for(var l in e){if(e.hasOwnProperty(l)){n[l]=e[l]}}}return n};e.shrinkBuf=function(n,t){if(n.length===t){return n}if(n.subarray){return n.subarray(0,t)}n.length=t;return n};var i={arraySet:function(n,t,e,l,i){if(t.subarray&&n.subarray){n.set(t.subarray(e,e+l),i);return}for(var r=0;r<l;r++){n[i+r]=t[e+r]}},flattenChunks:function(n){var t,e,l,i,r,u;l=0;for(t=0,e=n.length;t<e;t++){l+=n[t].length}u=new Uint8Array(l);i=0;for(t=0,e=n.length;t<e;t++){r=n[t];u.set(r,i);i+=r.length}return u}};var r={arraySet:function(n,t,e,l,i){for(var r=0;r<l;r++){n[i+r]=t[e+r]}},flattenChunks:function(n){return[].concat.apply([],n)}};e.setTyped=function(n){if(n){e.Buf8=Uint8Array;e.Buf16=Uint16Array;e.Buf32=Int32Array;e.assign(e,i)}else{e.Buf8=Array;e.Buf16=Array;e.Buf32=Array;e.assign(e,r)}};e.setTyped(l)},{}],41:[function(n,t,e){"use strict";var l=n("./common");var i=true;var r=true;try{String.fromCharCode.apply(null,[0])}catch(n){i=false}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(n){r=false}var u=new l.Buf8(256);for(var s=0;s<256;s++){u[s]=s>=252?6:s>=248?5:s>=240?4:s>=224?3:s>=192?2:1}u[254]=u[254]=1;e.string2buf=function(n){var t,e,i,r,u,s=n.length,a=0;for(r=0;r<s;r++){e=n.charCodeAt(r);if((e&64512)===55296&&r+1<s){i=n.charCodeAt(r+1);if((i&64512)===56320){e=65536+(e-55296<<10)+(i-56320);r++}}a+=e<128?1:e<2048?2:e<65536?3:4}t=new l.Buf8(a);for(u=0,r=0;u<a;r++){e=n.charCodeAt(r);if((e&64512)===55296&&r+1<s){i=n.charCodeAt(r+1);if((i&64512)===56320){e=65536+(e-55296<<10)+(i-56320);r++}}if(e<128){t[u++]=e}else if(e<2048){t[u++]=192|e>>>6;t[u++]=128|e&63}else if(e<65536){t[u++]=224|e>>>12;t[u++]=128|e>>>6&63;t[u++]=128|e&63}else{t[u++]=240|e>>>18;t[u++]=128|e>>>12&63;t[u++]=128|e>>>6&63;t[u++]=128|e&63}}return t};function a(n,t){if(t<65537){if(n.subarray&&r||!n.subarray&&i){return String.fromCharCode.apply(null,l.shrinkBuf(n,t))}}var e="";for(var u=0;u<t;u++){e+=String.fromCharCode(n[u])}return e}e.buf2binstring=function(n){return a(n,n.length)};e.binstring2buf=function(n){var t=new l.Buf8(n.length);for(var e=0,i=t.length;e<i;e++){t[e]=n.charCodeAt(e)}return t};e.buf2string=function(n,t){var e,l,i,r;var s=t||n.length;var o=new Array(s*2);for(l=0,e=0;e<s;){i=n[e++];if(i<128){o[l++]=i;continue}r=u[i];if(r>4){o[l++]=65533;e+=r-1;continue}i&=r===2?31:r===3?15:7;while(r>1&&e<s){i=i<<6|n[e++]&63;r--}if(r>1){o[l++]=65533;continue}if(i<65536){o[l++]=i}else{i-=65536;o[l++]=55296|i>>10&1023;o[l++]=56320|i&1023}}return a(o,l)};e.utf8border=function(n,t){var e;t=t||n.length;if(t>n.length){t=n.length}e=t-1;while(e>=0&&(n[e]&192)===128){e--}if(e<0){return t}if(e===0){return t}return e+u[n[e]]>t?e:t}},{"./common":40}],42:[function(n,t,e){"use strict";function l(n,t,e,l){var i=n&65535|0,r=n>>>16&65535|0,u=0;while(e!==0){u=e>2e3?2e3:e;e-=u;do{i=i+t[l++]|0;r=r+i|0}while(--u);i%=65521;r%=65521}return i|r<<16|0}t.exports=l},{}],43:[function(n,t,e){t.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],44:[function(n,t,e){"use strict";function l(){var n,t=[];for(var e=0;e<256;e++){n=e;for(var l=0;l<8;l++){n=n&1?3988292384^n>>>1:n>>>1}t[e]=n}return t}var i=l();function r(n,t,e,l){var r=i,u=l+e;n=n^-1;for(var s=l;s<u;s++){n=n>>>8^r[(n^t[s])&255]}return n^-1}t.exports=r},{}],45:[function(n,t,e){"use strict";var l=n("../utils/common");var i=n("./trees");var r=n("./adler32");var u=n("./crc32");var s=n("./messages");var a=0;var o=1;var h=3;var f=4;var c=5;var d=0;var g=1;var p=-2;var v=-3;var m=-5;var y=-1;var x=1;var w=2;var _=3;var M=4;var E=0;var b=2;var C=8;var I=9;var S=15;var N=8;var P=29;var L=256;var R=L+1+P;var T=30;var O=19;var A=2*R+1;var k=15;var D=3;var F=258;var B=F+D+1;var G=32;var z=42;var q=69;var j=73;var U=91;var V=103;var Y=113;var X=666;var H=1;var W=2;var Z=3;var J=4;var K=3;function Q(n,t){n.msg=s[t];return t}function $(n){return(n<<1)-(n>4?9:0)}function nn(n){var t=n.length;while(--t>=0){n[t]=0}}function tn(n){var t=n.state;var e=t.pending;if(e>n.avail_out){e=n.avail_out}if(e===0){return}l.arraySet(n.output,t.pending_buf,t.pending_out,e,n.next_out);n.next_out+=e;t.pending_out+=e;n.total_out+=e;n.avail_out-=e;t.pending-=e;if(t.pending===0){t.pending_out=0}}function en(n,t){i._tr_flush_block(n,n.block_start>=0?n.block_start:-1,n.strstart-n.block_start,t);n.block_start=n.strstart;tn(n.strm)}function ln(n,t){n.pending_buf[n.pending++]=t}function rn(n,t){n.pending_buf[n.pending++]=t>>>8&255;n.pending_buf[n.pending++]=t&255}function un(n,t,e,i){var s=n.avail_in;if(s>i){s=i}if(s===0){return 0}n.avail_in-=s;l.arraySet(t,n.input,n.next_in,s,e);if(n.state.wrap===1){n.adler=r(n.adler,t,s,e)}else if(n.state.wrap===2){n.adler=u(n.adler,t,s,e)}n.next_in+=s;n.total_in+=s;return s}function sn(n,t){var e=n.max_chain_length;var l=n.strstart;var i;var r;var u=n.prev_length;var s=n.nice_match;var a=n.strstart>n.w_size-B?n.strstart-(n.w_size-B):0;var o=n.window;var h=n.w_mask;var f=n.prev;var c=n.strstart+F;var d=o[l+u-1];var g=o[l+u];if(n.prev_length>=n.good_match){e>>=2}if(s>n.lookahead){s=n.lookahead}do{i=t;if(o[i+u]!==g||o[i+u-1]!==d||o[i]!==o[l]||o[++i]!==o[l+1]){continue}l+=2;i++;do{}while(o[++l]===o[++i]&&o[++l]===o[++i]&&o[++l]===o[++i]&&o[++l]===o[++i]&&o[++l]===o[++i]&&o[++l]===o[++i]&&o[++l]===o[++i]&&o[++l]===o[++i]&&l<c);r=F-(c-l);l=c-F;if(r>u){n.match_start=t;u=r;if(r>=s){break}d=o[l+u-1];g=o[l+u]}}while((t=f[t&h])>a&&--e!==0);if(u<=n.lookahead){return u}return n.lookahead}function an(n){var t=n.w_size;var e,i,r,u,s;do{u=n.window_size-n.lookahead-n.strstart;if(n.strstart>=t+(t-B)){l.arraySet(n.window,n.window,t,t,0);n.match_start-=t;n.strstart-=t;n.block_start-=t;i=n.hash_size;e=i;do{r=n.head[--e];n.head[e]=r>=t?r-t:0}while(--i);i=t;e=i;do{r=n.prev[--e];n.prev[e]=r>=t?r-t:0}while(--i);u+=t}if(n.strm.avail_in===0){break}i=un(n.strm,n.window,n.strstart+n.lookahead,u);n.lookahead+=i;if(n.lookahead+n.insert>=D){s=n.strstart-n.insert;n.ins_h=n.window[s];n.ins_h=(n.ins_h<<n.hash_shift^n.window[s+1])&n.hash_mask;while(n.insert){n.ins_h=(n.ins_h<<n.hash_shift^n.window[s+D-1])&n.hash_mask;n.prev[s&n.w_mask]=n.head[n.ins_h];n.head[n.ins_h]=s;s++;n.insert--;if(n.lookahead+n.insert<D){break}}}}while(n.lookahead<B&&n.strm.avail_in!==0)}function on(n,t){var e=65535;if(e>n.pending_buf_size-5){e=n.pending_buf_size-5}for(;;){if(n.lookahead<=1){an(n);if(n.lookahead===0&&t===a){return H}if(n.lookahead===0){break}}n.strstart+=n.lookahead;n.lookahead=0;var l=n.block_start+e;if(n.strstart===0||n.strstart>=l){n.lookahead=n.strstart-l;n.strstart=l;en(n,false);if(n.strm.avail_out===0){return H}}if(n.strstart-n.block_start>=n.w_size-B){en(n,false);if(n.strm.avail_out===0){return H}}}n.insert=0;if(t===f){en(n,true);if(n.strm.avail_out===0){return Z}return J}if(n.strstart>n.block_start){en(n,false);if(n.strm.avail_out===0){return H}}return H}function hn(n,t){var e;var l;for(;;){if(n.lookahead<B){an(n);if(n.lookahead<B&&t===a){return H}if(n.lookahead===0){break}}e=0;if(n.lookahead>=D){n.ins_h=(n.ins_h<<n.hash_shift^n.window[n.strstart+D-1])&n.hash_mask;e=n.prev[n.strstart&n.w_mask]=n.head[n.ins_h];n.head[n.ins_h]=n.strstart}if(e!==0&&n.strstart-e<=n.w_size-B){n.match_length=sn(n,e)}if(n.match_length>=D){l=i._tr_tally(n,n.strstart-n.match_start,n.match_length-D);n.lookahead-=n.match_length;if(n.match_length<=n.max_lazy_match&&n.lookahead>=D){n.match_length--;do{n.strstart++;n.ins_h=(n.ins_h<<n.hash_shift^n.window[n.strstart+D-1])&n.hash_mask;e=n.prev[n.strstart&n.w_mask]=n.head[n.ins_h];n.head[n.ins_h]=n.strstart}while(--n.match_length!==0);n.strstart++}else{n.strstart+=n.match_length;n.match_length=0;n.ins_h=n.window[n.strstart];n.ins_h=(n.ins_h<<n.hash_shift^n.window[n.strstart+1])&n.hash_mask}}else{l=i._tr_tally(n,0,n.window[n.strstart]);n.lookahead--;n.strstart++}if(l){en(n,false);if(n.strm.avail_out===0){return H}}}n.insert=n.strstart<D-1?n.strstart:D-1;if(t===f){en(n,true);if(n.strm.avail_out===0){return Z}return J}if(n.last_lit){en(n,false);if(n.strm.avail_out===0){return H}}return W}function fn(n,t){var e;var l;var r;for(;;){if(n.lookahead<B){an(n);if(n.lookahead<B&&t===a){return H}if(n.lookahead===0){break}}e=0;if(n.lookahead>=D){n.ins_h=(n.ins_h<<n.hash_shift^n.window[n.strstart+D-1])&n.hash_mask;e=n.prev[n.strstart&n.w_mask]=n.head[n.ins_h];n.head[n.ins_h]=n.strstart}n.prev_length=n.match_length;n.prev_match=n.match_start;n.match_length=D-1;if(e!==0&&n.prev_length<n.max_lazy_match&&n.strstart-e<=n.w_size-B){n.match_length=sn(n,e);if(n.match_length<=5&&(n.strategy===x||n.match_length===D&&n.strstart-n.match_start>4096)){n.match_length=D-1}}if(n.prev_length>=D&&n.match_length<=n.prev_length){r=n.strstart+n.lookahead-D;l=i._tr_tally(n,n.strstart-1-n.prev_match,n.prev_length-D);n.lookahead-=n.prev_length-1;n.prev_length-=2;do{if(++n.strstart<=r){n.ins_h=(n.ins_h<<n.hash_shift^n.window[n.strstart+D-1])&n.hash_mask;e=n.prev[n.strstart&n.w_mask]=n.head[n.ins_h];n.head[n.ins_h]=n.strstart}}while(--n.prev_length!==0);n.match_available=0;n.match_length=D-1;n.strstart++;if(l){en(n,false);if(n.strm.avail_out===0){return H}}}else if(n.match_available){l=i._tr_tally(n,0,n.window[n.strstart-1]);if(l){en(n,false)}n.strstart++;n.lookahead--;if(n.strm.avail_out===0){return H}}else{n.match_available=1;n.strstart++;n.lookahead--}}if(n.match_available){l=i._tr_tally(n,0,n.window[n.strstart-1]);n.match_available=0}n.insert=n.strstart<D-1?n.strstart:D-1;if(t===f){en(n,true);if(n.strm.avail_out===0){return Z}return J}if(n.last_lit){en(n,false);if(n.strm.avail_out===0){return H}}return W}function cn(n,t){var e;var l;var r,u;var s=n.window;for(;;){if(n.lookahead<=F){an(n);if(n.lookahead<=F&&t===a){return H}if(n.lookahead===0){break}}n.match_length=0;if(n.lookahead>=D&&n.strstart>0){r=n.strstart-1;l=s[r];if(l===s[++r]&&l===s[++r]&&l===s[++r]){u=n.strstart+F;do{}while(l===s[++r]&&l===s[++r]&&l===s[++r]&&l===s[++r]&&l===s[++r]&&l===s[++r]&&l===s[++r]&&l===s[++r]&&r<u);n.match_length=F-(u-r);if(n.match_length>n.lookahead){n.match_length=n.lookahead}}}if(n.match_length>=D){e=i._tr_tally(n,1,n.match_length-D);n.lookahead-=n.match_length;n.strstart+=n.match_length;n.match_length=0}else{e=i._tr_tally(n,0,n.window[n.strstart]);n.lookahead--;n.strstart++}if(e){en(n,false);if(n.strm.avail_out===0){return H}}}n.insert=0;if(t===f){en(n,true);if(n.strm.avail_out===0){return Z}return J}if(n.last_lit){en(n,false);if(n.strm.avail_out===0){return H}}return W}function dn(n,t){var e;for(;;){if(n.lookahead===0){an(n);if(n.lookahead===0){if(t===a){return H}break}}n.match_length=0;e=i._tr_tally(n,0,n.window[n.strstart]);n.lookahead--;n.strstart++;if(e){en(n,false);if(n.strm.avail_out===0){return H}}}n.insert=0;if(t===f){en(n,true);if(n.strm.avail_out===0){return Z}return J}if(n.last_lit){en(n,false);if(n.strm.avail_out===0){return H}}return W}var gn=function(n,t,e,l,i){this.good_length=n;this.max_lazy=t;this.nice_length=e;this.max_chain=l;this.func=i};var pn;pn=[new gn(0,0,0,0,on),new gn(4,4,8,4,hn),new gn(4,5,16,8,hn),new gn(4,6,32,32,hn),new gn(4,4,16,16,fn),new gn(8,16,32,32,fn),new gn(8,16,128,128,fn),new gn(8,32,128,256,fn),new gn(32,128,258,1024,fn),new gn(32,258,258,4096,fn)];function vn(n){n.window_size=2*n.w_size;nn(n.head);n.max_lazy_match=pn[n.level].max_lazy;n.good_match=pn[n.level].good_length;n.nice_match=pn[n.level].nice_length;n.max_chain_length=pn[n.level].max_chain;n.strstart=0;n.block_start=0;n.lookahead=0;n.insert=0;n.match_length=n.prev_length=D-1;n.match_available=0;n.ins_h=0}function mn(){this.strm=null;this.status=0;this.pending_buf=null;this.pending_buf_size=0;this.pending_out=0;this.pending=0;this.wrap=0;this.gzhead=null;this.gzindex=0;this.method=C;this.last_flush=-1;this.w_size=0;this.w_bits=0;this.w_mask=0;this.window=null;this.window_size=0;this.prev=null;this.head=null;this.ins_h=0;this.hash_size=0;this.hash_bits=0;this.hash_mask=0;this.hash_shift=0;this.block_start=0;this.match_length=0;this.prev_match=0;this.match_available=0;this.strstart=0;this.match_start=0;this.lookahead=0;this.prev_length=0;this.max_chain_length=0;this.max_lazy_match=0;this.level=0;this.strategy=0;this.good_match=0;this.nice_match=0;this.dyn_ltree=new l.Buf16(A*2);this.dyn_dtree=new l.Buf16((2*T+1)*2);this.bl_tree=new l.Buf16((2*O+1)*2);nn(this.dyn_ltree);nn(this.dyn_dtree);nn(this.bl_tree);this.l_desc=null;this.d_desc=null;this.bl_desc=null;this.bl_count=new l.Buf16(k+1);this.heap=new l.Buf16(2*R+1);nn(this.heap);this.heap_len=0;this.heap_max=0;this.depth=new l.Buf16(2*R+1);nn(this.depth);this.l_buf=0;this.lit_bufsize=0;this.last_lit=0
;this.d_buf=0;this.opt_len=0;this.static_len=0;this.matches=0;this.insert=0;this.bi_buf=0;this.bi_valid=0}function yn(n){var t;if(!n||!n.state){return Q(n,p)}n.total_in=n.total_out=0;n.data_type=b;t=n.state;t.pending=0;t.pending_out=0;if(t.wrap<0){t.wrap=-t.wrap}t.status=t.wrap?z:Y;n.adler=t.wrap===2?0:1;t.last_flush=a;i._tr_init(t);return d}function xn(n){var t=yn(n);if(t===d){vn(n.state)}return t}function wn(n,t){if(!n||!n.state){return p}if(n.state.wrap!==2){return p}n.state.gzhead=t;return d}function _n(n,t,e,i,r,u){if(!n){return p}var s=1;if(t===y){t=6}if(i<0){s=0;i=-i}else if(i>15){s=2;i-=16}if(r<1||r>I||e!==C||i<8||i>15||t<0||t>9||u<0||u>M){return Q(n,p)}if(i===8){i=9}var a=new mn;n.state=a;a.strm=n;a.wrap=s;a.gzhead=null;a.w_bits=i;a.w_size=1<<a.w_bits;a.w_mask=a.w_size-1;a.hash_bits=r+7;a.hash_size=1<<a.hash_bits;a.hash_mask=a.hash_size-1;a.hash_shift=~~((a.hash_bits+D-1)/D);a.window=new l.Buf8(a.w_size*2);a.head=new l.Buf16(a.hash_size);a.prev=new l.Buf16(a.w_size);a.lit_bufsize=1<<r+6;a.pending_buf_size=a.lit_bufsize*4;a.pending_buf=new l.Buf8(a.pending_buf_size);a.d_buf=a.lit_bufsize>>1;a.l_buf=(1+2)*a.lit_bufsize;a.level=t;a.strategy=u;a.method=e;return xn(n)}function Mn(n,t){return _n(n,t,C,S,N,E)}function En(n,t){var e,l;var r,s;if(!n||!n.state||t>c||t<0){return n?Q(n,p):p}l=n.state;if(!n.output||!n.input&&n.avail_in!==0||l.status===X&&t!==f){return Q(n,n.avail_out===0?m:p)}l.strm=n;e=l.last_flush;l.last_flush=t;if(l.status===z){if(l.wrap===2){n.adler=0;ln(l,31);ln(l,139);ln(l,8);if(!l.gzhead){ln(l,0);ln(l,0);ln(l,0);ln(l,0);ln(l,0);ln(l,l.level===9?2:l.strategy>=w||l.level<2?4:0);ln(l,K);l.status=Y}else{ln(l,(l.gzhead.text?1:0)+(l.gzhead.hcrc?2:0)+(!l.gzhead.extra?0:4)+(!l.gzhead.name?0:8)+(!l.gzhead.comment?0:16));ln(l,l.gzhead.time&255);ln(l,l.gzhead.time>>8&255);ln(l,l.gzhead.time>>16&255);ln(l,l.gzhead.time>>24&255);ln(l,l.level===9?2:l.strategy>=w||l.level<2?4:0);ln(l,l.gzhead.os&255);if(l.gzhead.extra&&l.gzhead.extra.length){ln(l,l.gzhead.extra.length&255);ln(l,l.gzhead.extra.length>>8&255)}if(l.gzhead.hcrc){n.adler=u(n.adler,l.pending_buf,l.pending,0)}l.gzindex=0;l.status=q}}else{var v=C+(l.w_bits-8<<4)<<8;var y=-1;if(l.strategy>=w||l.level<2){y=0}else if(l.level<6){y=1}else if(l.level===6){y=2}else{y=3}v|=y<<6;if(l.strstart!==0){v|=G}v+=31-v%31;l.status=Y;rn(l,v);if(l.strstart!==0){rn(l,n.adler>>>16);rn(l,n.adler&65535)}n.adler=1}}if(l.status===q){if(l.gzhead.extra){r=l.pending;while(l.gzindex<(l.gzhead.extra.length&65535)){if(l.pending===l.pending_buf_size){if(l.gzhead.hcrc&&l.pending>r){n.adler=u(n.adler,l.pending_buf,l.pending-r,r)}tn(n);r=l.pending;if(l.pending===l.pending_buf_size){break}}ln(l,l.gzhead.extra[l.gzindex]&255);l.gzindex++}if(l.gzhead.hcrc&&l.pending>r){n.adler=u(n.adler,l.pending_buf,l.pending-r,r)}if(l.gzindex===l.gzhead.extra.length){l.gzindex=0;l.status=j}}else{l.status=j}}if(l.status===j){if(l.gzhead.name){r=l.pending;do{if(l.pending===l.pending_buf_size){if(l.gzhead.hcrc&&l.pending>r){n.adler=u(n.adler,l.pending_buf,l.pending-r,r)}tn(n);r=l.pending;if(l.pending===l.pending_buf_size){s=1;break}}if(l.gzindex<l.gzhead.name.length){s=l.gzhead.name.charCodeAt(l.gzindex++)&255}else{s=0}ln(l,s)}while(s!==0);if(l.gzhead.hcrc&&l.pending>r){n.adler=u(n.adler,l.pending_buf,l.pending-r,r)}if(s===0){l.gzindex=0;l.status=U}}else{l.status=U}}if(l.status===U){if(l.gzhead.comment){r=l.pending;do{if(l.pending===l.pending_buf_size){if(l.gzhead.hcrc&&l.pending>r){n.adler=u(n.adler,l.pending_buf,l.pending-r,r)}tn(n);r=l.pending;if(l.pending===l.pending_buf_size){s=1;break}}if(l.gzindex<l.gzhead.comment.length){s=l.gzhead.comment.charCodeAt(l.gzindex++)&255}else{s=0}ln(l,s)}while(s!==0);if(l.gzhead.hcrc&&l.pending>r){n.adler=u(n.adler,l.pending_buf,l.pending-r,r)}if(s===0){l.status=V}}else{l.status=V}}if(l.status===V){if(l.gzhead.hcrc){if(l.pending+2>l.pending_buf_size){tn(n)}if(l.pending+2<=l.pending_buf_size){ln(l,n.adler&255);ln(l,n.adler>>8&255);n.adler=0;l.status=Y}}else{l.status=Y}}if(l.pending!==0){tn(n);if(n.avail_out===0){l.last_flush=-1;return d}}else if(n.avail_in===0&&$(t)<=$(e)&&t!==f){return Q(n,m)}if(l.status===X&&n.avail_in!==0){return Q(n,m)}if(n.avail_in!==0||l.lookahead!==0||t!==a&&l.status!==X){var x=l.strategy===w?dn(l,t):l.strategy===_?cn(l,t):pn[l.level].func(l,t);if(x===Z||x===J){l.status=X}if(x===H||x===Z){if(n.avail_out===0){l.last_flush=-1}return d}if(x===W){if(t===o){i._tr_align(l)}else if(t!==c){i._tr_stored_block(l,0,0,false);if(t===h){nn(l.head);if(l.lookahead===0){l.strstart=0;l.block_start=0;l.insert=0}}}tn(n);if(n.avail_out===0){l.last_flush=-1;return d}}}if(t!==f){return d}if(l.wrap<=0){return g}if(l.wrap===2){ln(l,n.adler&255);ln(l,n.adler>>8&255);ln(l,n.adler>>16&255);ln(l,n.adler>>24&255);ln(l,n.total_in&255);ln(l,n.total_in>>8&255);ln(l,n.total_in>>16&255);ln(l,n.total_in>>24&255)}else{rn(l,n.adler>>>16);rn(l,n.adler&65535)}tn(n);if(l.wrap>0){l.wrap=-l.wrap}return l.pending!==0?d:g}function bn(n){var t;if(!n||!n.state){return p}t=n.state.status;if(t!==z&&t!==q&&t!==j&&t!==U&&t!==V&&t!==Y&&t!==X){return Q(n,p)}n.state=null;return t===Y?Q(n,v):d}e.deflateInit=Mn;e.deflateInit2=_n;e.deflateReset=xn;e.deflateResetKeep=yn;e.deflateSetHeader=wn;e.deflate=En;e.deflateEnd=bn;e.deflateInfo="pako deflate (from Nodeca project)"},{"../utils/common":40,"./adler32":42,"./crc32":44,"./messages":50,"./trees":51}],46:[function(n,t,e){"use strict";function l(){this.text=0;this.time=0;this.xflags=0;this.os=0;this.extra=null;this.extra_len=0;this.name="";this.comment="";this.hcrc=0;this.done=false}t.exports=l},{}],47:[function(n,t,e){"use strict";var l=30;var i=12;t.exports=function n(t,e){var r;var u;var s;var a;var o;var h;var f;var c;var d;var g;var p;var v;var m;var y;var x;var w;var _;var M;var E;var b;var C;var I;var S;var N,P;r=t.state;u=t.next_in;N=t.input;s=u+(t.avail_in-5);a=t.next_out;P=t.output;o=a-(e-t.avail_out);h=a+(t.avail_out-257);f=r.dmax;c=r.wsize;d=r.whave;g=r.wnext;p=r.window;v=r.hold;m=r.bits;y=r.lencode;x=r.distcode;w=(1<<r.lenbits)-1;_=(1<<r.distbits)-1;n:do{if(m<15){v+=N[u++]<<m;m+=8;v+=N[u++]<<m;m+=8}M=y[v&w];t:for(;;){E=M>>>24;v>>>=E;m-=E;E=M>>>16&255;if(E===0){P[a++]=M&65535}else if(E&16){b=M&65535;E&=15;if(E){if(m<E){v+=N[u++]<<m;m+=8}b+=v&(1<<E)-1;v>>>=E;m-=E}if(m<15){v+=N[u++]<<m;m+=8;v+=N[u++]<<m;m+=8}M=x[v&_];e:for(;;){E=M>>>24;v>>>=E;m-=E;E=M>>>16&255;if(E&16){C=M&65535;E&=15;if(m<E){v+=N[u++]<<m;m+=8;if(m<E){v+=N[u++]<<m;m+=8}}C+=v&(1<<E)-1;if(C>f){t.msg="invalid distance too far back";r.mode=l;break n}v>>>=E;m-=E;E=a-o;if(C>E){E=C-E;if(E>d){if(r.sane){t.msg="invalid distance too far back";r.mode=l;break n}}I=0;S=p;if(g===0){I+=c-E;if(E<b){b-=E;do{P[a++]=p[I++]}while(--E);I=a-C;S=P}}else if(g<E){I+=c+g-E;E-=g;if(E<b){b-=E;do{P[a++]=p[I++]}while(--E);I=0;if(g<b){E=g;b-=E;do{P[a++]=p[I++]}while(--E);I=a-C;S=P}}}else{I+=g-E;if(E<b){b-=E;do{P[a++]=p[I++]}while(--E);I=a-C;S=P}}while(b>2){P[a++]=S[I++];P[a++]=S[I++];P[a++]=S[I++];b-=3}if(b){P[a++]=S[I++];if(b>1){P[a++]=S[I++]}}}else{I=a-C;do{P[a++]=P[I++];P[a++]=P[I++];P[a++]=P[I++];b-=3}while(b>2);if(b){P[a++]=P[I++];if(b>1){P[a++]=P[I++]}}}}else if((E&64)===0){M=x[(M&65535)+(v&(1<<E)-1)];continue e}else{t.msg="invalid distance code";r.mode=l;break n}break}}else if((E&64)===0){M=y[(M&65535)+(v&(1<<E)-1)];continue t}else if(E&32){r.mode=i;break n}else{t.msg="invalid literal/length code";r.mode=l;break n}break}}while(u<s&&a<h);b=m>>3;u-=b;m-=b<<3;v&=(1<<m)-1;t.next_in=u;t.next_out=a;t.avail_in=u<s?5+(s-u):5-(u-s);t.avail_out=a<h?257+(h-a):257-(a-h);r.hold=v;r.bits=m;return}},{}],48:[function(n,t,e){"use strict";var l=n("../utils/common");var i=n("./adler32");var r=n("./crc32");var u=n("./inffast");var s=n("./inftrees");var a=0;var o=1;var h=2;var f=4;var c=5;var d=6;var g=0;var p=1;var v=2;var m=-2;var y=-3;var x=-4;var w=-5;var _=8;var M=1;var E=2;var b=3;var C=4;var I=5;var S=6;var N=7;var P=8;var L=9;var R=10;var T=11;var O=12;var A=13;var k=14;var D=15;var F=16;var B=17;var G=18;var z=19;var q=20;var j=21;var U=22;var V=23;var Y=24;var X=25;var H=26;var W=27;var Z=28;var J=29;var K=30;var Q=31;var $=32;var nn=852;var tn=592;var en=15;var ln=en;function rn(n){return(n>>>24&255)+(n>>>8&65280)+((n&65280)<<8)+((n&255)<<24)}function un(){this.mode=0;this.last=false;this.wrap=0;this.havedict=false;this.flags=0;this.dmax=0;this.check=0;this.total=0;this.head=null;this.wbits=0;this.wsize=0;this.whave=0;this.wnext=0;this.window=null;this.hold=0;this.bits=0;this.length=0;this.offset=0;this.extra=0;this.lencode=null;this.distcode=null;this.lenbits=0;this.distbits=0;this.ncode=0;this.nlen=0;this.ndist=0;this.have=0;this.next=null;this.lens=new l.Buf16(320);this.work=new l.Buf16(288);this.lendyn=null;this.distdyn=null;this.sane=0;this.back=0;this.was=0}function sn(n){var t;if(!n||!n.state){return m}t=n.state;n.total_in=n.total_out=t.total=0;n.msg="";if(t.wrap){n.adler=t.wrap&1}t.mode=M;t.last=0;t.havedict=0;t.dmax=32768;t.head=null;t.hold=0;t.bits=0;t.lencode=t.lendyn=new l.Buf32(nn);t.distcode=t.distdyn=new l.Buf32(tn);t.sane=1;t.back=-1;return g}function an(n){var t;if(!n||!n.state){return m}t=n.state;t.wsize=0;t.whave=0;t.wnext=0;return sn(n)}function on(n,t){var e;var l;if(!n||!n.state){return m}l=n.state;if(t<0){e=0;t=-t}else{e=(t>>4)+1;if(t<48){t&=15}}if(t&&(t<8||t>15)){return m}if(l.window!==null&&l.wbits!==t){l.window=null}l.wrap=e;l.wbits=t;return an(n)}function hn(n,t){var e;var l;if(!n){return m}l=new un;n.state=l;l.window=null;e=on(n,t);if(e!==g){n.state=null}return e}function fn(n){return hn(n,ln)}var cn=true;var dn,gn;function pn(n){if(cn){var t;dn=new l.Buf32(512);gn=new l.Buf32(32);t=0;while(t<144){n.lens[t++]=8}while(t<256){n.lens[t++]=9}while(t<280){n.lens[t++]=7}while(t<288){n.lens[t++]=8}s(o,n.lens,0,288,dn,0,n.work,{bits:9});t=0;while(t<32){n.lens[t++]=5}s(h,n.lens,0,32,gn,0,n.work,{bits:5});cn=false}n.lencode=dn;n.lenbits=9;n.distcode=gn;n.distbits=5}function vn(n,t,e,i){var r;var u=n.state;if(u.window===null){u.wsize=1<<u.wbits;u.wnext=0;u.whave=0;u.window=new l.Buf8(u.wsize)}if(i>=u.wsize){l.arraySet(u.window,t,e-u.wsize,u.wsize,0);u.wnext=0;u.whave=u.wsize}else{r=u.wsize-u.wnext;if(r>i){r=i}l.arraySet(u.window,t,e-i,r,u.wnext);i-=r;if(i){l.arraySet(u.window,t,e-i,i,0);u.wnext=i;u.whave=u.wsize}else{u.wnext+=r;if(u.wnext===u.wsize){u.wnext=0}if(u.whave<u.wsize){u.whave+=r}}}return 0}function mn(n,t){var e;var nn,tn;var en;var ln;var un,sn;var an;var on;var hn,fn;var cn;var dn;var gn;var mn=0;var yn,xn,wn;var _n,Mn,En;var bn;var Cn;var In=new l.Buf8(4);var Sn;var Nn;var Pn=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!n||!n.state||!n.output||!n.input&&n.avail_in!==0){return m}e=n.state;if(e.mode===O){e.mode=A}ln=n.next_out;tn=n.output;sn=n.avail_out;en=n.next_in;nn=n.input;un=n.avail_in;an=e.hold;on=e.bits;hn=un;fn=sn;Cn=g;n:for(;;){switch(e.mode){case M:if(e.wrap===0){e.mode=A;break}while(on<16){if(un===0){break n}un--;an+=nn[en++]<<on;on+=8}if(e.wrap&2&&an===35615){e.check=0;In[0]=an&255;In[1]=an>>>8&255;e.check=r(e.check,In,2,0);an=0;on=0;e.mode=E;break}e.flags=0;if(e.head){e.head.done=false}if(!(e.wrap&1)||(((an&255)<<8)+(an>>8))%31){n.msg="incorrect header check";e.mode=K;break}if((an&15)!==_){n.msg="unknown compression method";e.mode=K;break}an>>>=4;on-=4;bn=(an&15)+8;if(e.wbits===0){e.wbits=bn}else if(bn>e.wbits){n.msg="invalid window size";e.mode=K;break}e.dmax=1<<bn;n.adler=e.check=1;e.mode=an&512?R:O;an=0;on=0;break;case E:while(on<16){if(un===0){break n}un--;an+=nn[en++]<<on;on+=8}e.flags=an;if((e.flags&255)!==_){n.msg="unknown compression method";e.mode=K;break}if(e.flags&57344){n.msg="unknown header flags set";e.mode=K;break}if(e.head){e.head.text=an>>8&1}if(e.flags&512){In[0]=an&255;In[1]=an>>>8&255;e.check=r(e.check,In,2,0)}an=0;on=0;e.mode=b;case b:while(on<32){if(un===0){break n}un--;an+=nn[en++]<<on;on+=8}if(e.head){e.head.time=an}if(e.flags&512){In[0]=an&255;In[1]=an>>>8&255;In[2]=an>>>16&255;In[3]=an>>>24&255;e.check=r(e.check,In,4,0)}an=0;on=0;e.mode=C;case C:while(on<16){if(un===0){break n}un--;an+=nn[en++]<<on;on+=8}if(e.head){e.head.xflags=an&255;e.head.os=an>>8}if(e.flags&512){In[0]=an&255;In[1]=an>>>8&255;e.check=r(e.check,In,2,0)}an=0;on=0;e.mode=I;case I:if(e.flags&1024){while(on<16){if(un===0){break n}un--;an+=nn[en++]<<on;on+=8}e.length=an;if(e.head){e.head.extra_len=an}if(e.flags&512){In[0]=an&255;In[1]=an>>>8&255;e.check=r(e.check,In,2,0)}an=0;on=0}else if(e.head){e.head.extra=null}e.mode=S;case S:if(e.flags&1024){cn=e.length;if(cn>un){cn=un}if(cn){if(e.head){bn=e.head.extra_len-e.length;if(!e.head.extra){e.head.extra=new Array(e.head.extra_len)}l.arraySet(e.head.extra,nn,en,cn,bn)}if(e.flags&512){e.check=r(e.check,nn,cn,en)}un-=cn;en+=cn;e.length-=cn}if(e.length){break n}}e.length=0;e.mode=N;case N:if(e.flags&2048){if(un===0){break n}cn=0;do{bn=nn[en+cn++];if(e.head&&bn&&e.length<65536){e.head.name+=String.fromCharCode(bn)}}while(bn&&cn<un);if(e.flags&512){e.check=r(e.check,nn,cn,en)}un-=cn;en+=cn;if(bn){break n}}else if(e.head){e.head.name=null}e.length=0;e.mode=P;case P:if(e.flags&4096){if(un===0){break n}cn=0;do{bn=nn[en+cn++];if(e.head&&bn&&e.length<65536){e.head.comment+=String.fromCharCode(bn)}}while(bn&&cn<un);if(e.flags&512){e.check=r(e.check,nn,cn,en)}un-=cn;en+=cn;if(bn){break n}}else if(e.head){e.head.comment=null}e.mode=L;case L:if(e.flags&512){while(on<16){if(un===0){break n}un--;an+=nn[en++]<<on;on+=8}if(an!==(e.check&65535)){n.msg="header crc mismatch";e.mode=K;break}an=0;on=0}if(e.head){e.head.hcrc=e.flags>>9&1;e.head.done=true}n.adler=e.check=0;e.mode=O;break;case R:while(on<32){if(un===0){break n}un--;an+=nn[en++]<<on;on+=8}n.adler=e.check=rn(an);an=0;on=0;e.mode=T;case T:if(e.havedict===0){n.next_out=ln;n.avail_out=sn;n.next_in=en;n.avail_in=un;e.hold=an;e.bits=on;return v}n.adler=e.check=1;e.mode=O;case O:if(t===c||t===d){break n}case A:if(e.last){an>>>=on&7;on-=on&7;e.mode=W;break}while(on<3){if(un===0){break n}un--;an+=nn[en++]<<on;on+=8}e.last=an&1;an>>>=1;on-=1;switch(an&3){case 0:e.mode=k;break;case 1:pn(e);e.mode=q;if(t===d){an>>>=2;on-=2;break n}break;case 2:e.mode=B;break;case 3:n.msg="invalid block type";e.mode=K}an>>>=2;on-=2;break;case k:an>>>=on&7;on-=on&7;while(on<32){if(un===0){break n}un--;an+=nn[en++]<<on;on+=8}if((an&65535)!==(an>>>16^65535)){n.msg="invalid stored block lengths";e.mode=K;break}e.length=an&65535;an=0;on=0;e.mode=D;if(t===d){break n}case D:e.mode=F;case F:cn=e.length;if(cn){if(cn>un){cn=un}if(cn>sn){cn=sn}if(cn===0){break n}l.arraySet(tn,nn,en,cn,ln);un-=cn;en+=cn;sn-=cn;ln+=cn;e.length-=cn;break}e.mode=O;break;case B:while(on<14){if(un===0){break n}un--;an+=nn[en++]<<on;on+=8}e.nlen=(an&31)+257;an>>>=5;on-=5;e.ndist=(an&31)+1;an>>>=5;on-=5;e.ncode=(an&15)+4;an>>>=4;on-=4;if(e.nlen>286||e.ndist>30){n.msg="too many length or distance symbols";e.mode=K;break}e.have=0;e.mode=G;case G:while(e.have<e.ncode){while(on<3){if(un===0){break n}un--;an+=nn[en++]<<on;on+=8}e.lens[Pn[e.have++]]=an&7;an>>>=3;on-=3}while(e.have<19){e.lens[Pn[e.have++]]=0}e.lencode=e.lendyn;e.lenbits=7;Sn={bits:e.lenbits};Cn=s(a,e.lens,0,19,e.lencode,0,e.work,Sn);e.lenbits=Sn.bits;if(Cn){n.msg="invalid code lengths set";e.mode=K;break}e.have=0;e.mode=z;case z:while(e.have<e.nlen+e.ndist){for(;;){mn=e.lencode[an&(1<<e.lenbits)-1];yn=mn>>>24;xn=mn>>>16&255;wn=mn&65535;if(yn<=on){break}if(un===0){break n}un--;an+=nn[en++]<<on;on+=8}if(wn<16){an>>>=yn;on-=yn;e.lens[e.have++]=wn}else{if(wn===16){Nn=yn+2;while(on<Nn){if(un===0){break n}un--;an+=nn[en++]<<on;on+=8}an>>>=yn;on-=yn;if(e.have===0){n.msg="invalid bit length repeat";e.mode=K;break}bn=e.lens[e.have-1];cn=3+(an&3);an>>>=2;on-=2}else if(wn===17){Nn=yn+3;while(on<Nn){if(un===0){break n}un--;an+=nn[en++]<<on;on+=8}an>>>=yn;on-=yn;bn=0;cn=3+(an&7);an>>>=3;on-=3}else{Nn=yn+7;while(on<Nn){if(un===0){break n}un--;an+=nn[en++]<<on;on+=8}an>>>=yn;on-=yn;bn=0;cn=11+(an&127);an>>>=7;on-=7}if(e.have+cn>e.nlen+e.ndist){n.msg="invalid bit length repeat";e.mode=K;break}while(cn--){e.lens[e.have++]=bn}}}if(e.mode===K){break}if(e.lens[256]===0){n.msg="invalid code -- missing end-of-block";e.mode=K;break}e.lenbits=9;Sn={bits:e.lenbits};Cn=s(o,e.lens,0,e.nlen,e.lencode,0,e.work,Sn);e.lenbits=Sn.bits;if(Cn){n.msg="invalid literal/lengths set";e.mode=K;break}e.distbits=6;e.distcode=e.distdyn;Sn={bits:e.distbits};Cn=s(h,e.lens,e.nlen,e.ndist,e.distcode,0,e.work,Sn);e.distbits=Sn.bits;if(Cn){n.msg="invalid distances set";e.mode=K;break}e.mode=q;if(t===d){break n}case q:e.mode=j;case j:if(un>=6&&sn>=258){n.next_out=ln;n.avail_out=sn;n.next_in=en;n.avail_in=un;e.hold=an;e.bits=on;u(n,fn);ln=n.next_out;tn=n.output;sn=n.avail_out;en=n.next_in;nn=n.input;un=n.avail_in;an=e.hold;on=e.bits;if(e.mode===O){e.back=-1}break}e.back=0;for(;;){mn=e.lencode[an&(1<<e.lenbits)-1];yn=mn>>>24;xn=mn>>>16&255;wn=mn&65535;if(yn<=on){break}if(un===0){break n}un--;an+=nn[en++]<<on;on+=8}if(xn&&(xn&240)===0){_n=yn;Mn=xn;En=wn;for(;;){mn=e.lencode[En+((an&(1<<_n+Mn)-1)>>_n)];yn=mn>>>24;xn=mn>>>16&255;wn=mn&65535;if(_n+yn<=on){break}if(un===0){break n}un--;an+=nn[en++]<<on;on+=8}an>>>=_n;on-=_n;e.back+=_n}an>>>=yn;on-=yn;e.back+=yn;e.length=wn;if(xn===0){e.mode=H;break}if(xn&32){e.back=-1;e.mode=O;break}if(xn&64){n.msg="invalid literal/length code";e.mode=K;break}e.extra=xn&15;e.mode=U;case U:if(e.extra){Nn=e.extra;while(on<Nn){if(un===0){break n}un--;an+=nn[en++]<<on;on+=8}e.length+=an&(1<<e.extra)-1;an>>>=e.extra;on-=e.extra;e.back+=e.extra}e.was=e.length;e.mode=V;case V:for(;;){mn=e.distcode[an&(1<<e.distbits)-1];yn=mn>>>24;xn=mn>>>16&255;wn=mn&65535;if(yn<=on){break}if(un===0){break n}un--;an+=nn[en++]<<on;on+=8}if((xn&240)===0){_n=yn;Mn=xn;En=wn;for(;;){mn=e.distcode[En+((an&(1<<_n+Mn)-1)>>_n)];yn=mn>>>24;xn=mn>>>16&255;wn=mn&65535;if(_n+yn<=on){break}if(un===0){break n}un--;an+=nn[en++]<<on;on+=8}an>>>=_n;on-=_n;e.back+=_n}an>>>=yn;on-=yn;e.back+=yn;if(xn&64){n.msg="invalid distance code";e.mode=K;break}e.offset=wn;e.extra=xn&15;e.mode=Y;case Y:if(e.extra){Nn=e.extra;while(on<Nn){if(un===0){break n}un--;an+=nn[en++]<<on;on+=8}e.offset+=an&(1<<e.extra)-1;an>>>=e.extra;on-=e.extra;e.back+=e.extra}if(e.offset>e.dmax){n.msg="invalid distance too far back";e.mode=K;break}e.mode=X;case X:if(sn===0){break n}cn=fn-sn;if(e.offset>cn){cn=e.offset-cn;if(cn>e.whave){if(e.sane){n.msg="invalid distance too far back";e.mode=K;break}}if(cn>e.wnext){cn-=e.wnext;dn=e.wsize-cn}else{dn=e.wnext-cn}if(cn>e.length){cn=e.length}gn=e.window}else{gn=tn;dn=ln-e.offset;cn=e.length}if(cn>sn){cn=sn}sn-=cn;e.length-=cn;do{tn[ln++]=gn[dn++]}while(--cn);if(e.length===0){e.mode=j}break;case H:if(sn===0){break n}tn[ln++]=e.length;sn--;e.mode=j;break;case W:if(e.wrap){while(on<32){if(un===0){break n}un--;an|=nn[en++]<<on;on+=8}fn-=sn;n.total_out+=fn;e.total+=fn;if(fn){n.adler=e.check=e.flags?r(e.check,tn,fn,ln-fn):i(e.check,tn,fn,ln-fn)}fn=sn;if((e.flags?an:rn(an))!==e.check){n.msg="incorrect data check";e.mode=K;break}an=0;on=0}e.mode=Z;case Z:if(e.wrap&&e.flags){while(on<32){if(un===0){break n}un--;an+=nn[en++]<<on;on+=8}if(an!==(e.total&4294967295)){n.msg="incorrect length check";e.mode=K;break}an=0;on=0}e.mode=J;case J:Cn=p;break n;case K:Cn=y;break n;case Q:return x;case $:default:return m}}n.next_out=ln;n.avail_out=sn;n.next_in=en;n.avail_in=un;e.hold=an;e.bits=on;if(e.wsize||fn!==n.avail_out&&e.mode<K&&(e.mode<W||t!==f)){if(vn(n,n.output,n.next_out,fn-n.avail_out)){e.mode=Q;return x}}hn-=n.avail_in;fn-=n.avail_out;n.total_in+=hn;n.total_out+=fn;e.total+=fn;if(e.wrap&&fn){n.adler=e.check=e.flags?r(e.check,tn,fn,n.next_out-fn):i(e.check,tn,fn,n.next_out-fn)}n.data_type=e.bits+(e.last?64:0)+(e.mode===O?128:0)+(e.mode===q||e.mode===D?256:0);if((hn===0&&fn===0||t===f)&&Cn===g){Cn=w}return Cn}function yn(n){if(!n||!n.state){return m}var t=n.state;if(t.window){t.window=null}n.state=null;return g}function xn(n,t){var e;if(!n||!n.state){return m}e=n.state;if((e.wrap&2)===0){return m}e.head=t;t.done=false;return g}e.inflateReset=an;e.inflateReset2=on;e.inflateResetKeep=sn;e.inflateInit=fn;e.inflateInit2=hn;e.inflate=mn;e.inflateEnd=yn;e.inflateGetHeader=xn;e.inflateInfo="pako inflate (from Nodeca project)"},{"../utils/common":40,"./adler32":42,"./crc32":44,"./inffast":47,"./inftrees":49}],49:[function(n,t,e){"use strict";var l=n("../utils/common");var i=15;var r=852;var u=592;var s=0;var a=1;var o=2;var h=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0];var f=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78];var c=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0];var d=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];t.exports=function n(t,e,g,p,v,m,y,x){var w=x.bits;var _=0;var M=0;var E=0,b=0;var C=0;var I=0;var S=0;var N=0;var P=0;var L=0;var R;var T;var O;var A;var k;var D=null;var F=0;var B;var G=new l.Buf16(i+1);var z=new l.Buf16(i+1);var q=null;var j=0;var U,V,Y;for(_=0;_<=i;_++){G[_]=0}for(M=0;M<p;M++){G[e[g+M]]++}C=w;for(b=i;b>=1;b--){if(G[b]!==0){break}}if(C>b){C=b}if(b===0){v[m++]=1<<24|64<<16|0;v[m++]=1<<24|64<<16|0;x.bits=1;return 0}for(E=1;E<b;E++){if(G[E]!==0){break}}if(C<E){C=E}N=1;for(_=1;_<=i;_++){N<<=1;N-=G[_];if(N<0){return-1}}if(N>0&&(t===s||b!==1)){return-1}z[1]=0;for(_=1;_<i;_++){z[_+1]=z[_]+G[_]}for(M=0;M<p;M++){if(e[g+M]!==0){y[z[e[g+M]]++]=M}}if(t===s){D=q=y;B=19}else if(t===a){D=h;F-=257;q=f;j-=257;B=256}else{D=c;q=d;B=-1}L=0;M=0;_=E;k=m;I=C;S=0;O=-1;P=1<<C;A=P-1;if(t===a&&P>r||t===o&&P>u){return 1}var X=0;for(;;){X++;U=_-S;if(y[M]<B){V=0;Y=y[M]}else if(y[M]>B){V=q[j+y[M]];Y=D[F+y[M]]}else{V=32+64;Y=0}R=1<<_-S;T=1<<I;E=T;do{T-=R;v[k+(L>>S)+T]=U<<24|V<<16|Y|0}while(T!==0);R=1<<_-1;while(L&R){R>>=1}if(R!==0){L&=R-1;L+=R}else{L=0}M++;if(--G[_]===0){if(_===b){break}_=e[g+y[M]]}if(_>C&&(L&A)!==O){if(S===0){S=C}k+=E;I=_-S;N=1<<I;while(I+S<b){N-=G[I+S];if(N<=0){break}I++;N<<=1}P+=1<<I;if(t===a&&P>r||t===o&&P>u){return 1}O=L&A;v[O]=C<<24|I<<16|k-m|0}}if(L!==0){v[k+L]=_-S<<24|64<<16|0}x.bits=C;return 0}},{"../utils/common":40}],50:[function(n,t,e){"use strict";t.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},{}],51:[function(n,t,e){"use strict";var l=n("../utils/common");var i=4;var r=0;var u=1;var s=2;function a(n){var t=n.length;while(--t>=0){n[t]=0}}var o=0;var h=1;var f=2;var c=3;var d=258;var g=29;var p=256;var v=p+1+g;var m=30;var y=19;var x=2*v+1;var w=15;var _=16;var M=7;var E=256;var b=16;var C=17;var I=18;var S=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];var N=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];var P=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];var L=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];var R=512;var T=new Array((v+2)*2);a(T);var O=new Array(m*2);a(O);var A=new Array(R);a(A);var k=new Array(d-c+1);a(k);var D=new Array(g);a(D);var F=new Array(m);a(F);var B=function(n,t,e,l,i){this.static_tree=n;this.extra_bits=t;this.extra_base=e;this.elems=l;this.max_length=i;this.has_stree=n&&n.length};var G;var z;var q;var j=function(n,t){this.dyn_tree=n;this.max_code=0;this.stat_desc=t};function U(n){return n<256?A[n]:A[256+(n>>>7)]}function V(n,t){n.pending_buf[n.pending++]=t&255;n.pending_buf[n.pending++]=t>>>8&255}function Y(n,t,e){if(n.bi_valid>_-e){n.bi_buf|=t<<n.bi_valid&65535;V(n,n.bi_buf);n.bi_buf=t>>_-n.bi_valid;n.bi_valid+=e-_}else{n.bi_buf|=t<<n.bi_valid&65535;n.bi_valid+=e}}function X(n,t,e){Y(n,e[t*2],e[t*2+1])}function H(n,t){var e=0;do{e|=n&1;n>>>=1;e<<=1}while(--t>0);return e>>>1}function W(n){if(n.bi_valid===16){V(n,n.bi_buf);n.bi_buf=0;n.bi_valid=0}else if(n.bi_valid>=8){n.pending_buf[n.pending++]=n.bi_buf&255;n.bi_buf>>=8;n.bi_valid-=8}}function Z(n,t){var e=t.dyn_tree;var l=t.max_code;var i=t.stat_desc.static_tree;var r=t.stat_desc.has_stree;var u=t.stat_desc.extra_bits;var s=t.stat_desc.extra_base;var a=t.stat_desc.max_length;var o;var h,f;var c;var d;var g;var p=0;for(c=0;c<=w;c++){n.bl_count[c]=0}e[n.heap[n.heap_max]*2+1]=0;for(o=n.heap_max+1;o<x;o++){h=n.heap[o];c=e[e[h*2+1]*2+1]+1;if(c>a){c=a;p++}e[h*2+1]=c;if(h>l){continue}n.bl_count[c]++;d=0;if(h>=s){d=u[h-s]}g=e[h*2];n.opt_len+=g*(c+d);if(r){n.static_len+=g*(i[h*2+1]+d)}}if(p===0){return}do{c=a-1;while(n.bl_count[c]===0){c--}n.bl_count[c]--;n.bl_count[c+1]+=2;n.bl_count[a]--;p-=2}while(p>0);for(c=a;c!==0;c--){h=n.bl_count[c];while(h!==0){f=n.heap[--o];if(f>l){continue}if(e[f*2+1]!==c){n.opt_len+=(c-e[f*2+1])*e[f*2];e[f*2+1]=c}h--}}}function J(n,t,e){var l=new Array(w+1);var i=0;var r;var u;for(r=1;r<=w;r++){l[r]=i=i+e[r-1]<<1}for(u=0;u<=t;u++){var s=n[u*2+1];if(s===0){continue}n[u*2]=H(l[s]++,s)}}function K(){var n;var t;var e;var l;var i;var r=new Array(w+1);e=0;for(l=0;l<g-1;l++){D[l]=e;for(n=0;n<1<<S[l];n++){k[e++]=l}}k[e-1]=l;i=0;for(l=0;l<16;l++){F[l]=i;for(n=0;n<1<<N[l];n++){A[i++]=l}}i>>=7;for(;l<m;l++){F[l]=i<<7;for(n=0;n<1<<N[l]-7;n++){A[256+i++]=l}}for(t=0;t<=w;t++){r[t]=0}n=0;while(n<=143){T[n*2+1]=8;n++;r[8]++}while(n<=255){T[n*2+1]=9;n++;r[9]++}while(n<=279){T[n*2+1]=7;n++;r[7]++}while(n<=287){T[n*2+1]=8;n++;r[8]++}J(T,v+1,r);for(n=0;n<m;n++){O[n*2+1]=5;O[n*2]=H(n,5)}G=new B(T,S,p+1,v,w);z=new B(O,N,0,m,w);q=new B(new Array(0),P,0,y,M)}function Q(n){var t;for(t=0;t<v;t++){n.dyn_ltree[t*2]=0}for(t=0;t<m;t++){n.dyn_dtree[t*2]=0}for(t=0;t<y;t++){n.bl_tree[t*2]=0}n.dyn_ltree[E*2]=1;n.opt_len=n.static_len=0;n.last_lit=n.matches=0}function $(n){if(n.bi_valid>8){V(n,n.bi_buf)}else if(n.bi_valid>0){n.pending_buf[n.pending++]=n.bi_buf}n.bi_buf=0;n.bi_valid=0}function nn(n,t,e,i){$(n);if(i){V(n,e);V(n,~e)}l.arraySet(n.pending_buf,n.window,t,e,n.pending);n.pending+=e}function tn(n,t,e,l){var i=t*2;var r=e*2;return n[i]<n[r]||n[i]===n[r]&&l[t]<=l[e]}function en(n,t,e){var l=n.heap[e];var i=e<<1;while(i<=n.heap_len){if(i<n.heap_len&&tn(t,n.heap[i+1],n.heap[i],n.depth)){i++}if(tn(t,l,n.heap[i],n.depth)){break}n.heap[e]=n.heap[i];e=i;i<<=1}n.heap[e]=l}function ln(n,t,e){var l;var i;var r=0;var u;var s;if(n.last_lit!==0){do{l=n.pending_buf[n.d_buf+r*2]<<8|n.pending_buf[n.d_buf+r*2+1];i=n.pending_buf[n.l_buf+r];r++;if(l===0){X(n,i,t)}else{u=k[i];X(n,u+p+1,t);s=S[u];if(s!==0){i-=D[u];Y(n,i,s)}l--;u=U(l);X(n,u,e);s=N[u];if(s!==0){l-=F[u];Y(n,l,s)}}}while(r<n.last_lit)}X(n,E,t)}function rn(n,t){var e=t.dyn_tree;var l=t.stat_desc.static_tree;var i=t.stat_desc.has_stree;var r=t.stat_desc.elems;var u,s;var a=-1;var o;n.heap_len=0;n.heap_max=x;for(u=0;u<r;u++){if(e[u*2]!==0){n.heap[++n.heap_len]=a=u;n.depth[u]=0}else{e[u*2+1]=0}}while(n.heap_len<2){o=n.heap[++n.heap_len]=a<2?++a:0;e[o*2]=1;n.depth[o]=0;n.opt_len--;if(i){n.static_len-=l[o*2+1]}}t.max_code=a;for(u=n.heap_len>>1;u>=1;u--){en(n,e,u)}o=r;do{u=n.heap[1];n.heap[1]=n.heap[n.heap_len--];en(n,e,1);s=n.heap[1];n.heap[--n.heap_max]=u;n.heap[--n.heap_max]=s;e[o*2]=e[u*2]+e[s*2];n.depth[o]=(n.depth[u]>=n.depth[s]?n.depth[u]:n.depth[s])+1;e[u*2+1]=e[s*2+1]=o;n.heap[1]=o++;en(n,e,1)}while(n.heap_len>=2);n.heap[--n.heap_max]=n.heap[1];Z(n,t);J(e,a,n.bl_count)}function un(n,t,e){var l;var i=-1;var r;var u=t[0*2+1];var s=0;var a=7;var o=4;if(u===0){a=138;o=3}t[(e+1)*2+1]=65535;for(l=0;l<=e;l++){r=u;u=t[(l+1)*2+1];if(++s<a&&r===u){continue}else if(s<o){n.bl_tree[r*2]+=s}else if(r!==0){if(r!==i){n.bl_tree[r*2]++}n.bl_tree[b*2]++}else if(s<=10){n.bl_tree[C*2]++}else{n.bl_tree[I*2]++}s=0;i=r;if(u===0){a=138;o=3}else if(r===u){a=6;o=3}else{a=7;o=4}}}function sn(n,t,e){var l;var i=-1;var r;var u=t[0*2+1];var s=0;var a=7;var o=4;if(u===0){a=138;o=3}for(l=0;l<=e;l++){r=u;u=t[(l+1)*2+1];if(++s<a&&r===u){continue}else if(s<o){do{X(n,r,n.bl_tree)}while(--s!==0)}else if(r!==0){if(r!==i){X(n,r,n.bl_tree);s--}X(n,b,n.bl_tree);Y(n,s-3,2)}else if(s<=10){X(n,C,n.bl_tree);Y(n,s-3,3)}else{X(n,I,n.bl_tree);Y(n,s-11,7)}s=0;i=r;if(u===0){a=138;o=3}else if(r===u){a=6;o=3}else{a=7;o=4}}}function an(n){var t;un(n,n.dyn_ltree,n.l_desc.max_code);un(n,n.dyn_dtree,n.d_desc.max_code);rn(n,n.bl_desc);for(t=y-1;t>=3;t--){if(n.bl_tree[L[t]*2+1]!==0){break}}n.opt_len+=3*(t+1)+5+5+4;return t}function on(n,t,e,l){var i;Y(n,t-257,5);Y(n,e-1,5);Y(n,l-4,4);for(i=0;i<l;i++){Y(n,n.bl_tree[L[i]*2+1],3)}sn(n,n.dyn_ltree,t-1);sn(n,n.dyn_dtree,e-1)}function hn(n){var t=4093624447;var e;for(e=0;e<=31;e++,t>>>=1){if(t&1&&n.dyn_ltree[e*2]!==0){return r}}if(n.dyn_ltree[9*2]!==0||n.dyn_ltree[10*2]!==0||n.dyn_ltree[13*2]!==0){return u}for(e=32;e<p;e++){if(n.dyn_ltree[e*2]!==0){return u}}return r}var fn=false;function cn(n){if(!fn){K();fn=true}n.l_desc=new j(n.dyn_ltree,G);n.d_desc=new j(n.dyn_dtree,z);n.bl_desc=new j(n.bl_tree,q);n.bi_buf=0;n.bi_valid=0;Q(n)}function dn(n,t,e,l){Y(n,(o<<1)+(l?1:0),3);nn(n,t,e,true)}function gn(n){Y(n,h<<1,3);X(n,E,T);W(n)}function pn(n,t,e,l){var r,u;var a=0;if(n.level>0){if(n.strm.data_type===s){n.strm.data_type=hn(n)}rn(n,n.l_desc);rn(n,n.d_desc);a=an(n);r=n.opt_len+3+7>>>3;u=n.static_len+3+7>>>3;if(u<=r){r=u}}else{r=u=e+5}if(e+4<=r&&t!==-1){dn(n,t,e,l)}else if(n.strategy===i||u===r){Y(n,(h<<1)+(l?1:0),3);ln(n,T,O)}else{Y(n,(f<<1)+(l?1:0),3);on(n,n.l_desc.max_code+1,n.d_desc.max_code+1,a+1);ln(n,n.dyn_ltree,n.dyn_dtree)}Q(n);if(l){$(n)}}function vn(n,t,e){n.pending_buf[n.d_buf+n.last_lit*2]=t>>>8&255;n.pending_buf[n.d_buf+n.last_lit*2+1]=t&255;n.pending_buf[n.l_buf+n.last_lit]=e&255;n.last_lit++;if(t===0){n.dyn_ltree[e*2]++}else{n.matches++;t--;n.dyn_ltree[(k[e]+p+1)*2]++;n.dyn_dtree[U(t)*2]++}return n.last_lit===n.lit_bufsize-1}e._tr_init=cn;e._tr_stored_block=dn;e._tr_flush_block=pn;e._tr_tally=vn;e._tr_align=gn},{"../utils/common":40}],52:[function(n,t,e){"use strict";function l(){this.input=null;this.next_in=0;this.avail_in=0;this.total_in=0;this.output=null;this.next_out=0;this.avail_out=0;this.total_out=0;this.msg="";this.state=null;this.data_type=2;this.adler=0}t.exports=l},{}],53:[function(n,t,e){function l(n){var t=new DataView(n);var e={};e.lastUpdated=new Date(t.getUint8(1,true)+1900,t.getUint8(2,true),t.getUint8(3,true));e.records=t.getUint32(4,true);e.headerLen=t.getUint16(8,true);e.recLen=t.getUint16(10,true);return e}function i(n,t){var e=new DataView(n);var l=[];var i=32;while(i<t){var u=n.slice(i,i+11);var a=s.decode(u,{stream:true});u=null;var o=String.fromCharCode.apply(this,new Uint8Array(n,i,11)).replace(/\0|\s+$/g,"");if(r(a)){o=a}l.push({name:o,dataType:String.fromCharCode(e.getUint8(i+11)),len:e.getUint8(i+16),decimal:e.getUint8(i+17)});if(e.getUint8(i+32)===13){break}else{i+=32}}return l}function r(n){var t=/[\u4E00-\u9FA5\uF900-\uFA2D]/;return t.test(n)}function u(n){var t=/[\uFF00-\uFFEF]/;return t.test(n)}var s=new TextDecoder("gb2312");function a(n,t,e,l){var i=new Uint8Array(n,t,e);var u=n.slice(t,t+e);var a=s.decode(u,{stream:true});u=null;var o=String.fromCharCode.apply(this,i).replace(/\0|\s+$/g,"");if(r(a)){o=a}switch(l){case"N":case"F":case"O":return parseFloat(o,10);case"D":return new Date(o.slice(0,4),parseInt(o.slice(4,6),10)-1,o.slice(6,8));case"L":return o.toLowerCase()==="y"||o.toLowerCase()==="t";default:return o}}function o(n,t,e){var l={};var i=0;var r=e.length;var u;var s;while(i<r){s=e[i];u=a(n,t,s.len,s.dataType);t+=s.len;if(typeof u!=="undefined"){l[s.name]=u}i++}return l}t.exports=function(n){var t=l(n);var e=i(n,t.headerLen-1);var r=(e.length+1<<5)+2;var u=t.recLen;var s=t.records;var a=[];while(s){a.push(o(n,r,e));r+=u;s--}return a}},{}],54:[function(n,t,e){var l=n("mgrs");function i(n,t,e){if(!(this instanceof i)){return new i(n,t,e)}if(Array.isArray(n)){this.x=n[0];this.y=n[1];this.z=n[2]||0}else if(typeof n==="object"){this.x=n.x;this.y=n.y;this.z=n.z||0}else if(typeof n==="string"&&typeof t==="undefined"){var l=n.split(",");this.x=parseFloat(l[0],10);this.y=parseFloat(l[1],10);this.z=parseFloat(l[2],10)||0}else{this.x=n;this.y=t;this.z=e||0}console.warn("proj4.Point will be removed in version 3, use proj4.toPoint")}i.fromMGRS=function(n){return new i(l.toPoint(n))};i.prototype.toMGRS=function(n){return l.forward([this.x,this.y],n)};t.exports=i},{mgrs:36}],
55:[function(n,t,e){var l=n("./parseCode");var i=n("./extend");var r=n("./projections");var u=n("./deriveConstants");function s(n,t){if(!(this instanceof s)){return new s(n)}t=t||function(n){if(n){throw n}};var e=l(n);if(typeof e!=="object"){t(n);return}var r=u(e);var a=s.projections.get(r.projName);if(a){i(this,r);i(this,a);this.init();t(null,this)}else{t(n)}}s.projections=r;s.projections.start();t.exports=s},{"./deriveConstants":86,"./extend":87,"./parseCode":91,"./projections":93}],56:[function(n,t,e){t.exports=function(n,t,e){var l=e.x,i=e.y,r=e.z||0;var u,s,a;for(a=0;a<3;a++){if(t&&a===2&&e.z===undefined){continue}if(a===0){u=l;s="x"}else if(a===1){u=i;s="y"}else{u=r;s="z"}switch(n.axis[a]){case"e":e[s]=u;break;case"w":e[s]=-u;break;case"n":e[s]=u;break;case"s":e[s]=-u;break;case"u":if(e[s]!==undefined){e.z=u}break;case"d":if(e[s]!==undefined){e.z=-u}break;default:return null}}return e}},{}],57:[function(n,t,e){var l=Math.PI/2;var i=n("./sign");t.exports=function(n){return Math.abs(n)<l?n:n-i(n)*Math.PI}},{"./sign":74}],58:[function(n,t,e){var l=Math.PI*2;var i=3.14159265359;var r=n("./sign");t.exports=function(n){return Math.abs(n)<=i?n:n-r(n)*l}},{"./sign":74}],59:[function(n,t,e){t.exports=function(n){if(Math.abs(n)>1){n=n>1?1:-1}return Math.asin(n)}},{}],60:[function(n,t,e){t.exports=function(n){return 1-.25*n*(1+n/16*(3+1.25*n))}},{}],61:[function(n,t,e){t.exports=function(n){return.375*n*(1+.25*n*(1+.46875*n))}},{}],62:[function(n,t,e){t.exports=function(n){return.05859375*n*n*(1+.75*n)}},{}],63:[function(n,t,e){t.exports=function(n){return n*n*n*(35/3072)}},{}],64:[function(n,t,e){t.exports=function(n,t,e){var l=t*e;return n/Math.sqrt(1-l*l)}},{}],65:[function(n,t,e){t.exports=function(n,t,e,l,i){var r;var u;r=n/t;for(var s=0;s<15;s++){u=(n-(t*r-e*Math.sin(2*r)+l*Math.sin(4*r)-i*Math.sin(6*r)))/(t-2*e*Math.cos(2*r)+4*l*Math.cos(4*r)-6*i*Math.cos(6*r));r+=u;if(Math.abs(u)<=1e-10){return r}}return NaN}},{}],66:[function(n,t,e){var l=Math.PI/2;t.exports=function(n,t){var e=1-(1-n*n)/(2*n)*Math.log((1-n)/(1+n));if(Math.abs(Math.abs(t)-e)<1e-6){if(t<0){return-1*l}else{return l}}var i=Math.asin(.5*t);var r;var u;var s;var a;for(var o=0;o<30;o++){u=Math.sin(i);s=Math.cos(i);a=n*u;r=Math.pow(1-a*a,2)/(2*s)*(t/(1-n*n)-u/(1-a*a)+.5/n*Math.log((1-a)/(1+a)));i+=r;if(Math.abs(r)<=1e-10){return i}}return NaN}},{}],67:[function(n,t,e){t.exports=function(n,t,e,l,i){return n*i-t*Math.sin(2*i)+e*Math.sin(4*i)-l*Math.sin(6*i)}},{}],68:[function(n,t,e){t.exports=function(n,t,e){var l=n*t;return e/Math.sqrt(1-l*l)}},{}],69:[function(n,t,e){var l=Math.PI/2;t.exports=function(n,t){var e=.5*n;var i,r;var u=l-2*Math.atan(t);for(var s=0;s<=15;s++){i=n*Math.sin(u);r=l-2*Math.atan(t*Math.pow((1-i)/(1+i),e))-u;u+=r;if(Math.abs(r)<=1e-10){return u}}return-9999}},{}],70:[function(n,t,e){var l=1;var i=.25;var r=.046875;var u=.01953125;var s=.01068115234375;var a=.75;var o=.46875;var h=.013020833333333334;var f=.007120768229166667;var c=.3645833333333333;var d=.005696614583333333;var g=.3076171875;t.exports=function(n){var t=[];t[0]=l-n*(i+n*(r+n*(u+n*s)));t[1]=n*(a-n*(r+n*(u+n*s)));var e=n*n;t[2]=e*(o-n*(h+n*f));e*=n;t[3]=e*(c-n*d);t[4]=e*n*g;return t}},{}],71:[function(n,t,e){var l=n("./pj_mlfn");var i=1e-10;var r=20;t.exports=function(n,t,e){var u=1/(1-t);var s=n;for(var a=r;a;--a){var o=Math.sin(s);var h=1-t*o*o;h=(l(s,o,Math.cos(s),e)-n)*(h*Math.sqrt(h))*u;s-=h;if(Math.abs(h)<i){return s}}return s}},{"./pj_mlfn":72}],72:[function(n,t,e){t.exports=function(n,t,e,l){e*=t;t*=t;return l[0]*n-e*(l[1]+t*(l[2]+t*(l[3]+t*l[4])))}},{}],73:[function(n,t,e){t.exports=function(n,t){var e;if(n>1e-7){e=n*t;return(1-n*n)*(t/(1-e*e)-.5/n*Math.log((1-e)/(1+e)))}else{return 2*t}}},{}],74:[function(n,t,e){t.exports=function(n){return n<0?-1:1}},{}],75:[function(n,t,e){t.exports=function(n,t){return Math.pow((1-n)/(1+n),t)}},{}],76:[function(n,t,e){t.exports=function(n){var t={x:n[0],y:n[1]};if(n.length>2){t.z=n[2]}if(n.length>3){t.m=n[3]}return t}},{}],77:[function(n,t,e){var l=Math.PI/2;t.exports=function(n,t,e){var i=n*e;var r=.5*n;i=Math.pow((1-i)/(1+i),r);return Math.tan(.5*(l-t))/i}},{}],78:[function(n,t,e){e.wgs84={towgs84:"0,0,0",ellipse:"WGS84",datumName:"WGS84"};e.ch1903={towgs84:"674.374,15.056,405.346",ellipse:"bessel",datumName:"swiss"};e.ggrs87={towgs84:"-199.87,74.79,246.62",ellipse:"GRS80",datumName:"Greek_Geodetic_Reference_System_1987"};e.nad83={towgs84:"0,0,0",ellipse:"GRS80",datumName:"North_American_Datum_1983"};e.nad27={nadgrids:"@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat",ellipse:"clrk66",datumName:"North_American_Datum_1927"};e.potsdam={towgs84:"606.0,23.0,413.0",ellipse:"bessel",datumName:"Potsdam Rauenberg 1950 DHDN"};e.carthage={towgs84:"-263.0,6.0,431.0",ellipse:"clark80",datumName:"Carthage 1934 Tunisia"};e.hermannskogel={towgs84:"653.0,-212.0,449.0",ellipse:"bessel",datumName:"Hermannskogel"};e.ire65={towgs84:"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15",ellipse:"mod_airy",datumName:"Ireland 1965"};e.rassadiran={towgs84:"-133.63,-157.5,-158.62",ellipse:"intl",datumName:"Rassadiran"};e.nzgd49={towgs84:"59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993",ellipse:"intl",datumName:"New Zealand Geodetic Datum 1949"};e.osgb36={towgs84:"446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894",ellipse:"airy",datumName:"Airy 1830"};e.s_jtsk={towgs84:"589,76,480",ellipse:"bessel",datumName:"S-JTSK (Ferro)"};e.beduaram={towgs84:"-106,-87,188",ellipse:"clrk80",datumName:"Beduaram"};e.gunung_segara={towgs84:"-403,684,41",ellipse:"bessel",datumName:"Gunung Segara Jakarta"};e.rnb72={towgs84:"106.869,-52.2978,103.724,-0.33657,0.456955,-1.84218,1",ellipse:"intl",datumName:"Reseau National Belge 1972"}},{}],79:[function(n,t,e){e.MERIT={a:6378137,rf:298.257,ellipseName:"MERIT 1983"};e.SGS85={a:6378136,rf:298.257,ellipseName:"Soviet Geodetic System 85"};e.GRS80={a:6378137,rf:298.257222101,ellipseName:"GRS 1980(IUGG, 1980)"};e.IAU76={a:6378140,rf:298.257,ellipseName:"IAU 1976"};e.airy={a:6377563.396,b:6356256.91,ellipseName:"Airy 1830"};e.APL4={a:6378137,rf:298.25,ellipseName:"Appl. Physics. 1965"};e.NWL9D={a:6378145,rf:298.25,ellipseName:"Naval Weapons Lab., 1965"};e.mod_airy={a:6377340.189,b:6356034.446,ellipseName:"Modified Airy"};e.andrae={a:6377104.43,rf:300,ellipseName:"Andrae 1876 (Den., Iclnd.)"};e.aust_SA={a:6378160,rf:298.25,ellipseName:"Australian Natl & S. Amer. 1969"};e.GRS67={a:6378160,rf:298.247167427,ellipseName:"GRS 67(IUGG 1967)"};e.bessel={a:6377397.155,rf:299.1528128,ellipseName:"Bessel 1841"};e.bess_nam={a:6377483.865,rf:299.1528128,ellipseName:"Bessel 1841 (Namibia)"};e.clrk66={a:6378206.4,b:6356583.8,ellipseName:"Clarke 1866"};e.clrk80={a:6378249.145,rf:293.4663,ellipseName:"Clarke 1880 mod."};e.clrk58={a:6378293.645208759,rf:294.2606763692654,ellipseName:"Clarke 1858"};e.CPM={a:6375738.7,rf:334.29,ellipseName:"Comm. des Poids et Mesures 1799"};e.delmbr={a:6376428,rf:311.5,ellipseName:"Delambre 1810 (Belgium)"};e.engelis={a:6378136.05,rf:298.2566,ellipseName:"Engelis 1985"};e.evrst30={a:6377276.345,rf:300.8017,ellipseName:"Everest 1830"};e.evrst48={a:6377304.063,rf:300.8017,ellipseName:"Everest 1948"};e.evrst56={a:6377301.243,rf:300.8017,ellipseName:"Everest 1956"};e.evrst69={a:6377295.664,rf:300.8017,ellipseName:"Everest 1969"};e.evrstSS={a:6377298.556,rf:300.8017,ellipseName:"Everest (Sabah & Sarawak)"};e.fschr60={a:6378166,rf:298.3,ellipseName:"Fischer (Mercury Datum) 1960"};e.fschr60m={a:6378155,rf:298.3,ellipseName:"Fischer 1960"};e.fschr68={a:6378150,rf:298.3,ellipseName:"Fischer 1968"};e.helmert={a:6378200,rf:298.3,ellipseName:"Helmert 1906"};e.hough={a:6378270,rf:297,ellipseName:"Hough"};e.intl={a:6378388,rf:297,ellipseName:"International 1909 (Hayford)"};e.kaula={a:6378163,rf:298.24,ellipseName:"Kaula 1961"};e.lerch={a:6378139,rf:298.257,ellipseName:"Lerch 1979"};e.mprts={a:6397300,rf:191,ellipseName:"Maupertius 1738"};e.new_intl={a:6378157.5,b:6356772.2,ellipseName:"New International 1967"};e.plessis={a:6376523,rf:6355863,ellipseName:"Plessis 1817 (France)"};e.krass={a:6378245,rf:298.3,ellipseName:"Krassovsky, 1942"};e.SEasia={a:6378155,b:6356773.3205,ellipseName:"Southeast Asia"};e.walbeck={a:6376896,b:6355834.8467,ellipseName:"Walbeck"};e.WGS60={a:6378165,rf:298.3,ellipseName:"WGS 60"};e.WGS66={a:6378145,rf:298.25,ellipseName:"WGS 66"};e.WGS7={a:6378135,rf:298.26,ellipseName:"WGS 72"};e.WGS84={a:6378137,rf:298.257223563,ellipseName:"WGS 84"};e.sphere={a:6370997,b:6370997,ellipseName:"Normal Sphere (r=6370997)"}},{}],80:[function(n,t,e){e.greenwich=0;e.lisbon=-9.131906111111;e.paris=2.337229166667;e.bogota=-74.080916666667;e.madrid=-3.687938888889;e.rome=12.452333333333;e.bern=7.439583333333;e.jakarta=106.807719444444;e.ferro=-17.666666666667;e.brussels=4.367975;e.stockholm=18.058277777778;e.athens=23.7163375;e.oslo=10.722916666667},{}],81:[function(n,t,e){e.ft={to_meter:.3048};e["us-ft"]={to_meter:1200/3937}},{}],82:[function(n,t,e){var l=n("./Proj");var i=n("./transform");var r=l("WGS84");function u(n,t,e){var l;if(Array.isArray(e)){l=i(n,t,e);if(e.length===3){return[l.x,l.y,l.z]}else{return[l.x,l.y]}}else{return i(n,t,e)}}function s(n){if(n instanceof l){return n}if(n.oProj){return n.oProj}return l(n)}function a(n,t,e){n=s(n);var l=false;var i;if(typeof t==="undefined"){t=n;n=r;l=true}else if(typeof t.x!=="undefined"||Array.isArray(t)){e=t;t=n;n=r;l=true}t=s(t);if(e){return u(n,t,e)}else{i={forward:function(e){return u(n,t,e)},inverse:function(e){return u(t,n,e)}};if(l){i.oProj=t}return i}}t.exports=a},{"./Proj":55,"./transform":119}],83:[function(n,t,e){var l=Math.PI/2;var i=1;var r=2;var u=3;var s=4;var a=5;var o=484813681109536e-20;var h=1.0026;var f=.3826834323650898;var c=function(n){if(!(this instanceof c)){return new c(n)}this.datum_type=s;if(!n){return}if(n.datumCode&&n.datumCode==="none"){this.datum_type=a}if(n.datum_params){this.datum_params=n.datum_params.map(parseFloat);if(this.datum_params[0]!==0||this.datum_params[1]!==0||this.datum_params[2]!==0){this.datum_type=i}if(this.datum_params.length>3){if(this.datum_params[3]!==0||this.datum_params[4]!==0||this.datum_params[5]!==0||this.datum_params[6]!==0){this.datum_type=r;this.datum_params[3]*=o;this.datum_params[4]*=o;this.datum_params[5]*=o;this.datum_params[6]=this.datum_params[6]/1e6+1}}}this.datum_type=n.grids?u:this.datum_type;this.a=n.a;this.b=n.b;this.es=n.es;this.ep2=n.ep2;if(this.datum_type===u){this.grids=n.grids}};c.prototype={compare_datums:function(n){if(this.datum_type!==n.datum_type){return false}else if(this.a!==n.a||Math.abs(this.es-n.es)>5e-11){return false}else if(this.datum_type===i){return this.datum_params[0]===n.datum_params[0]&&this.datum_params[1]===n.datum_params[1]&&this.datum_params[2]===n.datum_params[2]}else if(this.datum_type===r){return this.datum_params[0]===n.datum_params[0]&&this.datum_params[1]===n.datum_params[1]&&this.datum_params[2]===n.datum_params[2]&&this.datum_params[3]===n.datum_params[3]&&this.datum_params[4]===n.datum_params[4]&&this.datum_params[5]===n.datum_params[5]&&this.datum_params[6]===n.datum_params[6]}else if(this.datum_type===u||n.datum_type===u){return this.nadgrids===n.nadgrids}else{return true}},geodetic_to_geocentric:function(n){var t=n.x;var e=n.y;var i=n.z?n.z:0;var r;var u;var s;var a=0;var o;var h;var f;var c;if(e<-l&&e>-1.001*l){e=-l}else if(e>l&&e<1.001*l){e=l}else if(e<-l||e>l){return null}if(t>Math.PI){t-=2*Math.PI}h=Math.sin(e);c=Math.cos(e);f=h*h;o=this.a/Math.sqrt(1-this.es*f);r=(o+i)*c*Math.cos(t);u=(o+i)*c*Math.sin(t);s=(o*(1-this.es)+i)*h;n.x=r;n.y=u;n.z=s;return a},geocentric_to_geodetic:function(n){var t=1e-12;var e=t*t;var i=30;var r;var u;var s;var a;var o;var h;var f;var c;var d;var g;var p;var v;var m;var y;var x=n.x;var w=n.y;var _=n.z?n.z:0;var M;var E;var b;m=false;r=Math.sqrt(x*x+w*w);u=Math.sqrt(x*x+w*w+_*_);if(r/this.a<t){m=true;M=0;if(u/this.a<t){E=l;b=-this.b;return}}else{M=Math.atan2(w,x)}s=_/u;a=r/u;o=1/Math.sqrt(1-this.es*(2-this.es)*a*a);c=a*(1-this.es)*o;d=s*o;y=0;do{y++;f=this.a/Math.sqrt(1-this.es*d*d);b=r*c+_*d-f*(1-this.es*d*d);h=this.es*f/(f+b);o=1/Math.sqrt(1-h*(2-h)*a*a);g=a*(1-h)*o;p=s*o;v=p*c-g*d;c=g;d=p}while(v*v>e&&y<i);E=Math.atan(p/Math.abs(g));n.x=M;n.y=E;n.z=b;return n},geocentric_to_geodetic_noniter:function(n){var t=n.x;var e=n.y;var i=n.z?n.z:0;var r;var u;var s;var a;var o;var c;var d;var g;var p;var v;var m;var y;var x;var w;var _;var M;var E;t=parseFloat(t);e=parseFloat(e);i=parseFloat(i);E=false;if(t!==0){r=Math.atan2(e,t)}else{if(e>0){r=l}else if(e<0){r=-l}else{E=true;r=0;if(i>0){u=l}else if(i<0){u=-l}else{u=l;s=-this.b;return}}}o=t*t+e*e;a=Math.sqrt(o);c=i*h;g=Math.sqrt(c*c+o);v=c/g;y=a/g;m=v*v*v;d=i+this.b*this.ep2*m;M=a-this.a*this.es*y*y*y;p=Math.sqrt(d*d+M*M);x=d/p;w=M/p;_=this.a/Math.sqrt(1-this.es*x*x);if(w>=f){s=a/w-_}else if(w<=-f){s=a/-w-_}else{s=i/x+_*(this.es-1)}if(E===false){u=Math.atan(x/w)}n.x=r;n.y=u;n.z=s;return n},geocentric_to_wgs84:function(n){if(this.datum_type===i){n.x+=this.datum_params[0];n.y+=this.datum_params[1];n.z+=this.datum_params[2]}else if(this.datum_type===r){var t=this.datum_params[0];var e=this.datum_params[1];var l=this.datum_params[2];var u=this.datum_params[3];var s=this.datum_params[4];var a=this.datum_params[5];var o=this.datum_params[6];var h=o*(n.x-a*n.y+s*n.z)+t;var f=o*(a*n.x+n.y-u*n.z)+e;var c=o*(-s*n.x+u*n.y+n.z)+l;n.x=h;n.y=f;n.z=c}},geocentric_from_wgs84:function(n){if(this.datum_type===i){n.x-=this.datum_params[0];n.y-=this.datum_params[1];n.z-=this.datum_params[2]}else if(this.datum_type===r){var t=this.datum_params[0];var e=this.datum_params[1];var l=this.datum_params[2];var u=this.datum_params[3];var s=this.datum_params[4];var a=this.datum_params[5];var o=this.datum_params[6];var h=(n.x-t)/o;var f=(n.y-e)/o;var c=(n.z-l)/o;n.x=h+a*f-s*c;n.y=-a*h+f+u*c;n.z=s*h-u*f+c}}};t.exports=c},{}],84:[function(n,t,e){var l=1;var i=2;var r=3;var u=5;var s=6378137;var a=.006694379990141316;t.exports=function(n,t,e){var o,h,f;function c(n){return n===l||n===i}if(n.compare_datums(t)){return e}if(n.datum_type===u||t.datum_type===u){return e}var d=n.a;var g=n.es;var p=t.a;var v=t.es;var m=n.datum_type;if(m===r){if(this.apply_gridshift(n,0,e)===0){n.a=s;n.es=a}else{if(!n.datum_params){n.a=d;n.es=n.es;return e}o=1;for(h=0,f=n.datum_params.length;h<f;h++){o*=n.datum_params[h]}if(o===0){n.a=d;n.es=n.es;return e}if(n.datum_params.length>3){m=i}else{m=l}}}if(t.datum_type===r){t.a=s;t.es=a}if(n.es!==t.es||n.a!==t.a||c(m)||c(t.datum_type)){n.geodetic_to_geocentric(e);if(c(n.datum_type)){n.geocentric_to_wgs84(e)}if(c(t.datum_type)){t.geocentric_from_wgs84(e)}t.geocentric_to_geodetic(e)}if(t.datum_type===r){this.apply_gridshift(t,1,e)}n.a=d;n.es=g;t.a=p;t.es=v;return e}},{}],85:[function(n,t,e){var l=n("./global");var i=n("./projString");var r=n("./wkt");function u(n){var t=this;if(arguments.length===2){var e=arguments[1];if(typeof e==="string"){if(e.charAt(0)==="+"){u[n]=i(arguments[1])}else{u[n]=r(arguments[1])}}else{u[n]=e}}else if(arguments.length===1){if(Array.isArray(n)){return n.map(function(n){if(Array.isArray(n)){u.apply(t,n)}else{u(n)}})}else if(typeof n==="string"){if(n in u){return u[n]}}else if("EPSG"in n){u["EPSG:"+n.EPSG]=n}else if("ESRI"in n){u["ESRI:"+n.ESRI]=n}else if("IAU2000"in n){u["IAU2000:"+n.IAU2000]=n}else{console.log(n)}return}}l(u);t.exports=u},{"./global":88,"./projString":92,"./wkt":120}],86:[function(n,t,e){var l=n("./constants/Datum");var i=n("./constants/Ellipsoid");var r=n("./extend");var u=n("./datum");var s=1e-10;var a=.16666666666666666;var o=.04722222222222222;var h=.022156084656084655;t.exports=function(n){if(n.datumCode&&n.datumCode!=="none"){var t=l[n.datumCode];if(t){n.datum_params=t.towgs84?t.towgs84.split(","):null;n.ellps=t.ellipse;n.datumName=t.datumName?t.datumName:n.datumCode}}if(!n.a){var e=i[n.ellps]?i[n.ellps]:i.WGS84;r(n,e)}if(n.rf&&!n.b){n.b=(1-1/n.rf)*n.a}if(n.rf===0||Math.abs(n.a-n.b)<s){n.sphere=true;n.b=n.a}n.a2=n.a*n.a;n.b2=n.b*n.b;n.es=(n.a2-n.b2)/n.a2;n.e=Math.sqrt(n.es);if(n.R_A){n.a*=1-n.es*(a+n.es*(o+n.es*h));n.a2=n.a*n.a;n.b2=n.b*n.b;n.es=0}n.ep2=(n.a2-n.b2)/n.b2;if(!n.k0){n.k0=1}if(!n.axis){n.axis="enu"}if(!n.datum){n.datum=u(n)}return n}},{"./constants/Datum":78,"./constants/Ellipsoid":79,"./datum":83,"./extend":87}],87:[function(n,t,e){t.exports=function(n,t){n=n||{};var e,l;if(!t){return n}for(l in t){e=t[l];if(e!==undefined){n[l]=e}}return n}},{}],88:[function(n,t,e){t.exports=function(n){n("EPSG:4326","+title=WGS 84 (long/lat) +proj=longlat +ellps=WGS84 +datum=WGS84 +units=degrees");n("EPSG:4269","+title=NAD83 (long/lat) +proj=longlat +a=6378137.0 +b=6356752.31414036 +ellps=GRS80 +datum=NAD83 +units=degrees");n("EPSG:3857","+title=WGS 84 / Pseudo-Mercator +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs");n.WGS84=n["EPSG:4326"];n["EPSG:3785"]=n["EPSG:3857"];n.GOOGLE=n["EPSG:3857"];n["EPSG:900913"]=n["EPSG:3857"];n["EPSG:102113"]=n["EPSG:3857"]}},{}],89:[function(n,t,e){var l=[n("./projections/tmerc"),n("./projections/utm"),n("./projections/sterea"),n("./projections/stere"),n("./projections/somerc"),n("./projections/omerc"),n("./projections/lcc"),n("./projections/krovak"),n("./projections/cass"),n("./projections/laea"),n("./projections/aea"),n("./projections/gnom"),n("./projections/cea"),n("./projections/eqc"),n("./projections/poly"),n("./projections/nzmg"),n("./projections/mill"),n("./projections/sinu"),n("./projections/moll"),n("./projections/eqdc"),n("./projections/vandg"),n("./projections/aeqd")];t.exports=function(n){l.forEach(function(t){n.Proj.projections.add(t)})}},{"./projections/aea":94,"./projections/aeqd":95,"./projections/cass":96,"./projections/cea":97,"./projections/eqc":98,"./projections/eqdc":99,"./projections/gnom":101,"./projections/krovak":102,"./projections/laea":103,"./projections/lcc":104,"./projections/mill":107,"./projections/moll":108,"./projections/nzmg":109,"./projections/omerc":110,"./projections/poly":111,"./projections/sinu":112,"./projections/somerc":113,"./projections/stere":114,"./projections/sterea":115,"./projections/tmerc":116,"./projections/utm":117,"./projections/vandg":118}],90:[function(n,t,e){var l=n("./core");l.defaultDatum="WGS84";l.Proj=n("./Proj");l.WGS84=new l.Proj("WGS84");l.Point=n("./Point");l.toPoint=n("./common/toPoint");l.defs=n("./defs");l.transform=n("./transform");l.mgrs=n("mgrs");l.version=n("../package.json").version;n("./includedProjections")(l);t.exports=l},{"../package.json":121,"./Point":54,"./Proj":55,"./common/toPoint":76,"./core":82,"./defs":85,"./includedProjections":89,"./transform":119,mgrs:36}],91:[function(n,t,e){var l=n("./defs");var i=n("./wkt");var r=n("./projString");function u(n){return typeof n==="string"}function s(n){return n in l}function a(n){var t=["GEOGCS","GEOCCS","PROJCS","LOCAL_CS"];return t.reduce(function(t,e){return t+1+n.indexOf(e)},0)}function o(n){return n[0]==="+"}function h(n){if(u(n)){if(s(n)){return l[n]}else if(a(n)){return i(n)}else if(o(n)){return r(n)}}else{return n}}t.exports=h},{"./defs":85,"./projString":92,"./wkt":120}],92:[function(n,t,e){var l=.017453292519943295;var i=n("./constants/PrimeMeridian");var r=n("./constants/units");t.exports=function(n){var t={};var e={};n.split("+").map(function(n){return n.trim()}).filter(function(n){return n}).forEach(function(n){var t=n.split("=");t.push(true);e[t[0].toLowerCase()]=t[1]});var u,s,a;var o={proj:"projName",datum:"datumCode",rf:function(n){t.rf=parseFloat(n)},lat_0:function(n){t.lat0=n*l},lat_1:function(n){t.lat1=n*l},lat_2:function(n){t.lat2=n*l},lat_ts:function(n){t.lat_ts=n*l},lon_0:function(n){t.long0=n*l},lon_1:function(n){t.long1=n*l},lon_2:function(n){t.long2=n*l},alpha:function(n){t.alpha=parseFloat(n)*l},lonc:function(n){t.longc=n*l},x_0:function(n){t.x0=parseFloat(n)},y_0:function(n){t.y0=parseFloat(n)},k_0:function(n){t.k0=parseFloat(n)},k:function(n){t.k0=parseFloat(n)},a:function(n){t.a=parseFloat(n)},b:function(n){t.b=parseFloat(n)},r_a:function(){t.R_A=true},zone:function(n){t.zone=parseInt(n,10)},south:function(){t.utmSouth=true},towgs84:function(n){t.datum_params=n.split(",").map(function(n){return parseFloat(n)})},to_meter:function(n){t.to_meter=parseFloat(n)},units:function(n){t.units=n;if(r[n]){t.to_meter=r[n].to_meter}},from_greenwich:function(n){t.from_greenwich=n*l},pm:function(n){t.from_greenwich=(i[n]?i[n]:parseFloat(n))*l},nadgrids:function(n){if(n==="@null"){t.datumCode="none"}else{t.nadgrids=n}},axis:function(n){var e="ewnsud";if(n.length===3&&e.indexOf(n.substr(0,1))!==-1&&e.indexOf(n.substr(1,1))!==-1&&e.indexOf(n.substr(2,1))!==-1){t.axis=n}}};for(u in e){s=e[u];if(u in o){a=o[u];if(typeof a==="function"){a(s)}else{t[a]=s}}else{t[u]=s}}if(typeof t.datumCode==="string"&&t.datumCode!=="WGS84"){t.datumCode=t.datumCode.toLowerCase()}return t}},{"./constants/PrimeMeridian":80,"./constants/units":81}],93:[function(n,t,e){var l=[n("./projections/merc"),n("./projections/longlat")];var i={};var r=[];function u(n,t){var e=r.length;if(!n.names){console.log(t);return true}r[e]=n;n.names.forEach(function(n){i[n.toLowerCase()]=e});return this}e.add=u;e.get=function(n){if(!n){return false}var t=n.toLowerCase();if(typeof i[t]!=="undefined"&&r[i[t]]){return r[i[t]]}};e.start=function(){l.forEach(u)}},{"./projections/longlat":105,"./projections/merc":106}],94:[function(n,t,e){var l=1e-10;var i=n("../common/msfnz");var r=n("../common/qsfnz");var u=n("../common/adjust_lon");var s=n("../common/asinz");e.init=function(){if(Math.abs(this.lat1+this.lat2)<l){return}this.temp=this.b/this.a;this.es=1-Math.pow(this.temp,2);this.e3=Math.sqrt(this.es);this.sin_po=Math.sin(this.lat1);this.cos_po=Math.cos(this.lat1);this.t1=this.sin_po;this.con=this.sin_po;this.ms1=i(this.e3,this.sin_po,this.cos_po);this.qs1=r(this.e3,this.sin_po,this.cos_po);this.sin_po=Math.sin(this.lat2);this.cos_po=Math.cos(this.lat2);this.t2=this.sin_po;this.ms2=i(this.e3,this.sin_po,this.cos_po);this.qs2=r(this.e3,this.sin_po,this.cos_po);this.sin_po=Math.sin(this.lat0);this.cos_po=Math.cos(this.lat0);this.t3=this.sin_po;this.qs0=r(this.e3,this.sin_po,this.cos_po);if(Math.abs(this.lat1-this.lat2)>l){this.ns0=(this.ms1*this.ms1-this.ms2*this.ms2)/(this.qs2-this.qs1)}else{this.ns0=this.con}this.c=this.ms1*this.ms1+this.ns0*this.qs1;this.rh=this.a*Math.sqrt(this.c-this.ns0*this.qs0)/this.ns0};e.forward=function(n){var t=n.x;var e=n.y;this.sin_phi=Math.sin(e);this.cos_phi=Math.cos(e);var l=r(this.e3,this.sin_phi,this.cos_phi);var i=this.a*Math.sqrt(this.c-this.ns0*l)/this.ns0;var s=this.ns0*u(t-this.long0);var a=i*Math.sin(s)+this.x0;var o=this.rh-i*Math.cos(s)+this.y0;n.x=a;n.y=o;return n};e.inverse=function(n){var t,e,l,i,r,s;n.x-=this.x0;n.y=this.rh-n.y+this.y0;if(this.ns0>=0){t=Math.sqrt(n.x*n.x+n.y*n.y);l=1}else{t=-Math.sqrt(n.x*n.x+n.y*n.y);l=-1}i=0;if(t!==0){i=Math.atan2(l*n.x,l*n.y)}l=t*this.ns0/this.a;if(this.sphere){s=Math.asin((this.c-l*l)/(2*this.ns0))}else{e=(this.c-l*l)/this.ns0;s=this.phi1z(this.e3,e)}r=u(i/this.ns0+this.long0);n.x=r;n.y=s;return n};e.phi1z=function(n,t){var e,i,r,u,a;var o=s(.5*t);if(n<l){return o}var h=n*n;for(var f=1;f<=25;f++){e=Math.sin(o);i=Math.cos(o);r=n*e;u=1-r*r;a=.5*u*u/i*(t/(1-h)-e/u+.5/n*Math.log((1-r)/(1+r)));o=o+a;if(Math.abs(a)<=1e-7){return o}}return null};e.names=["Albers_Conic_Equal_Area","Albers","aea"]},{"../common/adjust_lon":58,"../common/asinz":59,"../common/msfnz":68,"../common/qsfnz":73}],95:[function(n,t,e){var l=n("../common/adjust_lon");var i=Math.PI/2;var r=1e-10;var u=n("../common/mlfn");var s=n("../common/e0fn");var a=n("../common/e1fn");var o=n("../common/e2fn");var h=n("../common/e3fn");var f=n("../common/gN");var c=n("../common/asinz");var d=n("../common/imlfn");e.init=function(){this.sin_p12=Math.sin(this.lat0);this.cos_p12=Math.cos(this.lat0)};e.forward=function(n){var t=n.x;var e=n.y;var c=Math.sin(n.y);var d=Math.cos(n.y);var g=l(t-this.long0);var p,v,m,y,x,w,_,M,E,b,C,I,S,N,P,L,R,T,O,A,k,D,F;if(this.sphere){if(Math.abs(this.sin_p12-1)<=r){n.x=this.x0+this.a*(i-e)*Math.sin(g);n.y=this.y0-this.a*(i-e)*Math.cos(g);return n}else if(Math.abs(this.sin_p12+1)<=r){n.x=this.x0+this.a*(i+e)*Math.sin(g);n.y=this.y0+this.a*(i+e)*Math.cos(g);return n}else{T=this.sin_p12*c+this.cos_p12*d*Math.cos(g);L=Math.acos(T);R=L/Math.sin(L);n.x=this.x0+this.a*R*d*Math.sin(g);n.y=this.y0+this.a*R*(this.cos_p12*c-this.sin_p12*d*Math.cos(g));return n}}else{p=s(this.es);v=a(this.es);m=o(this.es);y=h(this.es);if(Math.abs(this.sin_p12-1)<=r){x=this.a*u(p,v,m,y,i);w=this.a*u(p,v,m,y,e);n.x=this.x0+(x-w)*Math.sin(g);n.y=this.y0-(x-w)*Math.cos(g);return n}else if(Math.abs(this.sin_p12+1)<=r){x=this.a*u(p,v,m,y,i);w=this.a*u(p,v,m,y,e);n.x=this.x0+(x+w)*Math.sin(g);n.y=this.y0+(x+w)*Math.cos(g);return n}else{_=c/d;M=f(this.a,this.e,this.sin_p12);E=f(this.a,this.e,c);b=Math.atan((1-this.es)*_+this.es*M*this.sin_p12/(E*d));C=Math.atan2(Math.sin(g),this.cos_p12*Math.tan(b)-this.sin_p12*Math.cos(g));if(C===0){O=Math.asin(this.cos_p12*Math.sin(b)-this.sin_p12*Math.cos(b))}else if(Math.abs(Math.abs(C)-Math.PI)<=r){O=-Math.asin(this.cos_p12*Math.sin(b)-this.sin_p12*Math.cos(b))}else{O=Math.asin(Math.sin(g)*Math.cos(b)/Math.sin(C))}I=this.e*this.sin_p12/Math.sqrt(1-this.es);S=this.e*this.cos_p12*Math.cos(C)/Math.sqrt(1-this.es);N=I*S;P=S*S;A=O*O;k=A*O;D=k*O;F=D*O;L=M*O*(1-A*P*(1-P)/6+k/8*N*(1-2*P)+D/120*(P*(4-7*P)-3*I*I*(1-7*P))-F/48*N);n.x=this.x0+L*Math.sin(C);n.y=this.y0+L*Math.cos(C);return n}}};e.inverse=function(n){n.x-=this.x0;n.y-=this.y0;var t,e,g,p,v,m,y,x,w,_,M,E,b,C,I,S,N,P,L,R,T,O,A;if(this.sphere){t=Math.sqrt(n.x*n.x+n.y*n.y);if(t>2*i*this.a){return}e=t/this.a;g=Math.sin(e);p=Math.cos(e);v=this.long0;if(Math.abs(t)<=r){m=this.lat0}else{m=c(p*this.sin_p12+n.y*g*this.cos_p12/t);y=Math.abs(this.lat0)-i;if(Math.abs(y)<=r){if(this.lat0>=0){v=l(this.long0+Math.atan2(n.x,-n.y))}else{v=l(this.long0-Math.atan2(-n.x,n.y))}}else{v=l(this.long0+Math.atan2(n.x*g,t*this.cos_p12*p-n.y*this.sin_p12*g))}}n.x=v;n.y=m;return n}else{x=s(this.es);w=a(this.es);_=o(this.es);M=h(this.es);if(Math.abs(this.sin_p12-1)<=r){E=this.a*u(x,w,_,M,i);t=Math.sqrt(n.x*n.x+n.y*n.y);b=E-t;m=d(b/this.a,x,w,_,M);v=l(this.long0+Math.atan2(n.x,-1*n.y));n.x=v;n.y=m;return n}else if(Math.abs(this.sin_p12+1)<=r){E=this.a*u(x,w,_,M,i);t=Math.sqrt(n.x*n.x+n.y*n.y);b=t-E;m=d(b/this.a,x,w,_,M);v=l(this.long0+Math.atan2(n.x,n.y));n.x=v;n.y=m;return n}else{t=Math.sqrt(n.x*n.x+n.y*n.y);S=Math.atan2(n.x,n.y);C=f(this.a,this.e,this.sin_p12);N=Math.cos(S);P=this.e*this.cos_p12*N;L=-P*P/(1-this.es);R=3*this.es*(1-L)*this.sin_p12*this.cos_p12*N/(1-this.es);T=t/C;O=T-L*(1+L)*Math.pow(T,3)/6-R*(1+3*L)*Math.pow(T,4)/24;A=1-L*O*O/2-T*O*O*O/6;I=Math.asin(this.sin_p12*Math.cos(O)+this.cos_p12*Math.sin(O)*N);v=l(this.long0+Math.asin(Math.sin(S)*Math.sin(O)/Math.cos(I)));m=Math.atan((1-this.es*A*this.sin_p12/Math.sin(I))*Math.tan(I)/(1-this.es));n.x=v;n.y=m;return n}}};e.names=["Azimuthal_Equidistant","aeqd"]},{"../common/adjust_lon":58,"../common/asinz":59,"../common/e0fn":60,"../common/e1fn":61,"../common/e2fn":62,"../common/e3fn":63,"../common/gN":64,"../common/imlfn":65,"../common/mlfn":67}],96:[function(n,t,e){var l=n("../common/mlfn");var i=n("../common/e0fn");var r=n("../common/e1fn");var u=n("../common/e2fn");var s=n("../common/e3fn");var a=n("../common/gN");var o=n("../common/adjust_lon");var h=n("../common/adjust_lat");var f=n("../common/imlfn");var c=Math.PI/2;var d=1e-10;e.init=function(){if(!this.sphere){this.e0=i(this.es);this.e1=r(this.es);this.e2=u(this.es);this.e3=s(this.es);this.ml0=this.a*l(this.e0,this.e1,this.e2,this.e3,this.lat0)}};e.forward=function(n){var t,e;var i=n.x;var r=n.y;i=o(i-this.long0);if(this.sphere){t=this.a*Math.asin(Math.cos(r)*Math.sin(i));e=this.a*(Math.atan2(Math.tan(r),Math.cos(i))-this.lat0)}else{var u=Math.sin(r);var s=Math.cos(r);var h=a(this.a,this.e,u);var f=Math.tan(r)*Math.tan(r);var c=i*Math.cos(r);var d=c*c;var g=this.es*s*s/(1-this.es);var p=this.a*l(this.e0,this.e1,this.e2,this.e3,r);t=h*c*(1-d*f*(1/6-(8-f+8*g)*d/120));e=p-this.ml0+h*u/s*d*(.5+(5-f+6*g)*d/24)}n.x=t+this.x0;n.y=e+this.y0;return n};e.inverse=function(n){n.x-=this.x0;n.y-=this.y0;var t=n.x/this.a;var e=n.y/this.a;var l,i;if(this.sphere){var r=e+this.lat0;l=Math.asin(Math.sin(r)*Math.cos(t));i=Math.atan2(Math.tan(t),Math.cos(r))}else{var u=this.ml0/this.a+e;var s=f(u,this.e0,this.e1,this.e2,this.e3);if(Math.abs(Math.abs(s)-c)<=d){n.x=this.long0;n.y=c;if(e<0){n.y*=-1}return n}var g=a(this.a,this.e,Math.sin(s));var p=g*g*g/this.a/this.a*(1-this.es);var v=Math.pow(Math.tan(s),2);var m=t*this.a/g;var y=m*m;l=s-g*Math.tan(s)/p*m*m*(.5-(1+3*v)*m*m/24);i=m*(1-y*(v/3+(1+3*v)*v*y/15))/Math.cos(s)}n.x=o(i+this.long0);n.y=h(l);return n};e.names=["Cassini","Cassini_Soldner","cass"]},{"../common/adjust_lat":57,"../common/adjust_lon":58,"../common/e0fn":60,"../common/e1fn":61,"../common/e2fn":62,"../common/e3fn":63,"../common/gN":64,"../common/imlfn":65,"../common/mlfn":67}],97:[function(n,t,e){var l=n("../common/adjust_lon");var i=n("../common/qsfnz");var r=n("../common/msfnz");var u=n("../common/iqsfnz");e.init=function(){if(!this.sphere){this.k0=r(this.e,Math.sin(this.lat_ts),Math.cos(this.lat_ts))}};e.forward=function(n){var t=n.x;var e=n.y;var r,u;var s=l(t-this.long0);if(this.sphere){r=this.x0+this.a*s*Math.cos(this.lat_ts);u=this.y0+this.a*Math.sin(e)/Math.cos(this.lat_ts)}else{var a=i(this.e,Math.sin(e));r=this.x0+this.a*this.k0*s;u=this.y0+this.a*a*.5/this.k0}n.x=r;n.y=u;return n};e.inverse=function(n){n.x-=this.x0;n.y-=this.y0;var t,e;if(this.sphere){t=l(this.long0+n.x/this.a/Math.cos(this.lat_ts));e=Math.asin(n.y/this.a*Math.cos(this.lat_ts))}else{e=u(this.e,2*n.y*this.k0/this.a);t=l(this.long0+n.x/(this.a*this.k0))}n.x=t;n.y=e;return n};e.names=["cea"]},{"../common/adjust_lon":58,"../common/iqsfnz":66,"../common/msfnz":68,"../common/qsfnz":73}],98:[function(n,t,e){var l=n("../common/adjust_lon");var i=n("../common/adjust_lat");e.init=function(){this.x0=this.x0||0;this.y0=this.y0||0;this.lat0=this.lat0||0;this.long0=this.long0||0;this.lat_ts=this.lat_ts||0;this.title=this.title||"Equidistant Cylindrical (Plate Carre)";this.rc=Math.cos(this.lat_ts)};e.forward=function(n){var t=n.x;var e=n.y;var r=l(t-this.long0);var u=i(e-this.lat0);n.x=this.x0+this.a*r*this.rc;n.y=this.y0+this.a*u;return n};e.inverse=function(n){var t=n.x;var e=n.y;n.x=l(this.long0+(t-this.x0)/(this.a*this.rc));n.y=i(this.lat0+(e-this.y0)/this.a);return n};e.names=["Equirectangular","Equidistant_Cylindrical","eqc"]},{"../common/adjust_lat":57,"../common/adjust_lon":58}],99:[function(n,t,e){var l=n("../common/e0fn");var i=n("../common/e1fn");var r=n("../common/e2fn");var u=n("../common/e3fn");var s=n("../common/msfnz");var a=n("../common/mlfn");var o=n("../common/adjust_lon");var h=n("../common/adjust_lat");var f=n("../common/imlfn");var c=1e-10;e.init=function(){if(Math.abs(this.lat1+this.lat2)<c){return}this.lat2=this.lat2||this.lat1;this.temp=this.b/this.a;this.es=1-Math.pow(this.temp,2);this.e=Math.sqrt(this.es);this.e0=l(this.es);this.e1=i(this.es);this.e2=r(this.es);this.e3=u(this.es);this.sinphi=Math.sin(this.lat1);this.cosphi=Math.cos(this.lat1);this.ms1=s(this.e,this.sinphi,this.cosphi);this.ml1=a(this.e0,this.e1,this.e2,this.e3,this.lat1);if(Math.abs(this.lat1-this.lat2)<c){this.ns=this.sinphi}else{this.sinphi=Math.sin(this.lat2);this.cosphi=Math.cos(this.lat2);this.ms2=s(this.e,this.sinphi,this.cosphi);this.ml2=a(this.e0,this.e1,this.e2,this.e3,this.lat2);this.ns=(this.ms1-this.ms2)/(this.ml2-this.ml1)}this.g=this.ml1+this.ms1/this.ns;this.ml0=a(this.e0,this.e1,this.e2,this.e3,this.lat0);this.rh=this.a*(this.g-this.ml0)};e.forward=function(n){var t=n.x;var e=n.y;var l;if(this.sphere){l=this.a*(this.g-e)}else{var i=a(this.e0,this.e1,this.e2,this.e3,e);l=this.a*(this.g-i)}var r=this.ns*o(t-this.long0);var u=this.x0+l*Math.sin(r);var s=this.y0+this.rh-l*Math.cos(r);n.x=u;n.y=s;return n};e.inverse=function(n){n.x-=this.x0;n.y=this.rh-n.y+this.y0;var t,e,l,i;if(this.ns>=0){e=Math.sqrt(n.x*n.x+n.y*n.y);t=1}else{e=-Math.sqrt(n.x*n.x+n.y*n.y);t=-1}var r=0;if(e!==0){
r=Math.atan2(t*n.x,t*n.y)}if(this.sphere){i=o(this.long0+r/this.ns);l=h(this.g-e/this.a);n.x=i;n.y=l;return n}else{var u=this.g-e/this.a;l=f(u,this.e0,this.e1,this.e2,this.e3);i=o(this.long0+r/this.ns);n.x=i;n.y=l;return n}};e.names=["Equidistant_Conic","eqdc"]},{"../common/adjust_lat":57,"../common/adjust_lon":58,"../common/e0fn":60,"../common/e1fn":61,"../common/e2fn":62,"../common/e3fn":63,"../common/imlfn":65,"../common/mlfn":67,"../common/msfnz":68}],100:[function(n,t,e){var l=Math.PI/4;var i=n("../common/srat");var r=Math.PI/2;var u=20;e.init=function(){var n=Math.sin(this.lat0);var t=Math.cos(this.lat0);t*=t;this.rc=Math.sqrt(1-this.es)/(1-this.es*n*n);this.C=Math.sqrt(1+this.es*t*t/(1-this.es));this.phic0=Math.asin(n/this.C);this.ratexp=.5*this.C*this.e;this.K=Math.tan(.5*this.phic0+l)/(Math.pow(Math.tan(.5*this.lat0+l),this.C)*i(this.e*n,this.ratexp))};e.forward=function(n){var t=n.x;var e=n.y;n.y=2*Math.atan(this.K*Math.pow(Math.tan(.5*e+l),this.C)*i(this.e*Math.sin(e),this.ratexp))-r;n.x=this.C*t;return n};e.inverse=function(n){var t=1e-14;var e=n.x/this.C;var s=n.y;var a=Math.pow(Math.tan(.5*s+l)/this.K,1/this.C);for(var o=u;o>0;--o){s=2*Math.atan(a*i(this.e*Math.sin(n.y),-.5*this.e))-r;if(Math.abs(s-n.y)<t){break}n.y=s}if(!o){return null}n.x=e;n.y=s;return n};e.names=["gauss"]},{"../common/srat":75}],101:[function(n,t,e){var l=n("../common/adjust_lon");var i=1e-10;var r=n("../common/asinz");e.init=function(){this.sin_p14=Math.sin(this.lat0);this.cos_p14=Math.cos(this.lat0);this.infinity_dist=1e3*this.a;this.rc=1};e.forward=function(n){var t,e;var r;var u;var s;var a;var o,h;var f=n.x;var c=n.y;r=l(f-this.long0);t=Math.sin(c);e=Math.cos(c);u=Math.cos(r);a=this.sin_p14*t+this.cos_p14*e*u;s=1;if(a>0||Math.abs(a)<=i){o=this.x0+this.a*s*e*Math.sin(r)/a;h=this.y0+this.a*s*(this.cos_p14*t-this.sin_p14*e*u)/a}else{o=this.x0+this.infinity_dist*e*Math.sin(r);h=this.y0+this.infinity_dist*(this.cos_p14*t-this.sin_p14*e*u)}n.x=o;n.y=h;return n};e.inverse=function(n){var t;var e,i;var u;var s,a;n.x=(n.x-this.x0)/this.a;n.y=(n.y-this.y0)/this.a;n.x/=this.k0;n.y/=this.k0;if(t=Math.sqrt(n.x*n.x+n.y*n.y)){u=Math.atan2(t,this.rc);e=Math.sin(u);i=Math.cos(u);a=r(i*this.sin_p14+n.y*e*this.cos_p14/t);s=Math.atan2(n.x*e,t*this.cos_p14*i-n.y*this.sin_p14*e);s=l(this.long0+s)}else{a=this.phic0;s=0}n.x=s;n.y=a;return n};e.names=["gnom"]},{"../common/adjust_lon":58,"../common/asinz":59}],102:[function(n,t,e){var l=n("../common/adjust_lon");e.init=function(){this.a=6377397.155;this.es=.006674372230614;this.e=Math.sqrt(this.es);if(!this.lat0){this.lat0=.863937979737193}if(!this.long0){this.long0=.7417649320975901-.308341501185665}if(!this.k0){this.k0=.9999}this.s45=.785398163397448;this.s90=2*this.s45;this.fi0=this.lat0;this.e2=this.es;this.e=Math.sqrt(this.e2);this.alfa=Math.sqrt(1+this.e2*Math.pow(Math.cos(this.fi0),4)/(1-this.e2));this.uq=1.04216856380474;this.u0=Math.asin(Math.sin(this.fi0)/this.alfa);this.g=Math.pow((1+this.e*Math.sin(this.fi0))/(1-this.e*Math.sin(this.fi0)),this.alfa*this.e/2);this.k=Math.tan(this.u0/2+this.s45)/Math.pow(Math.tan(this.fi0/2+this.s45),this.alfa)*this.g;this.k1=this.k0;this.n0=this.a*Math.sqrt(1-this.e2)/(1-this.e2*Math.pow(Math.sin(this.fi0),2));this.s0=1.37008346281555;this.n=Math.sin(this.s0);this.ro0=this.k1*this.n0/Math.tan(this.s0);this.ad=this.s90-this.uq};e.forward=function(n){var t,e,i,r,u,s,a;var o=n.x;var h=n.y;var f=l(o-this.long0);t=Math.pow((1+this.e*Math.sin(h))/(1-this.e*Math.sin(h)),this.alfa*this.e/2);e=2*(Math.atan(this.k*Math.pow(Math.tan(h/2+this.s45),this.alfa)/t)-this.s45);i=-f*this.alfa;r=Math.asin(Math.cos(this.ad)*Math.sin(e)+Math.sin(this.ad)*Math.cos(e)*Math.cos(i));u=Math.asin(Math.cos(e)*Math.sin(i)/Math.cos(r));s=this.n*u;a=this.ro0*Math.pow(Math.tan(this.s0/2+this.s45),this.n)/Math.pow(Math.tan(r/2+this.s45),this.n);n.y=a*Math.cos(s)/1;n.x=a*Math.sin(s)/1;if(!this.czech){n.y*=-1;n.x*=-1}return n};e.inverse=function(n){var t,e,l,i,r,u,s;var a;var o=n.x;n.x=n.y;n.y=o;if(!this.czech){n.y*=-1;n.x*=-1}u=Math.sqrt(n.x*n.x+n.y*n.y);r=Math.atan2(n.y,n.x);i=r/Math.sin(this.s0);l=2*(Math.atan(Math.pow(this.ro0/u,1/this.n)*Math.tan(this.s0/2+this.s45))-this.s45);t=Math.asin(Math.cos(this.ad)*Math.sin(l)-Math.sin(this.ad)*Math.cos(l)*Math.cos(i));e=Math.asin(Math.cos(l)*Math.sin(i)/Math.cos(t));n.x=this.long0-e/this.alfa;s=t;a=0;var h=0;do{n.y=2*(Math.atan(Math.pow(this.k,-1/this.alfa)*Math.pow(Math.tan(t/2+this.s45),1/this.alfa)*Math.pow((1+this.e*Math.sin(s))/(1-this.e*Math.sin(s)),this.e/2))-this.s45);if(Math.abs(s-n.y)<1e-10){a=1}s=n.y;h+=1}while(a===0&&h<15);if(h>=15){return null}return n};e.names=["Krovak","krovak"]},{"../common/adjust_lon":58}],103:[function(n,t,e){var l=Math.PI/2;var i=Math.PI/4;var r=1e-10;var u=n("../common/qsfnz");var s=n("../common/adjust_lon");e.S_POLE=1;e.N_POLE=2;e.EQUIT=3;e.OBLIQ=4;e.init=function(){var n=Math.abs(this.lat0);if(Math.abs(n-l)<r){this.mode=this.lat0<0?this.S_POLE:this.N_POLE}else if(Math.abs(n)<r){this.mode=this.EQUIT}else{this.mode=this.OBLIQ}if(this.es>0){var t;this.qp=u(this.e,1);this.mmf=.5/(1-this.es);this.apa=this.authset(this.es);switch(this.mode){case this.N_POLE:this.dd=1;break;case this.S_POLE:this.dd=1;break;case this.EQUIT:this.rq=Math.sqrt(.5*this.qp);this.dd=1/this.rq;this.xmf=1;this.ymf=.5*this.qp;break;case this.OBLIQ:this.rq=Math.sqrt(.5*this.qp);t=Math.sin(this.lat0);this.sinb1=u(this.e,t)/this.qp;this.cosb1=Math.sqrt(1-this.sinb1*this.sinb1);this.dd=Math.cos(this.lat0)/(Math.sqrt(1-this.es*t*t)*this.rq*this.cosb1);this.ymf=(this.xmf=this.rq)/this.dd;this.xmf*=this.dd;break}}else{if(this.mode===this.OBLIQ){this.sinph0=Math.sin(this.lat0);this.cosph0=Math.cos(this.lat0)}}};e.forward=function(n){var t,e,a,o,h,f,c,d,g,p;var v=n.x;var m=n.y;v=s(v-this.long0);if(this.sphere){h=Math.sin(m);p=Math.cos(m);a=Math.cos(v);if(this.mode===this.OBLIQ||this.mode===this.EQUIT){e=this.mode===this.EQUIT?1+p*a:1+this.sinph0*h+this.cosph0*p*a;if(e<=r){return null}e=Math.sqrt(2/e);t=e*p*Math.sin(v);e*=this.mode===this.EQUIT?h:this.cosph0*h-this.sinph0*p*a}else if(this.mode===this.N_POLE||this.mode===this.S_POLE){if(this.mode===this.N_POLE){a=-a}if(Math.abs(m+this.phi0)<r){return null}e=i-m*.5;e=2*(this.mode===this.S_POLE?Math.cos(e):Math.sin(e));t=e*Math.sin(v);e*=a}}else{c=0;d=0;g=0;a=Math.cos(v);o=Math.sin(v);h=Math.sin(m);f=u(this.e,h);if(this.mode===this.OBLIQ||this.mode===this.EQUIT){c=f/this.qp;d=Math.sqrt(1-c*c)}switch(this.mode){case this.OBLIQ:g=1+this.sinb1*c+this.cosb1*d*a;break;case this.EQUIT:g=1+d*a;break;case this.N_POLE:g=l+m;f=this.qp-f;break;case this.S_POLE:g=m-l;f=this.qp+f;break}if(Math.abs(g)<r){return null}switch(this.mode){case this.OBLIQ:case this.EQUIT:g=Math.sqrt(2/g);if(this.mode===this.OBLIQ){e=this.ymf*g*(this.cosb1*c-this.sinb1*d*a)}else{e=(g=Math.sqrt(2/(1+d*a)))*c*this.ymf}t=this.xmf*g*d*o;break;case this.N_POLE:case this.S_POLE:if(f>=0){t=(g=Math.sqrt(f))*o;e=a*(this.mode===this.S_POLE?g:-g)}else{t=e=0}break}}n.x=this.a*t+this.x0;n.y=this.a*e+this.y0;return n};e.inverse=function(n){n.x-=this.x0;n.y-=this.y0;var t=n.x/this.a;var e=n.y/this.a;var i,u,a,o,h,f,c;if(this.sphere){var d=0,g,p=0;g=Math.sqrt(t*t+e*e);u=g*.5;if(u>1){return null}u=2*Math.asin(u);if(this.mode===this.OBLIQ||this.mode===this.EQUIT){p=Math.sin(u);d=Math.cos(u)}switch(this.mode){case this.EQUIT:u=Math.abs(g)<=r?0:Math.asin(e*p/g);t*=p;e=d*g;break;case this.OBLIQ:u=Math.abs(g)<=r?this.phi0:Math.asin(d*this.sinph0+e*p*this.cosph0/g);t*=p*this.cosph0;e=(d-Math.sin(u)*this.sinph0)*g;break;case this.N_POLE:e=-e;u=l-u;break;case this.S_POLE:u-=l;break}i=e===0&&(this.mode===this.EQUIT||this.mode===this.OBLIQ)?0:Math.atan2(t,e)}else{c=0;if(this.mode===this.OBLIQ||this.mode===this.EQUIT){t/=this.dd;e*=this.dd;f=Math.sqrt(t*t+e*e);if(f<r){n.x=0;n.y=this.phi0;return n}o=2*Math.asin(.5*f/this.rq);a=Math.cos(o);t*=o=Math.sin(o);if(this.mode===this.OBLIQ){c=a*this.sinb1+e*o*this.cosb1/f;h=this.qp*c;e=f*this.cosb1*a-e*this.sinb1*o}else{c=e*o/f;h=this.qp*c;e=f*a}}else if(this.mode===this.N_POLE||this.mode===this.S_POLE){if(this.mode===this.N_POLE){e=-e}h=t*t+e*e;if(!h){n.x=0;n.y=this.phi0;return n}c=1-h/this.qp;if(this.mode===this.S_POLE){c=-c}}i=Math.atan2(t,e);u=this.authlat(Math.asin(c),this.apa)}n.x=s(this.long0+i);n.y=u;return n};e.P00=.3333333333333333;e.P01=.17222222222222222;e.P02=.10257936507936508;e.P10=.06388888888888888;e.P11=.0664021164021164;e.P20=.016415012942191543;e.authset=function(n){var t;var e=[];e[0]=n*this.P00;t=n*n;e[0]+=t*this.P01;e[1]=t*this.P10;t*=n;e[0]+=t*this.P02;e[1]+=t*this.P11;e[2]=t*this.P20;return e};e.authlat=function(n,t){var e=n+n;return n+t[0]*Math.sin(e)+t[1]*Math.sin(e+e)+t[2]*Math.sin(e+e+e)};e.names=["Lambert Azimuthal Equal Area","Lambert_Azimuthal_Equal_Area","laea"]},{"../common/adjust_lon":58,"../common/qsfnz":73}],104:[function(n,t,e){var l=1e-10;var i=n("../common/msfnz");var r=n("../common/tsfnz");var u=Math.PI/2;var s=n("../common/sign");var a=n("../common/adjust_lon");var o=n("../common/phi2z");e.init=function(){if(!this.lat2){this.lat2=this.lat1}if(!this.k0){this.k0=1}this.x0=this.x0||0;this.y0=this.y0||0;if(Math.abs(this.lat1+this.lat2)<l){return}var n=this.b/this.a;this.e=Math.sqrt(1-n*n);var t=Math.sin(this.lat1);var e=Math.cos(this.lat1);var u=i(this.e,t,e);var s=r(this.e,this.lat1,t);var a=Math.sin(this.lat2);var o=Math.cos(this.lat2);var h=i(this.e,a,o);var f=r(this.e,this.lat2,a);var c=r(this.e,this.lat0,Math.sin(this.lat0));if(Math.abs(this.lat1-this.lat2)>l){this.ns=Math.log(u/h)/Math.log(s/f)}else{this.ns=t}if(isNaN(this.ns)){this.ns=t}this.f0=u/(this.ns*Math.pow(s,this.ns));this.rh=this.a*this.f0*Math.pow(c,this.ns);if(!this.title){this.title="Lambert Conformal Conic"}};e.forward=function(n){var t=n.x;var e=n.y;if(Math.abs(2*Math.abs(e)-Math.PI)<=l){e=s(e)*(u-2*l)}var i=Math.abs(Math.abs(e)-u);var o,h;if(i>l){o=r(this.e,e,Math.sin(e));h=this.a*this.f0*Math.pow(o,this.ns)}else{i=e*this.ns;if(i<=0){return null}h=0}var f=this.ns*a(t-this.long0);n.x=this.k0*(h*Math.sin(f))+this.x0;n.y=this.k0*(this.rh-h*Math.cos(f))+this.y0;return n};e.inverse=function(n){var t,e,l;var i,r;var s=(n.x-this.x0)/this.k0;var h=this.rh-(n.y-this.y0)/this.k0;if(this.ns>0){t=Math.sqrt(s*s+h*h);e=1}else{t=-Math.sqrt(s*s+h*h);e=-1}var f=0;if(t!==0){f=Math.atan2(e*s,e*h)}if(t!==0||this.ns>0){e=1/this.ns;l=Math.pow(t/(this.a*this.f0),e);i=o(this.e,l);if(i===-9999){return null}}else{i=-u}r=a(f/this.ns+this.long0);n.x=r;n.y=i;return n};e.names=["Lambert Tangential Conformal Conic Projection","Lambert_Conformal_Conic","Lambert_Conformal_Conic_2SP","lcc"]},{"../common/adjust_lon":58,"../common/msfnz":68,"../common/phi2z":69,"../common/sign":74,"../common/tsfnz":77}],105:[function(n,t,e){e.init=function(){};function l(n){return n}e.forward=l;e.inverse=l;e.names=["longlat","identity"]},{}],106:[function(n,t,e){var l=n("../common/msfnz");var i=Math.PI/2;var r=1e-10;var u=57.29577951308232;var s=n("../common/adjust_lon");var a=Math.PI/4;var o=n("../common/tsfnz");var h=n("../common/phi2z");e.init=function(){var n=this.b/this.a;this.es=1-n*n;if(!("x0"in this)){this.x0=0}if(!("y0"in this)){this.y0=0}this.e=Math.sqrt(this.es);if(this.lat_ts){if(this.sphere){this.k0=Math.cos(this.lat_ts)}else{this.k0=l(this.e,Math.sin(this.lat_ts),Math.cos(this.lat_ts))}}else{if(!this.k0){if(this.k){this.k0=this.k}else{this.k0=1}}}};e.forward=function(n){var t=n.x;var e=n.y;if(e*u>90&&e*u<-90&&t*u>180&&t*u<-180){return null}var l,h;if(Math.abs(Math.abs(e)-i)<=r){return null}else{if(this.sphere){l=this.x0+this.a*this.k0*s(t-this.long0);h=this.y0+this.a*this.k0*Math.log(Math.tan(a+.5*e))}else{var f=Math.sin(e);var c=o(this.e,e,f);l=this.x0+this.a*this.k0*s(t-this.long0);h=this.y0-this.a*this.k0*Math.log(c)}n.x=l;n.y=h;return n}};e.inverse=function(n){var t=n.x-this.x0;var e=n.y-this.y0;var l,r;if(this.sphere){r=i-2*Math.atan(Math.exp(-e/(this.a*this.k0)))}else{var u=Math.exp(-e/(this.a*this.k0));r=h(this.e,u);if(r===-9999){return null}}l=s(this.long0+t/(this.a*this.k0));n.x=l;n.y=r;return n};e.names=["Mercator","Popular Visualisation Pseudo Mercator","Mercator_1SP","Mercator_Auxiliary_Sphere","merc"]},{"../common/adjust_lon":58,"../common/msfnz":68,"../common/phi2z":69,"../common/tsfnz":77}],107:[function(n,t,e){var l=n("../common/adjust_lon");e.init=function(){};e.forward=function(n){var t=n.x;var e=n.y;var i=l(t-this.long0);var r=this.x0+this.a*i;var u=this.y0+this.a*Math.log(Math.tan(Math.PI/4+e/2.5))*1.25;n.x=r;n.y=u;return n};e.inverse=function(n){n.x-=this.x0;n.y-=this.y0;var t=l(this.long0+n.x/this.a);var e=2.5*(Math.atan(Math.exp(.8*n.y/this.a))-Math.PI/4);n.x=t;n.y=e;return n};e.names=["Miller_Cylindrical","mill"]},{"../common/adjust_lon":58}],108:[function(n,t,e){var l=n("../common/adjust_lon");var i=1e-10;e.init=function(){};e.forward=function(n){var t=n.x;var e=n.y;var r=l(t-this.long0);var u=e;var s=Math.PI*Math.sin(e);for(var a=0;true;a++){var o=-(u+Math.sin(u)-s)/(1+Math.cos(u));u+=o;if(Math.abs(o)<i){break}}u/=2;if(Math.PI/2-Math.abs(e)<i){r=0}var h=.900316316158*this.a*r*Math.cos(u)+this.x0;var f=1.4142135623731*this.a*Math.sin(u)+this.y0;n.x=h;n.y=f;return n};e.inverse=function(n){var t;var e;n.x-=this.x0;n.y-=this.y0;e=n.y/(1.4142135623731*this.a);if(Math.abs(e)>.999999999999){e=.999999999999}t=Math.asin(e);var i=l(this.long0+n.x/(.900316316158*this.a*Math.cos(t)));if(i<-Math.PI){i=-Math.PI}if(i>Math.PI){i=Math.PI}e=(2*t+Math.sin(2*t))/Math.PI;if(Math.abs(e)>1){e=1}var r=Math.asin(e);n.x=i;n.y=r;return n};e.names=["Mollweide","moll"]},{"../common/adjust_lon":58}],109:[function(n,t,e){var l=484813681109536e-20;e.iterations=1;e.init=function(){this.A=[];this.A[1]=.6399175073;this.A[2]=-.1358797613;this.A[3]=.063294409;this.A[4]=-.02526853;this.A[5]=.0117879;this.A[6]=-.0055161;this.A[7]=.0026906;this.A[8]=-.001333;this.A[9]=67e-5;this.A[10]=-34e-5;this.B_re=[];this.B_im=[];this.B_re[1]=.7557853228;this.B_im[1]=0;this.B_re[2]=.249204646;this.B_im[2]=.003371507;this.B_re[3]=-.001541739;this.B_im[3]=.04105856;this.B_re[4]=-.10162907;this.B_im[4]=.01727609;this.B_re[5]=-.26623489;this.B_im[5]=-.36249218;this.B_re[6]=-.6870983;this.B_im[6]=-1.1651967;this.C_re=[];this.C_im=[];this.C_re[1]=1.3231270439;this.C_im[1]=0;this.C_re[2]=-.577245789;this.C_im[2]=-.007809598;this.C_re[3]=.508307513;this.C_im[3]=-.112208952;this.C_re[4]=-.15094762;this.C_im[4]=.18200602;this.C_re[5]=1.01418179;this.C_im[5]=1.64497696;this.C_re[6]=1.9660549;this.C_im[6]=2.5127645;this.D=[];this.D[1]=1.5627014243;this.D[2]=.5185406398;this.D[3]=-.03333098;this.D[4]=-.1052906;this.D[5]=-.0368594;this.D[6]=.007317;this.D[7]=.0122;this.D[8]=.00394;this.D[9]=-.0013};e.forward=function(n){var t;var e=n.x;var i=n.y;var r=i-this.lat0;var u=e-this.long0;var s=r/l*1e-5;var a=u;var o=1;var h=0;for(t=1;t<=10;t++){o=o*s;h=h+this.A[t]*o}var f=h;var c=a;var d=1;var g=0;var p;var v;var m=0;var y=0;for(t=1;t<=6;t++){p=d*f-g*c;v=g*f+d*c;d=p;g=v;m=m+this.B_re[t]*d-this.B_im[t]*g;y=y+this.B_im[t]*d+this.B_re[t]*g}n.x=y*this.a+this.x0;n.y=m*this.a+this.y0;return n};e.inverse=function(n){var t;var e=n.x;var i=n.y;var r=e-this.x0;var u=i-this.y0;var s=u/this.a;var a=r/this.a;var o=1;var h=0;var f;var c;var d=0;var g=0;for(t=1;t<=6;t++){f=o*s-h*a;c=h*s+o*a;o=f;h=c;d=d+this.C_re[t]*o-this.C_im[t]*h;g=g+this.C_im[t]*o+this.C_re[t]*h}for(var p=0;p<this.iterations;p++){var v=d;var m=g;var y;var x;var w=s;var _=a;for(t=2;t<=6;t++){y=v*d-m*g;x=m*d+v*g;v=y;m=x;w=w+(t-1)*(this.B_re[t]*v-this.B_im[t]*m);_=_+(t-1)*(this.B_im[t]*v+this.B_re[t]*m)}v=1;m=0;var M=this.B_re[1];var E=this.B_im[1];for(t=2;t<=6;t++){y=v*d-m*g;x=m*d+v*g;v=y;m=x;M=M+t*(this.B_re[t]*v-this.B_im[t]*m);E=E+t*(this.B_im[t]*v+this.B_re[t]*m)}var b=M*M+E*E;d=(w*M+_*E)/b;g=(_*M-w*E)/b}var C=d;var I=g;var S=1;var N=0;for(t=1;t<=9;t++){S=S*C;N=N+this.D[t]*S}var P=this.lat0+N*l*1e5;var L=this.long0+I;n.x=L;n.y=P;return n};e.names=["New_Zealand_Map_Grid","nzmg"]},{}],110:[function(n,t,e){var l=n("../common/tsfnz");var i=n("../common/adjust_lon");var r=n("../common/phi2z");var u=Math.PI/2;var s=Math.PI/4;var a=1e-10;e.init=function(){this.no_off=this.no_off||false;this.no_rot=this.no_rot||false;if(isNaN(this.k0)){this.k0=1}var n=Math.sin(this.lat0);var t=Math.cos(this.lat0);var e=this.e*n;this.bl=Math.sqrt(1+this.es/(1-this.es)*Math.pow(t,4));this.al=this.a*this.bl*this.k0*Math.sqrt(1-this.es)/(1-e*e);var r=l(this.e,this.lat0,n);var u=this.bl/t*Math.sqrt((1-this.es)/(1-e*e));if(u*u<1){u=1}var s;var a;if(!isNaN(this.longc)){if(this.lat0>=0){s=u+Math.sqrt(u*u-1)}else{s=u-Math.sqrt(u*u-1)}this.el=s*Math.pow(r,this.bl);a=.5*(s-1/s);this.gamma0=Math.asin(Math.sin(this.alpha)/u);this.long0=this.longc-Math.asin(a*Math.tan(this.gamma0))/this.bl}else{var o=l(this.e,this.lat1,Math.sin(this.lat1));var h=l(this.e,this.lat2,Math.sin(this.lat2));if(this.lat0>=0){this.el=(u+Math.sqrt(u*u-1))*Math.pow(r,this.bl)}else{this.el=(u-Math.sqrt(u*u-1))*Math.pow(r,this.bl)}var f=Math.pow(o,this.bl);var c=Math.pow(h,this.bl);s=this.el/f;a=.5*(s-1/s);var d=(this.el*this.el-c*f)/(this.el*this.el+c*f);var g=(c-f)/(c+f);var p=i(this.long1-this.long2);this.long0=.5*(this.long1+this.long2)-Math.atan(d*Math.tan(.5*this.bl*p)/g)/this.bl;this.long0=i(this.long0);var v=i(this.long1-this.long0);this.gamma0=Math.atan(Math.sin(this.bl*v)/a);this.alpha=Math.asin(u*Math.sin(this.gamma0))}if(this.no_off){this.uc=0}else{if(this.lat0>=0){this.uc=this.al/this.bl*Math.atan2(Math.sqrt(u*u-1),Math.cos(this.alpha))}else{this.uc=-1*this.al/this.bl*Math.atan2(Math.sqrt(u*u-1),Math.cos(this.alpha))}}};e.forward=function(n){var t=n.x;var e=n.y;var r=i(t-this.long0);var o,h;var f;if(Math.abs(Math.abs(e)-u)<=a){if(e>0){f=-1}else{f=1}h=this.al/this.bl*Math.log(Math.tan(s+f*this.gamma0*.5));o=-1*f*u*this.al/this.bl}else{var c=l(this.e,e,Math.sin(e));var d=this.el/Math.pow(c,this.bl);var g=.5*(d-1/d);var p=.5*(d+1/d);var v=Math.sin(this.bl*r);var m=(g*Math.sin(this.gamma0)-v*Math.cos(this.gamma0))/p;if(Math.abs(Math.abs(m)-1)<=a){h=Number.POSITIVE_INFINITY}else{h=.5*this.al*Math.log((1-m)/(1+m))/this.bl}if(Math.abs(Math.cos(this.bl*r))<=a){o=this.al*this.bl*r}else{o=this.al*Math.atan2(g*Math.cos(this.gamma0)+v*Math.sin(this.gamma0),Math.cos(this.bl*r))/this.bl}}if(this.no_rot){n.x=this.x0+o;n.y=this.y0+h}else{o-=this.uc;n.x=this.x0+h*Math.cos(this.alpha)+o*Math.sin(this.alpha);n.y=this.y0+o*Math.cos(this.alpha)-h*Math.sin(this.alpha)}return n};e.inverse=function(n){var t,e;if(this.no_rot){e=n.y-this.y0;t=n.x-this.x0}else{e=(n.x-this.x0)*Math.cos(this.alpha)-(n.y-this.y0)*Math.sin(this.alpha);t=(n.y-this.y0)*Math.cos(this.alpha)+(n.x-this.x0)*Math.sin(this.alpha);t+=this.uc}var l=Math.exp(-1*this.bl*e/this.al);var s=.5*(l-1/l);var o=.5*(l+1/l);var h=Math.sin(this.bl*t/this.al);var f=(h*Math.cos(this.gamma0)+s*Math.sin(this.gamma0))/o;var c=Math.pow(this.el/Math.sqrt((1+f)/(1-f)),1/this.bl);if(Math.abs(f-1)<a){n.x=this.long0;n.y=u}else if(Math.abs(f+1)<a){n.x=this.long0;n.y=-1*u}else{n.y=r(this.e,c);n.x=i(this.long0-Math.atan2(s*Math.cos(this.gamma0)-h*Math.sin(this.gamma0),Math.cos(this.bl*t/this.al))/this.bl)}return n};e.names=["Hotine_Oblique_Mercator","Hotine Oblique Mercator","Hotine_Oblique_Mercator_Azimuth_Natural_Origin","Hotine_Oblique_Mercator_Azimuth_Center","omerc"]},{"../common/adjust_lon":58,"../common/phi2z":69,"../common/tsfnz":77}],111:[function(n,t,e){var l=n("../common/e0fn");var i=n("../common/e1fn");var r=n("../common/e2fn");var u=n("../common/e3fn");var s=n("../common/adjust_lon");var a=n("../common/adjust_lat");var o=n("../common/mlfn");var h=1e-10;var f=n("../common/gN");var c=20;e.init=function(){this.temp=this.b/this.a;this.es=1-Math.pow(this.temp,2);this.e=Math.sqrt(this.es);this.e0=l(this.es);this.e1=i(this.es);this.e2=r(this.es);this.e3=u(this.es);this.ml0=this.a*o(this.e0,this.e1,this.e2,this.e3,this.lat0)};e.forward=function(n){var t=n.x;var e=n.y;var l,i,r;var u=s(t-this.long0);r=u*Math.sin(e);if(this.sphere){if(Math.abs(e)<=h){l=this.a*u;i=-1*this.a*this.lat0}else{l=this.a*Math.sin(r)/Math.tan(e);i=this.a*(a(e-this.lat0)+(1-Math.cos(r))/Math.tan(e))}}else{if(Math.abs(e)<=h){l=this.a*u;i=-1*this.ml0}else{var c=f(this.a,this.e,Math.sin(e))/Math.tan(e);l=c*Math.sin(r);i=this.a*o(this.e0,this.e1,this.e2,this.e3,e)-this.ml0+c*(1-Math.cos(r))}}n.x=l+this.x0;n.y=i+this.y0;return n};e.inverse=function(n){var t,e,l,i,r;var u,a;var f,d;l=n.x-this.x0;i=n.y-this.y0;if(this.sphere){if(Math.abs(i+this.a*this.lat0)<=h){t=s(l/this.a+this.long0);e=0}else{u=this.lat0+i/this.a;a=l*l/this.a/this.a+u*u;f=u;var g;for(r=c;r;--r){g=Math.tan(f);d=-1*(u*(f*g+1)-f-.5*(f*f+a)*g)/((f-u)/g-1);f+=d;if(Math.abs(d)<=h){e=f;break}}t=s(this.long0+Math.asin(l*Math.tan(f)/this.a)/Math.sin(e))}}else{if(Math.abs(i+this.ml0)<=h){e=0;t=s(this.long0+l/this.a)}else{u=(this.ml0+i)/this.a;a=l*l/this.a/this.a+u*u;f=u;var p,v,m,y;var x;for(r=c;r;--r){x=this.e*Math.sin(f);p=Math.sqrt(1-x*x)*Math.tan(f);v=this.a*o(this.e0,this.e1,this.e2,this.e3,f);m=this.e0-2*this.e1*Math.cos(2*f)+4*this.e2*Math.cos(4*f)-6*this.e3*Math.cos(6*f);y=v/this.a;d=(u*(p*y+1)-y-.5*p*(y*y+a))/(this.es*Math.sin(2*f)*(y*y+a-2*u*y)/(4*p)+(u-y)*(p*m-2/Math.sin(2*f))-m);f-=d;if(Math.abs(d)<=h){e=f;break}}p=Math.sqrt(1-this.es*Math.pow(Math.sin(e),2))*Math.tan(e);t=s(this.long0+Math.asin(l*p/this.a)/Math.sin(e))}}n.x=t;n.y=e;return n};e.names=["Polyconic","poly"]},{"../common/adjust_lat":57,"../common/adjust_lon":58,"../common/e0fn":60,"../common/e1fn":61,"../common/e2fn":62,"../common/e3fn":63,"../common/gN":64,"../common/mlfn":67}],112:[function(n,t,e){var l=n("../common/adjust_lon");var i=n("../common/adjust_lat");var r=n("../common/pj_enfn");var u=20;var s=n("../common/pj_mlfn");var a=n("../common/pj_inv_mlfn");var o=Math.PI/2;var h=1e-10;var f=n("../common/asinz");e.init=function(){if(!this.sphere){this.en=r(this.es)}else{this.n=1;this.m=0;this.es=0;this.C_y=Math.sqrt((this.m+1)/this.n);this.C_x=this.C_y/(this.m+1)}};e.forward=function(n){var t,e;var i=n.x;var r=n.y;i=l(i-this.long0);if(this.sphere){if(!this.m){r=this.n!==1?Math.asin(this.n*Math.sin(r)):r}else{var a=this.n*Math.sin(r);for(var o=u;o;--o){var f=(this.m*r+Math.sin(r)-a)/(this.m+Math.cos(r));r-=f;if(Math.abs(f)<h){break}}}t=this.a*this.C_x*i*(this.m+Math.cos(r));e=this.a*this.C_y*r}else{var c=Math.sin(r);var d=Math.cos(r);e=this.a*s(r,c,d,this.en);t=this.a*i*d/Math.sqrt(1-this.es*c*c)}n.x=t;n.y=e;return n};e.inverse=function(n){var t,e,r,u;n.x-=this.x0;r=n.x/this.a;n.y-=this.y0;t=n.y/this.a;if(this.sphere){t/=this.C_y;r=r/(this.C_x*(this.m+Math.cos(t)));if(this.m){t=f((this.m*t+Math.sin(t))/this.n)}else if(this.n!==1){t=f(Math.sin(t)/this.n)}r=l(r+this.long0);t=i(t)}else{t=a(n.y/this.a,this.es,this.en);u=Math.abs(t);if(u<o){u=Math.sin(t);e=this.long0+n.x*Math.sqrt(1-this.es*u*u)/(this.a*Math.cos(t));r=l(e)}else if(u-h<o){r=this.long0}}n.x=r;n.y=t;return n};e.names=["Sinusoidal","sinu"]},{"../common/adjust_lat":57,"../common/adjust_lon":58,"../common/asinz":59,"../common/pj_enfn":70,"../common/pj_inv_mlfn":71,"../common/pj_mlfn":72}],113:[function(n,t,e){e.init=function(){var n=this.lat0;this.lambda0=this.long0;var t=Math.sin(n);var e=this.a;var l=this.rf;var i=1/l;var r=2*i-Math.pow(i,2);var u=this.e=Math.sqrt(r);this.R=this.k0*e*Math.sqrt(1-r)/(1-r*Math.pow(t,2));this.alpha=Math.sqrt(1+r/(1-r)*Math.pow(Math.cos(n),4));this.b0=Math.asin(t/this.alpha);var s=Math.log(Math.tan(Math.PI/4+this.b0/2));var a=Math.log(Math.tan(Math.PI/4+n/2));var o=Math.log((1+u*t)/(1-u*t));this.K=s-this.alpha*a+this.alpha*u/2*o};e.forward=function(n){var t=Math.log(Math.tan(Math.PI/4-n.y/2));var e=this.e/2*Math.log((1+this.e*Math.sin(n.y))/(1-this.e*Math.sin(n.y)));var l=-this.alpha*(t+e)+this.K;var i=2*(Math.atan(Math.exp(l))-Math.PI/4);var r=this.alpha*(n.x-this.lambda0);var u=Math.atan(Math.sin(r)/(Math.sin(this.b0)*Math.tan(i)+Math.cos(this.b0)*Math.cos(r)));var s=Math.asin(Math.cos(this.b0)*Math.sin(i)-Math.sin(this.b0)*Math.cos(i)*Math.cos(r));n.y=this.R/2*Math.log((1+Math.sin(s))/(1-Math.sin(s)))+this.y0;n.x=this.R*u+this.x0;return n};e.inverse=function(n){var t=n.x-this.x0;var e=n.y-this.y0;var l=t/this.R;var i=2*(Math.atan(Math.exp(e/this.R))-Math.PI/4);var r=Math.asin(Math.cos(this.b0)*Math.sin(i)+Math.sin(this.b0)*Math.cos(i)*Math.cos(l));var u=Math.atan(Math.sin(l)/(Math.cos(this.b0)*Math.cos(l)-Math.sin(this.b0)*Math.tan(i)));var s=this.lambda0+u/this.alpha;var a=0;var o=r;var h=-1e3;var f=0;while(Math.abs(o-h)>1e-7){if(++f>20){return}a=1/this.alpha*(Math.log(Math.tan(Math.PI/4+r/2))-this.K)+this.e*Math.log(Math.tan(Math.PI/4+Math.asin(this.e*Math.sin(o))/2));h=o;o=2*Math.atan(Math.exp(a))-Math.PI/2}n.x=s;n.y=o;return n};e.names=["somerc"]},{}],114:[function(n,t,e){var l=Math.PI/2;var i=1e-10;var r=n("../common/sign");var u=n("../common/msfnz");var s=n("../common/tsfnz");var a=n("../common/phi2z");var o=n("../common/adjust_lon");e.ssfn_=function(n,t,e){t*=e;return Math.tan(.5*(l+n))*Math.pow((1-t)/(1+t),.5*e)};e.init=function(){this.coslat0=Math.cos(this.lat0);this.sinlat0=Math.sin(this.lat0);if(this.sphere){if(this.k0===1&&!isNaN(this.lat_ts)&&Math.abs(this.coslat0)<=i){this.k0=.5*(1+r(this.lat0)*Math.sin(this.lat_ts))}}else{if(Math.abs(this.coslat0)<=i){if(this.lat0>0){this.con=1}else{this.con=-1}}this.cons=Math.sqrt(Math.pow(1+this.e,1+this.e)*Math.pow(1-this.e,1-this.e));if(this.k0===1&&!isNaN(this.lat_ts)&&Math.abs(this.coslat0)<=i){this.k0=.5*this.cons*u(this.e,Math.sin(this.lat_ts),Math.cos(this.lat_ts))/s(this.e,this.con*this.lat_ts,this.con*Math.sin(this.lat_ts))}this.ms1=u(this.e,this.sinlat0,this.coslat0);this.X0=2*Math.atan(this.ssfn_(this.lat0,this.sinlat0,this.e))-l;this.cosX0=Math.cos(this.X0);this.sinX0=Math.sin(this.X0)}};e.forward=function(n){var t=n.x;var e=n.y;var r=Math.sin(e);var u=Math.cos(e);var a,h,f,c,d,g;var p=o(t-this.long0);if(Math.abs(Math.abs(t-this.long0)-Math.PI)<=i&&Math.abs(e+this.lat0)<=i){n.x=NaN;n.y=NaN;return n}if(this.sphere){a=2*this.k0/(1+this.sinlat0*r+this.coslat0*u*Math.cos(p));n.x=this.a*a*u*Math.sin(p)+this.x0;n.y=this.a*a*(this.coslat0*r-this.sinlat0*u*Math.cos(p))+this.y0;return n}else{h=2*Math.atan(this.ssfn_(e,r,this.e))-l;c=Math.cos(h);f=Math.sin(h);if(Math.abs(this.coslat0)<=i){d=s(this.e,e*this.con,this.con*r);g=2*this.a*this.k0*d/this.cons;n.x=this.x0+g*Math.sin(t-this.long0);n.y=this.y0-this.con*g*Math.cos(t-this.long0);return n}else if(Math.abs(this.sinlat0)<i){a=2*this.a*this.k0/(1+c*Math.cos(p));n.y=a*f}else{a=2*this.a*this.k0*this.ms1/(this.cosX0*(1+this.sinX0*f+this.cosX0*c*Math.cos(p)));n.y=a*(this.cosX0*f-this.sinX0*c*Math.cos(p))+this.y0}n.x=a*c*Math.sin(p)+this.x0}return n};e.inverse=function(n){n.x-=this.x0;n.y-=this.y0;var t,e,r,u,s;var h=Math.sqrt(n.x*n.x+n.y*n.y);if(this.sphere){var f=2*Math.atan(h/(.5*this.a*this.k0));t=this.long0;e=this.lat0;if(h<=i){n.x=t;n.y=e;return n}e=Math.asin(Math.cos(f)*this.sinlat0+n.y*Math.sin(f)*this.coslat0/h);if(Math.abs(this.coslat0)<i){if(this.lat0>0){t=o(this.long0+Math.atan2(n.x,-1*n.y))}else{t=o(this.long0+Math.atan2(n.x,n.y))}}else{t=o(this.long0+Math.atan2(n.x*Math.sin(f),h*this.coslat0*Math.cos(f)-n.y*this.sinlat0*Math.sin(f)))}n.x=t;n.y=e;return n}else{if(Math.abs(this.coslat0)<=i){if(h<=i){e=this.lat0;t=this.long0;n.x=t;n.y=e;return n}n.x*=this.con;n.y*=this.con;r=h*this.cons/(2*this.a*this.k0);e=this.con*a(this.e,r);t=this.con*o(this.con*this.long0+Math.atan2(n.x,-1*n.y))}else{u=2*Math.atan(h*this.cosX0/(2*this.a*this.k0*this.ms1));t=this.long0;if(h<=i){s=this.X0}else{s=Math.asin(Math.cos(u)*this.sinX0+n.y*Math.sin(u)*this.cosX0/h);t=o(this.long0+Math.atan2(n.x*Math.sin(u),h*this.cosX0*Math.cos(u)-n.y*this.sinX0*Math.sin(u)))}e=-1*a(this.e,Math.tan(.5*(l+s)))}}n.x=t;n.y=e;return n};e.names=["stere","Stereographic_South_Pole","Polar Stereographic (variant B)"]},{"../common/adjust_lon":58,"../common/msfnz":68,"../common/phi2z":69,"../common/sign":74,"../common/tsfnz":77}],115:[function(n,t,e){var l=n("./gauss");var i=n("../common/adjust_lon");e.init=function(){l.init.apply(this);if(!this.rc){return}this.sinc0=Math.sin(this.phic0);this.cosc0=Math.cos(this.phic0);this.R2=2*this.rc;if(!this.title){this.title="Oblique Stereographic Alternative"}};e.forward=function(n){var t,e,r,u;n.x=i(n.x-this.long0);l.forward.apply(this,[n]);t=Math.sin(n.y);e=Math.cos(n.y);r=Math.cos(n.x);u=this.k0*this.R2/(1+this.sinc0*t+this.cosc0*e*r);n.x=u*e*Math.sin(n.x);n.y=u*(this.cosc0*t-this.sinc0*e*r);n.x=this.a*n.x+this.x0;n.y=this.a*n.y+this.y0;return n};e.inverse=function(n){var t,e,r,u,s;n.x=(n.x-this.x0)/this.a;n.y=(n.y-this.y0)/this.a;n.x/=this.k0;n.y/=this.k0;if(s=Math.sqrt(n.x*n.x+n.y*n.y)){var a=2*Math.atan2(s,this.R2);t=Math.sin(a);e=Math.cos(a);u=Math.asin(e*this.sinc0+n.y*t*this.cosc0/s);r=Math.atan2(n.x*t,s*this.cosc0*e-n.y*this.sinc0*t)}else{u=this.phic0;r=0}n.x=r;n.y=u;l.inverse.apply(this,[n]);n.x=i(n.x+this.long0);return n};e.names=["Stereographic_North_Pole","Oblique_Stereographic","Polar_Stereographic","sterea","Oblique Stereographic Alternative"]},{"../common/adjust_lon":58,"./gauss":100}],116:[function(n,t,e){var l=n("../common/e0fn");var i=n("../common/e1fn");var r=n("../common/e2fn");var u=n("../common/e3fn");var s=n("../common/mlfn");var a=n("../common/adjust_lon");var o=Math.PI/2;var h=1e-10;var f=n("../common/sign");var c=n("../common/asinz");e.init=function(){this.e0=l(this.es);this.e1=i(this.es);this.e2=r(this.es);this.e3=u(this.es);this.ml0=this.a*s(this.e0,this.e1,this.e2,this.e3,this.lat0)};e.forward=function(n){var t=n.x;var e=n.y;var l=a(t-this.long0);var i;var r,u;var o=Math.sin(e);var h=Math.cos(e);if(this.sphere){var f=h*Math.sin(l);if(Math.abs(Math.abs(f)-1)<1e-10){return 93}else{r=.5*this.a*this.k0*Math.log((1+f)/(1-f));i=Math.acos(h*Math.cos(l)/Math.sqrt(1-f*f));if(e<0){i=-i}u=this.a*this.k0*(i-this.lat0)}}else{var c=h*l;var d=Math.pow(c,2);var g=this.ep2*Math.pow(h,2);var p=Math.tan(e);var v=Math.pow(p,2);i=1-this.es*Math.pow(o,2);var m=this.a/Math.sqrt(i);var y=this.a*s(this.e0,this.e1,this.e2,this.e3,e);r=this.k0*m*c*(1+d/6*(1-v+g+d/20*(5-18*v+Math.pow(v,2)+72*g-58*this.ep2)))+this.x0;u=this.k0*(y-this.ml0+m*p*(d*(.5+d/24*(5-v+9*g+4*Math.pow(g,2)+d/30*(61-58*v+Math.pow(v,2)+600*g-330*this.ep2)))))+this.y0}n.x=r;n.y=u;return n};e.inverse=function(n){var t,e;var l;var i;var r=6;var u,s;if(this.sphere){var d=Math.exp(n.x/(this.a*this.k0));var g=.5*(d-1/d);var p=this.lat0+n.y/(this.a*this.k0);var v=Math.cos(p);t=Math.sqrt((1-v*v)/(1+g*g));u=c(t);if(p<0){u=-u}if(g===0&&v===0){s=this.long0}else{s=a(Math.atan2(g,v)+this.long0)}}else{var m=n.x-this.x0;var y=n.y-this.y0;t=(this.ml0+y/this.k0)/this.a;e=t;for(i=0;true;i++){l=(t+this.e1*Math.sin(2*e)-this.e2*Math.sin(4*e)+this.e3*Math.sin(6*e))/this.e0-e;e+=l;if(Math.abs(l)<=h){break}if(i>=r){return 95}}if(Math.abs(e)<o){var x=Math.sin(e);var w=Math.cos(e);var _=Math.tan(e);var M=this.ep2*Math.pow(w,2);var E=Math.pow(M,2);var b=Math.pow(_,2);var C=Math.pow(b,2);t=1-this.es*Math.pow(x,2);var I=this.a/Math.sqrt(t);var S=I*(1-this.es)/t;var N=m/(I*this.k0);var P=Math.pow(N,2);u=e-I*_*P/S*(.5-P/24*(5+3*b+10*M-4*E-9*this.ep2-P/30*(61+90*b+298*M+45*C-252*this.ep2-3*E)));s=a(this.long0+N*(1-P/6*(1+2*b+M-P/20*(5-2*M+28*b-3*E+8*this.ep2+24*C)))/w)}else{u=o*f(y);s=this.long0}}n.x=s;n.y=u;return n};e.names=["Transverse_Mercator","Transverse Mercator","tmerc"]},{"../common/adjust_lon":58,"../common/asinz":59,"../common/e0fn":60,"../common/e1fn":61,"../common/e2fn":62,"../common/e3fn":63,"../common/mlfn":67,"../common/sign":74}],117:[function(n,t,e){var l=.017453292519943295;var i=n("./tmerc");e.dependsOn="tmerc";e.init=function(){if(!this.zone){return}this.lat0=0;this.long0=(6*Math.abs(this.zone)-183)*l;this.x0=5e5;this.y0=this.utmSouth?1e7:0;this.k0=.9996;i.init.apply(this);this.forward=i.forward;this.inverse=i.inverse};e.names=["Universal Transverse Mercator System","utm"]},{"./tmerc":116}],118:[function(n,t,e){var l=n("../common/adjust_lon");var i=Math.PI/2;var r=1e-10;var u=n("../common/asinz");e.init=function(){this.R=this.a};e.forward=function(n){var t=n.x;var e=n.y;var s=l(t-this.long0);var a,o;if(Math.abs(e)<=r){a=this.x0+this.R*s;o=this.y0}var h=u(2*Math.abs(e/Math.PI))
;if(Math.abs(s)<=r||Math.abs(Math.abs(e)-i)<=r){a=this.x0;if(e>=0){o=this.y0+Math.PI*this.R*Math.tan(.5*h)}else{o=this.y0+Math.PI*this.R*-Math.tan(.5*h)}}var f=.5*Math.abs(Math.PI/s-s/Math.PI);var c=f*f;var d=Math.sin(h);var g=Math.cos(h);var p=g/(d+g-1);var v=p*p;var m=p*(2/d-1);var y=m*m;var x=Math.PI*this.R*(f*(p-y)+Math.sqrt(c*(p-y)*(p-y)-(y+c)*(v-y)))/(y+c);if(s<0){x=-x}a=this.x0+x;var w=c+p;x=Math.PI*this.R*(m*w-f*Math.sqrt((y+c)*(c+1)-w*w))/(y+c);if(e>=0){o=this.y0+x}else{o=this.y0-x}n.x=a;n.y=o;return n};e.inverse=function(n){var t,e;var i,u,s,a,o,h;var f;var c;var d;var g;var p;n.x-=this.x0;n.y-=this.y0;d=Math.PI*this.R;i=n.x/d;u=n.y/d;s=i*i+u*u;a=-Math.abs(u)*(1+s);o=a-2*u*u+i*i;h=-2*a+1+2*u*u+s*s;p=u*u/h+(2*o*o*o/h/h/h-9*a*o/h/h)/27;f=(a-o*o/3/h)/h;c=2*Math.sqrt(-f/3);d=3*p/f/c;if(Math.abs(d)>1){if(d>=0){d=1}else{d=-1}}g=Math.acos(d)/3;if(n.y>=0){e=(-c*Math.cos(g+Math.PI/3)-o/3/h)*Math.PI}else{e=-(-c*Math.cos(g+Math.PI/3)-o/3/h)*Math.PI}if(Math.abs(i)<r){t=this.long0}else{t=l(this.long0+Math.PI*(s-1+Math.sqrt(1+2*(i*i-u*u)+s*s))/2/i)}n.x=t;n.y=e;return n};e.names=["Van_der_Grinten_I","VanDerGrinten","vandg"]},{"../common/adjust_lon":58,"../common/asinz":59}],119:[function(n,t,e){var l=.017453292519943295;var i=57.29577951308232;var r=1;var u=2;var s=n("./datum_transform");var a=n("./adjust_axis");var o=n("./Proj");var h=n("./common/toPoint");t.exports=function n(t,e,f){var c;if(Array.isArray(f)){f=h(f)}function d(n,t){return(n.datum.datum_type===r||n.datum.datum_type===u)&&t.datumCode!=="WGS84"}if(t.datum&&e.datum&&(d(t,e)||d(e,t))){c=new o("WGS84");n(t,c,f);t=c}if(t.axis!=="enu"){a(t,false,f)}if(t.projName==="longlat"){f.x*=l;f.y*=l}else{if(t.to_meter){f.x*=t.to_meter;f.y*=t.to_meter}t.inverse(f)}if(t.from_greenwich){f.x+=t.from_greenwich}f=s(t.datum,e.datum,f);if(e.from_greenwich){f.x-=e.from_greenwich}if(e.projName==="longlat"){f.x*=i;f.y*=i}else{e.forward(f);if(e.to_meter){f.x/=e.to_meter;f.y/=e.to_meter}}if(e.axis!=="enu"){a(e,true,f)}return f}},{"./Proj":55,"./adjust_axis":56,"./common/toPoint":76,"./datum_transform":84}],120:[function(n,t,e){var l=.017453292519943295;var i=n("./extend");function r(n,t,e){n[t]=e.map(function(n){var t={};u(n,t);return t}).reduce(function(n,t){return i(n,t)},{})}function u(n,t){var e;if(!Array.isArray(n)){t[n]=true;return}else{e=n.shift();if(e==="PARAMETER"){e=n.shift()}if(n.length===1){if(Array.isArray(n[0])){t[e]={};u(n[0],t[e])}else{t[e]=n[0]}}else if(!n.length){t[e]=true}else if(e==="TOWGS84"){t[e]=n}else{t[e]={};if(["UNIT","PRIMEM","VERT_DATUM"].indexOf(e)>-1){t[e]={name:n[0].toLowerCase(),convert:n[1]};if(n.length===3){t[e].auth=n[2]}}else if(e==="SPHEROID"){t[e]={name:n[0],a:n[1],rf:n[2]};if(n.length===4){t[e].auth=n[3]}}else if(["GEOGCS","GEOCCS","DATUM","VERT_CS","COMPD_CS","LOCAL_CS","FITTED_CS","LOCAL_DATUM"].indexOf(e)>-1){n[0]=["name",n[0]];r(t,e,n)}else if(n.every(function(n){return Array.isArray(n)})){r(t,e,n)}else{u(n,t[e])}}}}function s(n,t){var e=t[0];var l=t[1];if(!(e in n)&&l in n){n[e]=n[l];if(t.length===3){n[e]=t[2](n[e])}}}function a(n){return n*l}function o(n){if(n.type==="GEOGCS"){n.projName="longlat"}else if(n.type==="LOCAL_CS"){n.projName="identity";n.local=true}else{if(typeof n.PROJECTION==="object"){n.projName=Object.keys(n.PROJECTION)[0]}else{n.projName=n.PROJECTION}}if(n.UNIT){n.units=n.UNIT.name.toLowerCase();if(n.units==="metre"){n.units="meter"}if(n.UNIT.convert){if(n.type==="GEOGCS"){if(n.DATUM&&n.DATUM.SPHEROID){n.to_meter=parseFloat(n.UNIT.convert,10)*n.DATUM.SPHEROID.a}}else{n.to_meter=parseFloat(n.UNIT.convert,10)}}}if(n.GEOGCS){if(n.GEOGCS.DATUM){n.datumCode=n.GEOGCS.DATUM.name.toLowerCase()}else{n.datumCode=n.GEOGCS.name.toLowerCase()}if(n.datumCode.slice(0,2)==="d_"){n.datumCode=n.datumCode.slice(2)}if(n.datumCode==="new_zealand_geodetic_datum_1949"||n.datumCode==="new_zealand_1949"){n.datumCode="nzgd49"}if(n.datumCode==="wgs_1984"){if(n.PROJECTION==="Mercator_Auxiliary_Sphere"){n.sphere=true}n.datumCode="wgs84"}if(n.datumCode.slice(-6)==="_ferro"){n.datumCode=n.datumCode.slice(0,-6)}if(n.datumCode.slice(-8)==="_jakarta"){n.datumCode=n.datumCode.slice(0,-8)}if(~n.datumCode.indexOf("belge")){n.datumCode="rnb72"}if(n.GEOGCS.DATUM&&n.GEOGCS.DATUM.SPHEROID){n.ellps=n.GEOGCS.DATUM.SPHEROID.name.replace("_19","").replace(/[Cc]larke\_18/,"clrk");if(n.ellps.toLowerCase().slice(0,13)==="international"){n.ellps="intl"}n.a=n.GEOGCS.DATUM.SPHEROID.a;n.rf=parseFloat(n.GEOGCS.DATUM.SPHEROID.rf,10)}if(~n.datumCode.indexOf("osgb_1936")){n.datumCode="osgb36"}}if(n.b&&!isFinite(n.b)){n.b=n.a}function t(t){var e=n.to_meter||1;return parseFloat(t,10)*e}var e=function(t){return s(n,t)};var l=[["standard_parallel_1","Standard_Parallel_1"],["standard_parallel_2","Standard_Parallel_2"],["false_easting","False_Easting"],["false_northing","False_Northing"],["central_meridian","Central_Meridian"],["latitude_of_origin","Latitude_Of_Origin"],["latitude_of_origin","Central_Parallel"],["scale_factor","Scale_Factor"],["k0","scale_factor"],["latitude_of_center","Latitude_of_center"],["lat0","latitude_of_center",a],["longitude_of_center","Longitude_Of_Center"],["longc","longitude_of_center",a],["x0","false_easting",t],["y0","false_northing",t],["long0","central_meridian",a],["lat0","latitude_of_origin",a],["lat0","standard_parallel_1",a],["lat1","standard_parallel_1",a],["lat2","standard_parallel_2",a],["alpha","azimuth",a],["srsCode","name"]];l.forEach(e);if(!n.long0&&n.longc&&(n.projName==="Albers_Conic_Equal_Area"||n.projName==="Lambert_Azimuthal_Equal_Area")){n.long0=n.longc}if(!n.lat_ts&&n.lat1&&(n.projName==="Stereographic_South_Pole"||n.projName==="Polar Stereographic (variant B)")){n.lat0=a(n.lat1>0?90:-90);n.lat_ts=n.lat1}}t.exports=function(n,t){var e=JSON.parse((","+n).replace(/\s*\,\s*([A-Z_0-9]+?)(\[)/g,',["$1",').slice(1).replace(/\s*\,\s*([A-Z_0-9]+?)\]/g,',"$1"]').replace(/,\["VERTCS".+/,""));var l=e.shift();var r=e.shift();e.unshift(["name",r]);e.unshift(["type",l]);e.unshift("output");var s={};u(e,s);o(s.output);return i(t,s.output)}},{"./extend":87}],121:[function(n,t,e){t.exports={_args:[["proj4@^2.1.4","/Users/cmetcalf/projects/shapefile-js"]],_from:"proj4@>=2.1.4 <3.0.0",_id:"proj4@2.3.14",_inCache:true,_installable:true,_location:"/proj4",_nodeVersion:"4.2.6",_npmOperationalInternal:{host:"packages-13-west.internal.npmjs.com",tmp:"tmp/proj4-2.3.14.tgz_1457689264880_0.9409773757215589"},_npmUser:{email:"andreas.hocevar@gmail.com",name:"ahocevar"},_npmVersion:"2.14.12",_phantomChildren:{},_requested:{name:"proj4",raw:"proj4@^2.1.4",rawSpec:"^2.1.4",scope:null,spec:">=2.1.4 <3.0.0",type:"range"},_requiredBy:["/"],_resolved:"https://registry.npmjs.org/proj4/-/proj4-2.3.14.tgz",_shasum:"928906144388980c914c5a357fc493aba59a747a",_shrinkwrap:null,_spec:"proj4@^2.1.4",_where:"/Users/cmetcalf/projects/shapefile-js",author:"",bugs:{url:"https://github.com/proj4js/proj4js/issues"},contributors:[{name:"Mike Adair",email:"madair@dmsolutions.ca"},{name:"Richard Greenwood",email:"rich@greenwoodmap.com"},{name:"Calvin Metcalf",email:"calvin.metcalf@gmail.com"},{name:"Richard Marsden",url:"http://www.winwaed.com"},{name:"T. Mittan"},{name:"D. Steinwand"},{name:"S. Nelson"}],dependencies:{mgrs:"~0.0.2"},description:"Proj4js is a JavaScript library to transform point coordinates from one coordinate system to another, including datum transformations.",devDependencies:{browserify:"~12.0.1",chai:"~1.8.1",curl:"git://github.com/cujojs/curl.git",grunt:"~0.4.2","grunt-browserify":"~4.0.1","grunt-cli":"~0.1.13","grunt-contrib-connect":"~0.6.0","grunt-contrib-jshint":"~0.8.0","grunt-contrib-uglify":"~0.11.1","grunt-mocha-phantomjs":"~0.4.0",istanbul:"~0.2.4",mocha:"~1.17.1",tin:"~0.4.0"},directories:{doc:"docs",test:"test"},dist:{shasum:"928906144388980c914c5a357fc493aba59a747a",tarball:"http://registry.npmjs.org/proj4/-/proj4-2.3.14.tgz"},gitHead:"7619c8a63df1eae5bad0b9ad31ca1d87b0549243",homepage:"https://github.com/proj4js/proj4js#readme",jam:{include:["AUTHORS","LICENSE.md","README.md","dist/proj4.js"],main:"dist/proj4.js"},license:"MIT",main:"lib/index.js",maintainers:[{name:"cwmma",email:"calvin.metcalf@gmail.com"},{name:"ahocevar",email:"andreas.hocevar@gmail.com"}],name:"proj4",optionalDependencies:{},readme:"ERROR: No README data found!",repository:{type:"git",url:"git://github.com/proj4js/proj4js.git"},scripts:{test:"./node_modules/istanbul/lib/cli.js test ./node_modules/mocha/bin/_mocha test/test.js"},version:"2.3.14"}},{}],122:[function(n,t,e){(function(e){"use strict";var l=n("proj4");var i=n("./unzip");var r=n("./binaryajax");var u=n("./parseShp");var s=n("./toArrayBuffer");var a=n("parsedbf");var o=n("lie");var h=n("lru-cache");var f=new h({max:20});function c(n,t){if(typeof n==="string"&&f.has(n)){return o.resolve(f.get(n))}return c.getShapefile(n,t).then(function(t){if(typeof n==="string"){f.set(n,t)}return t})}c.combine=function(n){var t={};t.type="FeatureCollection";t.features=[];var e=0;var l=n[0].length;while(e<l){t.features.push({type:"Feature",geometry:n[0][e],properties:n[1][e]});e++}return t};c.parseZip=function(n,t){var e;var r=i(n);var s=[];t=t||[];for(e in r){if(e.indexOf("__MACOSX")!==-1){continue}if(e.slice(-3).toLowerCase()==="shp"){s.push(e.slice(0,-4));r[e.slice(0,-3)+e.slice(-3).toLowerCase()]=r[e]}else if(e.slice(-3).toLowerCase()==="dbf"){r[e.slice(0,-3)+e.slice(-3).toLowerCase()]=a(r[e])}else if(e.slice(-3).toLowerCase()==="prj"){r[e.slice(0,-3)+e.slice(-3).toLowerCase()]=l(r[e])}else if(e.slice(-4).toLowerCase()==="json"||t.indexOf(e.split(".").pop())>-1){s.push(e.slice(0,-3)+e.slice(-3).toLowerCase())}}if(!s.length){throw new Error("no layers founds")}var o=s.map(function(n){var e;var l=n.lastIndexOf(".");if(l>-1&&n.slice(l).indexOf("json")>-1){e=JSON.parse(r[n]);e.fileName=n.slice(0,l)}else if(t.indexOf(n.slice(l+1))>-1){e=r[n];e.fileName=n}else{e=c.combine([u(r[n+".shp"],r[n+".prj"]),r[n+".dbf"]]);e.fileName=n}return e});if(o.length===1){return o[0]}else{return o}};c.proj4=l;c.unzip=i;c.Promise=o;c.toArrayBuffer=s;function d(n,t){return r(n).then(function(n){return c.parseZip(n,t)})}c.getShapefile=function(n,t){if(typeof n==="string"){if(n.slice(-4)===".zip"){return d(n,t)}else{return o.all([o.all([r(n+".shp"),r(n+".prj")]).then(function(n){return u(n[0],n[1]?l(n[1]):false)}),r(n+".dbf").then(a)]).then(c.combine)}}else{return new o(function(t){t(c.parseZip(n))})}};c.parseShp=function(n,t){if(e.isBuffer(n)){n=s(n)}if(e.isBuffer(t)){t=t.toString()}if(typeof t==="string"){t=l(t);return u(n,t)}else{return u(n)}};c.parseDbf=function(n){if(e.isBuffer(n)){n=s(n)}return a(n)};t.exports=c}).call(this,{isBuffer:n("../node_modules/is-buffer/index.js")})},{"../node_modules/is-buffer/index.js":10,"./binaryajax":1,"./parseShp":2,"./toArrayBuffer":3,"./unzip":4,lie:34,"lru-cache":35,parsedbf:53,proj4:90}]},{},[122])(122)});(function n(t,e,l){function i(u,s){if(!e[u]){if(!t[u]){var a=typeof require=="function"&&require;if(!s&&a)return a(u,!0);if(r)return r(u,!0);throw new Error("Cannot find module '"+u+"'")}var o=e[u]={exports:{}};t[u][0].call(o.exports,function(n){var e=t[u][1][n];return i(e?e:n)},o,o.exports,n,t,e,l)}return e[u].exports}var r=typeof require=="function"&&require;for(var u=0;u<l.length;u++)i(l[u]);return i})({1:[function(n,t,e){t.exports=n("topojson")},{topojson:2}],2:[function(n,t,e){var l=t.exports=n("./topojson");l.topology=n("./lib/topojson/topology");l.simplify=n("./lib/topojson/simplify");l.clockwise=n("./lib/topojson/clockwise");l.filter=n("./lib/topojson/filter");l.prune=n("./lib/topojson/prune");l.bind=n("./lib/topojson/bind")},{"./lib/topojson/bind":3,"./lib/topojson/clockwise":6,"./lib/topojson/filter":10,"./lib/topojson/prune":13,"./lib/topojson/simplify":15,"./lib/topojson/topology":18,"./topojson":29}],3:[function(n,t,e){var l=n("./type"),i=n("../../");t.exports=function(n,t){var e=l({geometry:function(n){var e=n.properties,l=t[n.id];if(l){if(e)for(var i in l)e[i]=l[i];else for(var i in l){n.properties=l;break}}this.defaults.geometry.call(this,n)},LineString:r,MultiLineString:r,Point:r,MultiPoint:r,Polygon:r,MultiPolygon:r});for(var i in n.objects){e.object(n.objects[i])}};function r(){}},{"../../":2,"./type":28}],4:[function(n,t,e){t.exports=function(n){var t=Infinity,e=Infinity,l=-Infinity,i=-Infinity;function r(n){if(n&&u.hasOwnProperty(n.type))u[n.type](n)}var u={GeometryCollection:function(n){n.geometries.forEach(r)},Point:function(n){s(n.coordinates)},MultiPoint:function(n){n.coordinates.forEach(s)},LineString:function(n){a(n.coordinates)},MultiLineString:function(n){n.coordinates.forEach(a)},Polygon:function(n){n.coordinates.forEach(a)},MultiPolygon:function(n){n.coordinates.forEach(o)}};function s(n){var r=n[0],u=n[1];if(r<t)t=r;if(r>l)l=r;if(u<e)e=u;if(u>i)i=u}function a(n){n.forEach(s)}function o(n){n.forEach(a)}for(var h in n){r(n[h])}return[t,e,l,i]}},{}],5:[function(n,t,e){e.name="cartesian";e.formatDistance=l;e.ringArea=i;e.absoluteArea=Math.abs;e.triangleArea=r;e.distance=u;function l(n){return n.toString()}function i(n){var t=0,e=n.length,l=n[e-1][1]*n[0][0]-n[e-1][0]*n[0][1];while(++t<e){l+=n[t-1][1]*n[t][0]-n[t-1][0]*n[t][1]}return-l*.5}function r(n){return Math.abs((n[0][0]-n[2][0])*(n[1][1]-n[0][1])-(n[0][0]-n[1][0])*(n[2][1]-n[0][1]))}function u(n,t,e,l){var i=n-e,r=t-l;return Math.sqrt(i*i+r*r)}},{}],6:[function(n,t,e){var l=n("./type"),i=n("./coordinate-systems"),r=n("../../");t.exports=function(n,t){if(n.type==="Topology")s(n,t);else u(n,t)};function u(n,t){var e=null;if(t)"coordinate-system"in t&&(e=i[t["coordinate-system"]]);var r=a(e.ringArea,u);l({LineString:o,MultiLineString:o,Point:o,MultiPoint:o,Polygon:function(n){r(n.coordinates)},MultiPolygon:function(n){n.coordinates.forEach(r)}}).object(n);function u(n){n.reverse()}}function s(n,t){var e=null;if(t)"coordinate-system"in t&&(e=i[t["coordinate-system"]]);var u=a(f,c);var s=l({LineString:o,MultiLineString:o,Point:o,MultiPoint:o,Polygon:function(n){u(n.arcs)},MultiPolygon:function(n){n.arcs.forEach(u)}});for(var h in n.objects){s.object(n.objects[h])}function f(t){return e.ringArea(r.feature(n,{type:"Polygon",arcs:[t]}).geometry.coordinates[0])}function c(n){var t=-1,e=n.length;n.reverse();while(++t<e)n[t]=~n[t]}}function a(n,t){return function(e){if(!(l=e.length))return;var l,i=new Array(l),r=-Infinity,u,s,a;for(var o=0;o<l;++o){var s=Math.abs(i[o]=n(e[o]));if(s>r)r=s,u=o}if(u){a=e[u],e[u]=e[0],e[0]=a;a=i[u],i[u]=i[0],i[0]=a}if(i[0]<0)t(e[0]);for(var o=1;o<l;++o){if(i[o]>0)t(e[o])}}}function o(){}},{"../../":2,"./coordinate-systems":8,"./type":28}],7:[function(n,t,e){t.exports=function(n,t){if(arguments.length<2)t=function(n){return n.id};function e(n){if(n&&i.hasOwnProperty(n.type))i[n.type](n)}function l(n){var e=t(n);if(e==null)delete n.id;else n.id=e}var i={Feature:l,FeatureCollection:function(n){n.features.forEach(l)}};for(var r in n){e(n[r])}return n}},{}],8:[function(n,t,e){t.exports={cartesian:n("./cartesian"),spherical:n("./spherical")}},{"./cartesian":5,"./spherical":16}],9:[function(n,t,e){t.exports=function(n){var t=n.arcs,e=-1,l=t.length;while(++e<l){var i=t[e],r=0,u=i.length,s=i[0],a=s[0],o=s[1],h,f;while(++r<u){s=i[r];h=s[0];f=s[1];i[r]=[h-a,f-o];a=h;o=f}}return n}},{}],10:[function(n,t,e){var l=n("./type"),i=n("./prune"),r=n("./clockwise"),u=n("./coordinate-systems"),s=n("../../");t.exports=function(n,t){var e=null,o=true,h;if(t)"coordinate-system"in t&&(e=u[t["coordinate-system"]]),"minimum-area"in t&&(h=+t["minimum-area"]),"force-clockwise"in t&&(o=!!t["force-clockwise"]);if(o)r(n,t);if(!(h>0))h=Number.MIN_VALUE;var f=l({LineString:a,MultiLineString:a,Point:a,MultiPoint:a,Polygon:function(n){n.arcs=n.arcs.filter(d);if(!n.arcs.length){n.type=null;delete n.arcs}},MultiPolygon:function(n){n.arcs=n.arcs.map(function(n){return n.filter(d)}).filter(function(n){return n.length});if(!n.arcs.length){n.type=null;delete n.arcs}},GeometryCollection:function(n){this.defaults.GeometryCollection.call(this,n);n.geometries=n.geometries.filter(function(n){return n.type!=null});if(!n.geometries.length){n.type=null;delete n.geometries}}});for(var c in n.objects){f.object(n.objects[c])}i(n,t);function d(t){var l={type:"Polygon",arcs:[t]},i=s.feature(n,l),r=i.geometry.coordinates[0],u=e.absoluteArea(e.ringArea(r));return u>=h}};function a(){}},{"../../":2,"./clockwise":6,"./coordinate-systems":8,"./prune":13,"./type":28}],11:[function(n,t,e){t.exports=function(n){function t(n){return(n&&i.hasOwnProperty(n.type)?i[n.type]:l)(n)}function e(n){var t=n.geometry;if(t==null){n.type=null}else{l(t);n.type=t.type;if(t.geometries)n.geometries=t.geometries;else if(t.coordinates)n.coordinates=t.coordinates}delete n.geometry;return n}function l(n){if(!n)return{type:null};if(r.hasOwnProperty(n.type))r[n.type](n);return n}var i={Feature:e,FeatureCollection:function(n){n.type="GeometryCollection";n.geometries=n.features;n.features.forEach(e);delete n.features;return n}};var r={GeometryCollection:function(n){var t=n.geometries,e=-1,i=t.length;while(++e<i)t[e]=l(t[e])},MultiPoint:function(n){if(!n.coordinates.length){n.type=null;delete n.coordinates}else if(n.coordinates.length<2){n.type="Point";n.coordinates=n.coordinates[0]}},LineString:function(n){if(!n.coordinates.length){n.type=null;delete n.coordinates}},MultiLineString:function(n){for(var t=n.coordinates,e=0,l=0,i=t.length;e<i;++e){var r=t[e];if(r.length)t[l++]=r}if(!l){n.type=null;delete n.coordinates}else if(l<2){n.type="LineString";n.coordinates=t[0]}else{n.coordinates.length=l}},Polygon:function(n){for(var t=n.coordinates,e=0,l=0,i=t.length;e<i;++e){var r=t[e];if(r.length)t[l++]=r}if(!l){n.type=null;delete n.coordinates}else{n.coordinates.length=l}},MultiPolygon:function(n){for(var t=n.coordinates,e=0,l=0,i=t.length;e<i;++e){for(var r=t[e],u=0,s=0,a=r.length;u<a;++u){var o=r[u];if(o.length)r[s++]=o}if(s){r.length=s;t[l++]=r}}if(!l){n.type=null;delete n.coordinates}else if(l<2){n.type="Polygon";n.coordinates=t[0]}else{t.length=l}}};for(var u in n){n[u]=t(n[u])}return n}},{}],12:[function(n,t,e){t.exports=function(n,t){function e(n){if(!n)return{type:null};if(l.hasOwnProperty(n.type))l[n.type](n);return n}var l={GeometryCollection:function(n){var t=n.geometries,l=-1,i=t.length;while(++l<i)t[l]=e(t[l])},Polygon:function(n){for(var e=n.coordinates,l=0,i=0,r=e.length;l<r;++l){var u=e[l];if(t(u))e[i++]=u}if(!i){n.type=null;delete n.coordinates}else{n.coordinates.length=i}},MultiPolygon:function(n){for(var e=n.coordinates,l=0,i=0,r=e.length;l<r;++l){for(var u=e[l],s=0,a=0,o=u.length;s<o;++s){var h=u[s];if(t(h))u[a++]=h}if(a){u.length=a;e[i++]=u}}if(!i){n.type=null;delete n.coordinates}else if(i<2){n.type="Polygon";n.coordinates=e[0]}else{e.length=i}}};for(var i in n){n[i]=e(n[i])}return n}},{}],13:[function(n,t,e){t.exports=function(n,t){var e=false,l=n.objects,i=n.arcs,r=i.length,u=n.arcs=[],s=0,a=new Array(i.length);if(t)"verbose"in t&&(e=!!t["verbose"]);function o(n){if(n&&h.hasOwnProperty(n.type))h[n.type](n)}var h={GeometryCollection:function(n){n.geometries.forEach(o)},LineString:function(n){f(n.arcs)},MultiLineString:function(n){n.arcs.forEach(f)},Polygon:function(n){n.arcs.forEach(f)},MultiPolygon:function(n){n.arcs.forEach(c)}};function f(n){for(var t=0,e=0,l=n.length;t<l;++t){var r=n[t],o=r<0&&(r=~r,true),h=i[r],f;if(h.length<3&&!h[1][0]&&!h[1][1])continue;if((f=a[r])==null){a[r]=f=s++;u[f]=i[r]}n[e++]=o?~f:f}if(!(n.length=e)&&l){if((f=a[r])==null){a[r]=f=s++;u[f]=i[r]}n[0]=o?~f:f}}function c(n){n.forEach(f)}for(var d in l){o(l[d])}if(e)console.warn("prune: retained "+s+" / "+r+" arcs ("+Math.round(s/r*100)+"%)");return n};function l(){}},{}],14:[function(n,t,e){t.exports=function(n,t,e){var l=isFinite(t[0])?t[0]:0,i=isFinite(t[1])?t[1]:0,r=isFinite(t[2])?t[2]:0,u=isFinite(t[3])?t[3]:0,s=r-l?(e-1)/(r-l):1,a=u-i?(e-1)/(u-i):1;function o(n){if(n&&h.hasOwnProperty(n.type))h[n.type](n)}var h={GeometryCollection:function(n){n.geometries.forEach(o)},Point:function(n){f(n.coordinates)},MultiPoint:function(n){n.coordinates.forEach(f)},LineString:function(n){var t=n.coordinates;c(t);if(t.length<2)t[1]=t[0]},MultiLineString:function(n){for(var t=n.coordinates,e=0,l=t.length;e<l;++e){var i=t[e];c(i);if(i.length<2)i[1]=i[0]}},Polygon:function(n){for(var t=n.coordinates,e=0,l=t.length;e<l;++e){var i=t[e];c(i);while(i.length<4)i.push(i[0])}},MultiPolygon:function(n){for(var t=n.coordinates,e=0,l=t.length;e<l;++e){for(var i=t[e],r=0,u=i.length;r<u;++r){var s=i[r];c(s);while(s.length<4)s.push(s[0])}}}};function f(n){n[0]=Math.round((n[0]-l)*s);n[1]=Math.round((n[1]-i)*a)}function c(n){var t=0,e=1,r=n.length,u=n[0],o,h=u[0]=Math.round((u[0]-l)*s),f=u[1]=Math.round((u[1]-i)*a),c,d;while(++t<r){u=n[t];c=Math.round((u[0]-l)*s);d=Math.round((u[1]-i)*a);if(c!==h||d!==f){o=n[e++];o[0]=h=c;o[1]=f=d}}n.length=e}for(var d in n){o(n[d])}return{scale:[1/s,1/a],translate:[l,i]}}},{}],15:[function(n,t,e){var l=n("../../"),i=n("./coordinate-systems");t.exports=function(n,t){var e=0,r,u=false,s=null,a=n.arcs.reduce(function(n,t){return n+t.length},0),o=0;if(t)"minimum-area"in t&&(e=+t["minimum-area"]),"coordinate-system"in t&&(s=i[t["coordinate-system"]]),"retain-proportion"in t&&(r=+t["retain-proportion"]),"verbose"in t&&(u=!!t["verbose"]);l.presimplify(n,s.triangleArea);if(r){var h=[];n.arcs.forEach(function(n){n.forEach(function(n){h.push(n[2])})});t["minimum-area"]=e=a?h.sort(function(n,t){return t-n})[Math.ceil((a-1)*r)]:0;if(u)console.warn("simplification: effective minimum area "+e.toPrecision(3))}n.arcs.forEach(n.transform?function(n){var t=0,l=0,i=-1,r=-1,u=n.length,s,a;while(++i<u){s=n[i];if(s[2]>=e){a=n[++r];a[0]=s[0]+t;a[1]=s[1]+l;t=l=0}else{t+=s[0];l+=s[1]}}n.length=++r}:function(n){var t=-1,l=-1,i=n.length,r;while(++t<i){r=n[t];if(r[2]>=e){n[++l]=r}}n.length=++l});n.arcs.forEach(function(n){var t=-1,e=n.length;while(++t<e)n[t].length=2;o+=n.length});if(u)console.warn("simplification: retained "+o+" / "+a+" points ("+Math.round(o/a*100)+"%)");return n}},{"../../":2,"./coordinate-systems":8}],16:[function(n,t,e){var l=Math.PI,i=l/4,r=l/180;e.name="spherical";e.formatDistance=u;e.ringArea=s;e.absoluteArea=a;e.triangleArea=o;e.distance=f;function u(n){var t=n*6371;return(t>1?t.toFixed(3)+"km":(t*1e3).toPrecision(3)+"m")+" ("+(n*180/Math.PI).toPrecision(3)+"°)"}function s(n){if(!n.length)return 0;var t=0,e=n[0],u=e[0]*r,s=e[1]*r/2+i,a=u,o=Math.cos(s),h=Math.sin(s);for(var f=1,c=n.length;f<c;++f){e=n[f],u=e[0]*r,s=e[1]*r/2+i;var d=u-a,g=Math.cos(s),p=Math.sin(s),v=h*p,m=o*g+v*Math.cos(d),y=v*Math.sin(d);t+=Math.atan2(y,m);a=u,o=g,h=p}return 2*(t>l?t-2*l:t<-l?t+2*l:t)}function a(n){return n<0?n+4*l:n}function o(n){var t=h(n[0],n[1]),e=h(n[1],n[2]),l=h(n[2],n[0]),i=(t+e+l)/2;return 4*Math.atan(Math.sqrt(Math.max(0,Math.tan(i/2)*Math.tan((i-t)/2)*Math.tan((i-e)/2)*Math.tan((i-l)/2))))}function h(n,t){var e=(t[0]-n[0])*r,l=Math.sin(e),i=Math.cos(e),u=Math.sin(n[1]*r),s=Math.cos(n[1]*r),a=Math.sin(t[1]*r),o=Math.cos(t[1]*r),h;return Math.atan2(Math.sqrt((h=o*l)*h+(h=s*a-u*o*i)*h),u*a+s*o*i)}function f(n,t,e,l){n*=r,t*=r,e*=r,l*=r;return 2*Math.asin(Math.sqrt(c(l-t)+Math.cos(t)*Math.cos(l)*c(e-n)))}function c(n){return(n=Math.sin(n/2))*n}},{}],17:[function(n,t,e){var l=n("./type");t.exports=function(n,t){var e=.01,i=-180,r=i+e,u=180,s=u-e,a=-90,o=a+e,h=90,f=h-e,c=[];if(t){var d=t.scale[0],g=t.scale[1],p=t.translate[0],v=t.translate[1];i=Math.round((i-p)/d);u=Math.round((u-p)/d);a=Math.round((a-v)/g);h=Math.round((h-v)/g);r=Math.round((r-p)/d);s=Math.round((s-p)/d);o=Math.round((o-v)/g);f=Math.round((f-v)/g)}function m(n){return n<=o?[0,a]:n>=f?[0,h]:[i,n]}var y=l({polygon:function(n){var t=[];for(var e=0,l=n.length;e<l;++e){var i=n[e],u=[];u.push(i);for(var a=0,h=i.length;a<h;++a){var c=i[a],d=c[0],g=c[1];if(d<=r||d>=s||g<=o||g>=f){for(var p=a+1;p<h;++p){var v=i[p],y=v[0],x=v[1];if(y>r&&y<s&&x>o&&x<f)break}if(p===a+1)continue;if(a){var w=i.slice(0,a+1);w[w.length-1]=m(g);u[u.length-1]=w}else{u.pop()}if(p>=h)break;u.push(i=i.slice(p-1));i[0]=m(i[0][1]);a=-1;h=i.length}}var _={},M={};for(var a=0,h=u.length;a<h;++a){var E=u[a],b=E[0],C=E[E.length-1];if(b[0]===C[0]&&b[1]===C[1]){t.push(E);u[a]=null;continue}E.index=a;_[b]=M[C]=E}for(var a=0;a<h;++a){var E=u[a];if(E){var b=E[0],C=E[E.length-1],I=M[b],S=_[C];delete _[b];delete M[C];if(b[0]===C[0]&&b[1]===C[1]){t.push(E);continue}if(I){delete M[b];delete _[I[0]];I.pop();u[I.index]=null;E=I.concat(E);if(I===S){t.push(E)}else{E.index=h++;u.push(_[E[0]]=M[E[E.length-1]]=E)}}else if(S){delete _[C];delete M[S[S.length-1]];E.pop();E=E.concat(S);E.index=h++;u[S.index]=null;u.push(_[E[0]]=M[E[E.length-1]]=E)}else{E.push(E[0]);t.push(E)}}}}for(var a=0,h=n.length=t.length;a<h;++a){n[a]=t[a]}}});for(var x in n){y.object(n[x])}}},{"./type":28}],18:[function(n,t,e){var l=n("./type"),i=n("./stitch"),r=n("./coordinate-systems"),u=n("./topology/index"),s=n("./delta"),a=n("./geomify"),o=n("./prefilter"),h=n("./quantize"),f=n("./bounds"),c=n("./compute-id"),d=n("./transform-properties");var g=1e-6;t.exports=function(n,t){var e=1e4,l=function(n){return n.id},p=function(){},v,m=0,y=true,x=false,w=null;if(t)"verbose"in t&&(x=!!t["verbose"]),"stitch-poles"in t&&(y=!!t["stitch-poles"]),"coordinate-system"in t&&(w=r[t["coordinate-system"]]),"minimum-area"in t&&(m=+t["minimum-area"]),"quantization"in t&&(e=+t["quantization"]),"id"in t&&(l=t["id"]),"property-transform"in t&&(p=t["property-transform"]);c(n,l);d(n,p);a(n);var _=f(n);var M=_[0]<-180-g||_[1]<-90-g||_[2]>180+g||_[3]>90+g;if(!w){w=r[M?"cartesian":"spherical"];if(t)t["coordinate-system"]=w.name}if(w===r.spherical){if(M)throw new Error("spherical coordinates outside of [±180°, ±90°]");if(_[0]<-180+g)_[0]=-180;if(_[1]<-90+g)_[1]=-90;if(_[2]>180-g)_[2]=180;if(_[3]>90-g)_[3]=90}if(x){console.warn("bounds: "+_.join(" ")+" ("+w.name+")")}if(m)o(n,function(n){return w.absoluteArea(w.ringArea(n))>=m});if(e){v=h(n,_,e);if(x){console.warn("quantization: "+v.scale.map(function(n){return w.formatDistance(n/180*Math.PI)}).join(" "))}}if(w===r.spherical&&y){i(n,v)}var E=u(n);E.bbox=_;if(x){console.warn("topology: "+E.arcs.length+" arcs, "+E.arcs.reduce(function(n,t){return n+t.length},0)+" points")}if(e)E.transform=v,s(E);return E}},{"./bounds":4,"./compute-id":7,"./coordinate-systems":8,"./delta":9,"./geomify":11,"./prefilter":12,"./quantize":14,"./stitch":17,"./topology/index":23,"./transform-properties":27,"./type":28}],19:[function(n,t,e){var l=n("./join");t.exports=function(n){var t=l(n),e=n.coordinates,r=n.lines,u=n.rings;for(var s=0,a=r.length;s<a;++s){var o=r[s],h=o[0],f=o[1];while(++h<f){if(t.get(e[h])){var c={0:h,1:o[1]};o[1]=h;o=o.next=c}}}for(var s=0,a=u.length;s<a;++s){var d=u[s],g=d[0],p=g,v=d[1],m=t.get(e[g]);while(++p<v){if(t.get(e[p])){if(m){var c={0:p,1:d[1]};d[1]=p;d=d.next=c}else{i(e,g,v,v-p);e[v]=e[g];m=true;p=g}}}}return n};function i(n,t,e,l){r(n,t,e);r(n,t,t+l);r(n,t+l,e)}function r(n,t,e){for(var l=t+(e---t>>1),i;t<l;++t,--e){i=n[t],n[t]=n[e],n[e]=i}}},{"./join":24}],20:[function(n,t,e){var l=n("./join"),i=n("./hashtable"),r=n("./point-hash"),u=n("./point-equal");t.exports=function(n){var t=n.coordinates,e=n.lines,l=n.rings,s=e.length+l.length;delete n.lines;delete n.rings;for(var a=0,o=e.length;a<o;++a){var h=e[a];while(h=h.next)++s}for(var a=0,o=l.length;a<o;++a){var f=l[a];while(f=f.next)++s}var c=i(s*2,r,u),d=n.arcs=[];for(var a=0,o=e.length;a<o;++a){var h=e[a];do{g(h)}while(h=h.next)}for(var a=0,o=l.length;a<o;++a){var f=l[a];if(f.next){do{g(f)}while(f=f.next)}else{p(f)}}function g(n){var e,l,i,r;if(i=c.get(e=t[n[0]])){for(var u=0,s=i.length;u<s;++u){var a=i[u];if(v(a,n)){n[0]=a[0];n[1]=a[1];return}}}if(r=c.get(l=t[n[1]])){for(var u=0,s=r.length;u<s;++u){var o=r[u];if(m(o,n)){n[1]=o[0];n[0]=o[1];return}}}if(i)i.push(n);else c.set(e,[n]);if(r)r.push(n);else c.set(l,[n]);d.push(n)}function p(n){var e,l;if(l=c.get(e=t[n[0]])){for(var i=0,r=l.length;i<r;++i){var u=l[i];if(y(u,n)){n[0]=u[0];n[1]=u[1];return}if(x(u,n)){n[0]=u[1];n[1]=u[0];return}}}if(l=c.get(e=t[n[0]+w(n)])){for(var i=0,r=l.length;i<r;++i){var u=l[i];if(y(u,n)){n[0]=u[0];n[1]=u[1];return}if(x(u,n)){n[0]=u[1];n[1]=u[0];return}}}if(l)l.push(n);else c.set(e,[n]);d.push(n)}function v(n,e){var l=n[0],i=e[0],r=n[1],s=e[1];if(l-r!==i-s)return false;for(;l<=r;++l,++i)if(!u(t[l],t[i]))return false;return true}function m(n,e){var l=n[0],i=e[0],r=n[1],s=e[1];if(l-r!==i-s)return false;for(;l<=r;++l,--s)if(!u(t[l],t[s]))return false;return true}function y(n,e){var l=n[0],i=e[0],r=n[1],s=e[1],a=r-l;if(a!==s-i)return false;var o=w(n),h=w(e);for(var f=0;f<a;++f){if(!u(t[l+(f+o)%a],t[i+(f+h)%a]))return false}return true}function x(n,e){var l=n[0],i=e[0],r=n[1],s=e[1],a=r-l;if(a!==s-i)return false;var o=w(n),h=a-w(e);for(var f=0;f<a;++f){if(!u(t[l+(f+o)%a],t[s-(f+h)%a]))return false}return true}function w(n){var e=n[0],l=n[1],i=e,r=i,u=t[i];while(++i<l){var s=t[i];if(s[0]<u[0]||s[0]===u[0]&&s[1]<u[1]){r=i;u=s}}return r-e}return n}},{"./hashtable":22,"./join":24,"./point-equal":25,"./point-hash":26}],21:[function(n,t,e){t.exports=function(n){var t=-1,e=[],l=[],i=[];function r(n){if(n&&u.hasOwnProperty(n.type))u[n.type](n)}var u={GeometryCollection:function(n){n.geometries.forEach(r)},LineString:function(n){n.arcs=s(n.coordinates);delete n.coordinates},MultiLineString:function(n){n.arcs=n.coordinates.map(s);delete n.coordinates},Polygon:function(n){n.arcs=n.coordinates.map(a);delete n.coordinates},MultiPolygon:function(n){n.arcs=n.coordinates.map(o);delete n.coordinates}};function s(n){for(var l=0,r=n.length;l<r;++l)i[++t]=n[l];var u={0:t-r+1,1:t};e.push(u);return u}function a(n){for(var e=0,r=n.length;e<r;++e)i[++t]=n[e];var u={0:t-r+1,1:t};l.push(u);return u}function o(n){return n.map(a)}for(var h in n){r(n[h])}return{type:"Topology",coordinates:i,lines:e,rings:l,objects:n}}},{}],22:[function(n,t,e){t.exports=function(n,t,e){var l=new Array(n=1<<Math.ceil(Math.log(n)/Math.LN2)),i=n-1,r=n;function u(n,u){var s=t(n)&i,a=l[s],o=!s;while(a!=null){if(e(a.key,n))return a.value=u;a=l[s=s+1&i];if(!s&&o++)throw new Error("full hashtable")}l[s]={key:n,value:u};--r;return u}function s(n,r){var u=t(n)&i,s=l[u],a=!u;while(s!=null){if(e(s.key,n))return s.value;s=l[u=u+1&i];if(!u&&a++)break}return r}function a(n){var s=t(n)&i,a=l[s],o=!s;while(a!=null){if(e(a.key,n)){l[s]=null;a=l[s=s+1&i];if(a!=null){++r;l[s]=null;u(a.key,a.value)}++r;return true}a=l[s=s+1&i];if(!s&&o++)break}return false}function o(){var n=[];for(var t=0,e=l.length;t<e;++t){var i=l[t];if(i!=null)n.push(i.key)}return n}return{set:u,get:s,remove:a,keys:o}}},{}],23:[function(n,t,e){var l=n("./hashtable"),i=n("./extract"),r=n("./cut"),u=n("./dedup");t.exports=function(n){var t=u(r(i(n))),e=t.coordinates,o=l(t.arcs.length,s,a);n=t.objects;t.arcs=t.arcs.map(function(n,t){o.set(n,t);return e.slice(n[0],n[1]+1)});delete t.coordinates;e=null;function h(n){if(n&&f.hasOwnProperty(n.type))f[n.type](n)}var f={GeometryCollection:function(n){n.geometries.forEach(h)},LineString:function(n){n.arcs=c(n.arcs)},MultiLineString:function(n){n.arcs=n.arcs.map(c)},Polygon:function(n){n.arcs=n.arcs.map(c)},MultiPolygon:function(n){n.arcs=n.arcs.map(d)}};function c(n){var t=[];do{var e=o.get(n);t.push(n[0]<n[1]?e:~e)}while(n=n.next);return t}function d(n){return n.map(c)}for(var g in n){h(n[g])}return t};function s(n){var t=n[0],e=n[1],l;if(e<t)l=t,t=e,e=l;return t+31*e}function a(n,t){var e=n[0],l=n[1],i=t[0],r=t[1],u;if(l<e)u=e,e=l,l=u;if(r<i)u=i,i=r,r=u;return e===i&&l===r}},{"./cut":19,"./dedup":20,"./extract":21,"./hashtable":22}],24:[function(n,t,e){var l=n("./hashtable"),i=n("./point-hash"),r=n("./point-equal");t.exports=function(n){var t=n.coordinates,e=n.lines,u=n.rings,s,a=l(t.length,i,r),o=l(t.length,i,r);for(var h=0,f=e.length;h<f;++h){var c=e[h],d=c[0],g=c[1],p=null,v=t[d],m=t[++d];s=l(g-d,i,r);o.set(v,true);while(++d<=g){_(p=v,v=m,m=t[d])}o.set(m,true)}for(var h=0,f=u.length;h<f;++h){var y=u[h],x=y[0]+1,w=y[1],p=t[w-1],v=t[x-1],m=t[x];s=l(w-x+1,i,r);_(p,v,m);while(++x<=w){_(p=v,v=m,m=t[x])}}function _(n,t,e){if(s.get(t))return;s.set(t,true);var l=a.get(t);if(l){
if(!(r(l[0],n)&&r(l[1],e))&&!(r(l[0],e)&&r(l[1],n))){o.set(t,true)}}else{a.set(t,[n,e])}}return o}},{"./hashtable":22,"./point-equal":25,"./point-hash":26}],25:[function(n,t,e){t.exports=function(n,t){return n[0]===t[0]&&n[1]===t[1]}},{}],26:[function(n,t,e){var l=new ArrayBuffer(8),i=new Float64Array(l),r=new Int32Array(l);function u(n){i[0]=n;n=r[1]^r[0];n^=n>>>20^n>>>12;n^=n>>>7^n>>>4;return n}t.exports=function(n){var t=u(n[0])+31*u(n[1])|0;return t<0?~t:t}},{}],27:[function(n,t,e){t.exports=function(n,t){if(arguments.length<2)t=function(){};function e(n){if(n&&i.hasOwnProperty(n.type))i[n.type](n)}function l(n){if(n.properties){var e=n.properties,l={},i=true;for(var r in e){if(t(l,r,e[r])){i=false}}if(i)delete n.properties;else n.properties=l}}var i={Feature:l,FeatureCollection:function(n){n.features.forEach(l)}};for(var r in n){e(n[r])}return n}},{}],28:[function(n,t,e){t.exports=function(n){for(var t in l){if(!(t in n)){n[t]=l[t]}}n.defaults=l;return n};var l={Feature:function(n){if(n.geometry)this.geometry(n.geometry)},FeatureCollection:function(n){var t=n.features,e=-1,l=t.length;while(++e<l)this.Feature(t[e])},GeometryCollection:function(n){var t=n.geometries,e=-1,l=t.length;while(++e<l)this.geometry(t[e])},LineString:function(n){this.line(n.coordinates)},MultiLineString:function(n){var t=n.coordinates,e=-1,l=t.length;while(++e<l)this.line(t[e])},MultiPoint:function(n){var t=n.coordinates,e=-1,l=t.length;while(++e<l)this.point(t[e])},MultiPolygon:function(n){var t=n.coordinates,e=-1,l=t.length;while(++e<l)this.polygon(t[e])},Point:function(n){this.point(n.coordinates)},Polygon:function(n){this.polygon(n.coordinates)},object:function(n){return n==null?null:r.hasOwnProperty(n.type)?this[n.type](n):this.geometry(n)},geometry:function(n){return n==null?null:i.hasOwnProperty(n.type)?this[n.type](n):null},point:function(){},line:function(n){var t=-1,e=n.length;while(++t<e)this.point(n[t])},polygon:function(n){var t=-1,e=n.length;while(++t<e)this.line(n[t])}};var i={LineString:1,MultiLineString:1,MultiPoint:1,MultiPolygon:1,Point:1,Polygon:1,GeometryCollection:1};var r={Feature:1,FeatureCollection:1}},{}],29:[function(n,t,e){!function(){var n={version:"1.4.6",mesh:l,feature:i,neighbors:o,presimplify:h};function e(n,t){var e={},l={};t.forEach(function(n){var t=i(n),r=t[0],u=t[1],s,a;if(s=l[r]){delete l[s.end];s.push(n);s.end=u;if(a=e[u]){delete e[a.start];var o=a===s?s:s.concat(a);e[o.start=s.start]=l[o.end=a.end]=o}else if(a=l[u]){delete e[a.start];delete l[a.end];var o=s.concat(a.map(function(n){return~n}).reverse());e[o.start=s.start]=l[o.end=a.start]=o}else{e[s.start]=l[s.end]=s}}else if(s=e[u]){delete e[s.start];s.unshift(n);s.start=r;if(a=l[r]){delete l[a.end];var h=a===s?s:a.concat(s);e[h.start=a.start]=l[h.end=s.end]=h}else if(a=e[r]){delete e[a.start];delete l[a.end];var h=a.map(function(n){return~n}).reverse().concat(s);e[h.start=a.end]=l[h.end=s.end]=h}else{e[s.start]=l[s.end]=s}}else if(s=e[r]){delete e[s.start];s.unshift(~n);s.start=u;if(a=l[u]){delete l[a.end];var h=a===s?s:a.concat(s);e[h.start=a.start]=l[h.end=s.end]=h}else if(a=e[u]){delete e[a.start];delete l[a.end];var h=a.map(function(n){return~n}).reverse().concat(s);e[h.start=a.end]=l[h.end=s.end]=h}else{e[s.start]=l[s.end]=s}}else if(s=l[u]){delete l[s.end];s.push(~n);s.end=r;if(a=l[r]){delete e[a.start];var o=a===s?s:s.concat(a);e[o.start=s.start]=l[o.end=a.end]=o}else if(a=e[r]){delete e[a.start];delete l[a.end];var o=s.concat(a.map(function(n){return~n}).reverse());e[o.start=s.start]=l[o.end=a.start]=o}else{e[s.start]=l[s.end]=s}}else{s=[n];e[s.start=r]=l[s.end=u]=s}});function i(t){var e=n.arcs[t],l=e[0],i=[0,0];e.forEach(function(n){i[0]+=n[0],i[1]+=n[1]});return[l,i]}var r=[];for(var u in l)r.push(l[u]);return r}function l(n,t,l){var i=[];if(arguments.length>1){var r=[],s;function a(n){if(n<0)n=~n;(r[n]||(r[n]=[])).push(s)}function o(n){n.forEach(a)}function h(n){n.forEach(o)}function f(n){if(n.type==="GeometryCollection")n.geometries.forEach(f);else if(n.type in c){s=n;c[n.type](n.arcs)}}var c={LineString:o,MultiLineString:h,Polygon:h,MultiPolygon:function(n){n.forEach(h)}};f(t);r.forEach(arguments.length<3?function(n,t){i.push(t)}:function(n,t){if(l(n[0],n[n.length-1]))i.push(t)})}else{for(var d=0,g=n.arcs.length;d<g;++d)i.push(d)}return u(n,{type:"MultiLineString",arcs:e(n,i)})}function i(n,t){return t.type==="GeometryCollection"?{type:"FeatureCollection",features:t.geometries.map(function(t){return r(n,t)})}:r(n,t)}function r(n,t){var e={type:"Feature",id:t.id,properties:t.properties||{},geometry:u(n,t)};if(t.id==null)delete e.id;return e}function u(n,t){var e=g(n.transform),l=n.arcs;function i(n,t){if(t.length)t.pop();for(var i=l[n<0?~n:n],r=0,u=i.length,a;r<u;++r){t.push(a=i[r].slice());e(a,r)}if(n<0)s(t,u)}function r(n){n=n.slice();e(n,0);return n}function u(n){var t=[];for(var e=0,l=n.length;e<l;++e)i(n[e],t);if(t.length<2)t.push(t[0].slice());return t}function a(n){var t=u(n);while(t.length<4)t.push(t[0].slice());return t}function o(n){return n.map(a)}function h(n){var t=n.type;return t==="GeometryCollection"?{type:t,geometries:n.geometries.map(h)}:t in f?{type:t,coordinates:f[t](n)}:null}var f={Point:function(n){return r(n.coordinates)},MultiPoint:function(n){return n.coordinates.map(r)},LineString:function(n){return u(n.arcs)},MultiLineString:function(n){return n.arcs.map(u)},Polygon:function(n){return o(n.arcs)},MultiPolygon:function(n){return n.arcs.map(o)}};return h(t)}function s(n,t){var e,l=n.length,i=l-t;while(i<--l)e=n[i],n[i++]=n[l],n[l]=e}function a(n,t){var e=0,l=n.length;while(e<l){var i=e+l>>>1;if(n[i]<t)e=i+1;else l=i}return e}function o(n){var t={},e=n.map(function(){return[]});function l(n,e){n.forEach(function(n){if(n<0)n=~n;var l=t[n];if(l)l.push(e);else t[n]=[e]})}function i(n,t){n.forEach(function(n){l(n,t)})}function r(n,t){if(n.type==="GeometryCollection")n.geometries.forEach(function(n){r(n,t)});else if(n.type in u)u[n.type](n.arcs,t)}var u={LineString:l,MultiLineString:i,Polygon:i,MultiPolygon:function(n,t){n.forEach(function(n){i(n,t)})}};n.forEach(r);for(var s in t){for(var o=t[s],h=o.length,f=0;f<h;++f){for(var c=f+1;c<h;++c){var d=o[f],g=o[c],p;if((p=e[d])[s=a(p,g)]!==g)p.splice(s,0,g);if((p=e[g])[s=a(p,d)]!==d)p.splice(s,0,d)}}}return e}function h(n,t){var e=g(n.transform),l=p(n.transform),i=d(c),r=0,u;if(!t)t=f;n.arcs.forEach(function(n){var l=[];n.forEach(e);for(var r=1,s=n.length-1;r<s;++r){u=n.slice(r-1,r+2);u[1][2]=t(u);l.push(u);i.push(u)}n[0][2]=n[s][2]=Infinity;for(var r=0,s=l.length;r<s;++r){u=l[r];u.previous=l[r-1];u.next=l[r+1]}});while(u=i.pop()){var s=u.previous,a=u.next;if(u[1][2]<r)u[1][2]=r;else r=u[1][2];if(s){s.next=a;s[2]=u[2];o(s)}if(a){a.previous=s;a[0]=u[0];o(a)}}n.arcs.forEach(function(n){n.forEach(l)});function o(n){i.remove(n);n[1][2]=t(n);i.push(n)}return n}function f(n){return Math.abs((n[0][0]-n[2][0])*(n[1][1]-n[0][1])-(n[0][0]-n[1][0])*(n[2][1]-n[0][1]))}function c(n,t){return n[1][2]-t[1][2]}function d(n){var t={},e=[];t.push=function(){for(var n=0,t=arguments.length;n<t;++n){var i=arguments[n];l(i.index=e.push(i)-1)}return e.length};t.pop=function(){var n=e[0],t=e.pop();if(e.length){e[t.index=0]=t;i(0)}return n};t.remove=function(t){var r=t.index,u=e.pop();if(r!==e.length){e[u.index=r]=u;(n(u,t)<0?l:i)(r)}return r};function l(t){var l=e[t];while(t>0){var i=(t+1>>1)-1,r=e[i];if(n(l,r)>=0)break;e[r.index=t]=r;e[l.index=t=i]=l}}function i(t){var l=e[t];while(true){var i=t+1<<1,r=i-1,u=t,s=e[u];if(r<e.length&&n(e[r],s)<0)s=e[u=r];if(i<e.length&&n(e[i],s)<0)s=e[u=i];if(u===t)break;e[s.index=t]=s;e[l.index=t=u]=l}}return t}function g(n){if(!n)return v;var t,e,l=n.scale[0],i=n.scale[1],r=n.translate[0],u=n.translate[1];return function(n,s){if(!s)t=e=0;n[0]=(t+=n[0])*l+r;n[1]=(e+=n[1])*i+u}}function p(n){if(!n)return v;var t,e,l=n.scale[0],i=n.scale[1],r=n.translate[0],u=n.translate[1];return function(n,s){if(!s)t=e=0;var a=(n[0]-r)/l|0,o=(n[1]-u)/i|0;n[0]=a-t;n[1]=o-e;t=a;e=o}}function v(){}if(typeof define==="function"&&define.amd)define("ThirdParty/geojson-topojson/lib",n);if(typeof t==="object"&&t.exports){t.exports=n;this.topojson=n}else this.topojson=n}()},{}]},{},[2,1]);File.readAsArrayBuffer=function(n){var t=Cesium.when.defer();var e=new FileReader;e.onload=function(n){t.resolve(n.target.result)};e.onprogress=function(n){t.progress(n.target.result)};e.onerror=function(n){t.reject(n.error)};e.readAsArrayBuffer(n);return t};File.readAsText=function(n){var t=Cesium.when.defer();var e=new FileReader;e.onload=function(n){t.resolve(n.target.result)};e.onprogress=function(n){t.progress(n.target.result)};e.onerror=function(n){t.reject(n.error)};e.readAsText(n);return t};File.readAllText=File.readAsText;File.ReadAllText=File.readAsText;File.readAllBytes=function(n){var t=Cesium.when.defer();var e=new FileReader;e.onload=function(n){t.resolve(new Uint8Array(n.target.result))};e.onprogress=function(n){t.progress(n.target.result)};e.onerror=function(n){t.reject(n.error)};e.readAsArrayBuffer(n);return t};File.ReadAllBytes=File.readAllBytes;File.readAsBinaryString=function(n){var t=Cesium.when.defer();var e=new FileReader;e.onload=function(n){t.resolve(n.target.result)};e.onprogress=function(n){t.progress(n.target.result)};e.onerror=function(n){t.reject(n.error)};e.readAsBinaryString(n);return t};File.readAsDataURL=function(n){var t=Cesium.when.defer();var e=new FileReader;e.onload=function(n){t.resolve(n.target.result)};e.onprogress=function(n){t.progress(n.target.result)};e.onerror=function(n){t.reject(n.error)};e.readAsDataURL(n);return t};define("File",function(){});define("Util/shp",["ThirdParty/shapefile-js-3.3.2/shp","ThirdParty/geojson-topojson/lib","File"],function(n,t,e){n.groupFiles=function(n){var t,e,l;var i={};for(var r=0;r<n.length;r++){var u=Path.ChangeExtension(n[r].name,"");if(!i[u]){i[u]=[]}i[u].push(n[r])}return i};n.parseShpFiles=function(e,l){if(!e||e.length>0){var i=Cesium.when.defer();var r,u,s;for(var a=0;a<e.length;a++){if(e[a].name.toLocaleLowerCase().indexOf(".shp")>0){r=e[a]}if(e[a].name.toLocaleLowerCase().indexOf(".prj")>0){s=e[a]}if(e[a].name.toLocaleLowerCase().indexOf(".dbf")>0){u=e[a]}}if(!r||!s||!u){throw new Error("打开文件失败,请通过ctrl+同时选择shp、prj、dbf三个文件");return}var o=[File.readAsArrayBuffer(r),File.readAsText(s),File.readAsArrayBuffer(u)];Cesium.when.all(o,function(e){var u=e[0];var s=e[1];var a=e[2];var o=n.combine([n.parseShp(u,s),n.parseDbf(a)]);o.fileName=r.name.toLocaleLowerCase();if(l){o=t.topology({collection:o},{"property-transform":function(n,t,e){n[t]=e;return n}});o.fileName=r.name.toLocaleLowerCase()}i.resolve(o)},function(n){i.reject(n)});return i}else{throw new Error("文件列表不能为空")}};return n});function Path(){}Path.GetExtension=function(n){var t=n.lastIndexOf(".");if(t>=0){return n.substring(t,n.length)}return""};Path.GetFileName=function(n){var t=n.lastIndexOf("/");if(t<0){return n}return n.substring(t+1,n.length)};Path.GetDirectoryName=function(n){var t=n.lastIndexOf("/");if(t<0){return""}return n.substring(0,t)};Path.Combine=function(n,t){return n+t};Path.ChangeExtension=function(n,t){return n.replace(Path.GetExtension(n),t)};if(typeof module==="undefined"){this.Path=Path}else{module.exports=Path}if(typeof define==="function"){define("Util/Path",[],function(){return Path})}define("VectorRenderer/VectorStyle",[],function(){function n(n){if(typeof document=="undefined"){return n}n=Cesium.defaultValue(n,Cesium.defaultValue.EMPTY_OBJECT);this.fillColor=Cesium.defaultValue(n.fillColor,Cesium.Color.fromBytes(0,255,255,30));if(typeof this.fillColor=="string"){this.fillColor=Cesium.Color.fromCssColorString(this.fillColor)}this.fill=Cesium.defaultValue(n.fill,true);this.labelStroke=n.labelStroke;this.labelStrokeWidth=Cesium.defaultValue(n.labelStrokeWidth,1);this.labelStrokeColor=Cesium.defaultValue(n.labelStrokeColor,Cesium.Color.fromBytes(160,99,57));if(typeof this.labelStrokeColor=="string"){this.labelStrokeColor=Cesium.Color.fromCssColorString(this.labelStrokeColor)}this.outlineColor=Cesium.defaultValue(n.outlineColor,Cesium.Color.YELLOW);if(typeof this.outlineColor=="string"){this.outlineColor=Cesium.Color.fromCssColorString(this.outlineColor)}this.backgroundColor=n.backgroundColor;if(typeof this.backgroundColor=="string"){this.backgroundColor=Cesium.Color.fromCssColorString(this.backgroundColor)}this.lineWidth=Cesium.defaultValue(n.lineWidth,1.5);this.outline=Cesium.defaultValue(n.outline,true);this.fontColor=Cesium.defaultValue(n.fontColor,Cesium.Color.BLACK);if(typeof this.fontColor=="string"){this.fontColor=Cesium.Color.fromCssColorString(this.fontColor)}this.fontSize=Cesium.defaultValue(n.fontSize,16);this.fontFamily=Cesium.defaultValue(n.fontFamily,"宋体");this.pointSize=Cesium.defaultValue(n.pointSize,4);this.pointColor=Cesium.defaultValue(n.pointColor,Cesium.Color.YELLOW);if(typeof this.pointColor=="string"){this.pointColor=Cesium.Color.fromCssColorString(this.pointColor)}this.pointStyle=Cesium.defaultValue(n.pointStyle,"Ring");this.labelPropertyName=Cesium.defaultValue(n.labelPropertyName,"NAME");this.ringRadius=Cesium.defaultValue(n.ringRadius,2);this.circleLineWidth=Cesium.defaultValue(n.circleLineWidth,2);this.showMaker=Cesium.defaultValue(n.showMaker,true);this.showLabel=Cesium.defaultValue(n.showLabel,true);this.showCenterLabel=Cesium.defaultValue(n.showCenterLabel,false);this.centerLabelPropertyName=n.centerLabelPropertyName;this.labelOffsetX=Cesium.defaultValue(n.labelOffsetX,0);this.labelOffsetY=Cesium.defaultValue(n.labelOffsetY,0);this.makerImage=n.makerImage;this.lineDash=n.lineDash;this.lineCap=Cesium.defaultValue(n.lineCap,"butt");this.lineJoin=Cesium.defaultValue(n.lineJoin,"miter");this.shadowColor=n.shadowColor;this.shadowBlur=n.shadowBlur;this.shadowOffsetX=n.shadowOffsetX;this.shadowOffsetY=n.shadowOffsetY;this.miterLimit=Cesium.defaultValue(n.miterLimit,10);this.makerImageEl=null;var t=null;this.readyPromise=Cesium.when.defer();var e=this;if(typeof this.makerImage=="string"){var l=new Image;l.onload=function(){e.makerImageEl=this;e.readyPromise.resolve(true)};l.onerror=function(n){e.readyPromise.reject(n)};l.src=this.makerImage}else{if(this.makerImage instanceof Image){this.makerImageEl=this.makerImage}setTimeout(function(){e.readyPromise.resolve(true)},10)}}n.prototype.clone=function(){var t=new n;for(var e in this){if(this.hasOwnProperty(e)){if(this[e]instanceof Cesium.Color){t[e]=Cesium.Color.clone(this[e])}else{t[e]=this[e]}}}return t};n.Default=new n;return n});define("VectorRenderer/VectorLayer",["Util/turf","Util/shp","Util/Path","VectorRenderer/VectorStyle"],function(n,t,e,l){function i(i){i=Cesium.defaultValue(i,Cesium.defaultValue.EMPTY_OBJECT);if(!Cesium.defined(i.source)){throw new Cesium.DeveloperError("source is required")}var u=null;if(typeof i.source=="string"){i.source=i.source.toLowerCase();u=e.GetExtension(i.source);if(u!==".shp"&&u!==".json"&&u!==".geojson"&&u!==".topojson"){throw new Cesium.DeveloperError("The data  options.source provide is not supported.")}}else if(i.source.type&&i.source.type=="FeatureCollection"){}else if(Array.isArray(i.source)){if(!(i.source[0]instanceof PolyLine)&&i.source[0]instanceof Polygon){throw new Cesium.DeveloperError("The data  options.source provide is not supported.")}}else{throw new Cesium.DeveloperError("The data  options.source provide is not supported.")}if(u){this._source=i.source.replace(".shp","")}else{this._source=i.source}this._fileExtension=u;this._simplifyTolerance=Cesium.defaultValue(i.simplifyTolerance,.01);this._simplify=Cesium.defaultValue(i.simplify,false);this._ready=false;this.style=Cesium.defaultValue(i.style,new l);this.readyPromise=Cesium.when.defer();this.lines=null;this.outlines=null;this.points=null;this.polygons=null;this.onlyPoint=false;this.bbox=[];this.rectangle=null;var s=this;var a=Cesium.when.defer();function o(n){try{r(s,n);n=null;a.resolve(s)}catch(n){a.reject(n)}}var h=[this.style.readyPromise,a];if(u){switch(u){case".shp":t(this._source).then(o,function(n){console.log("load shp file error："+n)});break;case".json":case".geojson":case".topojson":Cesium.loadText(this._source).then(function(n){o(JSON.parse(n))}).otherwise(function(n){console.log(n)});break;default:throw new Cesium.DeveloperError("The file  options.source provide is not supported.")}}else{setTimeout(function(){if(Array.isArray(s._source)){var t=s._source;if(t[0]instanceof PolyLine){var e=[];var l=[];for(var i=0;i<t.length;i++){e=[];t[i].PointList.forEach(function(n){e.push(n.getCoordArray())});l.push(e)}l=n.multiLineString(l);l=n.featureCollection([l]);o(l)}else if(t[0]instanceof Polygon){var r=[];for(var i=0;i<t.length;i++){var e=[];t[i].OutLine.PointList.forEach(function(n){e.push(n.getCoordArray())});var u=n.polygon(e,t[0].getProperties());r.push(u)}r=n.featureCollection(r);o(r)}else{throw new Cesium.DeveloperError("The data  options.source provide is not supported.")}}else{o(s._source)}},10)}Cesium.when.all(h,function(){s._ready=true;s.readyPromise.resolve(s)},function(n){s._ready=false;s.readyPromise.resolve(n)})}function r(t,e){var l=t;var i=l._simplifyTolerance;var r=[],u=[],s=[],a=[];var o=true;n.featureEach(e,function(t,e){if(t.geometry.type=="Point"||t.geometry.type=="MultiPoint"){s.push(t)}if(t.geometry.type=="Polygon"||t.geometry.type=="MultiPolygon"){u=u.concat(n.polygonToLineString(t).features);o=false;if(l._simplify){simplified=n.simplify(t,i,false);a.push(simplified)}else{a.push(t)}}if(t.geometry.type=="MultiLineString"||t.geometry.type=="LineString"){if(l._simplify){simplified=n.simplify(t,i,false);r.push(simplified)}else{r.push(t)}o=false}});if(r.length>0){if(!l.lines){l.lines=n.featureCollection(r)}}if(u.length>0){if(!l.outlines){l.outlines=n.featureCollection(u)}}if(s.length>0){if(!l.points){l.points=n.featureCollection(s)}}if(a.length>0){if(!l.polygons){l.polygons=n.featureCollection(a)}}l.onlyPoint=o;l.bbox=n.bbox(e);l.rectangle=Cesium.Rectangle.fromDegrees(l.bbox[0],l.bbox[1],l.bbox[2],l.bbox[3])}Object.defineProperties(i.prototype,{ready:{get:function(){return this._ready}}});return i});define("Util/Shp",["ThirdParty/shapefile-js-3.3.2/shp","ThirdParty/geojson-topojson/lib","File"],function(n,t,e){n.groupFiles=function(n){var t,e,l;var i={};for(var r=0;r<n.length;r++){var u=Path.ChangeExtension(n[r].name,"");if(!i[u]){i[u]=[]}i[u].push(n[r])}return i};n.parseShpFiles=function(e,l){if(!e||e.length>0){var i=Cesium.when.defer();var r,u,s;for(var a=0;a<e.length;a++){if(e[a].name.toLocaleLowerCase().indexOf(".shp")>0){r=e[a]}if(e[a].name.toLocaleLowerCase().indexOf(".prj")>0){s=e[a]}if(e[a].name.toLocaleLowerCase().indexOf(".dbf")>0){u=e[a]}}if(!r||!s||!u){throw new Error("打开文件失败,请通过ctrl+同时选择shp、prj、dbf三个文件");return}var o=[File.readAsArrayBuffer(r),File.readAsText(s),File.readAsArrayBuffer(u)];Cesium.when.all(o,function(e){var u=e[0];var s=e[1];var a=e[2];var o=n.combine([n.parseShp(u,s),n.parseDbf(a)]);o.fileName=r.name.toLocaleLowerCase();if(l){o=t.topology({collection:o},{"property-transform":function(n,t,e){n[t]=e;return n}});o.fileName=r.name.toLocaleLowerCase()}i.resolve(o)},function(n){i.reject(n)});return i}else{throw new Error("文件列表不能为空")}};return n});function LonLatProjection(n,t){var e={width:n,height:t};function l(n){var t=Number.MAX_VALUE;var e,l;var i={xMin:t,yMin:t,xMax:-t,yMax:-t};for(var r=0,u=n.length;r<u;r++){var s=n[r].getBoundingRect();e={x:s.xMin,y:s.yMin};l={x:s.xMax,y:s.yMax};i.xMin=i.xMin<e.x?i.xMin:e.x;i.yMin=i.yMin<e.y?i.yMin:e.y;i.xMax=i.xMax>l.x?i.xMax:l.x;i.yMax=i.yMax>l.y?i.yMax:l.y}return i}function i(n,t){var l=t.xMax-t.xMin;var i=t.yMin-t.yMax;var r=Math.abs(n[0]-t.xMin);var u=n[1]-t.yMax;var s=r/l;var a=u/i;var o=s*e.width,h=a*e.height;return{x:o,y:h}}function r(n,t){var l=t.xMax-t.xMin;var i=t.yMin-t.yMax;var r=n.x/e.width*l,u=n.y/e.height*i;return[r,u]}this.project=i;this.unproject=r;this.getBoundingRect=l}if(typeof module==="undefined"){this.LonLatProjection=LonLatProjection}else{module.exports=LonLatProjection}if(typeof define==="function"){define("Data/Geojson/LonLatProjection",[],function(){return LonLatProjection})}(function(n,t){typeof exports==="object"&&typeof module!=="undefined"?module.exports=t():typeof define==="function"&&define.amd?define("ThirdParty/proj4/dist/proj4-src",t):n.proj4=t()})(this,function(){"use strict";var n=function(n){n("EPSG:4326","+title=WGS 84 (long/lat) +proj=longlat +ellps=WGS84 +datum=WGS84 +units=degrees");n("EPSG:4269","+title=NAD83 (long/lat) +proj=longlat +a=6378137.0 +b=6356752.31414036 +ellps=GRS80 +datum=NAD83 +units=degrees");n("EPSG:3857","+title=WGS 84 / Pseudo-Mercator +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs");n.WGS84=n["EPSG:4326"];n["EPSG:3785"]=n["EPSG:3857"];n.GOOGLE=n["EPSG:3857"];n["EPSG:900913"]=n["EPSG:3857"];n["EPSG:102113"]=n["EPSG:3857"]};var t=1;var e=2;var l=4;var i=5;var r=484813681109536e-20;var u=Math.PI/2;var s=.16666666666666666;var a=.04722222222222222;var o=.022156084656084655;var h=1e-10;var f=.017453292519943295;var c=57.29577951308232;var d=Math.PI/4;var g=Math.PI*2;var p=3.14159265359;var v={};v.greenwich=0;v.lisbon=-9.131906111111;v.paris=2.337229166667;v.bogota=-74.080916666667;v.madrid=-3.687938888889;v.rome=12.452333333333;v.bern=7.439583333333;v.jakarta=106.807719444444;v.ferro=-17.666666666667;v.brussels=4.367975;v.stockholm=18.058277777778;v.athens=23.7163375;v.oslo=10.722916666667;var m={ft:{to_meter:.3048},"us-ft":{to_meter:1200/3937}};var y=/[\s_\-\/\(\)]/g;function x(n,t){if(n[t]){return n[t]}var e=Object.keys(n);var l=t.toLowerCase().replace(y,"");var i=-1;var r,u;while(++i<e.length){r=e[i];u=r.toLowerCase().replace(y,"");if(u===l){return n[r]}}}var w=function(n){var t={};var e=n.split("+").map(function(n){return n.trim()}).filter(function(n){return n}).reduce(function(n,t){var e=t.split("=");e.push(true);n[e[0].toLowerCase()]=e[1];return n},{});var l,i,r;var u={proj:"projName",datum:"datumCode",rf:function(n){t.rf=parseFloat(n)},lat_0:function(n){t.lat0=n*f},lat_1:function(n){t.lat1=n*f},lat_2:function(n){t.lat2=n*f},lat_ts:function(n){t.lat_ts=n*f},lon_0:function(n){t.long0=n*f},lon_1:function(n){t.long1=n*f},lon_2:function(n){t.long2=n*f},alpha:function(n){t.alpha=parseFloat(n)*f},lonc:function(n){t.longc=n*f},x_0:function(n){t.x0=parseFloat(n)},y_0:function(n){t.y0=parseFloat(n)},k_0:function(n){t.k0=parseFloat(n)},k:function(n){t.k0=parseFloat(n)},a:function(n){t.a=parseFloat(n)},b:function(n){t.b=parseFloat(n)},r_a:function(){t.R_A=true},zone:function(n){t.zone=parseInt(n,10)},south:function(){t.utmSouth=true},towgs84:function(n){t.datum_params=n.split(",").map(function(n){return parseFloat(n)})},to_meter:function(n){t.to_meter=parseFloat(n)},units:function(n){t.units=n;var e=x(m,n);if(e){t.to_meter=e.to_meter}},from_greenwich:function(n){t.from_greenwich=n*f},pm:function(n){var e=x(v,n);t.from_greenwich=(e?e:parseFloat(n))*f},nadgrids:function(n){if(n==="@null"){t.datumCode="none"}else{t.nadgrids=n}},axis:function(n){var e="ewnsud";if(n.length===3&&e.indexOf(n.substr(0,1))!==-1&&e.indexOf(n.substr(1,1))!==-1&&e.indexOf(n.substr(2,1))!==-1){t.axis=n}}};for(l in e){i=e[l];if(l in u){r=u[l];if(typeof r==="function"){r(i)}else{t[r]=i}}else{t[l]=i}}if(typeof t.datumCode==="string"&&t.datumCode!=="WGS84"){t.datumCode=t.datumCode.toLowerCase()}return t};var _=1;var M=2;var E=3;var b=4;var C=5;var I=-1;var S=/\s/;var N=/[A-Za-z]/;var P=/[A-Za-z84]/;var L=/[,\]]/;var R=/[\d\.E\-\+]/;function T(n){if(typeof n!=="string"){throw new Error("not a string")}this.text=n.trim();this.level=0;this.place=0;this.root=null;this.stack=[];this.currentObject=null;this.state=_}T.prototype.readCharicter=function(){var n=this.text[this.place++];if(this.state!==b){while(S.test(n)){if(this.place>=this.text.length){return}n=this.text[this.place++]}}switch(this.state){case _:return this.neutral(n);case M:return this.keyword(n);case b:return this.quoted(n);case C:return this.afterquote(n);case E:return this.number(n);case I:return}};T.prototype.afterquote=function(n){if(n==='"'){this.word+='"';this.state=b;return}if(L.test(n)){this.word=this.word.trim();this.afterItem(n);return}throw new Error("havn't handled \""+n+'" in afterquote yet, index '+this.place)};T.prototype.afterItem=function(n){if(n===","){if(this.word!==null){this.currentObject.push(this.word)}this.word=null;this.state=_;return}if(n==="]"){this.level--;if(this.word!==null){this.currentObject.push(this.word);this.word=null}this.state=_;this.currentObject=this.stack.pop();if(!this.currentObject){this.state=I}return}};T.prototype.number=function(n){if(R.test(n)){this.word+=n;return}if(L.test(n)){this.word=parseFloat(this.word);this.afterItem(n);return}throw new Error("havn't handled \""+n+'" in number yet, index '+this.place)};T.prototype.quoted=function(n){if(n==='"'){this.state=C;return}this.word+=n;return};T.prototype.keyword=function(n){if(P.test(n)){this.word+=n;return}if(n==="["){var t=[];t.push(this.word);this.level++;if(this.root===null){this.root=t}else{this.currentObject.push(t)}this.stack.push(this.currentObject);this.currentObject=t;this.state=_;return}if(L.test(n)){this.afterItem(n);return}throw new Error("havn't handled \""+n+'" in keyword yet, index '+this.place)};T.prototype.neutral=function(n){if(N.test(n)){this.word=n;this.state=M;return}if(n==='"'){this.word="";this.state=b;return}if(R.test(n)){this.word=n;this.state=E;return}if(L.test(n)){this.afterItem(n);return}throw new Error("havn't handled \""+n+'" in neutral yet, index '+this.place)};T.prototype.output=function(){while(this.place<this.text.length){this.readCharicter()}if(this.state===I){return this.root}throw new Error('unable to parse string "'+this.text+'". State is '+this.state)};function O(n){var t=new T(n);return t.output()}function A(n,t,e){if(Array.isArray(t)){e.unshift(t);t=null}var l=t?{}:n;var i=e.reduce(function(n,t){k(t,n);return n},l);if(t){n[t]=i}}function k(n,t){if(!Array.isArray(n)){t[n]=true;return}var e=n.shift();if(e==="PARAMETER"){e=n.shift()}if(n.length===1){if(Array.isArray(n[0])){t[e]={};k(n[0],t[e]);return}t[e]=n[0];return}if(!n.length){t[e]=true;return}if(e==="TOWGS84"){t[e]=n;return}if(!Array.isArray(e)){t[e]={}}var l;switch(e){case"UNIT":case"PRIMEM":case"VERT_DATUM":t[e]={name:n[0].toLowerCase(),convert:n[1]};if(n.length===3){k(n[2],t[e])}return;case"SPHEROID":case"ELLIPSOID":t[e]={name:n[0],a:n[1],rf:n[2]};if(n.length===4){k(n[3],t[e])}return;case"PROJECTEDCRS":case"PROJCRS":case"GEOGCS":case"GEOCCS":case"PROJCS":case"LOCAL_CS":case"GEODCRS":case"GEODETICCRS":case"GEODETICDATUM":case"EDATUM":case"ENGINEERINGDATUM":case"VERT_CS":case"VERTCRS":case"VERTICALCRS":case"COMPD_CS":case"COMPOUNDCRS":case"ENGINEERINGCRS":case"ENGCRS":case"FITTED_CS":case"LOCAL_DATUM":case"DATUM":n[0]=["name",n[0]];A(t,e,n);return;default:l=-1;while(++l<n.length){if(!Array.isArray(n[l])){return k(n,t[e])}}return A(t,e,n)}}var D=.017453292519943295;function F(n,t){var e=t[0];var l=t[1];if(!(e in n)&&l in n){n[e]=n[l];if(t.length===3){n[e]=t[2](n[e])}}}function B(n){return n*D}function G(n){if(n.type==="GEOGCS"){n.projName="longlat"}else if(n.type==="LOCAL_CS"){n.projName="identity";n.local=true}else{if(typeof n.PROJECTION==="object"){n.projName=Object.keys(n.PROJECTION)[0]}else{n.projName=n.PROJECTION}}if(n.UNIT){n.units=n.UNIT.name.toLowerCase();if(n.units==="metre"){n.units="meter"}if(n.UNIT.convert){if(n.type==="GEOGCS"){if(n.DATUM&&n.DATUM.SPHEROID){n.to_meter=n.UNIT.convert*n.DATUM.SPHEROID.a}}else{n.to_meter=n.UNIT.convert,10}}}var t=n.GEOGCS;if(n.type==="GEOGCS"){t=n}if(t){if(t.DATUM){n.datumCode=t.DATUM.name.toLowerCase()}else{n.datumCode=t.name.toLowerCase()}if(n.datumCode.slice(0,2)==="d_"){n.datumCode=n.datumCode.slice(2)}if(n.datumCode==="new_zealand_geodetic_datum_1949"||n.datumCode==="new_zealand_1949"){n.datumCode="nzgd49"}if(n.datumCode==="wgs_1984"){if(n.PROJECTION==="Mercator_Auxiliary_Sphere"){n.sphere=true}n.datumCode="wgs84"}if(n.datumCode.slice(-6)==="_ferro"){n.datumCode=n.datumCode.slice(0,-6)}if(n.datumCode.slice(-8)==="_jakarta"){n.datumCode=n.datumCode.slice(0,-8)}if(~n.datumCode.indexOf("belge")){n.datumCode="rnb72"}if(t.DATUM&&t.DATUM.SPHEROID){n.ellps=t.DATUM.SPHEROID.name.replace("_19","").replace(/[Cc]larke\_18/,"clrk");if(n.ellps.toLowerCase().slice(0,13)==="international"){n.ellps="intl"}n.a=t.DATUM.SPHEROID.a;n.rf=parseFloat(t.DATUM.SPHEROID.rf,10)}if(~n.datumCode.indexOf("osgb_1936")){n.datumCode="osgb36"}if(~n.datumCode.indexOf("osni_1952")){n.datumCode="osni52"}if(~n.datumCode.indexOf("tm65")||~n.datumCode.indexOf("geodetic_datum_of_1965")){n.datumCode="ire65"}}if(n.b&&!isFinite(n.b)){n.b=n.a}function e(t){var e=n.to_meter||1;return t*e}var l=function(t){return F(n,t)};var i=[["standard_parallel_1","Standard_Parallel_1"],["standard_parallel_2","Standard_Parallel_2"],["false_easting","False_Easting"],["false_northing","False_Northing"],["central_meridian","Central_Meridian"],["latitude_of_origin","Latitude_Of_Origin"],["latitude_of_origin","Central_Parallel"],["scale_factor","Scale_Factor"],["k0","scale_factor"],["latitude_of_center","Latitude_of_center"],["lat0","latitude_of_center",B],["longitude_of_center","Longitude_Of_Center"],["longc","longitude_of_center",B],["x0","false_easting",e],["y0","false_northing",e],["long0","central_meridian",B],["lat0","latitude_of_origin",B],["lat0","standard_parallel_1",B],["lat1","standard_parallel_1",B],["lat2","standard_parallel_2",B],["alpha","azimuth",B],["srsCode","name"]];i.forEach(l);if(!n.long0&&n.longc&&(n.projName==="Albers_Conic_Equal_Area"||n.projName==="Lambert_Azimuthal_Equal_Area")){n.long0=n.longc}if(!n.lat_ts&&n.lat1&&(n.projName==="Stereographic_South_Pole"||n.projName==="Polar Stereographic (variant B)")){n.lat0=B(n.lat1>0?90:-90);n.lat_ts=n.lat1}}var z=function(n){var t=O(n);var e=t.shift();var l=t.shift();t.unshift(["name",l]);t.unshift(["type",e]);var i={};k(t,i);G(i);return i};function q(n){var t=this;if(arguments.length===2){var e=arguments[1];if(typeof e==="string"){if(e.charAt(0)==="+"){q[n]=w(arguments[1])}else{q[n]=z(arguments[1])}}else{q[n]=e}}else if(arguments.length===1){if(Array.isArray(n)){return n.map(function(n){if(Array.isArray(n)){q.apply(t,n)}else{q(n)}})}else if(typeof n==="string"){if(n in q){return q[n]}}else if("EPSG"in n){q["EPSG:"+n.EPSG]=n}else if("ESRI"in n){q["ESRI:"+n.ESRI]=n}else if("IAU2000"in n){q["IAU2000:"+n.IAU2000]=n}else{console.log(n)}return}}n(q);function j(n){return typeof n==="string"}function U(n){return n in q}var V=["PROJECTEDCRS","PROJCRS","GEOGCS","GEOCCS","PROJCS","LOCAL_CS","GEODCRS","GEODETICCRS","GEODETICDATUM","ENGCRS","ENGINEERINGCRS"];function Y(n){return V.some(function(t){return n.indexOf(t)>-1})}function X(n){return n[0]==="+"}function H(n){if(j(n)){if(U(n)){return q[n]}if(Y(n)){return z(n)}if(X(n)){return w(n)}}else{return n}}var W=function(n,t){n=n||{};var e,l;if(!t){return n}for(l in t){e=t[l];if(e!==undefined){n[l]=e}}return n};var Z=function(n,t,e){var l=n*t;return e/Math.sqrt(1-l*l)};var J=function(n){return n<0?-1:1};var K=function(n){return Math.abs(n)<=p?n:n-J(n)*g};var Q=function(n,t,e){var l=n*e;var i=.5*n;l=Math.pow((1-l)/(1+l),i);return Math.tan(.5*(u-t))/l};var $=function(n,t){var e=.5*n;var l,i;var r=u-2*Math.atan(t);for(var s=0;s<=15;s++){l=n*Math.sin(r);i=u-2*Math.atan(t*Math.pow((1-l)/(1+l),e))-r;r+=i;if(Math.abs(i)<=1e-10){return r}}return-9999};function nn(){var n=this.b/this.a;this.es=1-n*n;if(!("x0"in this)){this.x0=0}if(!("y0"in this)){this.y0=0}this.e=Math.sqrt(this.es);if(this.lat_ts){if(this.sphere){this.k0=Math.cos(this.lat_ts)}else{this.k0=Z(this.e,Math.sin(this.lat_ts),Math.cos(this.lat_ts))}}else{if(!this.k0){if(this.k){this.k0=this.k}else{this.k0=1}}}}function tn(n){var t=n.x;var e=n.y;if(e*c>90&&e*c<-90&&t*c>180&&t*c<-180){return null}var l,i;if(Math.abs(Math.abs(e)-u)<=h){return null}else{if(this.sphere){l=this.x0+this.a*this.k0*K(t-this.long0);i=this.y0+this.a*this.k0*Math.log(Math.tan(d+.5*e))}else{var r=Math.sin(e);var s=Q(this.e,e,r);l=this.x0+this.a*this.k0*K(t-this.long0);i=this.y0-this.a*this.k0*Math.log(s)}
n.x=l;n.y=i;return n}}function en(n){var t=n.x-this.x0;var e=n.y-this.y0;var l,i;if(this.sphere){i=u-2*Math.atan(Math.exp(-e/(this.a*this.k0)))}else{var r=Math.exp(-e/(this.a*this.k0));i=$(this.e,r);if(i===-9999){return null}}l=K(this.long0+t/(this.a*this.k0));n.x=l;n.y=i;return n}var ln=["Mercator","Popular Visualisation Pseudo Mercator","Mercator_1SP","Mercator_Auxiliary_Sphere","merc"];var rn={init:nn,forward:tn,inverse:en,names:ln};function un(){}function sn(n){return n}var an=["longlat","identity"];var on={init:un,forward:sn,inverse:sn,names:an};var hn=[rn,on];var fn={};var cn=[];function dn(n,t){var e=cn.length;if(!n.names){console.log(t);return true}cn[e]=n;n.names.forEach(function(n){fn[n.toLowerCase()]=e});return this}function gn(n){if(!n){return false}var t=n.toLowerCase();if(typeof fn[t]!=="undefined"&&cn[fn[t]]){return cn[fn[t]]}}function pn(){hn.forEach(dn)}var vn={start:pn,add:dn,get:gn};var mn={};mn.MERIT={a:6378137,rf:298.257,ellipseName:"MERIT 1983"};mn.SGS85={a:6378136,rf:298.257,ellipseName:"Soviet Geodetic System 85"};mn.GRS80={a:6378137,rf:298.257222101,ellipseName:"GRS 1980(IUGG, 1980)"};mn.IAU76={a:6378140,rf:298.257,ellipseName:"IAU 1976"};mn.airy={a:6377563.396,b:6356256.91,ellipseName:"Airy 1830"};mn.APL4={a:6378137,rf:298.25,ellipseName:"Appl. Physics. 1965"};mn.NWL9D={a:6378145,rf:298.25,ellipseName:"Naval Weapons Lab., 1965"};mn.mod_airy={a:6377340.189,b:6356034.446,ellipseName:"Modified Airy"};mn.andrae={a:6377104.43,rf:300,ellipseName:"Andrae 1876 (Den., Iclnd.)"};mn.aust_SA={a:6378160,rf:298.25,ellipseName:"Australian Natl & S. Amer. 1969"};mn.GRS67={a:6378160,rf:298.247167427,ellipseName:"GRS 67(IUGG 1967)"};mn.bessel={a:6377397.155,rf:299.1528128,ellipseName:"Bessel 1841"};mn.bess_nam={a:6377483.865,rf:299.1528128,ellipseName:"Bessel 1841 (Namibia)"};mn.clrk66={a:6378206.4,b:6356583.8,ellipseName:"Clarke 1866"};mn.clrk80={a:6378249.145,rf:293.4663,ellipseName:"Clarke 1880 mod."};mn.clrk58={a:6378293.645208759,rf:294.2606763692654,ellipseName:"Clarke 1858"};mn.CPM={a:6375738.7,rf:334.29,ellipseName:"Comm. des Poids et Mesures 1799"};mn.delmbr={a:6376428,rf:311.5,ellipseName:"Delambre 1810 (Belgium)"};mn.engelis={a:6378136.05,rf:298.2566,ellipseName:"Engelis 1985"};mn.evrst30={a:6377276.345,rf:300.8017,ellipseName:"Everest 1830"};mn.evrst48={a:6377304.063,rf:300.8017,ellipseName:"Everest 1948"};mn.evrst56={a:6377301.243,rf:300.8017,ellipseName:"Everest 1956"};mn.evrst69={a:6377295.664,rf:300.8017,ellipseName:"Everest 1969"};mn.evrstSS={a:6377298.556,rf:300.8017,ellipseName:"Everest (Sabah & Sarawak)"};mn.fschr60={a:6378166,rf:298.3,ellipseName:"Fischer (Mercury Datum) 1960"};mn.fschr60m={a:6378155,rf:298.3,ellipseName:"Fischer 1960"};mn.fschr68={a:6378150,rf:298.3,ellipseName:"Fischer 1968"};mn.helmert={a:6378200,rf:298.3,ellipseName:"Helmert 1906"};mn.hough={a:6378270,rf:297,ellipseName:"Hough"};mn.intl={a:6378388,rf:297,ellipseName:"International 1909 (Hayford)"};mn.kaula={a:6378163,rf:298.24,ellipseName:"Kaula 1961"};mn.lerch={a:6378139,rf:298.257,ellipseName:"Lerch 1979"};mn.mprts={a:6397300,rf:191,ellipseName:"Maupertius 1738"};mn.new_intl={a:6378157.5,b:6356772.2,ellipseName:"New International 1967"};mn.plessis={a:6376523,rf:6355863,ellipseName:"Plessis 1817 (France)"};mn.krass={a:6378245,rf:298.3,ellipseName:"Krassovsky, 1942"};mn.SEasia={a:6378155,b:6356773.3205,ellipseName:"Southeast Asia"};mn.walbeck={a:6376896,b:6355834.8467,ellipseName:"Walbeck"};mn.WGS60={a:6378165,rf:298.3,ellipseName:"WGS 60"};mn.WGS66={a:6378145,rf:298.25,ellipseName:"WGS 66"};mn.WGS7={a:6378135,rf:298.26,ellipseName:"WGS 72"};var yn=mn.WGS84={a:6378137,rf:298.257223563,ellipseName:"WGS 84"};mn.sphere={a:6370997,b:6370997,ellipseName:"Normal Sphere (r=6370997)"};function xn(n,t,e,l){var i=n*n;var r=t*t;var u=(i-r)/i;var h=0;if(l){n*=1-u*(s+u*(a+u*o));i=n*n;u=0}else{h=Math.sqrt(u)}var f=(i-r)/r;return{es:u,e:h,ep2:f}}function wn(n,t,e,l,i){if(!n){var r=x(mn,l);if(!r){r=yn}n=r.a;t=r.b;e=r.rf}if(e&&!t){t=(1-1/e)*n}if(e===0||Math.abs(n-t)<h){i=true;t=n}return{a:n,b:t,rf:e,sphere:i}}var _n={};_n.wgs84={towgs84:"0,0,0",ellipse:"WGS84",datumName:"WGS84"};_n.ch1903={towgs84:"674.374,15.056,405.346",ellipse:"bessel",datumName:"swiss"};_n.ggrs87={towgs84:"-199.87,74.79,246.62",ellipse:"GRS80",datumName:"Greek_Geodetic_Reference_System_1987"};_n.nad83={towgs84:"0,0,0",ellipse:"GRS80",datumName:"North_American_Datum_1983"};_n.nad27={nadgrids:"@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat",ellipse:"clrk66",datumName:"North_American_Datum_1927"};_n.potsdam={towgs84:"606.0,23.0,413.0",ellipse:"bessel",datumName:"Potsdam Rauenberg 1950 DHDN"};_n.carthage={towgs84:"-263.0,6.0,431.0",ellipse:"clark80",datumName:"Carthage 1934 Tunisia"};_n.hermannskogel={towgs84:"653.0,-212.0,449.0",ellipse:"bessel",datumName:"Hermannskogel"};_n.osni52={towgs84:"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15",ellipse:"airy",datumName:"Irish National"};_n.ire65={towgs84:"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15",ellipse:"mod_airy",datumName:"Ireland 1965"};_n.rassadiran={towgs84:"-133.63,-157.5,-158.62",ellipse:"intl",datumName:"Rassadiran"};_n.nzgd49={towgs84:"59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993",ellipse:"intl",datumName:"New Zealand Geodetic Datum 1949"};_n.osgb36={towgs84:"446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894",ellipse:"airy",datumName:"Airy 1830"};_n.s_jtsk={towgs84:"589,76,480",ellipse:"bessel",datumName:"S-JTSK (Ferro)"};_n.beduaram={towgs84:"-106,-87,188",ellipse:"clrk80",datumName:"Beduaram"};_n.gunung_segara={towgs84:"-403,684,41",ellipse:"bessel",datumName:"Gunung Segara Jakarta"};_n.rnb72={towgs84:"106.869,-52.2978,103.724,-0.33657,0.456955,-1.84218,1",ellipse:"intl",datumName:"Reseau National Belge 1972"};function Mn(n,u,s,a,o,h){var f={};if(n===undefined||n==="none"){f.datum_type=i}else{f.datum_type=l}if(u){f.datum_params=u.map(parseFloat);if(f.datum_params[0]!==0||f.datum_params[1]!==0||f.datum_params[2]!==0){f.datum_type=t}if(f.datum_params.length>3){if(f.datum_params[3]!==0||f.datum_params[4]!==0||f.datum_params[5]!==0||f.datum_params[6]!==0){f.datum_type=e;f.datum_params[3]*=r;f.datum_params[4]*=r;f.datum_params[5]*=r;f.datum_params[6]=f.datum_params[6]/1e6+1}}}f.a=s;f.b=a;f.es=o;f.ep2=h;return f}function En(n,t){if(!(this instanceof En)){return new En(n)}t=t||function(n){if(n){throw n}};var e=H(n);if(typeof e!=="object"){t(n);return}var l=En.projections.get(e.projName);if(!l){t(n);return}if(e.datumCode&&e.datumCode!=="none"){var i=x(_n,e.datumCode);if(i){e.datum_params=i.towgs84?i.towgs84.split(","):null;e.ellps=i.ellipse;e.datumName=i.datumName?i.datumName:e.datumCode}}e.k0=e.k0||1;e.axis=e.axis||"enu";e.ellps=e.ellps||"wgs84";var r=wn(e.a,e.b,e.rf,e.ellps,e.sphere);var u=xn(r.a,r.b,r.rf,e.R_A);var s=e.datum||Mn(e.datumCode,e.datum_params,r.a,r.b,u.es,u.ep2);W(this,e);W(this,l);this.a=r.a;this.b=r.b;this.rf=r.rf;this.sphere=r.sphere;this.es=u.es;this.e=u.e;this.ep2=u.ep2;this.datum=s;this.init();t(null,this)}En.projections=vn;En.projections.start();function bn(n,l){if(n.datum_type!==l.datum_type){return false}else if(n.a!==l.a||Math.abs(n.es-l.es)>5e-11){return false}else if(n.datum_type===t){return n.datum_params[0]===l.datum_params[0]&&n.datum_params[1]===l.datum_params[1]&&n.datum_params[2]===l.datum_params[2]}else if(n.datum_type===e){return n.datum_params[0]===l.datum_params[0]&&n.datum_params[1]===l.datum_params[1]&&n.datum_params[2]===l.datum_params[2]&&n.datum_params[3]===l.datum_params[3]&&n.datum_params[4]===l.datum_params[4]&&n.datum_params[5]===l.datum_params[5]&&n.datum_params[6]===l.datum_params[6]}else{return true}}function Cn(n,t,e){var l=n.x;var i=n.y;var r=n.z?n.z:0;var s;var a;var o;var h;if(i<-u&&i>-1.001*u){i=-u}else if(i>u&&i<1.001*u){i=u}else if(i<-u||i>u){return null}if(l>Math.PI){l-=2*Math.PI}a=Math.sin(i);h=Math.cos(i);o=a*a;s=e/Math.sqrt(1-t*o);return{x:(s+r)*h*Math.cos(l),y:(s+r)*h*Math.sin(l),z:(s*(1-t)+r)*a}}function In(n,t,e,l){var i=1e-12;var r=i*i;var s=30;var a;var o;var h;var f;var c;var d;var g;var p;var v;var m;var y;var x;var w;var _=n.x;var M=n.y;var E=n.z?n.z:0;var b;var C;var I;a=Math.sqrt(_*_+M*M);o=Math.sqrt(_*_+M*M+E*E);if(a/e<i){b=0;if(o/e<i){C=u;I=-l;return{x:n.x,y:n.y,z:n.z}}}else{b=Math.atan2(M,_)}h=E/o;f=a/o;c=1/Math.sqrt(1-t*(2-t)*f*f);p=f*(1-t)*c;v=h*c;w=0;do{w++;g=e/Math.sqrt(1-t*v*v);I=a*p+E*v-g*(1-t*v*v);d=t*g/(g+I);c=1/Math.sqrt(1-d*(2-d)*f*f);m=f*(1-d)*c;y=h*c;x=y*p-m*v;p=m;v=y}while(x*x>r&&w<s);C=Math.atan(y/Math.abs(m));return{x:b,y:C,z:I}}function Sn(n,l,i){if(l===t){return{x:n.x+i[0],y:n.y+i[1],z:n.z+i[2]}}else if(l===e){var r=i[0];var u=i[1];var s=i[2];var a=i[3];var o=i[4];var h=i[5];var f=i[6];return{x:f*(n.x-h*n.y+o*n.z)+r,y:f*(h*n.x+n.y-a*n.z)+u,z:f*(-o*n.x+a*n.y+n.z)+s}}}function Nn(n,l,i){if(l===t){return{x:n.x-i[0],y:n.y-i[1],z:n.z-i[2]}}else if(l===e){var r=i[0];var u=i[1];var s=i[2];var a=i[3];var o=i[4];var h=i[5];var f=i[6];var c=(n.x-r)/f;var d=(n.y-u)/f;var g=(n.z-s)/f;return{x:c+h*d-o*g,y:-h*c+d+a*g,z:o*c-a*d+g}}}function Pn(n){return n===t||n===e}var Ln=function(n,t,e){if(bn(n,t)){return e}if(n.datum_type===i||t.datum_type===i){return e}if(n.es===t.es&&n.a===t.a&&!Pn(n.datum_type)&&!Pn(t.datum_type)){return e}e=Cn(e,n.es,n.a);if(Pn(n.datum_type)){e=Sn(e,n.datum_type,n.datum_params)}if(Pn(t.datum_type)){e=Nn(e,t.datum_type,t.datum_params)}return In(e,t.es,t.a,t.b)};var Rn=function(n,t,e){var l=e.x,i=e.y,r=e.z||0;var u,s,a;var o={};for(a=0;a<3;a++){if(t&&a===2&&e.z===undefined){continue}if(a===0){u=l;s="x"}else if(a===1){u=i;s="y"}else{u=r;s="z"}switch(n.axis[a]){case"e":o[s]=u;break;case"w":o[s]=-u;break;case"n":o[s]=u;break;case"s":o[s]=-u;break;case"u":if(e[s]!==undefined){o.z=u}break;case"d":if(e[s]!==undefined){o.z=-u}break;default:return null}}return o};var Tn=function(n){var t={x:n[0],y:n[1]};if(n.length>2){t.z=n[2]}if(n.length>3){t.m=n[3]}return t};var On=function(n){An(n.x);An(n.y)};function An(n){if(typeof Number.isFinite==="function"){if(Number.isFinite(n)){return}throw new TypeError("coordinates must be finite numbers")}if(typeof n!=="number"||n!==n||!isFinite(n)){throw new TypeError("coordinates must be finite numbers")}}function kn(n,l){return(n.datum.datum_type===t||n.datum.datum_type===e)&&l.datumCode!=="WGS84"||(l.datum.datum_type===t||l.datum.datum_type===e)&&n.datumCode!=="WGS84"}function Dn(n,t,e){var l;if(Array.isArray(e)){e=Tn(e)}On(e);if(n.datum&&t.datum&&kn(n,t)){l=new En("WGS84");e=Dn(n,l,e);n=l}if(n.axis!=="enu"){e=Rn(n,false,e)}if(n.projName==="longlat"){e={x:e.x*f,y:e.y*f}}else{if(n.to_meter){e={x:e.x*n.to_meter,y:e.y*n.to_meter}}e=n.inverse(e)}if(n.from_greenwich){e.x+=n.from_greenwich}e=Ln(n.datum,t.datum,e);if(t.from_greenwich){e={x:e.x-t.from_greenwich,y:e.y}}if(t.projName==="longlat"){e={x:e.x*c,y:e.y*c}}else{e=t.forward(e);if(t.to_meter){e={x:e.x/t.to_meter,y:e.y/t.to_meter}}}if(t.axis!=="enu"){return Rn(t,true,e)}return e}var Fn=En("WGS84");function Bn(n,t,e){var l,i,r;if(Array.isArray(e)){l=Dn(n,t,e);if(e.length===3){return[l.x,l.y,l.z]}else{return[l.x,l.y]}}else{i=Dn(n,t,e);r=Object.keys(e);if(r.length===2){return i}r.forEach(function(n){if(n==="x"||n==="y"){return}i[n]=e[n]});return i}}function Gn(n){if(n instanceof En){return n}if(n.oProj){return n.oProj}return En(n)}function zn(n,t,e){n=Gn(n);var l=false;var i;if(typeof t==="undefined"){t=n;n=Fn;l=true}else if(typeof t.x!=="undefined"||Array.isArray(t)){e=t;t=n;n=Fn;l=true}t=Gn(t);if(e){return Bn(n,t,e)}else{i={forward:function(e){return Bn(n,t,e)},inverse:function(e){return Bn(t,n,e)}};if(l){i.oProj=t}return i}}var qn=6;var jn="AJSAJS";var Un="AFAFAF";var Vn=65;var Yn=73;var Xn=79;var Hn=86;var Wn=90;var Zn={forward:Jn,inverse:Kn,toPoint:Qn};function Jn(n,t){t=t||5;return it(tt({lat:n[1],lon:n[0]}),t)}function Kn(n){var t=et(at(n.toUpperCase()));if(t.lat&&t.lon){return[t.lon,t.lat,t.lon,t.lat]}return[t.left,t.bottom,t.right,t.top]}function Qn(n){var t=et(at(n.toUpperCase()));if(t.lat&&t.lon){return[t.lon,t.lat]}return[(t.left+t.right)/2,(t.top+t.bottom)/2]}function $n(n){return n*(Math.PI/180)}function nt(n){return 180*(n/Math.PI)}function tt(n){var t=n.lat;var e=n.lon;var l=6378137;var i=.00669438;var r=.9996;var u;var s;var a,o,h,f,c;var d=$n(t);var g=$n(e);var p;var v;v=Math.floor((e+180)/6)+1;if(e===180){v=60}if(t>=56&&t<64&&e>=3&&e<12){v=32}if(t>=72&&t<84){if(e>=0&&e<9){v=31}else if(e>=9&&e<21){v=33}else if(e>=21&&e<33){v=35}else if(e>=33&&e<42){v=37}}u=(v-1)*6-180+3;p=$n(u);s=i/(1-i);a=l/Math.sqrt(1-i*Math.sin(d)*Math.sin(d));o=Math.tan(d)*Math.tan(d);h=s*Math.cos(d)*Math.cos(d);f=Math.cos(d)*(g-p);c=l*((1-i/4-3*i*i/64-5*i*i*i/256)*d-(3*i/8+3*i*i/32+45*i*i*i/1024)*Math.sin(2*d)+(15*i*i/256+45*i*i*i/1024)*Math.sin(4*d)-35*i*i*i/3072*Math.sin(6*d));var m=r*a*(f+(1-o+h)*f*f*f/6+(5-18*o+o*o+72*h-58*s)*f*f*f*f*f/120)+5e5;var y=r*(c+a*Math.tan(d)*(f*f/2+(5-o+9*h+4*h*h)*f*f*f*f/24+(61-58*o+o*o+600*h-330*s)*f*f*f*f*f*f/720));if(t<0){y+=1e7}return{northing:Math.round(y),easting:Math.round(m),zoneNumber:v,zoneLetter:lt(t)}}function et(n){var t=n.northing;var e=n.easting;var l=n.zoneLetter;var i=n.zoneNumber;if(i<0||i>60){return null}var r=.9996;var u=6378137;var s=.00669438;var a;var o=(1-Math.sqrt(1-s))/(1+Math.sqrt(1-s));var h,f,c,d,g,p;var v;var m,y;var x=e-5e5;var w=t;if(l<"N"){w-=1e7}v=(i-1)*6-180+3;a=s/(1-s);p=w/r;m=p/(u*(1-s/4-3*s*s/64-5*s*s*s/256));y=m+(3*o/2-27*o*o*o/32)*Math.sin(2*m)+(21*o*o/16-55*o*o*o*o/32)*Math.sin(4*m)+151*o*o*o/96*Math.sin(6*m);h=u/Math.sqrt(1-s*Math.sin(y)*Math.sin(y));f=Math.tan(y)*Math.tan(y);c=a*Math.cos(y)*Math.cos(y);d=u*(1-s)/Math.pow(1-s*Math.sin(y)*Math.sin(y),1.5);g=x/(h*r);var _=y-h*Math.tan(y)/d*(g*g/2-(5+3*f+10*c-4*c*c-9*a)*g*g*g*g/24+(61+90*f+298*c+45*f*f-252*a-3*c*c)*g*g*g*g*g*g/720);_=nt(_);var M=(g-(1+2*f+c)*g*g*g/6+(5-2*c+28*f-3*c*c+8*a+24*f*f)*g*g*g*g*g/120)/Math.cos(y);M=v+nt(M);var E;if(n.accuracy){var b=et({northing:n.northing+n.accuracy,easting:n.easting+n.accuracy,zoneLetter:n.zoneLetter,zoneNumber:n.zoneNumber});E={top:b.lat,right:b.lon,bottom:_,left:M}}else{E={lat:_,lon:M}}return E}function lt(n){var t="Z";if(84>=n&&n>=72){t="X"}else if(72>n&&n>=64){t="W"}else if(64>n&&n>=56){t="V"}else if(56>n&&n>=48){t="U"}else if(48>n&&n>=40){t="T"}else if(40>n&&n>=32){t="S"}else if(32>n&&n>=24){t="R"}else if(24>n&&n>=16){t="Q"}else if(16>n&&n>=8){t="P"}else if(8>n&&n>=0){t="N"}else if(0>n&&n>=-8){t="M"}else if(-8>n&&n>=-16){t="L"}else if(-16>n&&n>=-24){t="K"}else if(-24>n&&n>=-32){t="J"}else if(-32>n&&n>=-40){t="H"}else if(-40>n&&n>=-48){t="G"}else if(-48>n&&n>=-56){t="F"}else if(-56>n&&n>=-64){t="E"}else if(-64>n&&n>=-72){t="D"}else if(-72>n&&n>=-80){t="C"}return t}function it(n,t){var e="00000"+n.easting,l="00000"+n.northing;return n.zoneNumber+n.zoneLetter+rt(n.easting,n.northing,n.zoneNumber)+e.substr(e.length-5,t)+l.substr(l.length-5,t)}function rt(n,t,e){var l=ut(e);var i=Math.floor(n/1e5);var r=Math.floor(t/1e5)%20;return st(i,r,l)}function ut(n){var t=n%qn;if(t===0){t=qn}return t}function st(n,t,e){var l=e-1;var i=jn.charCodeAt(l);var r=Un.charCodeAt(l);var u=i+n-1;var s=r+t;var a=false;if(u>Wn){u=u-Wn+Vn-1;a=true}if(u===Yn||i<Yn&&u>Yn||(u>Yn||i<Yn)&&a){u++}if(u===Xn||i<Xn&&u>Xn||(u>Xn||i<Xn)&&a){u++;if(u===Yn){u++}}if(u>Wn){u=u-Wn+Vn-1}if(s>Hn){s=s-Hn+Vn-1;a=true}else{a=false}if(s===Yn||r<Yn&&s>Yn||(s>Yn||r<Yn)&&a){s++}if(s===Xn||r<Xn&&s>Xn||(s>Xn||r<Xn)&&a){s++;if(s===Yn){s++}}if(s>Hn){s=s-Hn+Vn-1}var o=String.fromCharCode(u)+String.fromCharCode(s);return o}function at(n){if(n&&n.length===0){throw"MGRSPoint coverting from nothing"}var t=n.length;var e=null;var l="";var i;var r=0;while(!/[A-Z]/.test(i=n.charAt(r))){if(r>=2){throw"MGRSPoint bad conversion from: "+n}l+=i;r++}var u=parseInt(l,10);if(r===0||r+3>t){throw"MGRSPoint bad conversion from: "+n}var s=n.charAt(r++);if(s<="A"||s==="B"||s==="Y"||s>="Z"||s==="I"||s==="O"){throw"MGRSPoint zone letter "+s+" not handled: "+n}e=n.substring(r,r+=2);var a=ut(u);var o=ot(e.charAt(0),a);var h=ht(e.charAt(1),a);while(h<ft(s)){h+=2e6}var f=t-r;if(f%2!==0){throw"MGRSPoint has to have an even number \nof digits after the zone letter and two 100km letters - front \nhalf for easting meters, second half for \nnorthing meters"+n}var c=f/2;var d=0;var g=0;var p,v,m,y,x;if(c>0){p=1e5/Math.pow(10,c);v=n.substring(r,r+c);d=parseFloat(v)*p;m=n.substring(r+c);g=parseFloat(m)*p}y=d+o;x=g+h;return{easting:y,northing:x,zoneLetter:s,zoneNumber:u,accuracy:p}}function ot(n,t){var e=jn.charCodeAt(t-1);var l=1e5;var i=false;while(e!==n.charCodeAt(0)){e++;if(e===Yn){e++}if(e===Xn){e++}if(e>Wn){if(i){throw"Bad character: "+n}e=Vn;i=true}l+=1e5}return l}function ht(n,t){if(n>"V"){throw"MGRSPoint given invalid Northing "+n}var e=Un.charCodeAt(t-1);var l=0;var i=false;while(e!==n.charCodeAt(0)){e++;if(e===Yn){e++}if(e===Xn){e++}if(e>Hn){if(i){throw"Bad character: "+n}e=Vn;i=true}l+=1e5}return l}function ft(n){var t;switch(n){case"C":t=11e5;break;case"D":t=2e6;break;case"E":t=28e5;break;case"F":t=37e5;break;case"G":t=46e5;break;case"H":t=55e5;break;case"J":t=64e5;break;case"K":t=73e5;break;case"L":t=82e5;break;case"M":t=91e5;break;case"N":t=0;break;case"P":t=8e5;break;case"Q":t=17e5;break;case"R":t=26e5;break;case"S":t=35e5;break;case"T":t=44e5;break;case"U":t=53e5;break;case"V":t=62e5;break;case"W":t=7e6;break;case"X":t=79e5;break;default:t=-1}if(t>=0){return t}else{throw"Invalid zone letter: "+n}}function ct(n,t,e){if(!(this instanceof ct)){return new ct(n,t,e)}if(Array.isArray(n)){this.x=n[0];this.y=n[1];this.z=n[2]||0}else if(typeof n==="object"){this.x=n.x;this.y=n.y;this.z=n.z||0}else if(typeof n==="string"&&typeof t==="undefined"){var l=n.split(",");this.x=parseFloat(l[0],10);this.y=parseFloat(l[1],10);this.z=parseFloat(l[2],10)||0}else{this.x=n;this.y=t;this.z=e||0}console.warn("proj4.Point will be removed in version 3, use proj4.toPoint")}ct.fromMGRS=function(n){return new ct(Qn(n))};ct.prototype.toMGRS=function(n){return Jn([this.x,this.y],n)};var dt="2.4.4";var gt=1;var pt=.25;var vt=.046875;var mt=.01953125;var yt=.01068115234375;var xt=.75;var wt=.46875;var _t=.013020833333333334;var Mt=.007120768229166667;var Et=.3645833333333333;var bt=.005696614583333333;var Ct=.3076171875;var It=function(n){var t=[];t[0]=gt-n*(pt+n*(vt+n*(mt+n*yt)));t[1]=n*(xt-n*(vt+n*(mt+n*yt)));var e=n*n;t[2]=e*(wt-n*(_t+n*Mt));e*=n;t[3]=e*(Et-n*bt);t[4]=e*n*Ct;return t};var St=function(n,t,e,l){e*=t;t*=t;return l[0]*n-e*(l[1]+t*(l[2]+t*(l[3]+t*l[4])))};var Nt=20;var Pt=function(n,t,e){var l=1/(1-t);var i=n;for(var r=Nt;r;--r){var u=Math.sin(i);var s=1-t*u*u;s=(St(i,u,Math.cos(i),e)-n)*(s*Math.sqrt(s))*l;i-=s;if(Math.abs(s)<h){return i}}return i};function Lt(){this.x0=this.x0!==undefined?this.x0:0;this.y0=this.y0!==undefined?this.y0:0;this.long0=this.long0!==undefined?this.long0:0;this.lat0=this.lat0!==undefined?this.lat0:0;if(this.es){this.en=It(this.es);this.ml0=St(this.lat0,Math.sin(this.lat0),Math.cos(this.lat0),this.en)}}function Rt(n){var t=n.x;var e=n.y;var l=K(t-this.long0);var i;var r,u;var s=Math.sin(e);var a=Math.cos(e);if(!this.es){var o=a*Math.sin(l);if(Math.abs(Math.abs(o)-1)<h){return 93}else{r=.5*this.a*this.k0*Math.log((1+o)/(1-o))+this.x0;u=a*Math.cos(l)/Math.sqrt(1-Math.pow(o,2));o=Math.abs(u);if(o>=1){if(o-1>h){return 93}else{u=0}}else{u=Math.acos(u)}if(e<0){u=-u}u=this.a*this.k0*(u-this.lat0)+this.y0}}else{var f=a*l;var c=Math.pow(f,2);var d=this.ep2*Math.pow(a,2);var g=Math.pow(d,2);var p=Math.abs(a)>h?Math.tan(e):0;var v=Math.pow(p,2);var m=Math.pow(v,2);i=1-this.es*Math.pow(s,2);f=f/Math.sqrt(i);var y=St(e,s,a,this.en);r=this.a*(this.k0*f*(1+c/6*(1-v+d+c/20*(5-18*v+m+14*d-58*v*d+c/42*(61+179*m-m*v-479*v)))))+this.x0;u=this.a*(this.k0*(y-this.ml0+s*l*f/2*(1+c/12*(5-v+9*d+4*g+c/30*(61+m-58*v+270*d-330*v*d+c/56*(1385+543*m-m*v-3111*v))))))+this.y0}n.x=r;n.y=u;return n}function Tt(n){var t,e;var l,i;var r=(n.x-this.x0)*(1/this.a);var s=(n.y-this.y0)*(1/this.a);if(!this.es){var a=Math.exp(r/this.k0);var o=.5*(a-1/a);var f=this.lat0+s/this.k0;var c=Math.cos(f);t=Math.sqrt((1-Math.pow(c,2))/(1+Math.pow(o,2)));l=Math.asin(t);if(s<0){l=-l}if(o===0&&c===0){i=0}else{i=K(Math.atan2(o,c)+this.long0)}}else{t=this.ml0+s/this.k0;e=Pt(t,this.es,this.en);if(Math.abs(e)<u){var d=Math.sin(e);var g=Math.cos(e);var p=Math.abs(g)>h?Math.tan(e):0;var v=this.ep2*Math.pow(g,2);var m=Math.pow(v,2);var y=Math.pow(p,2);var x=Math.pow(y,2);t=1-this.es*Math.pow(d,2);var w=r*Math.sqrt(t)/this.k0;var _=Math.pow(w,2);t=t*p;l=e-t*_/(1-this.es)*.5*(1-_/12*(5+3*y-9*v*y+v-4*m-_/30*(61+90*y-252*v*y+45*x+46*v-_/56*(1385+3633*y+4095*x+1574*x*y))));i=K(this.long0+w*(1-_/6*(1+2*y+v-_/20*(5+28*y+24*x+8*v*y+6*v-_/42*(61+662*y+1320*x+720*x*y))))/g)}else{l=u*J(s);i=0}}n.x=i;n.y=l;return n}var Ot=["Transverse_Mercator","Transverse Mercator","tmerc"];var At={init:Lt,forward:Rt,inverse:Tt,names:Ot};var kt=function(n){var t=Math.exp(n);t=(t-1/t)/2;return t};var Dt=function(n,t){n=Math.abs(n);t=Math.abs(t);var e=Math.max(n,t);var l=Math.min(n,t)/(e?e:1);return e*Math.sqrt(1+Math.pow(l,2))};var Ft=function(n){var t=1+n;var e=t-1;return e===0?n:n*Math.log(t)/e};var Bt=function(n){var t=Math.abs(n);t=Ft(t*(1+t/(Dt(1,t)+1)));return n<0?-t:t};var Gt=function(n,t){var e=2*Math.cos(2*t);var l=n.length-1;var i=n[l];var r=0;var u;while(--l>=0){u=-r+e*i+n[l];r=i;i=u}return t+u*Math.sin(2*t)};var zt=function(n,t){var e=2*Math.cos(t);var l=n.length-1;var i=n[l];var r=0;var u;while(--l>=0){u=-r+e*i+n[l];r=i;i=u}return Math.sin(t)*u};var qt=function(n){var t=Math.exp(n);t=(t+1/t)/2;return t};var jt=function(n,t,e){var l=Math.sin(t);var i=Math.cos(t);var r=kt(e);var u=qt(e);var s=2*i*u;var a=-2*l*r;var o=n.length-1;var h=n[o];var f=0;var c=0;var d=0;var g;var p;while(--o>=0){g=c;p=f;c=h;f=d;h=-g+s*c-a*f+n[o];d=-p+a*c+s*f}s=l*u;a=i*r;return[s*h-a*d,s*d+a*h]};function Ut(){if(this.es===undefined||this.es<=0){throw new Error("incorrect elliptical usage")}this.x0=this.x0!==undefined?this.x0:0;this.y0=this.y0!==undefined?this.y0:0;this.long0=this.long0!==undefined?this.long0:0;this.lat0=this.lat0!==undefined?this.lat0:0;this.cgb=[];this.cbg=[];this.utg=[];this.gtu=[];var n=this.es/(1+Math.sqrt(1-this.es));var t=n/(2-n);var e=t;this.cgb[0]=t*(2+t*(-2/3+t*(-2+t*(116/45+t*(26/45+t*(-2854/675))))));this.cbg[0]=t*(-2+t*(2/3+t*(4/3+t*(-82/45+t*(32/45+t*(4642/4725))))));e=e*t;this.cgb[1]=e*(7/3+t*(-8/5+t*(-227/45+t*(2704/315+t*(2323/945)))));this.cbg[1]=e*(5/3+t*(-16/15+t*(-13/9+t*(904/315+t*(-1522/945)))));e=e*t;this.cgb[2]=e*(56/15+t*(-136/35+t*(-1262/105+t*(73814/2835))));this.cbg[2]=e*(-26/15+t*(34/21+t*(8/5+t*(-12686/2835))));e=e*t;this.cgb[3]=e*(4279/630+t*(-332/35+t*(-399572/14175)));this.cbg[3]=e*(1237/630+t*(-12/5+t*(-24832/14175)));e=e*t;this.cgb[4]=e*(4174/315+t*(-144838/6237));this.cbg[4]=e*(-734/315+t*(109598/31185));e=e*t;this.cgb[5]=e*(601676/22275);this.cbg[5]=e*(444337/155925);e=Math.pow(t,2);this.Qn=this.k0/(1+t)*(1+e*(1/4+e*(1/64+e/256)));this.utg[0]=t*(-.5+t*(2/3+t*(-37/96+t*(1/360+t*(81/512+t*(-96199/604800))))));this.gtu[0]=t*(.5+t*(-2/3+t*(5/16+t*(41/180+t*(-127/288+t*(7891/37800))))));this.utg[1]=e*(-1/48+t*(-1/15+t*(437/1440+t*(-46/105+t*(1118711/3870720)))));this.gtu[1]=e*(13/48+t*(-3/5+t*(557/1440+t*(281/630+t*(-1983433/1935360)))));e=e*t;this.utg[2]=e*(-17/480+t*(37/840+t*(209/4480+t*(-5569/90720))));this.gtu[2]=e*(61/240+t*(-103/140+t*(15061/26880+t*(167603/181440))));e=e*t;this.utg[3]=e*(-4397/161280+t*(11/504+t*(830251/7257600)));this.gtu[3]=e*(49561/161280+t*(-179/168+t*(6601661/7257600)));e=e*t;this.utg[4]=e*(-4583/161280+t*(108847/3991680));this.gtu[4]=e*(34729/80640+t*(-3418889/1995840));e=e*t;this.utg[5]=e*(-20648693/638668800);this.gtu[5]=e*(212378941/319334400);var l=Gt(this.cbg,this.lat0);this.Zb=-this.Qn*(l+zt(this.gtu,2*l))}function Vt(n){var t=K(n.x-this.long0);var e=n.y;e=Gt(this.cbg,e);var l=Math.sin(e);var i=Math.cos(e);var r=Math.sin(t);var u=Math.cos(t);e=Math.atan2(l,u*i);t=Math.atan2(r*i,Dt(l,i*u));t=Bt(Math.tan(t));var s=jt(this.gtu,2*e,2*t);e=e+s[0];t=t+s[1];var a;var o;if(Math.abs(t)<=2.623395162778){a=this.a*(this.Qn*t)+this.x0;o=this.a*(this.Qn*e+this.Zb)+this.y0}else{a=Infinity;o=Infinity}n.x=a;n.y=o;return n}function Yt(n){var t=(n.x-this.x0)*(1/this.a);var e=(n.y-this.y0)*(1/this.a);e=(e-this.Zb)/this.Qn;t=t/this.Qn;var l;var i;if(Math.abs(t)<=2.623395162778){var r=jt(this.utg,2*e,2*t);e=e+r[0];t=t+r[1];t=Math.atan(kt(t));var u=Math.sin(e);var s=Math.cos(e);var a=Math.sin(t);var o=Math.cos(t);e=Math.atan2(u*o,Dt(a,o*s));t=Math.atan2(a,o*s);l=K(t+this.long0);i=Gt(this.cgb,e)}else{l=Infinity;i=Infinity}n.x=l;n.y=i;return n}var Xt=["Extended_Transverse_Mercator","Extended Transverse Mercator","etmerc"];var Ht={init:Ut,forward:Vt,inverse:Yt,names:Xt};var Wt=function(n,t){if(n===undefined){n=Math.floor((K(t)+Math.PI)*30/Math.PI)+1;if(n<0){return 0}else if(n>60){return 60}}return n};var Zt="etmerc";function Jt(){var n=Wt(this.zone,this.long0);if(n===undefined){throw new Error("unknown utm zone")}this.lat0=0;this.long0=(6*Math.abs(n)-183)*f;this.x0=5e5;this.y0=this.utmSouth?1e7:0;this.k0=.9996;Ht.init.apply(this);this.forward=Ht.forward;this.inverse=Ht.inverse}var Kt=["Universal Transverse Mercator System","utm"];var Qt={init:Jt,names:Kt,dependsOn:Zt};var $t=function(n,t){return Math.pow((1-n)/(1+n),t)};var ne=20;function te(){var n=Math.sin(this.lat0);var t=Math.cos(this.lat0);t*=t;this.rc=Math.sqrt(1-this.es)/(1-this.es*n*n);this.C=Math.sqrt(1+this.es*t*t/(1-this.es));this.phic0=Math.asin(n/this.C);this.ratexp=.5*this.C*this.e;this.K=Math.tan(.5*this.phic0+d)/(Math.pow(Math.tan(.5*this.lat0+d),this.C)*$t(this.e*n,this.ratexp))}function ee(n){var t=n.x;var e=n.y;n.y=2*Math.atan(this.K*Math.pow(Math.tan(.5*e+d),this.C)*$t(this.e*Math.sin(e),this.ratexp))-u;n.x=this.C*t;return n}function le(n){var t=1e-14;var e=n.x/this.C;var l=n.y;var i=Math.pow(Math.tan(.5*l+d)/this.K,1/this.C);for(var r=ne;r>0;--r){l=2*Math.atan(i*$t(this.e*Math.sin(n.y),-.5*this.e))-u;if(Math.abs(l-n.y)<t){break}n.y=l}if(!r){return null}n.x=e;n.y=l;return n}var ie=["gauss"];var re={init:te,forward:ee,inverse:le,names:ie};function ue(){re.init.apply(this);if(!this.rc){return}this.sinc0=Math.sin(this.phic0);this.cosc0=Math.cos(this.phic0);this.R2=2*this.rc;if(!this.title){this.title="Oblique Stereographic Alternative"}}function se(n){var t,e,l,i;n.x=K(n.x-this.long0);re.forward.apply(this,[n]);t=Math.sin(n.y);e=Math.cos(n.y);l=Math.cos(n.x);i=this.k0*this.R2/(1+this.sinc0*t+this.cosc0*e*l);n.x=i*e*Math.sin(n.x);n.y=i*(this.cosc0*t-this.sinc0*e*l);n.x=this.a*n.x+this.x0;n.y=this.a*n.y+this.y0;return n}function ae(n){var t,e,l,i,r;n.x=(n.x-this.x0)/this.a;n.y=(n.y-this.y0)/this.a;n.x/=this.k0;n.y/=this.k0;if(r=Math.sqrt(n.x*n.x+n.y*n.y)){var u=2*Math.atan2(r,this.R2);t=Math.sin(u);e=Math.cos(u);i=Math.asin(e*this.sinc0+n.y*t*this.cosc0/r);l=Math.atan2(n.x*t,r*this.cosc0*e-n.y*this.sinc0*t)}else{i=this.phic0;l=0}n.x=l;n.y=i;re.inverse.apply(this,[n]);n.x=K(n.x+this.long0);return n}var oe=["Stereographic_North_Pole","Oblique_Stereographic","Polar_Stereographic","sterea","Oblique Stereographic Alternative"];var he={init:ue,forward:se,inverse:ae,names:oe};function fe(n,t,e){t*=e;return Math.tan(.5*(u+n))*Math.pow((1-t)/(1+t),.5*e)}function ce(){this.coslat0=Math.cos(this.lat0);this.sinlat0=Math.sin(this.lat0);if(this.sphere){if(this.k0===1&&!isNaN(this.lat_ts)&&Math.abs(this.coslat0)<=h){this.k0=.5*(1+J(this.lat0)*Math.sin(this.lat_ts))}}else{if(Math.abs(this.coslat0)<=h){if(this.lat0>0){this.con=1}else{this.con=-1}}this.cons=Math.sqrt(Math.pow(1+this.e,1+this.e)*Math.pow(1-this.e,1-this.e));if(this.k0===1&&!isNaN(this.lat_ts)&&Math.abs(this.coslat0)<=h){this.k0=.5*this.cons*Z(this.e,Math.sin(this.lat_ts),Math.cos(this.lat_ts))/Q(this.e,this.con*this.lat_ts,this.con*Math.sin(this.lat_ts))}this.ms1=Z(this.e,this.sinlat0,this.coslat0);this.X0=2*Math.atan(this.ssfn_(this.lat0,this.sinlat0,this.e))-u;this.cosX0=Math.cos(this.X0);this.sinX0=Math.sin(this.X0)}}function de(n){var t=n.x;var e=n.y;var l=Math.sin(e);var i=Math.cos(e);var r,s,a,o,f,c;var d=K(t-this.long0);if(Math.abs(Math.abs(t-this.long0)-Math.PI)<=h&&Math.abs(e+this.lat0)<=h){n.x=NaN;n.y=NaN;return n}if(this.sphere){r=2*this.k0/(1+this.sinlat0*l+this.coslat0*i*Math.cos(d));n.x=this.a*r*i*Math.sin(d)+this.x0;n.y=this.a*r*(this.coslat0*l-this.sinlat0*i*Math.cos(d))+this.y0;return n}else{s=2*Math.atan(this.ssfn_(e,l,this.e))-u;o=Math.cos(s);a=Math.sin(s);if(Math.abs(this.coslat0)<=h){f=Q(this.e,e*this.con,this.con*l);c=2*this.a*this.k0*f/this.cons;n.x=this.x0+c*Math.sin(t-this.long0);n.y=this.y0-this.con*c*Math.cos(t-this.long0);return n}else if(Math.abs(this.sinlat0)<h){r=2*this.a*this.k0/(1+o*Math.cos(d));n.y=r*a}else{r=2*this.a*this.k0*this.ms1/(this.cosX0*(1+this.sinX0*a+this.cosX0*o*Math.cos(d)));n.y=r*(this.cosX0*a-this.sinX0*o*Math.cos(d))+this.y0}n.x=r*o*Math.sin(d)+this.x0}return n}function ge(n){n.x-=this.x0;n.y-=this.y0;var t,e,l,i,r;var s=Math.sqrt(n.x*n.x+n.y*n.y);if(this.sphere){var a=2*Math.atan(s/(.5*this.a*this.k0));t=this.long0;e=this.lat0;if(s<=h){n.x=t;n.y=e;return n}e=Math.asin(Math.cos(a)*this.sinlat0+n.y*Math.sin(a)*this.coslat0/s);if(Math.abs(this.coslat0)<h){if(this.lat0>0){t=K(this.long0+Math.atan2(n.x,-1*n.y))}else{t=K(this.long0+Math.atan2(n.x,n.y))}}else{t=K(this.long0+Math.atan2(n.x*Math.sin(a),s*this.coslat0*Math.cos(a)-n.y*this.sinlat0*Math.sin(a)))}n.x=t;n.y=e;return n}else{if(Math.abs(this.coslat0)<=h){if(s<=h){e=this.lat0;t=this.long0;n.x=t;n.y=e;return n}n.x*=this.con;n.y*=this.con;l=s*this.cons/(2*this.a*this.k0);e=this.con*$(this.e,l);t=this.con*K(this.con*this.long0+Math.atan2(n.x,-1*n.y))}else{i=2*Math.atan(s*this.cosX0/(2*this.a*this.k0*this.ms1));t=this.long0;if(s<=h){r=this.X0}else{r=Math.asin(Math.cos(i)*this.sinX0+n.y*Math.sin(i)*this.cosX0/s);t=K(this.long0+Math.atan2(n.x*Math.sin(i),s*this.cosX0*Math.cos(i)-n.y*this.sinX0*Math.sin(i)))}e=-1*$(this.e,Math.tan(.5*(u+r)))}}n.x=t;n.y=e;return n}var pe=["stere","Stereographic_South_Pole","Polar Stereographic (variant B)"];var ve={init:ce,forward:de,inverse:ge,names:pe,ssfn_:fe};function me(){var n=this.lat0;this.lambda0=this.long0;var t=Math.sin(n);var e=this.a;var l=this.rf;var i=1/l;var r=2*i-Math.pow(i,2);var u=this.e=Math.sqrt(r);this.R=this.k0*e*Math.sqrt(1-r)/(1-r*Math.pow(t,2));this.alpha=Math.sqrt(1+r/(1-r)*Math.pow(Math.cos(n),4));this.b0=Math.asin(t/this.alpha);var s=Math.log(Math.tan(Math.PI/4+this.b0/2));var a=Math.log(Math.tan(Math.PI/4+n/2));var o=Math.log((1+u*t)/(1-u*t));this.K=s-this.alpha*a+this.alpha*u/2*o}function ye(n){var t=Math.log(Math.tan(Math.PI/4-n.y/2));var e=this.e/2*Math.log((1+this.e*Math.sin(n.y))/(1-this.e*Math.sin(n.y)));var l=-this.alpha*(t+e)+this.K;var i=2*(Math.atan(Math.exp(l))-Math.PI/4);var r=this.alpha*(n.x-this.lambda0);var u=Math.atan(Math.sin(r)/(Math.sin(this.b0)*Math.tan(i)+Math.cos(this.b0)*Math.cos(r)));var s=Math.asin(Math.cos(this.b0)*Math.sin(i)-Math.sin(this.b0)*Math.cos(i)*Math.cos(r));n.y=this.R/2*Math.log((1+Math.sin(s))/(1-Math.sin(s)))+this.y0;n.x=this.R*u+this.x0;return n}function xe(n){var t=n.x-this.x0;var e=n.y-this.y0;var l=t/this.R;var i=2*(Math.atan(Math.exp(e/this.R))-Math.PI/4);var r=Math.asin(Math.cos(this.b0)*Math.sin(i)+Math.sin(this.b0)*Math.cos(i)*Math.cos(l));var u=Math.atan(Math.sin(l)/(Math.cos(this.b0)*Math.cos(l)-Math.sin(this.b0)*Math.tan(i)));var s=this.lambda0+u/this.alpha;var a=0;var o=r;var h=-1e3;var f=0;while(Math.abs(o-h)>1e-7){if(++f>20){return}a=1/this.alpha*(Math.log(Math.tan(Math.PI/4+r/2))-this.K)+this.e*Math.log(Math.tan(Math.PI/4+Math.asin(this.e*Math.sin(o))/2));h=o;o=2*Math.atan(Math.exp(a))-Math.PI/2}n.x=s;n.y=o;return n}var we=["somerc"];var _e={init:me,forward:ye,inverse:xe,names:we};function Me(){this.no_off=this.no_off||false;this.no_rot=this.no_rot||false;if(isNaN(this.k0)){this.k0=1}var n=Math.sin(this.lat0);var t=Math.cos(this.lat0);var e=this.e*n;this.bl=Math.sqrt(1+this.es/(1-this.es)*Math.pow(t,4));this.al=this.a*this.bl*this.k0*Math.sqrt(1-this.es)/(1-e*e);var l=Q(this.e,this.lat0,n);var i=this.bl/t*Math.sqrt((1-this.es)/(1-e*e));if(i*i<1){i=1}var r;var u;if(!isNaN(this.longc)){if(this.lat0>=0){r=i+Math.sqrt(i*i-1)}else{
r=i-Math.sqrt(i*i-1)}this.el=r*Math.pow(l,this.bl);u=.5*(r-1/r);this.gamma0=Math.asin(Math.sin(this.alpha)/i);this.long0=this.longc-Math.asin(u*Math.tan(this.gamma0))/this.bl}else{var s=Q(this.e,this.lat1,Math.sin(this.lat1));var a=Q(this.e,this.lat2,Math.sin(this.lat2));if(this.lat0>=0){this.el=(i+Math.sqrt(i*i-1))*Math.pow(l,this.bl)}else{this.el=(i-Math.sqrt(i*i-1))*Math.pow(l,this.bl)}var o=Math.pow(s,this.bl);var h=Math.pow(a,this.bl);r=this.el/o;u=.5*(r-1/r);var f=(this.el*this.el-h*o)/(this.el*this.el+h*o);var c=(h-o)/(h+o);var d=K(this.long1-this.long2);this.long0=.5*(this.long1+this.long2)-Math.atan(f*Math.tan(.5*this.bl*d)/c)/this.bl;this.long0=K(this.long0);var g=K(this.long1-this.long0);this.gamma0=Math.atan(Math.sin(this.bl*g)/u);this.alpha=Math.asin(i*Math.sin(this.gamma0))}if(this.no_off){this.uc=0}else{if(this.lat0>=0){this.uc=this.al/this.bl*Math.atan2(Math.sqrt(i*i-1),Math.cos(this.alpha))}else{this.uc=-1*this.al/this.bl*Math.atan2(Math.sqrt(i*i-1),Math.cos(this.alpha))}}}function Ee(n){var t=n.x;var e=n.y;var l=K(t-this.long0);var i,r;var s;if(Math.abs(Math.abs(e)-u)<=h){if(e>0){s=-1}else{s=1}r=this.al/this.bl*Math.log(Math.tan(d+s*this.gamma0*.5));i=-1*s*u*this.al/this.bl}else{var a=Q(this.e,e,Math.sin(e));var o=this.el/Math.pow(a,this.bl);var f=.5*(o-1/o);var c=.5*(o+1/o);var g=Math.sin(this.bl*l);var p=(f*Math.sin(this.gamma0)-g*Math.cos(this.gamma0))/c;if(Math.abs(Math.abs(p)-1)<=h){r=Number.POSITIVE_INFINITY}else{r=.5*this.al*Math.log((1-p)/(1+p))/this.bl}if(Math.abs(Math.cos(this.bl*l))<=h){i=this.al*this.bl*l}else{i=this.al*Math.atan2(f*Math.cos(this.gamma0)+g*Math.sin(this.gamma0),Math.cos(this.bl*l))/this.bl}}if(this.no_rot){n.x=this.x0+i;n.y=this.y0+r}else{i-=this.uc;n.x=this.x0+r*Math.cos(this.alpha)+i*Math.sin(this.alpha);n.y=this.y0+i*Math.cos(this.alpha)-r*Math.sin(this.alpha)}return n}function be(n){var t,e;if(this.no_rot){e=n.y-this.y0;t=n.x-this.x0}else{e=(n.x-this.x0)*Math.cos(this.alpha)-(n.y-this.y0)*Math.sin(this.alpha);t=(n.y-this.y0)*Math.cos(this.alpha)+(n.x-this.x0)*Math.sin(this.alpha);t+=this.uc}var l=Math.exp(-1*this.bl*e/this.al);var i=.5*(l-1/l);var r=.5*(l+1/l);var s=Math.sin(this.bl*t/this.al);var a=(s*Math.cos(this.gamma0)+i*Math.sin(this.gamma0))/r;var o=Math.pow(this.el/Math.sqrt((1+a)/(1-a)),1/this.bl);if(Math.abs(a-1)<h){n.x=this.long0;n.y=u}else if(Math.abs(a+1)<h){n.x=this.long0;n.y=-1*u}else{n.y=$(this.e,o);n.x=K(this.long0-Math.atan2(i*Math.cos(this.gamma0)-s*Math.sin(this.gamma0),Math.cos(this.bl*t/this.al))/this.bl)}return n}var Ce=["Hotine_Oblique_Mercator","Hotine Oblique Mercator","Hotine_Oblique_Mercator_Azimuth_Natural_Origin","Hotine_Oblique_Mercator_Azimuth_Center","omerc"];var Ie={init:Me,forward:Ee,inverse:be,names:Ce};function Se(){if(!this.lat2){this.lat2=this.lat1}if(!this.k0){this.k0=1}this.x0=this.x0||0;this.y0=this.y0||0;if(Math.abs(this.lat1+this.lat2)<h){return}var n=this.b/this.a;this.e=Math.sqrt(1-n*n);var t=Math.sin(this.lat1);var e=Math.cos(this.lat1);var l=Z(this.e,t,e);var i=Q(this.e,this.lat1,t);var r=Math.sin(this.lat2);var u=Math.cos(this.lat2);var s=Z(this.e,r,u);var a=Q(this.e,this.lat2,r);var o=Q(this.e,this.lat0,Math.sin(this.lat0));if(Math.abs(this.lat1-this.lat2)>h){this.ns=Math.log(l/s)/Math.log(i/a)}else{this.ns=t}if(isNaN(this.ns)){this.ns=t}this.f0=l/(this.ns*Math.pow(i,this.ns));this.rh=this.a*this.f0*Math.pow(o,this.ns);if(!this.title){this.title="Lambert Conformal Conic"}}function Ne(n){var t=n.x;var e=n.y;if(Math.abs(2*Math.abs(e)-Math.PI)<=h){e=J(e)*(u-2*h)}var l=Math.abs(Math.abs(e)-u);var i,r;if(l>h){i=Q(this.e,e,Math.sin(e));r=this.a*this.f0*Math.pow(i,this.ns)}else{l=e*this.ns;if(l<=0){return null}r=0}var s=this.ns*K(t-this.long0);n.x=this.k0*(r*Math.sin(s))+this.x0;n.y=this.k0*(this.rh-r*Math.cos(s))+this.y0;return n}function Pe(n){var t,e,l;var i,r;var s=(n.x-this.x0)/this.k0;var a=this.rh-(n.y-this.y0)/this.k0;if(this.ns>0){t=Math.sqrt(s*s+a*a);e=1}else{t=-Math.sqrt(s*s+a*a);e=-1}var o=0;if(t!==0){o=Math.atan2(e*s,e*a)}if(t!==0||this.ns>0){e=1/this.ns;l=Math.pow(t/(this.a*this.f0),e);i=$(this.e,l);if(i===-9999){return null}}else{i=-u}r=K(o/this.ns+this.long0);n.x=r;n.y=i;return n}var Le=["Lambert Tangential Conformal Conic Projection","Lambert_Conformal_Conic","Lambert_Conformal_Conic_2SP","lcc"];var Re={init:Se,forward:Ne,inverse:Pe,names:Le};function Te(){this.a=6377397.155;this.es=.006674372230614;this.e=Math.sqrt(this.es);if(!this.lat0){this.lat0=.863937979737193}if(!this.long0){this.long0=.7417649320975901-.308341501185665}if(!this.k0){this.k0=.9999}this.s45=.785398163397448;this.s90=2*this.s45;this.fi0=this.lat0;this.e2=this.es;this.e=Math.sqrt(this.e2);this.alfa=Math.sqrt(1+this.e2*Math.pow(Math.cos(this.fi0),4)/(1-this.e2));this.uq=1.04216856380474;this.u0=Math.asin(Math.sin(this.fi0)/this.alfa);this.g=Math.pow((1+this.e*Math.sin(this.fi0))/(1-this.e*Math.sin(this.fi0)),this.alfa*this.e/2);this.k=Math.tan(this.u0/2+this.s45)/Math.pow(Math.tan(this.fi0/2+this.s45),this.alfa)*this.g;this.k1=this.k0;this.n0=this.a*Math.sqrt(1-this.e2)/(1-this.e2*Math.pow(Math.sin(this.fi0),2));this.s0=1.37008346281555;this.n=Math.sin(this.s0);this.ro0=this.k1*this.n0/Math.tan(this.s0);this.ad=this.s90-this.uq}function Oe(n){var t,e,l,i,r,u,s;var a=n.x;var o=n.y;var h=K(a-this.long0);t=Math.pow((1+this.e*Math.sin(o))/(1-this.e*Math.sin(o)),this.alfa*this.e/2);e=2*(Math.atan(this.k*Math.pow(Math.tan(o/2+this.s45),this.alfa)/t)-this.s45);l=-h*this.alfa;i=Math.asin(Math.cos(this.ad)*Math.sin(e)+Math.sin(this.ad)*Math.cos(e)*Math.cos(l));r=Math.asin(Math.cos(e)*Math.sin(l)/Math.cos(i));u=this.n*r;s=this.ro0*Math.pow(Math.tan(this.s0/2+this.s45),this.n)/Math.pow(Math.tan(i/2+this.s45),this.n);n.y=s*Math.cos(u)/1;n.x=s*Math.sin(u)/1;if(!this.czech){n.y*=-1;n.x*=-1}return n}function Ae(n){var t,e,l,i,r,u,s;var a;var o=n.x;n.x=n.y;n.y=o;if(!this.czech){n.y*=-1;n.x*=-1}u=Math.sqrt(n.x*n.x+n.y*n.y);r=Math.atan2(n.y,n.x);i=r/Math.sin(this.s0);l=2*(Math.atan(Math.pow(this.ro0/u,1/this.n)*Math.tan(this.s0/2+this.s45))-this.s45);t=Math.asin(Math.cos(this.ad)*Math.sin(l)-Math.sin(this.ad)*Math.cos(l)*Math.cos(i));e=Math.asin(Math.cos(l)*Math.sin(i)/Math.cos(t));n.x=this.long0-e/this.alfa;s=t;a=0;var h=0;do{n.y=2*(Math.atan(Math.pow(this.k,-1/this.alfa)*Math.pow(Math.tan(t/2+this.s45),1/this.alfa)*Math.pow((1+this.e*Math.sin(s))/(1-this.e*Math.sin(s)),this.e/2))-this.s45);if(Math.abs(s-n.y)<1e-10){a=1}s=n.y;h+=1}while(a===0&&h<15);if(h>=15){return null}return n}var ke=["Krovak","krovak"];var De={init:Te,forward:Oe,inverse:Ae,names:ke};var Fe=function(n,t,e,l,i){return n*i-t*Math.sin(2*i)+e*Math.sin(4*i)-l*Math.sin(6*i)};var Be=function(n){return 1-.25*n*(1+n/16*(3+1.25*n))};var Ge=function(n){return.375*n*(1+.25*n*(1+.46875*n))};var ze=function(n){return.05859375*n*n*(1+.75*n)};var qe=function(n){return n*n*n*(35/3072)};var je=function(n,t,e){var l=t*e;return n/Math.sqrt(1-l*l)};var Ue=function(n){return Math.abs(n)<u?n:n-J(n)*Math.PI};var Ve=function(n,t,e,l,i){var r;var u;r=n/t;for(var s=0;s<15;s++){u=(n-(t*r-e*Math.sin(2*r)+l*Math.sin(4*r)-i*Math.sin(6*r)))/(t-2*e*Math.cos(2*r)+4*l*Math.cos(4*r)-6*i*Math.cos(6*r));r+=u;if(Math.abs(u)<=1e-10){return r}}return NaN};function Ye(){if(!this.sphere){this.e0=Be(this.es);this.e1=Ge(this.es);this.e2=ze(this.es);this.e3=qe(this.es);this.ml0=this.a*Fe(this.e0,this.e1,this.e2,this.e3,this.lat0)}}function Xe(n){var t,e;var l=n.x;var i=n.y;l=K(l-this.long0);if(this.sphere){t=this.a*Math.asin(Math.cos(i)*Math.sin(l));e=this.a*(Math.atan2(Math.tan(i),Math.cos(l))-this.lat0)}else{var r=Math.sin(i);var u=Math.cos(i);var s=je(this.a,this.e,r);var a=Math.tan(i)*Math.tan(i);var o=l*Math.cos(i);var h=o*o;var f=this.es*u*u/(1-this.es);var c=this.a*Fe(this.e0,this.e1,this.e2,this.e3,i);t=s*o*(1-h*a*(1/6-(8-a+8*f)*h/120));e=c-this.ml0+s*r/u*h*(.5+(5-a+6*f)*h/24)}n.x=t+this.x0;n.y=e+this.y0;return n}function He(n){n.x-=this.x0;n.y-=this.y0;var t=n.x/this.a;var e=n.y/this.a;var l,i;if(this.sphere){var r=e+this.lat0;l=Math.asin(Math.sin(r)*Math.cos(t));i=Math.atan2(Math.tan(t),Math.cos(r))}else{var s=this.ml0/this.a+e;var a=Ve(s,this.e0,this.e1,this.e2,this.e3);if(Math.abs(Math.abs(a)-u)<=h){n.x=this.long0;n.y=u;if(e<0){n.y*=-1}return n}var o=je(this.a,this.e,Math.sin(a));var f=o*o*o/this.a/this.a*(1-this.es);var c=Math.pow(Math.tan(a),2);var d=t*this.a/o;var g=d*d;l=a-o*Math.tan(a)/f*d*d*(.5-(1+3*c)*d*d/24);i=d*(1-g*(c/3+(1+3*c)*c*g/15))/Math.cos(a)}n.x=K(i+this.long0);n.y=Ue(l);return n}var We=["Cassini","Cassini_Soldner","cass"];var Ze={init:Ye,forward:Xe,inverse:He,names:We};var Je=function(n,t){var e;if(n>1e-7){e=n*t;return(1-n*n)*(t/(1-e*e)-.5/n*Math.log((1-e)/(1+e)))}else{return 2*t}};var Ke=1;var Qe=2;var $e=3;var nl=4;function tl(){var n=Math.abs(this.lat0);if(Math.abs(n-u)<h){this.mode=this.lat0<0?this.S_POLE:this.N_POLE}else if(Math.abs(n)<h){this.mode=this.EQUIT}else{this.mode=this.OBLIQ}if(this.es>0){var t;this.qp=Je(this.e,1);this.mmf=.5/(1-this.es);this.apa=hl(this.es);switch(this.mode){case this.N_POLE:this.dd=1;break;case this.S_POLE:this.dd=1;break;case this.EQUIT:this.rq=Math.sqrt(.5*this.qp);this.dd=1/this.rq;this.xmf=1;this.ymf=.5*this.qp;break;case this.OBLIQ:this.rq=Math.sqrt(.5*this.qp);t=Math.sin(this.lat0);this.sinb1=Je(this.e,t)/this.qp;this.cosb1=Math.sqrt(1-this.sinb1*this.sinb1);this.dd=Math.cos(this.lat0)/(Math.sqrt(1-this.es*t*t)*this.rq*this.cosb1);this.ymf=(this.xmf=this.rq)/this.dd;this.xmf*=this.dd;break}}else{if(this.mode===this.OBLIQ){this.sinph0=Math.sin(this.lat0);this.cosph0=Math.cos(this.lat0)}}}function el(n){var t,e,l,i,r,s,a,o,f,c;var g=n.x;var p=n.y;g=K(g-this.long0);if(this.sphere){r=Math.sin(p);c=Math.cos(p);l=Math.cos(g);if(this.mode===this.OBLIQ||this.mode===this.EQUIT){e=this.mode===this.EQUIT?1+c*l:1+this.sinph0*r+this.cosph0*c*l;if(e<=h){return null}e=Math.sqrt(2/e);t=e*c*Math.sin(g);e*=this.mode===this.EQUIT?r:this.cosph0*r-this.sinph0*c*l}else if(this.mode===this.N_POLE||this.mode===this.S_POLE){if(this.mode===this.N_POLE){l=-l}if(Math.abs(p+this.phi0)<h){return null}e=d-p*.5;e=2*(this.mode===this.S_POLE?Math.cos(e):Math.sin(e));t=e*Math.sin(g);e*=l}}else{a=0;o=0;f=0;l=Math.cos(g);i=Math.sin(g);r=Math.sin(p);s=Je(this.e,r);if(this.mode===this.OBLIQ||this.mode===this.EQUIT){a=s/this.qp;o=Math.sqrt(1-a*a)}switch(this.mode){case this.OBLIQ:f=1+this.sinb1*a+this.cosb1*o*l;break;case this.EQUIT:f=1+o*l;break;case this.N_POLE:f=u+p;s=this.qp-s;break;case this.S_POLE:f=p-u;s=this.qp+s;break}if(Math.abs(f)<h){return null}switch(this.mode){case this.OBLIQ:case this.EQUIT:f=Math.sqrt(2/f);if(this.mode===this.OBLIQ){e=this.ymf*f*(this.cosb1*a-this.sinb1*o*l)}else{e=(f=Math.sqrt(2/(1+o*l)))*a*this.ymf}t=this.xmf*f*o*i;break;case this.N_POLE:case this.S_POLE:if(s>=0){t=(f=Math.sqrt(s))*i;e=l*(this.mode===this.S_POLE?f:-f)}else{t=e=0}break}}n.x=this.a*t+this.x0;n.y=this.a*e+this.y0;return n}function ll(n){n.x-=this.x0;n.y-=this.y0;var t=n.x/this.a;var e=n.y/this.a;var l,i,r,s,a,o,f;if(this.sphere){var c=0,d,g=0;d=Math.sqrt(t*t+e*e);i=d*.5;if(i>1){return null}i=2*Math.asin(i);if(this.mode===this.OBLIQ||this.mode===this.EQUIT){g=Math.sin(i);c=Math.cos(i)}switch(this.mode){case this.EQUIT:i=Math.abs(d)<=h?0:Math.asin(e*g/d);t*=g;e=c*d;break;case this.OBLIQ:i=Math.abs(d)<=h?this.phi0:Math.asin(c*this.sinph0+e*g*this.cosph0/d);t*=g*this.cosph0;e=(c-Math.sin(i)*this.sinph0)*d;break;case this.N_POLE:e=-e;i=u-i;break;case this.S_POLE:i-=u;break}l=e===0&&(this.mode===this.EQUIT||this.mode===this.OBLIQ)?0:Math.atan2(t,e)}else{f=0;if(this.mode===this.OBLIQ||this.mode===this.EQUIT){t/=this.dd;e*=this.dd;o=Math.sqrt(t*t+e*e);if(o<h){n.x=0;n.y=this.phi0;return n}s=2*Math.asin(.5*o/this.rq);r=Math.cos(s);t*=s=Math.sin(s);if(this.mode===this.OBLIQ){f=r*this.sinb1+e*s*this.cosb1/o;a=this.qp*f;e=o*this.cosb1*r-e*this.sinb1*s}else{f=e*s/o;a=this.qp*f;e=o*r}}else if(this.mode===this.N_POLE||this.mode===this.S_POLE){if(this.mode===this.N_POLE){e=-e}a=t*t+e*e;if(!a){n.x=0;n.y=this.phi0;return n}f=1-a/this.qp;if(this.mode===this.S_POLE){f=-f}}l=Math.atan2(t,e);i=fl(Math.asin(f),this.apa)}n.x=K(this.long0+l);n.y=i;return n}var il=.3333333333333333;var rl=.17222222222222222;var ul=.10257936507936508;var sl=.06388888888888888;var al=.0664021164021164;var ol=.016415012942191543;function hl(n){var t;var e=[];e[0]=n*il;t=n*n;e[0]+=t*rl;e[1]=t*sl;t*=n;e[0]+=t*ul;e[1]+=t*al;e[2]=t*ol;return e}function fl(n,t){var e=n+n;return n+t[0]*Math.sin(e)+t[1]*Math.sin(e+e)+t[2]*Math.sin(e+e+e)}var cl=["Lambert Azimuthal Equal Area","Lambert_Azimuthal_Equal_Area","laea"];var dl={init:tl,forward:el,inverse:ll,names:cl,S_POLE:Ke,N_POLE:Qe,EQUIT:$e,OBLIQ:nl};var gl=function(n){if(Math.abs(n)>1){n=n>1?1:-1}return Math.asin(n)};function pl(){if(Math.abs(this.lat1+this.lat2)<h){return}this.temp=this.b/this.a;this.es=1-Math.pow(this.temp,2);this.e3=Math.sqrt(this.es);this.sin_po=Math.sin(this.lat1);this.cos_po=Math.cos(this.lat1);this.t1=this.sin_po;this.con=this.sin_po;this.ms1=Z(this.e3,this.sin_po,this.cos_po);this.qs1=Je(this.e3,this.sin_po,this.cos_po);this.sin_po=Math.sin(this.lat2);this.cos_po=Math.cos(this.lat2);this.t2=this.sin_po;this.ms2=Z(this.e3,this.sin_po,this.cos_po);this.qs2=Je(this.e3,this.sin_po,this.cos_po);this.sin_po=Math.sin(this.lat0);this.cos_po=Math.cos(this.lat0);this.t3=this.sin_po;this.qs0=Je(this.e3,this.sin_po,this.cos_po);if(Math.abs(this.lat1-this.lat2)>h){this.ns0=(this.ms1*this.ms1-this.ms2*this.ms2)/(this.qs2-this.qs1)}else{this.ns0=this.con}this.c=this.ms1*this.ms1+this.ns0*this.qs1;this.rh=this.a*Math.sqrt(this.c-this.ns0*this.qs0)/this.ns0}function vl(n){var t=n.x;var e=n.y;this.sin_phi=Math.sin(e);this.cos_phi=Math.cos(e);var l=Je(this.e3,this.sin_phi,this.cos_phi);var i=this.a*Math.sqrt(this.c-this.ns0*l)/this.ns0;var r=this.ns0*K(t-this.long0);var u=i*Math.sin(r)+this.x0;var s=this.rh-i*Math.cos(r)+this.y0;n.x=u;n.y=s;return n}function ml(n){var t,e,l,i,r,u;n.x-=this.x0;n.y=this.rh-n.y+this.y0;if(this.ns0>=0){t=Math.sqrt(n.x*n.x+n.y*n.y);l=1}else{t=-Math.sqrt(n.x*n.x+n.y*n.y);l=-1}i=0;if(t!==0){i=Math.atan2(l*n.x,l*n.y)}l=t*this.ns0/this.a;if(this.sphere){u=Math.asin((this.c-l*l)/(2*this.ns0))}else{e=(this.c-l*l)/this.ns0;u=this.phi1z(this.e3,e)}r=K(i/this.ns0+this.long0);n.x=r;n.y=u;return n}function yl(n,t){var e,l,i,r,u;var s=gl(.5*t);if(n<h){return s}var a=n*n;for(var o=1;o<=25;o++){e=Math.sin(s);l=Math.cos(s);i=n*e;r=1-i*i;u=.5*r*r/l*(t/(1-a)-e/r+.5/n*Math.log((1-i)/(1+i)));s=s+u;if(Math.abs(u)<=1e-7){return s}}return null}var xl=["Albers_Conic_Equal_Area","Albers","aea"];var wl={init:pl,forward:vl,inverse:ml,names:xl,phi1z:yl};function _l(){this.sin_p14=Math.sin(this.lat0);this.cos_p14=Math.cos(this.lat0);this.infinity_dist=1e3*this.a;this.rc=1}function Ml(n){var t,e;var l;var i;var r;var u;var s,a;var o=n.x;var f=n.y;l=K(o-this.long0);t=Math.sin(f);e=Math.cos(f);i=Math.cos(l);u=this.sin_p14*t+this.cos_p14*e*i;r=1;if(u>0||Math.abs(u)<=h){s=this.x0+this.a*r*e*Math.sin(l)/u;a=this.y0+this.a*r*(this.cos_p14*t-this.sin_p14*e*i)/u}else{s=this.x0+this.infinity_dist*e*Math.sin(l);a=this.y0+this.infinity_dist*(this.cos_p14*t-this.sin_p14*e*i)}n.x=s;n.y=a;return n}function El(n){var t;var e,l;var i;var r,u;n.x=(n.x-this.x0)/this.a;n.y=(n.y-this.y0)/this.a;n.x/=this.k0;n.y/=this.k0;if(t=Math.sqrt(n.x*n.x+n.y*n.y)){i=Math.atan2(t,this.rc);e=Math.sin(i);l=Math.cos(i);u=gl(l*this.sin_p14+n.y*e*this.cos_p14/t);r=Math.atan2(n.x*e,t*this.cos_p14*l-n.y*this.sin_p14*e);r=K(this.long0+r)}else{u=this.phic0;r=0}n.x=r;n.y=u;return n}var bl=["gnom"];var Cl={init:_l,forward:Ml,inverse:El,names:bl};var Il=function(n,t){var e=1-(1-n*n)/(2*n)*Math.log((1-n)/(1+n));if(Math.abs(Math.abs(t)-e)<1e-6){if(t<0){return-1*u}else{return u}}var l=Math.asin(.5*t);var i;var r;var s;var a;for(var o=0;o<30;o++){r=Math.sin(l);s=Math.cos(l);a=n*r;i=Math.pow(1-a*a,2)/(2*s)*(t/(1-n*n)-r/(1-a*a)+.5/n*Math.log((1-a)/(1+a)));l+=i;if(Math.abs(i)<=1e-10){return l}}return NaN};function Sl(){if(!this.sphere){this.k0=Z(this.e,Math.sin(this.lat_ts),Math.cos(this.lat_ts))}}function Nl(n){var t=n.x;var e=n.y;var l,i;var r=K(t-this.long0);if(this.sphere){l=this.x0+this.a*r*Math.cos(this.lat_ts);i=this.y0+this.a*Math.sin(e)/Math.cos(this.lat_ts)}else{var u=Je(this.e,Math.sin(e));l=this.x0+this.a*this.k0*r;i=this.y0+this.a*u*.5/this.k0}n.x=l;n.y=i;return n}function Pl(n){n.x-=this.x0;n.y-=this.y0;var t,e;if(this.sphere){t=K(this.long0+n.x/this.a/Math.cos(this.lat_ts));e=Math.asin(n.y/this.a*Math.cos(this.lat_ts))}else{e=Il(this.e,2*n.y*this.k0/this.a);t=K(this.long0+n.x/(this.a*this.k0))}n.x=t;n.y=e;return n}var Ll=["cea"];var Rl={init:Sl,forward:Nl,inverse:Pl,names:Ll};function Tl(){this.x0=this.x0||0;this.y0=this.y0||0;this.lat0=this.lat0||0;this.long0=this.long0||0;this.lat_ts=this.lat_ts||0;this.title=this.title||"Equidistant Cylindrical (Plate Carre)";this.rc=Math.cos(this.lat_ts)}function Ol(n){var t=n.x;var e=n.y;var l=K(t-this.long0);var i=Ue(e-this.lat0);n.x=this.x0+this.a*l*this.rc;n.y=this.y0+this.a*i;return n}function Al(n){var t=n.x;var e=n.y;n.x=K(this.long0+(t-this.x0)/(this.a*this.rc));n.y=Ue(this.lat0+(e-this.y0)/this.a);return n}var kl=["Equirectangular","Equidistant_Cylindrical","eqc"];var Dl={init:Tl,forward:Ol,inverse:Al,names:kl};var Fl=20;function Bl(){this.temp=this.b/this.a;this.es=1-Math.pow(this.temp,2);this.e=Math.sqrt(this.es);this.e0=Be(this.es);this.e1=Ge(this.es);this.e2=ze(this.es);this.e3=qe(this.es);this.ml0=this.a*Fe(this.e0,this.e1,this.e2,this.e3,this.lat0)}function Gl(n){var t=n.x;var e=n.y;var l,i,r;var u=K(t-this.long0);r=u*Math.sin(e);if(this.sphere){if(Math.abs(e)<=h){l=this.a*u;i=-1*this.a*this.lat0}else{l=this.a*Math.sin(r)/Math.tan(e);i=this.a*(Ue(e-this.lat0)+(1-Math.cos(r))/Math.tan(e))}}else{if(Math.abs(e)<=h){l=this.a*u;i=-1*this.ml0}else{var s=je(this.a,this.e,Math.sin(e))/Math.tan(e);l=s*Math.sin(r);i=this.a*Fe(this.e0,this.e1,this.e2,this.e3,e)-this.ml0+s*(1-Math.cos(r))}}n.x=l+this.x0;n.y=i+this.y0;return n}function zl(n){var t,e,l,i,r;var u,s;var a,o;l=n.x-this.x0;i=n.y-this.y0;if(this.sphere){if(Math.abs(i+this.a*this.lat0)<=h){t=K(l/this.a+this.long0);e=0}else{u=this.lat0+i/this.a;s=l*l/this.a/this.a+u*u;a=u;var f;for(r=Fl;r;--r){f=Math.tan(a);o=-1*(u*(a*f+1)-a-.5*(a*a+s)*f)/((a-u)/f-1);a+=o;if(Math.abs(o)<=h){e=a;break}}t=K(this.long0+Math.asin(l*Math.tan(a)/this.a)/Math.sin(e))}}else{if(Math.abs(i+this.ml0)<=h){e=0;t=K(this.long0+l/this.a)}else{u=(this.ml0+i)/this.a;s=l*l/this.a/this.a+u*u;a=u;var c,d,g,p;var v;for(r=Fl;r;--r){v=this.e*Math.sin(a);c=Math.sqrt(1-v*v)*Math.tan(a);d=this.a*Fe(this.e0,this.e1,this.e2,this.e3,a);g=this.e0-2*this.e1*Math.cos(2*a)+4*this.e2*Math.cos(4*a)-6*this.e3*Math.cos(6*a);p=d/this.a;o=(u*(c*p+1)-p-.5*c*(p*p+s))/(this.es*Math.sin(2*a)*(p*p+s-2*u*p)/(4*c)+(u-p)*(c*g-2/Math.sin(2*a))-g);a-=o;if(Math.abs(o)<=h){e=a;break}}c=Math.sqrt(1-this.es*Math.pow(Math.sin(e),2))*Math.tan(e);t=K(this.long0+Math.asin(l*c/this.a)/Math.sin(e))}}n.x=t;n.y=e;return n}var ql=["Polyconic","poly"];var jl={init:Bl,forward:Gl,inverse:zl,names:ql};function Ul(){this.A=[];this.A[1]=.6399175073;this.A[2]=-.1358797613;this.A[3]=.063294409;this.A[4]=-.02526853;this.A[5]=.0117879;this.A[6]=-.0055161;this.A[7]=.0026906;this.A[8]=-.001333;this.A[9]=67e-5;this.A[10]=-34e-5;this.B_re=[];this.B_im=[];this.B_re[1]=.7557853228;this.B_im[1]=0;this.B_re[2]=.249204646;this.B_im[2]=.003371507;this.B_re[3]=-.001541739;this.B_im[3]=.04105856;this.B_re[4]=-.10162907;this.B_im[4]=.01727609;this.B_re[5]=-.26623489;this.B_im[5]=-.36249218;this.B_re[6]=-.6870983;this.B_im[6]=-1.1651967;this.C_re=[];this.C_im=[];this.C_re[1]=1.3231270439;this.C_im[1]=0;this.C_re[2]=-.577245789;this.C_im[2]=-.007809598;this.C_re[3]=.508307513;this.C_im[3]=-.112208952;this.C_re[4]=-.15094762;this.C_im[4]=.18200602;this.C_re[5]=1.01418179;this.C_im[5]=1.64497696;this.C_re[6]=1.9660549;this.C_im[6]=2.5127645;this.D=[];this.D[1]=1.5627014243;this.D[2]=.5185406398;this.D[3]=-.03333098;this.D[4]=-.1052906;this.D[5]=-.0368594;this.D[6]=.007317;this.D[7]=.0122;this.D[8]=.00394;this.D[9]=-.0013}function Vl(n){var t;var e=n.x;var l=n.y;var i=l-this.lat0;var u=e-this.long0;var s=i/r*1e-5;var a=u;var o=1;var h=0;for(t=1;t<=10;t++){o=o*s;h=h+this.A[t]*o}var f=h;var c=a;var d=1;var g=0;var p;var v;var m=0;var y=0;for(t=1;t<=6;t++){p=d*f-g*c;v=g*f+d*c;d=p;g=v;m=m+this.B_re[t]*d-this.B_im[t]*g;y=y+this.B_im[t]*d+this.B_re[t]*g}n.x=y*this.a+this.x0;n.y=m*this.a+this.y0;return n}function Yl(n){var t;var e=n.x;var l=n.y;var i=e-this.x0;var u=l-this.y0;var s=u/this.a;var a=i/this.a;var o=1;var h=0;var f;var c;var d=0;var g=0;for(t=1;t<=6;t++){f=o*s-h*a;c=h*s+o*a;o=f;h=c;d=d+this.C_re[t]*o-this.C_im[t]*h;g=g+this.C_im[t]*o+this.C_re[t]*h}for(var p=0;p<this.iterations;p++){var v=d;var m=g;var y;var x;var w=s;var _=a;for(t=2;t<=6;t++){y=v*d-m*g;x=m*d+v*g;v=y;m=x;w=w+(t-1)*(this.B_re[t]*v-this.B_im[t]*m);_=_+(t-1)*(this.B_im[t]*v+this.B_re[t]*m)}v=1;m=0;var M=this.B_re[1];var E=this.B_im[1];for(t=2;t<=6;t++){y=v*d-m*g;x=m*d+v*g;v=y;m=x;M=M+t*(this.B_re[t]*v-this.B_im[t]*m);E=E+t*(this.B_im[t]*v+this.B_re[t]*m)}var b=M*M+E*E;d=(w*M+_*E)/b;g=(_*M-w*E)/b}var C=d;var I=g;var S=1;var N=0;for(t=1;t<=9;t++){S=S*C;N=N+this.D[t]*S}var P=this.lat0+N*r*1e5;var L=this.long0+I;n.x=L;n.y=P;return n}var Xl=["New_Zealand_Map_Grid","nzmg"];var Hl={init:Ul,forward:Vl,inverse:Yl,names:Xl};function Wl(){}function Zl(n){var t=n.x;var e=n.y;var l=K(t-this.long0);var i=this.x0+this.a*l;var r=this.y0+this.a*Math.log(Math.tan(Math.PI/4+e/2.5))*1.25;n.x=i;n.y=r;return n}function Jl(n){n.x-=this.x0;n.y-=this.y0;var t=K(this.long0+n.x/this.a);var e=2.5*(Math.atan(Math.exp(.8*n.y/this.a))-Math.PI/4);n.x=t;n.y=e;return n}var Kl=["Miller_Cylindrical","mill"];var Ql={init:Wl,forward:Zl,inverse:Jl,names:Kl};var $l=20;function ni(){if(!this.sphere){this.en=It(this.es)}else{this.n=1;this.m=0;this.es=0;this.C_y=Math.sqrt((this.m+1)/this.n);this.C_x=this.C_y/(this.m+1)}}function ti(n){var t,e;var l=n.x;var i=n.y;l=K(l-this.long0);if(this.sphere){if(!this.m){i=this.n!==1?Math.asin(this.n*Math.sin(i)):i}else{var r=this.n*Math.sin(i);for(var u=$l;u;--u){var s=(this.m*i+Math.sin(i)-r)/(this.m+Math.cos(i));i-=s;if(Math.abs(s)<h){break}}}t=this.a*this.C_x*l*(this.m+Math.cos(i));e=this.a*this.C_y*i}else{var a=Math.sin(i);var o=Math.cos(i);e=this.a*St(i,a,o,this.en);t=this.a*l*o/Math.sqrt(1-this.es*a*a)}n.x=t;n.y=e;return n}function ei(n){var t,e,l,i;n.x-=this.x0;l=n.x/this.a;n.y-=this.y0;t=n.y/this.a;if(this.sphere){t/=this.C_y;l=l/(this.C_x*(this.m+Math.cos(t)));if(this.m){t=gl((this.m*t+Math.sin(t))/this.n)}else if(this.n!==1){t=gl(Math.sin(t)/this.n)}l=K(l+this.long0);t=Ue(t)}else{t=Pt(n.y/this.a,this.es,this.en);i=Math.abs(t);if(i<u){i=Math.sin(t);e=this.long0+n.x*Math.sqrt(1-this.es*i*i)/(this.a*Math.cos(t));l=K(e)}else if(i-h<u){l=this.long0}}n.x=l;n.y=t;return n}var li=["Sinusoidal","sinu"];var ii={init:ni,forward:ti,inverse:ei,names:li};function ri(){}function ui(n){var t=n.x;var e=n.y;var l=K(t-this.long0);var i=e;var r=Math.PI*Math.sin(e);while(true){var u=-(i+Math.sin(i)-r)/(1+Math.cos(i));i+=u;if(Math.abs(u)<h){break}}i/=2;if(Math.PI/2-Math.abs(e)<h){l=0}var s=.900316316158*this.a*l*Math.cos(i)+this.x0;var a=1.4142135623731*this.a*Math.sin(i)+this.y0;n.x=s;n.y=a;return n}function si(n){var t;var e;n.x-=this.x0;n.y-=this.y0;e=n.y/(1.4142135623731*this.a);if(Math.abs(e)>.999999999999){e=.999999999999}t=Math.asin(e);var l=K(this.long0+n.x/(.900316316158*this.a*Math.cos(t)));if(l<-Math.PI){l=-Math.PI}if(l>Math.PI){l=Math.PI}e=(2*t+Math.sin(2*t))/Math.PI;if(Math.abs(e)>1){e=1}var i=Math.asin(e);n.x=l;n.y=i;return n}var ai=["Mollweide","moll"];var oi={init:ri,forward:ui,inverse:si,names:ai};function hi(){if(Math.abs(this.lat1+this.lat2)<h){return}this.lat2=this.lat2||this.lat1;this.temp=this.b/this.a;this.es=1-Math.pow(this.temp,2);this.e=Math.sqrt(this.es);this.e0=Be(this.es);this.e1=Ge(this.es);this.e2=ze(this.es);this.e3=qe(this.es);this.sinphi=Math.sin(this.lat1);this.cosphi=Math.cos(this.lat1);this.ms1=Z(this.e,this.sinphi,this.cosphi);this.ml1=Fe(this.e0,this.e1,this.e2,this.e3,this.lat1);if(Math.abs(this.lat1-this.lat2)<h){this.ns=this.sinphi}else{this.sinphi=Math.sin(this.lat2);this.cosphi=Math.cos(this.lat2);this.ms2=Z(this.e,this.sinphi,this.cosphi);this.ml2=Fe(this.e0,this.e1,this.e2,this.e3,this.lat2);this.ns=(this.ms1-this.ms2)/(this.ml2-this.ml1)}this.g=this.ml1+this.ms1/this.ns;this.ml0=Fe(this.e0,this.e1,this.e2,this.e3,this.lat0);this.rh=this.a*(this.g-this.ml0)}function fi(n){var t=n.x;var e=n.y;var l;if(this.sphere){l=this.a*(this.g-e)}else{var i=Fe(this.e0,this.e1,this.e2,this.e3,e);l=this.a*(this.g-i)}var r=this.ns*K(t-this.long0);var u=this.x0+l*Math.sin(r);var s=this.y0+this.rh-l*Math.cos(r);n.x=u;n.y=s;return n}function ci(n){n.x-=this.x0;n.y=this.rh-n.y+this.y0;var t,e,l,i;if(this.ns>=0){e=Math.sqrt(n.x*n.x+n.y*n.y);t=1}else{e=-Math.sqrt(n.x*n.x+n.y*n.y);t=-1}var r=0;if(e!==0){r=Math.atan2(t*n.x,t*n.y)}if(this.sphere){i=K(this.long0+r/this.ns);l=Ue(this.g-e/this.a);n.x=i;n.y=l;return n}else{var u=this.g-e/this.a;l=Ve(u,this.e0,this.e1,this.e2,this.e3);i=K(this.long0+r/this.ns);n.x=i;n.y=l;return n}}var di=["Equidistant_Conic","eqdc"];var gi={init:hi,forward:fi,inverse:ci,names:di};function pi(){this.R=this.a}function vi(n){var t=n.x;var e=n.y;var l=K(t-this.long0);var i,r;if(Math.abs(e)<=h){i=this.x0+this.R*l;r=this.y0}var s=gl(2*Math.abs(e/Math.PI));if(Math.abs(l)<=h||Math.abs(Math.abs(e)-u)<=h){i=this.x0;if(e>=0){r=this.y0+Math.PI*this.R*Math.tan(.5*s)}else{r=this.y0+Math.PI*this.R*-Math.tan(.5*s)}}var a=.5*Math.abs(Math.PI/l-l/Math.PI);var o=a*a;var f=Math.sin(s);var c=Math.cos(s);var d=c/(f+c-1);var g=d*d;var p=d*(2/f-1);var v=p*p;var m=Math.PI*this.R*(a*(d-v)+Math.sqrt(o*(d-v)*(d-v)-(v+o)*(g-v)))/(v+o);if(l<0){m=-m}i=this.x0+m;var y=o+d;m=Math.PI*this.R*(p*y-a*Math.sqrt((v+o)*(o+1)-y*y))/(v+o);if(e>=0){r=this.y0+m}else{r=this.y0-m}n.x=i;n.y=r;return n}function mi(n){var t,e;var l,i,r,u,s,a;var o;var f;var c;var d;var g;n.x-=this.x0;n.y-=this.y0;c=Math.PI*this.R;l=n.x/c;i=n.y/c;r=l*l+i*i;u=-Math.abs(i)*(1+r);s=u-2*i*i+l*l;a=-2*u+1+2*i*i+r*r;g=i*i/a+(2*s*s*s/a/a/a-9*u*s/a/a)/27;o=(u-s*s/3/a)/a;f=2*Math.sqrt(-o/3);c=3*g/o/f;if(Math.abs(c)>1){if(c>=0){c=1}else{c=-1}}d=Math.acos(c)/3;if(n.y>=0){e=(-f*Math.cos(d+Math.PI/3)-s/3/a)*Math.PI}else{e=-(-f*Math.cos(d+Math.PI/3)-s/3/a)*Math.PI}if(Math.abs(l)<h){t=this.long0}else{t=K(this.long0+Math.PI*(r-1+Math.sqrt(1+2*(l*l-i*i)+r*r))/2/l)}n.x=t;n.y=e;return n}var yi=["Van_der_Grinten_I","VanDerGrinten","vandg"];var xi={init:pi,forward:vi,inverse:mi,names:yi};function wi(){this.sin_p12=Math.sin(this.lat0);this.cos_p12=Math.cos(this.lat0)}function _i(n){var t=n.x;var e=n.y;var l=Math.sin(n.y);var i=Math.cos(n.y);var r=K(t-this.long0);var s,a,o,f,c,d,g,p,v,m,y,x,w,_,M,E,b,C,I,S,N,P,L;if(this.sphere){if(Math.abs(this.sin_p12-1)<=h){n.x=this.x0+this.a*(u-e)*Math.sin(r);n.y=this.y0-this.a*(u-e)*Math.cos(r);return n}else if(Math.abs(this.sin_p12+1)<=h){n.x=this.x0+this.a*(u+e)*Math.sin(r);n.y=this.y0+this.a*(u+e)*Math.cos(r);return n}else{C=this.sin_p12*l+this.cos_p12*i*Math.cos(r);E=Math.acos(C);b=E/Math.sin(E);n.x=this.x0+this.a*b*i*Math.sin(r);n.y=this.y0+this.a*b*(this.cos_p12*l-this.sin_p12*i*Math.cos(r));return n}}else{s=Be(this.es);a=Ge(this.es);o=ze(this.es);f=qe(this.es);if(Math.abs(this.sin_p12-1)<=h){c=this.a*Fe(s,a,o,f,u);d=this.a*Fe(s,a,o,f,e);n.x=this.x0+(c-d)*Math.sin(r);n.y=this.y0-(c-d)*Math.cos(r);return n}else if(Math.abs(this.sin_p12+1)<=h){c=this.a*Fe(s,a,o,f,u);d=this.a*Fe(s,a,o,f,e);n.x=this.x0+(c+d)*Math.sin(r);n.y=this.y0+(c+d)*Math.cos(r);return n}else{g=l/i;p=je(this.a,this.e,this.sin_p12);v=je(this.a,this.e,l);m=Math.atan((1-this.es)*g+this.es*p*this.sin_p12/(v*i));y=Math.atan2(Math.sin(r),this.cos_p12*Math.tan(m)-this.sin_p12*Math.cos(r));if(y===0){I=Math.asin(this.cos_p12*Math.sin(m)-this.sin_p12*Math.cos(m))}else if(Math.abs(Math.abs(y)-Math.PI)<=h){I=-Math.asin(this.cos_p12*Math.sin(m)-this.sin_p12*Math.cos(m))}else{I=Math.asin(Math.sin(r)*Math.cos(m)/Math.sin(y))}x=this.e*this.sin_p12/Math.sqrt(1-this.es);w=this.e*this.cos_p12*Math.cos(y)/Math.sqrt(1-this.es);_=x*w;M=w*w;S=I*I;N=S*I;P=N*I;L=P*I;E=p*I*(1-S*M*(1-M)/6+N/8*_*(1-2*M)+P/120*(M*(4-7*M)-3*x*x*(1-7*M))-L/48*_);n.x=this.x0+E*Math.sin(y);n.y=this.y0+E*Math.cos(y);return n}}}function Mi(n){n.x-=this.x0;n.y-=this.y0;var t,e,l,i,r,s,a,o,f,c,d,g,p,v,m,y,x,w,_,M,E,b,C;if(this.sphere){t=Math.sqrt(n.x*n.x+n.y*n.y);if(t>2*u*this.a){return}e=t/this.a;l=Math.sin(e);i=Math.cos(e);r=this.long0;if(Math.abs(t)<=h){s=this.lat0}else{s=gl(i*this.sin_p12+n.y*l*this.cos_p12/t);a=Math.abs(this.lat0)-u;if(Math.abs(a)<=h){if(this.lat0>=0){r=K(this.long0+Math.atan2(n.x,-n.y))}else{r=K(this.long0-Math.atan2(-n.x,n.y))}}else{r=K(this.long0+Math.atan2(n.x*l,t*this.cos_p12*i-n.y*this.sin_p12*l))}}n.x=r;n.y=s;return n}else{o=Be(this.es);f=Ge(this.es);c=ze(this.es);d=qe(this.es);if(Math.abs(this.sin_p12-1)<=h){g=this.a*Fe(o,f,c,d,u);t=Math.sqrt(n.x*n.x+n.y*n.y);p=g-t;s=Ve(p/this.a,o,f,c,d);r=K(this.long0+Math.atan2(n.x,-1*n.y));n.x=r;n.y=s;return n}else if(Math.abs(this.sin_p12+1)<=h){g=this.a*Fe(o,f,c,d,u);t=Math.sqrt(n.x*n.x+n.y*n.y);p=t-g;s=Ve(p/this.a,o,f,c,d);r=K(this.long0+Math.atan2(n.x,n.y));n.x=r;n.y=s;return n}else{t=Math.sqrt(n.x*n.x+n.y*n.y);y=Math.atan2(n.x,n.y);v=je(this.a,this.e,this.sin_p12);x=Math.cos(y);w=this.e*this.cos_p12*x;_=-w*w/(1-this.es);M=3*this.es*(1-_)*this.sin_p12*this.cos_p12*x/(1-this.es);E=t/v;b=E-_*(1+_)*Math.pow(E,3)/6-M*(1+3*_)*Math.pow(E,4)/24;C=1-_*b*b/2-E*b*b*b/6;m=Math.asin(this.sin_p12*Math.cos(b)+this.cos_p12*Math.sin(b)*x);r=K(this.long0+Math.asin(Math.sin(y)*Math.sin(b)/Math.cos(m)));s=Math.atan((1-this.es*C*this.sin_p12/Math.sin(m))*Math.tan(m)/(1-this.es));n.x=r;n.y=s;return n}}}var Ei=["Azimuthal_Equidistant","aeqd"];var bi={init:wi,forward:_i,inverse:Mi,names:Ei};function Ci(){this.sin_p14=Math.sin(this.lat0);this.cos_p14=Math.cos(this.lat0)}function Ii(n){var t,e;var l;var i;var r;var u,s,a;var o=n.x;var f=n.y;l=K(o-this.long0);t=Math.sin(f);e=Math.cos(f);i=Math.cos(l);u=this.sin_p14*t+this.cos_p14*e*i;r=1;if(u>0||Math.abs(u)<=h){s=this.a*r*e*Math.sin(l);a=this.y0+this.a*r*(this.cos_p14*t-this.sin_p14*e*i)}n.x=s;n.y=a;return n}function Si(n){var t;var e;var l,i;var r;var s,a;n.x-=this.x0;n.y-=this.y0;t=Math.sqrt(n.x*n.x+n.y*n.y);e=gl(t/this.a);l=Math.sin(e);i=Math.cos(e);s=this.long0;if(Math.abs(t)<=h){a=this.lat0;n.x=s;n.y=a;return n}a=gl(i*this.sin_p14+n.y*l*this.cos_p14/t);r=Math.abs(this.lat0)-u;if(Math.abs(r)<=h){if(this.lat0>=0){s=K(this.long0+Math.atan2(n.x,-n.y))}else{s=K(this.long0-Math.atan2(-n.x,n.y))}n.x=s;n.y=a;return n}s=K(this.long0+Math.atan2(n.x*l,t*this.cos_p14*i-n.y*this.sin_p14*l));n.x=s;n.y=a;return n}var Ni=["ortho"];var Pi={init:Ci,forward:Ii,inverse:Si,names:Ni};var Li={FRONT:1,RIGHT:2,BACK:3,LEFT:4,TOP:5,BOTTOM:6};var Ri={AREA_0:1,AREA_1:2,AREA_2:3,AREA_3:4};function Ti(){this.x0=this.x0||0;this.y0=this.y0||0;this.lat0=this.lat0||0;this.long0=this.long0||0;this.lat_ts=this.lat_ts||0;this.title=this.title||"Quadrilateralized Spherical Cube";if(this.lat0>=u-d/2){this.face=Li.TOP}else if(this.lat0<=-(u-d/2)){this.face=Li.BOTTOM}else if(Math.abs(this.long0)<=d){this.face=Li.FRONT}else if(Math.abs(this.long0)<=u+d){this.face=this.long0>0?Li.RIGHT:Li.LEFT}else{this.face=Li.BACK}if(this.es!==0){this.one_minus_f=1-(this.a-this.b)/this.a;this.one_minus_f_squared=this.one_minus_f*this.one_minus_f}}function Oi(n){var t={x:0,y:0};var e,l;var i,r;var s,a;var o={value:0};n.x-=this.long0;if(this.es!==0){e=Math.atan(this.one_minus_f_squared*Math.tan(n.y))}else{e=n.y}l=n.x;if(this.face===Li.TOP){r=u-e;if(l>=d&&l<=u+d){o.value=Ri.AREA_0;i=l-u}else if(l>u+d||l<=-(u+d)){o.value=Ri.AREA_1;i=l>0?l-p:l+p}else if(l>-(u+d)&&l<=-d){o.value=Ri.AREA_2;i=l+u}else{o.value=Ri.AREA_3;i=l}}else if(this.face===Li.BOTTOM){r=u+e;if(l>=d&&l<=u+d){o.value=Ri.AREA_0;i=-l+u}else if(l<d&&l>=-d){o.value=Ri.AREA_1;i=-l}else if(l<-d&&l>=-(u+d)){o.value=Ri.AREA_2;i=-l-u}else{o.value=Ri.AREA_3;i=l>0?-l+p:-l-p}}else{var h,f,c;var g,v;var m,y;if(this.face===Li.RIGHT){l=Di(l,+u)
}else if(this.face===Li.BACK){l=Di(l,+p)}else if(this.face===Li.LEFT){l=Di(l,-u)}g=Math.sin(e);v=Math.cos(e);m=Math.sin(l);y=Math.cos(l);h=v*y;f=v*m;c=g;if(this.face===Li.FRONT){r=Math.acos(h);i=ki(r,c,f,o)}else if(this.face===Li.RIGHT){r=Math.acos(f);i=ki(r,c,-h,o)}else if(this.face===Li.BACK){r=Math.acos(-h);i=ki(r,c,-f,o)}else if(this.face===Li.LEFT){r=Math.acos(-f);i=ki(r,c,h,o)}else{r=i=0;o.value=Ri.AREA_0}}a=Math.atan(12/p*(i+Math.acos(Math.sin(i)*Math.cos(d))-u));s=Math.sqrt((1-Math.cos(r))/(Math.cos(a)*Math.cos(a))/(1-Math.cos(Math.atan(1/Math.cos(i)))));if(o.value===Ri.AREA_1){a+=u}else if(o.value===Ri.AREA_2){a+=p}else if(o.value===Ri.AREA_3){a+=1.5*p}t.x=s*Math.cos(a);t.y=s*Math.sin(a);t.x=t.x*this.a+this.x0;t.y=t.y*this.a+this.y0;n.x=t.x;n.y=t.y;return n}function Ai(n){var t={lam:0,phi:0};var e,l,i,r;var s,a,o,h;var f;var c={value:0};n.x=(n.x-this.x0)/this.a;n.y=(n.y-this.y0)/this.a;l=Math.atan(Math.sqrt(n.x*n.x+n.y*n.y));e=Math.atan2(n.y,n.x);if(n.x>=0&&n.x>=Math.abs(n.y)){c.value=Ri.AREA_0}else if(n.y>=0&&n.y>=Math.abs(n.x)){c.value=Ri.AREA_1;e-=u}else if(n.x<0&&-n.x>=Math.abs(n.y)){c.value=Ri.AREA_2;e=e<0?e+p:e-p}else{c.value=Ri.AREA_3;e+=u}f=p/12*Math.tan(e);s=Math.sin(f)/(Math.cos(f)-1/Math.sqrt(2));a=Math.atan(s);i=Math.cos(e);r=Math.tan(l);o=1-i*i*r*r*(1-Math.cos(Math.atan(1/Math.cos(a))));if(o<-1){o=-1}else if(o>+1){o=+1}if(this.face===Li.TOP){h=Math.acos(o);t.phi=u-h;if(c.value===Ri.AREA_0){t.lam=a+u}else if(c.value===Ri.AREA_1){t.lam=a<0?a+p:a-p}else if(c.value===Ri.AREA_2){t.lam=a-u}else{t.lam=a}}else if(this.face===Li.BOTTOM){h=Math.acos(o);t.phi=h-u;if(c.value===Ri.AREA_0){t.lam=-a+u}else if(c.value===Ri.AREA_1){t.lam=-a}else if(c.value===Ri.AREA_2){t.lam=-a-u}else{t.lam=a<0?-a-p:-a+p}}else{var d,g,v;d=o;f=d*d;if(f>=1){v=0}else{v=Math.sqrt(1-f)*Math.sin(a)}f+=v*v;if(f>=1){g=0}else{g=Math.sqrt(1-f)}if(c.value===Ri.AREA_1){f=g;g=-v;v=f}else if(c.value===Ri.AREA_2){g=-g;v=-v}else if(c.value===Ri.AREA_3){f=g;g=v;v=-f}if(this.face===Li.RIGHT){f=d;d=-g;g=f}else if(this.face===Li.BACK){d=-d;g=-g}else if(this.face===Li.LEFT){f=d;d=g;g=-f}t.phi=Math.acos(-v)-u;t.lam=Math.atan2(g,d);if(this.face===Li.RIGHT){t.lam=Di(t.lam,-u)}else if(this.face===Li.BACK){t.lam=Di(t.lam,-p)}else if(this.face===Li.LEFT){t.lam=Di(t.lam,+u)}}if(this.es!==0){var m;var y,x;m=t.phi<0?1:0;y=Math.tan(t.phi);x=this.b/Math.sqrt(y*y+this.one_minus_f_squared);t.phi=Math.atan(Math.sqrt(this.a*this.a-x*x)/(this.one_minus_f*x));if(m){t.phi=-t.phi}}t.lam+=this.long0;n.x=t.lam;n.y=t.phi;return n}function ki(n,t,e,l){var i;if(n<h){l.value=Ri.AREA_0;i=0}else{i=Math.atan2(t,e);if(Math.abs(i)<=d){l.value=Ri.AREA_0}else if(i>d&&i<=u+d){l.value=Ri.AREA_1;i-=u}else if(i>u+d||i<=-(u+d)){l.value=Ri.AREA_2;i=i>=0?i-p:i+p}else{l.value=Ri.AREA_3;i+=u}}return i}function Di(n,t){var e=n+t;if(e<-p){e+=g}else if(e>+p){e-=g}return e}var Fi=["Quadrilateralized Spherical Cube","Quadrilateralized_Spherical_Cube","qsc"];var Bi={init:Ti,forward:Oi,inverse:Ai,names:Fi};var Gi=function(n){n.Proj.projections.add(At);n.Proj.projections.add(Ht);n.Proj.projections.add(Qt);n.Proj.projections.add(he);n.Proj.projections.add(ve);n.Proj.projections.add(_e);n.Proj.projections.add(Ie);n.Proj.projections.add(Re);n.Proj.projections.add(De);n.Proj.projections.add(Ze);n.Proj.projections.add(dl);n.Proj.projections.add(wl);n.Proj.projections.add(Cl);n.Proj.projections.add(Rl);n.Proj.projections.add(Dl);n.Proj.projections.add(jl);n.Proj.projections.add(Hl);n.Proj.projections.add(Ql);n.Proj.projections.add(ii);n.Proj.projections.add(oi);n.Proj.projections.add(gi);n.Proj.projections.add(xi);n.Proj.projections.add(bi);n.Proj.projections.add(Pi);n.Proj.projections.add(Bi)};zn.defaultDatum="WGS84";zn.Proj=En;zn.WGS84=new zn.Proj("WGS84");zn.Point=ct;zn.toPoint=Tn;zn.defs=q;zn.transform=Dn;zn.mgrs=Zn;zn.version=dt;Gi(zn);return zn});define("VectorRenderer/VectorRenderer",["Util/turf","Util/Shp","Data/Geojson/LonLatProjection","Util/Path","VectorRenderer/VectorStyle","VectorRenderer/VectorLayer","ThirdParty/proj4/dist/proj4-src"],function(n,t,e,l,i,r,u){function s(n){n=Cesium.defaultValue(n,Cesium.defaultValue.EMPTY_OBJECT);if(!Cesium.defined(n.layers)){throw new Cesium.DeveloperError("缺少参数layers。")}if(!Array.isArray(n.layers)){n.layers=[n.layers]}this._width=Cesium.defaultValue(n.width,512);this._height=Cesium.defaultValue(n.height,512);this._backColor=Cesium.defaultValue(n.backColor,Cesium.Color.fromBytes(0,0,0,0));if(typeof this._backColor=="string"){this._backColor=Cesium.Color.fromCssColorString(this._backColor)}this._prj=n.prj;this._fitExtent=Cesium.defaultValue(n.fitExtent,true);this._resizable=Cesium.defaultValue(n.resizable,true);this._readyPromise=Cesium.when.defer();this._ready=false;this._rectangle=null;this._boundingRectangle=null;this._layers=[];var t=[];for(var e=0;e<n.layers.length;e++){var l=n.layers[e];if(!(l instanceof r)){l=new r({source:l})}t.push(l.readyPromise);this._layers.push(l)}var i=this;Cesium.when.all(t,function(){if(i._layers&&i._layers.length&&i._layers.length>0){i._rectangle=i._layers[0].rectangle;for(var n=1;n<i._layers.length;n++){i._rectangle=Cesium.Rectangle.union(i._layers[n].rectangle,i._rectangle)}i.computeBBox()}i._ready=true;i._readyPromise.resolve(i)},function(n){console.log(n);i._readyPromise.reject(n)})}Object.defineProperties(s.prototype,{prj:{get:function(){return this._prj},set:function(n){this._prj=n;if(this._ready){this.computeBBox()}}},width:{get:function(){return this._width},set:function(n){this._width=n}},height:{get:function(){return this._height},set:function(n){this._height=n}},boundingRectangle:{get:function(){return this._boundingRectangle}},rectangle:{get:function(){return this._rectangle}},ready:{get:function(){return this._ready}},readyPromise:{get:function(){return this._readyPromise}}});var a=new Cesium.Cartesian2;s.prototype.transform=function(n,t,e){if(this._prj&&u)n=u(this._prj,n);var l=e.width*(n[0]-this._boundingRectangle.x)/this._boundingRectangle.width;var i=e.height*(n[1]-this._boundingRectangle.y)/this._boundingRectangle.height;if(!t){return new Cesium.Cartesian2(l,i)}t.x=l;t.y=i;return t};s.prototype.computeBBox=function(n){if(!n){n=this._rectangle}if(!this._boundingRectangle){this._boundingRectangle=new Cesium.BoundingRectangle}if(!this._prj||!u){this._boundingRectangle.x=Cesium.Math.toDegrees(n.west),this._boundingRectangle.y=Cesium.Math.toDegrees(n.north),this._boundingRectangle.width=Cesium.Math.toDegrees(n.east-n.west),this._boundingRectangle.height=Cesium.Math.toDegrees(n.south-n.north)}else{var t=[[Cesium.Math.toDegrees(n.west),Cesium.Math.toDegrees(n.north)],[Cesium.Math.toDegrees(n.west),Cesium.Math.toDegrees(n.south)],[Cesium.Math.toDegrees(n.east),Cesium.Math.toDegrees(n.south)],[Cesium.Math.toDegrees(n.east),Cesium.Math.toDegrees(n.north)]];var e;var l=Number.MAX_VALUE,i=Number.MAX_VALUE,r=-Number.MAX_VALUE,s=-Number.MAX_VALUE;for(var a=0;a<t.length;a++){e=u(this._prj,t[a]);l=Math.min(e[0],l);i=Math.min(e[1],i);r=Math.max(e[0],r);s=Math.max(e[1],s)}this._boundingRectangle.x=l,this._boundingRectangle.y=s,this._boundingRectangle.width=r-l,this._boundingRectangle.height=i-s}};s.prototype.addLayer=function(n){var t=this;if(n.ready){t._layers.push(n);if(t._layers&&t._layers.length&&t._layers.length>0){t._rectangle=t._layers[0].rectangle;for(var e=1;e<t._layers.length;e++){t._rectangle=Cesium.Rectangle.union(t._layers[e].rectangle,t._rectangle)}}this.computeBBox()}else{Cesium.when(n.readyPromise,function(){t._layers.push(n);if(t._layers&&t._layers.length&&t._layers.length>0){t._rectangle=t._layers[0].rectangle;for(var e=1;e<t._layers.length;e++){t._rectangle=Cesium.Rectangle.union(t._layers[e].rectangle,t._rectangle)}}t.computeBBox()},function(n){console.log(n)})}};s.prototype._getDefaultCanvas=function(n,t){if(!this._canvas){this._canvas=document.createElement("canvas")}this._canvas.width=n;this._canvas.height=t;this._context=this._canvas.getContext("2d");this._context.fillStyle=this._backColor instanceof Cesium.Color?this._backColor.toCssColorString():this._backColor;this._context.fillRect(0,0,n,t)};s.prototype._setStyle=function(n,t){var e=n.getContext("2d");e.lineWidth=t.lineWidth;e.strokeStyle=t.outlineColor instanceof Cesium.Color?t.outlineColor.toCssColorString():t.outlineColor;e.fillStyle=t.fillColor instanceof Cesium.Color?t.fillColor.toCssColorString():t.fillColor};var o=false;s.prototype._clipGeojson=function(t,e){var l=this;var i=[Cesium.Math.toDegrees(e.west),Cesium.Math.toDegrees(e.south),Cesium.Math.toDegrees(e.east),Cesium.Math.toDegrees(e.north)];var r=n.polygon([[[i[0],i[1]],[i[2],i[1]],[i[2],i[3]],[i[0],i[3]],[i[0],i[1]]]]);r=n.featureCollection([r]);var u=[];if(t.points){var s=n.within(t.points,r);u=u.concat(s.features)}var a=[];if(t.lines){a.push(t.lines)}if(t.outlines){a.push(t.outlines)}if(t.polygons){a.push(t.polygons)}a.forEach(function(t){n.featureEach(t,function(t,e){var l;try{l=n.bboxClip(t,i);if(l&&l.geometry.coordinates.length>0){u.push(l)}}catch(e){var r=[];t.geometry.coordinates.forEach(function(n){if(n.length>3){r.push(n)}});t.geometry.coordinates=r;l=n.bboxClip(t,i);if(l&&l.geometry.coordinates.length>0){u.push(l)}}})});u=n.featureCollection(u);return u};function h(n,t,e,l,i,r,u,s){r.map(function(r){var o=0;n.beginPath();r.map(function(r){var u=t.transform(r,a,e);if(o==0){n.moveTo(l+u.x,i+u.y)}else{n.lineTo(l+u.x,i+u.y)}o++});if(s){n.stroke()}if(u){n.fill()}})}function f(n,t,e,l,i,r,u,s,o,h){if(typeof o=="undefined"){o="NAME"}var f=Object.assign({pointSize:3,fontSize:9,fontFamily:"courier",color:"rgb(0,0,0)",backgroundColor:"rgb(255,0,0)",pointStyle:"Solid",ringRadius:2,circleLineWidth:1,showMaker:true,showLabel:true,labelOffsetX:0,labelOffsetY:0,markerSymbol:undefined},h);n.font=f.fontSize+"px "+f.fontFamily+" bold";var c=t.transform(r.geometry.coordinates,a,e);if(f.showMaker){var d=c.x+l,g=c.y+i;if(d+f.pointSize>n.canvas.width){d-=f.pointSize*2}if(d>=0&&d-f.pointSize<=0){d+=f.pointSize}if(g+f.pointSize>n.canvas.width){g-=f.pointSize*2}if(g>=0&&g-f.pointSize<=0){g+=f.pointSize}if(f.markerSymbol&&f.markerSymbol instanceof Image){if(d-f.markerSymbol.width/2<0){d+=f.markerSymbol.width/2}if(g-f.markerSymbol.width/2<0){g+=f.markerSymbol.width/2}if(d+f.markerSymbol.width/2>n.canvas.width){d-=f.markerSymbol.width/2}if(g+f.markerSymbol.width/2>n.canvas.height){g-=f.markerSymbol.width/2}n.drawImage(f.markerSymbol,d,g)}else{n.fillStyle=f.backgroundColor;n.beginPath();n.arc(d,g,f.pointSize,0,Math.PI*2);if(f.pointStyle=="Solid"){n.fill()}else if(f.pointStyle=="Circle"){n.lineWidth=f.circleLineWidth;n.strokeStyle=f.backgroundColor;n.stroke()}else if(f.pointStyle=="Ring"){n.strokeStyle=f.backgroundColor;n.stroke();n.beginPath();n.arc(d,g,f.ringRadius,0,Math.PI*2);n.closePath();n.fill()}}}if(f.showLabel){if(typeof r.properties[o]==="string"){n.fillStyle=f.color;var d=c.x+l+f.labelOffsetX+4,g=c.y+i+f.labelOffsetY+f.fontSize/2;var p=r.properties[o];if(p){p=p.trim();var v=n.measureText(p).width;if(d+v>n.canvas.width){d-=v+f.pointSize+6}if(g+f.fontSize>n.canvas.height){g-=f.labelOffsetY+f.fontSize/2}n.fillText(p,d,g)}}}n.restore()}s.prototype._drawGeojson=function(t,e,l,i,r,u,s,o){var c=this;if(typeof o.fill=="undefined"){o.fill=true}if(typeof o.stroke=="undefined"){o.stroke=true}if(!o.fill&&!o.stroke){return undefined}if(typeof u=="undefined"){u=t.canvas.width-e}if(typeof s=="undefined"){s=t.canvas.height-l}r={width:u,height:s};var d={pointSize:o.pointSize,fontSize:o.fontSize,fontFamily:o.fontFamily,color:o.fontColor.toCssColorString(),backgroundColor:o.pointColor.toCssColorString(),pointStyle:o.pointStyle,ringRadius:o.ringRadius,circleLineWidth:o.circleLineWidth,showMaker:o.showMaker,showLabel:o.showLabel,labelOffsetX:o.labelOffsetX,labelOffsetY:o.labelOffsetY,markerSymbol:o.makerImageEl};n.featureEach(i,function(i,u){if(i.geometry.type=="Point"){f(t,c,r,e,l,i,o.fill,o.stroke,this._labelPropertyName,d);t.lineWidth=c._lineWidth;t.strokeStyle=c._outlineColor.toCssColorString();t.fillStyle=c._fillColor.toCssColorString()}else if(i.geometry.type=="Polygon"&&o.fill){var s=n.getCoords(i);h(t,c,r,e,l,s,true,false)}else if(i.geometry.type=="MultiPolygon"&&o.fill){var g;try{g=n.getCoords(i);g.map(function(n){h(t,c,r,e,l,n,true,false)})}catch(n){}}else if(i.geometry.type=="MultiLineString"){var s=n.getCoords(i);h(t,c,r,e,l,s,false,true)}else if(i.geometry.type=="LineString"){var p=n.getCoords(i);var v=0;t.beginPath();p.map(function(n){var i=c.transform(n,a,r);if(v==0){t.moveTo(e+i.x,l+i.y)}else{t.lineTo(e+i.x,l+i.y)}v++});t.stroke()}})};s.prototype.render=function(n){if(!n){n=this._rectangle}this.computeBBox(n);var t=this;var e=null;var l=this._width>this._height?this._width:this._height,i=l;var r=this._width,u=this._height;if(t._resizable){var s=1,a=1;var o=this._boundingRectangle.width;var h=Math.abs(this._boundingRectangle.height);if(o<h){s=parseFloat(o)/parseFloat(h);l=parseInt(l*s)}else{a=parseFloat(h)/parseFloat(o);i=parseInt(i*a)}if(t._fitExtent){r=l;u=i}}this._getDefaultCanvas(r,u);var t=this;this._layers.forEach(function(r){var u=t._clipGeojson(r,n);if(u){t._setStyle(t._canvas,r.style);var s=t._canvas.getContext("2d");t._drawGeojson(s,0,0,u,e,l,i,r.style)}});return this._canvas};return s});define("VectorTileImageryProvider/VectorTileImageryProvider",["Util/turf","Util/Shp","Data/Geojson/LonLatProjection","Util/Path","VectorRenderer/VectorStyle"],function(turf,shp,LonLatProjection,Path,VectorStyle){if(Cesium.Resource){Cesium.loadText=Cesium.Resource.fetchText;Cesium.loadJson=Cesium.Resource.fetchJson;Cesium.loadBlob=Cesium.Resource.fetchBlob;Cesium.loadArrayBuffer=Cesium.Resource.fetchArrayBuffer;Cesium.loadImage=Cesium.Resource.fetchImage}var defaultColor=new Cesium.Color(1,1,1,.4);var defaultGlowColor=new Cesium.Color(0,1,0,.05);var defaultBackgroundColor=new Cesium.Color(0,.5,0,.2);function isShpLocalFiles(n){var t=n.length>=3;if(!t)return false;var e,l,i;for(var r=0;r<n.length;r++){var u=n[r];if(!(u instanceof File||u instanceof Blob&&u.name)){return false}if(n[r].name.toLocaleLowerCase().indexOf(".shp")>0){e=n[r]}if(n[r].name.toLocaleLowerCase().indexOf(".prj")>0){i=n[r]}if(n[r].name.toLocaleLowerCase().indexOf(".dbf")>0){l=n[r]}}if(!e||!i||!l){return false}return true}function VectorTileImageryProvider(options){options=Cesium.defaultValue(options,Cesium.defaultValue.EMPTY_OBJECT);if(!Cesium.defined(options.source)){throw new Cesium.DeveloperError("source is required")}var ext=null;var isLocalShpFile=false;if(typeof options.source=="string"){var source=options.source.toLowerCase();ext=Path.GetExtension(source);if(ext!==".shp"&&ext!==".json"&&ext!==".geojson"&&ext!==".topojson"){throw new Cesium.DeveloperError("The data  options.source provider is not supported.")}}else if(options.source.type&&options.source.type=="FeatureCollection"){}else if(isShpLocalFiles(options.source)){isLocalShpFile=true}else if(Array.isArray(options.source)){if(!(options.source[0]instanceof PolyLine)&&options.source[0]instanceof Polygon){throw new Cesium.DeveloperError("The data  options.source provider is not supported.")}}else{throw new Cesium.DeveloperError("The data  options.source provider is not supported.")}this._tilingScheme=new Cesium.GeographicTilingScheme({ellipsoid:options.ellipsoid});this._tileWidth=Cesium.defaultValue(options.tileWidth,256);this._tileHeight=Cesium.defaultValue(options.tileHeight,256);this._url=options.source;this._fileExtension=ext;this._removeDuplicate=Cesium.defaultValue(options.removeDuplicate,true);this._allowPick=Cesium.defaultValue(options.allowPick,false);this._simplifyTolerance=Cesium.defaultValue(options.simplifyTolerance,.01);this._simplify=Cesium.defaultValue(options.simplify,false);this._maximumLevel=Cesium.defaultValue(options.maximumLevel,22);this._minimumLevel=Cesium.defaultValue(options.minimumLevel,3);this._showMaximumLevel=Cesium.defaultValue(options.showMaximumLevel,true);this._makerImage=options.makerImage;this._tileCacheSize=Cesium.defaultValue(options.tileCacheSize,200);if(typeof options.defaultStyle=="object"&&!(options.defaultStyle instanceof VectorStyle)){options.defaultStyle=new VectorStyle(options.defaultStyle)}this._defaultStyle=Cesium.defaultValue(options.defaultStyle,VectorStyle.Default.clone());this._styleFilter=typeof options.styleFilter=="function"?options.styleFilter:undefined;this._errorEvent=new Cesium.Event;this._featuresPicked=new Cesium.Event;this._readyPromise=Cesium.when.defer();this._ready=false;this._state=VectorTileImageryProvider.State.READY;this._cache={};this._count=0;this.zIndex=options.zIndex;this._bbox=null;this._geoJSON=null;var that=this;var promises=[];var makerImagePromise=null;if(typeof this._makerImage=="string"){makerImagePromise=Cesium.when.defer();var image=new Image;image.onload=function(){makerImagePromise.resolve(this);that._makerImageEl=this};image.onerror=function(n){makerImagePromise.resolve(n)};image.src=this._makerImage;promises.push(makerImagePromise)}var shpPromise=Cesium.when.defer();promises.push(shpPromise);this._state=VectorTileImageryProvider.State.SHPLOADING;if(ext){switch(ext){case".shp":shp(this._url).then(onSuccess,function(n){console.log("load shp file error："+n)});break;case".json":case".geojson":case".topojson":Cesium.loadText(this._url).then(function(geojson){eval("("+geojson+")");onSuccess(geojson)}).otherwise(function(n){console.log(n)});break;default:throw new Cesium.DeveloperError("The file  options.source provider is not supported.")}}else{if(isLocalShpFile){var prms=shp.parseShpFiles(that._url);if(prms){prms.then(onSuccess).otherwise(function(n){console.log(n);throw new Cesium.DeveloperError("The file  options.source provider is not supported.")})}else{throw new Cesium.DeveloperError("The file  options.source provider is not supported.")}}else{setTimeout(function(){if(Array.isArray(that._url)){var n=that._url;if(n[0]instanceof PolyLine){var t=[];var e=[];for(var l=0;l<n.length;l++){t=[];n[l].PointList.forEach(function(n){t.push(n.getCoordArray())});e.push(t)}e=turf.multiLineString(e);e=turf.featureCollection([e]);onSuccess(e)}else if(n[0]instanceof Polygon){var i=[];for(var l=0;l<n.length;l++){var t=[];n[l].OutLine.PointList.forEach(function(n){t.push(n.getCoordArray())});var r=turf.polygon(t,n[0].getProperties());i.push(r)}i=turf.featureCollection(i);onSuccess(i)}else{throw new Cesium.DeveloperError("The data  options.source provide is not supported.")}}else{onSuccess(that._url)}},10)}}this._lineGeoJSON=null;this._outlineGeoJSON=null;this._pointGeoJSON=null;this._polygonJSON=null;this._onlyPoint=false;this._lineOnly=false;this._polygonOnly=false;function onSuccess(n){if(that._allowPick)that._geoJSON=n;var t=that._simplifyTolerance;var e=[],l=[],i=[],r=[];var u=true,s=true,a=true;var o;function h(n,t){var e={};turf.featureEach(n,function(n){if((n.geometry.type=="Polygon"||n.geometry.type=="MultiPolygon")&&that._defaultStyle.showCenterLabel&&that._defaultStyle.centerLabelPropertyName&&n.properties.hasOwnProperty(t)){if(!e[n.properties[t]]){e[n.properties[t]]=[]}e[n.properties[t]].push(n)}});var l=Object.keys(e);for(var r=0;r<l.length;r++){var u=e[l[r]][0];var s=turf.featureCollection(e[l[r]]);var a=turf.center(s);i.push(a);a.properties=u.properties;delete e[l[r]]}}if(that._defaultStyle.showCenterLabel&&that._defaultStyle.centerLabelPropertyName){that._defaultStyle.showLabel=true;that._defaultStyle.labelPropertyName=that._defaultStyle.centerLabelPropertyName;h(n,that._defaultStyle.centerLabelPropertyName)}turf.featureEach(n,function(t){if(t.geometry.type=="MultiPolygon"){var e=turf.getCoords(t);e.forEach(function(e){n.features.push(turf.polygon(e,t.properties))});e=[]}});for(var f=0;f<n.features.length;f++){if(n.features[f].geometry.type=="MultiPolygon"){n.features.splice(f,1)}}if(that._removeDuplicate){n=turf.removeDuplicate(n)}turf.featureEach(n,function(n,h){if(n.geometry.type=="Point"||n.geometry.type=="MultiPoint"){i.push(n);s=false;a=false}else if(that._defaultStyle.showCenterLabel&&that._defaultStyle.centerLabelPropertyName&&n.geometry.type!=="Polygon"&&n.geometry.type!=="MultiPolygon"){that._defaultStyle.showLabel=true;that._defaultStyle.labelPropertyName=that._defaultStyle.centerLabelPropertyName;var f=turf.centerOfMass(n);i.push(f);f.properties=n.properties}if(n.geometry.type=="Polygon"||n.geometry.type=="MultiPolygon"){l=l.concat(turf.polygonToLineString(n).features);u=false;s=false;if(that._simplify){o=turf.simplify(n,t,false);r.push(o);o=null}else{r.push(n)}}if(n.geometry.type=="MultiLineString"||n.geometry.type=="LineString"){if(that._simplify){o=turf.simplify(n,t,false);e.push(o);o=null}else{e.push(n)}u=false;a=false}});if(e.length>0){that._lineGeoJSON=turf.featureCollection(e);e=null}if(l.length>0){l.forEach(function(n){n.properties.isOutline=true});that._outlineGeoJSON=turf.featureCollection(l);l=null}if(i.length>0){that._pointGeoJSON=turf.featureCollection(i);i=null}if(r.length>0){that._polygonJSON=turf.featureCollection(r);r=null}that._lineOnly=s;that._polygonOnly=a;that._onlyPoint=u;that._state=VectorTileImageryProvider.State.LOADED;that._bbox=turf.bbox(n);that._bbox=Cesium.Rectangle.fromDegrees(that._bbox[0],that._bbox[1],that._bbox[2],that._bbox[3]);n=null;shpPromise.resolve(that)}Cesium.when.all(promises,function(){that._ready=that._state==VectorTileImageryProvider.State.LOADED;that._createCanvas();VectorTileImageryProvider.instanceCount++;that._readyPromise.resolve(true);that._state=VectorTileImageryProvider.State.COMPELTED})}VectorTileImageryProvider.instanceCount=0;VectorTileImageryProvider._currentTaskCount=0;VectorTileImageryProvider._maxTaskCount=3;VectorTileImageryProvider.State={READY:0,SHPLOADING:1,CLIPPING:3,GEOJSONDRAWING:4,COMPELTED:5};Object.defineProperties(VectorTileImageryProvider.prototype,{styleFilter:{get:function(){return this._styleFilter},set:function(n){this._styleFilter=n}},defaultStyle:{get:function(){return this._defaultStyle}},proxy:{get:function(){return undefined}},tileWidth:{get:function(){return this._tileWidth}},tileHeight:{get:function(){return this._tileHeight}},maximumLevel:{get:function(){return this._showMaximumLevel?this._maximumLevel:22}},minimumLevel:{get:function(){return 0}},tilingScheme:{get:function(){return this._tilingScheme}},rectangle:{get:function(){return this._bbox}},tileDiscardPolicy:{get:function(){return undefined}},errorEvent:{get:function(){return this._errorEvent}},featuresPicked:{get:function(){return this._featuresPicked}},ready:{get:function(){return this._ready}},readyPromise:{get:function(){return this._readyPromise}},credit:{get:function(){return undefined}},hasAlphaChannel:{get:function(){return true}}});VectorTileImageryProvider.prototype._createCanvas=function(){this._canvas=document.createElement("canvas");this._canvas.width=this._tileWidth;this._canvas.height=this._tileHeight;this._context=this._canvas.getContext("2d");if(this._defaultStyle.backgroundColor){this._context.fillStyle=this._defaultStyle.backgroundColor.toCssColorString();this._context.fillRect(0,0,this._canvas.width,this._canvas.height)}this._context.lineWidth=this._defaultStyle.lineWidth;this._context.strokeStyle=this._defaultStyle.outlineColor.toCssColorString();this._context.fillStyle=this._defaultStyle.fillColor.toCssColorString()};var isWorking=false;VectorTileImageryProvider.prototype._clipGeojson=function(n){var t=this;var e=[Cesium.Math.toDegrees(n.west),Cesium.Math.toDegrees(n.south),Cesium.Math.toDegrees(n.east),Cesium.Math.toDegrees(n.north)];var l=turf.polygon([[[e[0],e[1]],[e[2],e[1]],[e[2],e[3]],[e[0],e[3]],[e[0],e[1]]]]);var i=[[e[0],e[1]],[e[2],e[1]],[e[2],e[3]],[e[0],e[3]],[e[0],e[1]]];for(var r=0;r<i.length;r++){var u=turf.point(i[r]);i[r]=u}i=turf.featureCollection(i);var s=[];if(this._pointGeoJSON){var a=(e[2]-e[0])/2,o=(e[3]-e[1])/2;var h=turf.polygon([[[e[0]-a,e[1]-o],[e[2]+a,e[1]-o],[e[2]+a,e[3]+o],[e[0]-a,e[3]+o],[e[0]-a,e[1]-o]]]);var f=turf.featureCollection([h]);var c=turf.within(this._pointGeoJSON,f);s=s.concat(c.features)}var d=[];if(this._polygonJSON){d.push(this._polygonJSON)}if(this._lineGeoJSON){d.push(this._lineGeoJSON)}if(this._outlineGeoJSON){d.push(this._outlineGeoJSON)}var g;function p(){var n=turf.getCoords(g);var t=false;for(var e=0;e<s.length;e++){var l=Object.keys(g.properties);var i=Object.keys(s[e].properties);if(l.length!=i.length){break}var r=true;for(var u=0;u<l.length;u++){if(l[u]!=i[u]){r=false;break}}if(!r){break}r=true;for(var u=0;u<l.length;u++){if(g.properties[l[u]]!=s[e].properties[l[u]]){r=false;break}}if(!r){break}var a=turf.getCoords(s[e]);if(n.length&&n.length==a.length){var o=true;for(var h=0;h<n.length;h++){var f=n[h],c=a[h];if(!Array.isArray(f[0])){try{o=f[0]==c[0]&&f[1]==c[1]}catch(n){console.log(n)}}else if(f.length==c.length){for(var d=0;d<f.length;d++){if(f[d][0]!=c[d][0]||f[d][1]!=c[d][1]){o=false;break}}}else{o=false;break}if(o){break}}if(o){t=true;break}}}return t}d.forEach(function(n){turf.featureEach(n,function(n,t){g=null;try{if(!g){g=turf.bboxClip(n,e)}if(g&&g.geometry.coordinates.length>0){var l=true;for(var i=0;i<g.geometry.coordinates.length;i++){if(g.geometry.coordinates[i].length>0){l=false;break}}if(!l){s.push(g)}else{}}}catch(t){var r=[];n.geometry.coordinates.forEach(function(n){if(n.length>3){r.push(n)}});n.geometry.coordinates=r;g=turf.bboxClip(n,e);if(g&&g.geometry.coordinates.length>0){s.push(g)}}})});g=null;if(s.length>0){s=turf.featureCollection(s);return s}return null};function createHoles(n,t,e,l,i,r){var u=n.canvas;var s=n.getImageData(0,0,u.width,u.height);var a=document.createElement("canvas");a.width=u.width;a.height=u.height;var o=a.getContext("2d");var h=[];r.map(function(n){o.clearRect(0,0,a.width,a.height);o.beginPath();var r=0;n.map(function(n){var u=t.project(n,e);if(r==0){o.moveTo(l+u.x,i+u.y)}else{o.lineTo(l+u.x,i+u.y)}r++});o.closePath();o.fillStyle="rgba(255,255,255,1)";o.fill();h=o.getImageData(0,0,a.width,a.height).data;for(var u=3;u<h.length;u+=4){if(h[u]>0){s.data[u]=0}}});n.putImageData(s,0,0)}function drawContours(n,t,e,l,i,r,u,s,a){var o=0;var h=[];r.map(function(r){if(!u||o<=0){var a=0;n.beginPath();r.map(function(r){var u=t.project(r,e);if(a==0){n.moveTo(l+u.x,i+u.y)}else{n.lineTo(l+u.x,i+u.y)}a++});if(u){n.closePath();n.fill()}if(s){n.stroke()}}else{h.push(r)}o++});if(u){return h}else{h=null}}function drawMarker(n,t,e,l,i,r,u,s,a,o){if(typeof a=="undefined"){a="NAME"}var h=Object.assign({pointSize:3,fontSize:9,fontFamily:"courier",color:"rgb(0,0,0)",backgroundColor:"rgb(255,0,0)",pointStyle:"Solid",ringRadius:2,circleLineWidth:1,showMaker:true,showLabel:true,labelOffsetX:0,labelOffsetY:0,markerSymbol:undefined},o);n.font=h.fontSize+"px "+h.fontFamily+" bold";var f=r.geometry.coordinates;var c=(f[0]-e.xMin)/(e.xMax-e.xMin);var d=(f[1]-e.yMax)/(e.yMin-e.yMax);var g={x:c*n.canvas.width,y:d*n.canvas.height};if(h.showMaker){var p=g.x+l,v=g.y+i;if(h.markerSymbol&&h.markerSymbol instanceof Image){p-=h.markerSymbol.width/2;v-=h.markerSymbol.height/2;n.drawImage(h.markerSymbol,p,v)}else{p-=h.pointSize;v-=h.pointSize;n.fillStyle=h.backgroundColor;n.beginPath();n.arc(p,v,h.pointSize,0,Math.PI*2);if(h.pointStyle=="Solid"){n.fill()}else if(h.pointStyle=="Circle"){n.lineWidth=h.circleLineWidth;n.strokeStyle=h.backgroundColor;n.stroke()}else if(h.pointStyle=="Ring"){n.strokeStyle=h.backgroundColor;n.stroke();n.beginPath();n.arc(p,v,h.ringRadius,0,Math.PI*2);n.closePath();n.fill()}}}if(h.showLabel){if(typeof r.properties[a]==="string"){n.fillStyle=h.color;var p=g.x+l+h.labelOffsetX;v=g.y+i+h.labelOffsetY;var m=r.properties[a];if(m){m=m.trim();var y=Cesium.writeTextToCanvas(m,{fill:true,font:h.fontSize+"px "+h.fontFamily,stroke:h.labelStroke,strokeWidth:h.labelStrokeWidth,strokeColor:h.labelStrokeColor,fillColor:Cesium.Color.fromCssColorString(h.color)});var x=y.height;var w=y.width;p-=w/2+h.pointSize;v-=x/2+h.pointSize;n.drawImage(y,p,v)}}}n.restore()}VectorTileImageryProvider.prototype._drawGeojson=function(n,t,e,l,i,r,u,s,a,o,h,f){var c=this;if(typeof s=="undefined"){s=true}if(typeof a=="undefined"){a=true}if(!s&&!a){return undefined}if(typeof r=="undefined"){r=n.canvas.width-t}if(typeof u=="undefined"){u=n.canvas.height-e}var d=new LonLatProjection(r,u);var g=this._defaultStyle;var p={labelStroke:g.labelStroke,labelStrokeWidth:g.labelStrokeWidth,labelStrokeColor:g.labelStrokeColor,pointSize:g.pointSize,fontSize:g.fontSize,fontFamily:g.fontFamily,color:g.fontColor.toCssColorString(),backgroundColor:g.pointColor.toCssColorString(),pointStyle:g.pointStyle,ringRadius:g.ringRadius,circleLineWidth:g.circleLineWidth,showMaker:g.showMaker,showLabel:g.showLabel,labelOffsetX:g.labelOffsetX,labelOffsetY:g.labelOffsetY,markerSymbol:g.makerImage instanceof Image?g.makerImage:g.makerImageEl};var v=[];if(c._styleFilter){turf.featureEach(l,function(n,t){if(c._styleFilter){g=c._defaultStyle.clone();c._styleFilter(n,g,o,h,f);n.style=g}});l.features.sort(function(n,t){if(n.style&&n.style.lineDash){return 1}if(t.style&&t.style.lineDash){return-1}return 0})}function m(l,r){if(c._styleFilter){g=l.style;if(g.show==false){return}p={labelStroke:g.labelStroke,labelStrokeWidth:g.labelStrokeWidth,labelStrokeColor:g.labelStrokeColor,pointSize:g.pointSize,fontSize:g.fontSize,fontFamily:g.fontFamily,color:g.fontColor.toCssColorString(),backgroundColor:g.pointColor.toCssColorString(),pointStyle:g.pointStyle,ringRadius:g.ringRadius,circleLineWidth:g.circleLineWidth,showMaker:g.showMaker,showLabel:g.showLabel,labelOffsetX:g.labelOffsetX,labelOffsetY:g.labelOffsetY,markerSymbol:g.makerImage instanceof Image?g.makerImage:g.makerImageEl}}else{g=c._defaultStyle}n.lineWidth=g.lineWidth;n.strokeStyle=g.outlineColor.toCssColorString();n.fillStyle=g.fillColor.toCssColorString();if(g.lineDash){n.setLineDash(g.lineDash)}n.lineCap=g.lineCap;if(g.shadowColor&&g.shadowColor instanceof Cesium.Color){n.shadowColor=g.shadowColor.toCssColorString()}else{n.shadowColor=g.shadowColor}n.shadowBlur=g.shadowBlur;n.shadowOffsetX=g.shadowOffsetX;n.shadowOffsetY=g.shadowOffsetY;n.miterLimit=g.miterLimit;n.lineJoin=g.lineJoin;if(l.geometry.type=="Point"){drawMarker(n,d,i,t,e,l,s,a,g.labelPropertyName,p)}else if(l.geometry.type=="Polygon"&&g.fill){var u=turf.getCoords(l);var o=drawContours(n,d,i,t,e,u,true,false,g);if(o){o.map(function(n){n.style=g;v.push(n)})}}else if(l.geometry.type=="MultiPolygon"&&g.fill){var h;try{h=turf.getCoords(l);h.map(function(l){var r=drawContours(n,d,i,t,e,l,true,false,g);if(r){r.map(function(n){n.style=g;v.push(n)})}})}catch(n){}}else if(l.geometry.type=="MultiLineString"){if(l.properties.isOutline&&!g.outline){}else{var u=turf.getCoords(l);drawContours(n,d,i,t,e,u,false,true,g);u=null}}else if(l.geometry.type=="LineString"){if(l.properties.isOutline&&!g.outline){}else{var f=turf.getCoords(l);var u=[f];drawContours(n,d,i,t,e,u,false,true,g);f=null;u=null}}}turf.featureEach(l,function(n,t){if(n.geometry.type=="Polygon"||n.geometry.type=="MultiPolygon"){m(n,t)}});if(v&&v.length){createHoles(n,d,i,t,e,v)}turf.featureEach(l,function(n,t){if(n.geometry.type=="LineString"||n.geometry.type=="MultiLineString"){m(n,t)}});turf.featureEach(l,function(n,t){if(n.geometry.type=="Point"||n.geometry.type=="MultiPoint"){m(n,t)}})};VectorTileImageryProvider.prototype._createTileImage=function(n,t,e,l,i){var r=this;var u=n+","+t+","+e;var s={xMin:Cesium.Math.toDegrees(l.west),yMin:Cesium.Math.toDegrees(l.south),xMax:Cesium.Math.toDegrees(l.east),yMax:Cesium.Math.toDegrees(l.north)};this._state=VectorTileImageryProvider.State.CLIPPING;Cesium.requestAnimationFrame(function(){var a=r._clipGeojson(l);if(!a){if(r._onlyPoint){i.resolve(getEmpty(r._defaultStyle.backgroundColor))}else{i.resolve(undefined)}r._state=VectorTileImageryProvider.State.COMPELTED;VectorTileImageryProvider._currentTaskCount--}else{Cesium.requestAnimationFrame(function(){r._state=VectorTileImageryProvider.State.GEOJSONDRAWING;r._createCanvas();if(!r._defaultStyle.backgroundColor){r._context.clearRect(0,0,r._canvas.width,r._canvas.height)}r._drawGeojson(r._context,0,0,a,s,r._tileWidth,r._tileHeight,r._fill,r._outline,n,t,e);r.cache[u]=r._canvas;r.cache[u].srcJson=a;r.cacheCount++
;VectorTileImageryProvider._currentTaskCount--;i.resolve(r._canvas);Cesium.requestAnimationFrame(function(){r._state=VectorTileImageryProvider.State.COMPELTED})})}})};VectorTileImageryProvider.prototype._getTileImage=function(n,t,e,l){var i=Cesium.when.defer();var r=this;var u=n+","+t+","+e;if(!r.cacheCount){r.cacheCount=0}if(!r.cache||r.cacheCount>r._tileCacheSize){for(var u in r.cache){if(r.cache.hasOwnProperty(u)){r.cache[u].srcJson=null;delete r.cache[u]}}r.cache={};r.cacheCount=0}if(r.cache[u]){return r.cache[u]}if(VectorTileImageryProvider._maxTaskCount<VectorTileImageryProvider._currentTaskCount){return undefined}VectorTileImageryProvider._currentTaskCount++;r._state=VectorTileImageryProvider.State.READY;setTimeout(function(){return r._createTileImage(n,t,e,l,i)},1);return i};var emptycv;function getEmpty(n){if(!emptycv){emptycv=document.createElement("canvas");emptycv.width=256;emptycv.height=256}if(n){var t=emptycv.getContex("2d");t.fillStyle=n.toCssColorString();t.fillRect(0,0,emptycv.width,emptycv.height)}return emptycv}var scratchRectangleIntersection=new Cesium.Rectangle;VectorTileImageryProvider.prototype.requestImage=function(n,t,e,l){if(!this._ready||this._state!=VectorTileImageryProvider.State.COMPELTED){return undefined}if(e<this._minimumLevel){this._createCanvas();this._context.clearRect(0,0,this._tileWidth,this._tileHeight);return this._canvas}else if(e>this._maximumLevel){return getEmpty(this._defaultStyle.backgroundColor)}var i=this.tilingScheme.tileXYToRectangle(n,t,e);return this._getTileImage(n,t,e,i)};VectorTileImageryProvider.prototype.pickFeatures=function(n,t,e,l,i){};var scratchRect=new Cesium.Rectangle;VectorTileImageryProvider.prototype.prepareFeatureInfo=function(n,t,e,l,i,r){return undefined};VectorTileImageryProvider.prototype.pickFeatures=function(n,t,e,l,i){if(!this._allowPick||!this._geoJSON){this._featuresPicked.raiseEvent(this,undefined);return undefined}this.tilingScheme.tileXYToRectangle(n,t,e,scratchRect);var r=turf.radiansToLength(scratchRect.width/256,"kilometers");var u=turf.point([Cesium.Math.toDegrees(l),Cesium.Math.toDegrees(i)]);var s=[];var a=this.defaultStyle;var o=this;turf.featureEach(this._geoJSON,function(h){var f=h;var c=false;if(a.fill&&(h.geometry.type=="Polygon"||h.geometry.type=="MultiPolygon")){if(turf.booleanPointInPolygon(u,h)){c=true}}else{var d=turf.pointToFeatureDistance(u,h,{units:"kilometers"});if(a.outline&&(h.geometry.type=="Polygon"||h.geometry.type=="MultiPolygon")||(h.geometry.type=="LineString"||h.geometry.type=="MultiLineString")){c=d<=r*2}else if(a.showMarker&&(h.geometry.type=="Point"||h.geometry.type=="MultiPoint")){switch(a.pointStyle){case"Solid":c=d<=a.pointSize*2;break;case"Ring":case"Circle":c=d<=(a.circleLineWidth+a.ringRadius)*2;break}}}if(c){var g;if(typeof o.prepareFeatureInfo=="function"){g=o.prepareFeatureInfo(f,n,t,e,l,i)}if(!g){var g=new Cesium.ImageryLayerFeatureInfo;g.data=f;g.description=JSON.stringify(f.properties,null,2);if(a.labelPropertyName){g.name=f.properties[a.labelPropertyName]}else if(a.centerLabelPropertyName){g.name=f.properties[a.centerLabelPropertyName]}if(f.geometry.type=="Point"||f.geometry.type=="MultiPoint"){g.position=new Cesium.Cartographic(l,i)}else{var p=turf.centroid(f);var v=turf.getCoords(p);g.position=Cesium.Cartographic.fromDegrees(v[0],v[1])}}s.push(g)}});if(s.length){var h=Cesium.when.defer();var f=new Date;Cesium.when.all(s,function(n){var t=new Date-f;if(t<100){setTimeout(function(){o._featuresPicked.raiseEvent(o,n);h.resolve(n)},100)}else{o._featuresPicked.raiseEvent(o,n);h.resolve(n)}},function(n){console.error(n);o._featuresPicked.raiseEvent(o,undefined)});return h.promise}else{o._featuresPicked.raiseEvent(o,undefined)}};VectorTileImageryProvider.prototype.clearCache=function(){for(var n in this.cache){if(this.cache.hasOwnProperty(n)){delete this.cache[n]}}this.cache={}};VectorTileImageryProvider.prototype.destroy=function(){this.clearCache();for(var n in this){if(this.hasOwnProperty(n)){delete this[n]}}};return VectorTileImageryProvider});define("Main",["VectorRenderer/VectorLayer","VectorRenderer/VectorRenderer","VectorRenderer/VectorStyle","VectorTileImageryProvider/VectorTileImageryProvider","Util/turf"],function(n,t,e,l,i){if(typeof window!=="undefined"&&!window.Cesium){window.Cesium={}}else if(typeof global!=="undefined"&&!global.Cesium){global.Cesium={}}Cesium.VectorRenderer=t;Cesium.VectorTileImageryProvider=l;Cesium.VectorLayer=n;Cesium.VectorStyle=e;Cesium.turf=i;if(Cesium.ImageryLayerCollection){Cesium.ImageryLayerCollection.prototype.orderByZIndex=function(){var n=[];for(var t=0;t<this.length;t++){var e=this.get(t);if(e.imageryProvider.zIndex||e.zIndex){n.push(e);if(!e.zIndex){e.zIndex=e.imageryProvider.zIndex}else if(!e.imageryProvider.zIndex){e.imageryProvider.zIndex=e.zIndex}}}if(n&&n.length){n.sort(function(n,t){if(n.zIndex>t.zIndex){return 1}else if(n.zIndex<t.zIndex){return-1}else{return 0}})}var i=this;n.forEach(function(n){i.raiseToTop(n)});for(var t=0;t<this.length;t++){var e=this.get(t);if(!Cesium.defined(e.imageryProvider.zIndex)&&!Cesium.defined(e.zIndex)&&e.imageryProvider instanceof l){this.raiseToTop(e)}}for(var t=0;t<this.length;t++){var e=this.get(t);if(!Cesium.defined(e.imageryProvider.zIndex)&&!Cesium.defined(e.zIndex)&&e.imageryProvider instanceof l&&(e.imageryProvider._lineOnly||e.imageryProvider._onlyPoint)){this.raiseToTop(e)}}}}return Cesium});require(["Main"],function(n){"use strict";var t=typeof window!=="undefined"?window:typeof self!=="undefined"?self:{};t.Cesium=n;if(t.onLoad){t.onLoad(n)}},undefined,true)})();if(typeof define==="function"){define(function(){var n=Cesium;Cesium=undefined;return n})}else if(typeof module==="undefined"){window.Cesium=Cesium}else{module.exports=Cesium}